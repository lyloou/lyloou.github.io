<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android和JavaScript交互</title>
    <url>/android/Android%E5%92%8CJavaScript%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.jianshu.com/p/3c94ae673e2a" target="_blank" rel="noopener">Android：这是一份全面 &amp; 详细的Webview使用攻略 - 简书</a></li>
<li><a href="https://www.jianshu.com/p/345f4d8a5cfa" target="_blank" rel="noopener">最全面总结 Android WebView与 JS 的交互方式 - 简书</a></li>
<li><a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="noopener">WebViewJavascriptBridge</a></li>
<li><a href="https://github.com/wendux/WebViewJavascriptBridge" target="_blank" rel="noopener">wendux/WebViewJavascriptBridge</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//: MainActivity.java</span><br><span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;<br>    WebView.setWebContentsDebuggingEnabled(BuildConfig.TEST_ENV);<br>&#125;<br>mWvContent = (WebView) findViewById(R.id.wv_content);<br>mWvContent.setScrollbarFadingEnabled(<span class="hljs-keyword">true</span>);<br>mWvContent.addJavascriptInterface(<span class="hljs-keyword">new</span> JavaScriptInterface(mWvContent), <span class="hljs-string">"android"</span>);<br>WebSettings settings = mWvContent.getSettings();<br>settings.setJavaScriptEnabled(<span class="hljs-keyword">true</span>);<br>settings.setBuiltInZoomControls(<span class="hljs-keyword">true</span>);<br>settings.setDisplayZoomControls(<span class="hljs-keyword">false</span>);<br>settings.setDatabaseEnabled(<span class="hljs-keyword">true</span>);<br>settings.setCacheMode(WebSettings.LOAD_NO_CACHE);<br>settings.setDomStorageEnabled(<span class="hljs-keyword">true</span>);<br>settings.setAllowFileAccess(<span class="hljs-keyword">true</span>);<br>settings.setAppCacheEnabled(<span class="hljs-keyword">true</span>);<br>settings.setAppCachePath(mWvContent.getContext().getCacheDir().getAbsolutePath());<br>settings.setJavaScriptCanOpenWindowsAutomatically(<span class="hljs-keyword">true</span>);<br>settings.setBlockNetworkImage(<span class="hljs-keyword">false</span>);<br><br>mWvContent.setWebViewClient(<span class="hljs-keyword">new</span> WebViewClient() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldOverrideUrlLoading</span><span class="hljs-params">(WebView view, String url)</span> </span>&#123;<br>        view.loadUrl(url);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPageFinished</span><span class="hljs-params">(WebView view, String url)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onPageFinished(view, url);<br>    &#125;<br>&#125;);<br>mWvContent.setWebChromeClient(<span class="hljs-keyword">new</span> WebChromeClient() &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceivedTitle</span><span class="hljs-params">(WebView view, String title)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onReceivedTitle(view, title);<br>        TextView tvTitle = toolbar.findViewById(R.id.tv_top_title);<br>        tvTitle.setTextColor(Color.WHITE);<br>        tvTitle.setText(title);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onProgressChanged</span><span class="hljs-params">(WebView view, <span class="hljs-keyword">int</span> newProgress)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onProgressChanged(view, newProgress);<br>        <span class="hljs-keyword">if</span> (!isScrolled &amp;&amp; newProgress &gt; <span class="hljs-number">50</span>) &#123;<br>            <span class="hljs-keyword">int</span> lastPosition = Usp.getInstance().getInt(sKey + <span class="hljs-string">"position"</span>, <span class="hljs-number">0</span>);<br>            view.scrollTo(<span class="hljs-number">0</span>, lastPosition);<br>            isScrolled = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onConsoleMessage</span><span class="hljs-params">(ConsoleMessage consoleMessage)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> b = <span class="hljs-keyword">super</span>.onConsoleMessage(consoleMessage);<br>        System.out.println(<span class="hljs-string">"|"</span>);<br>        System.out.println(<span class="hljs-string">"============console=========="</span>);<br>        System.out.println(consoleMessage.message());<br>        System.out.println(<span class="hljs-string">"===========console==========="</span>);<br>        <span class="hljs-keyword">return</span> b;<br><br>    &#125;<br>&#125;);<br><br>mWvContent.loadUrl(mUrl);<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//: JavaScriptInterface.java</span><br><span class="hljs-comment">// https://blog.csdn.net/FDoubleman/article/details/78189332</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaScriptInterface</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Context mContext;<br>    <span class="hljs-keyword">private</span> WebView mWebView;<br><br>    JavaScriptInterface(WebView webView) &#123;<br>        mContext = webView.getContext();<br>        mWebView = webView;<br>    &#125;<br><br>    <span class="hljs-meta">@JavascriptInterface</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showToast</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> IWXAPI api = WXApiModule.getInstans().getWXApi();<br>        Toast.makeText(mContext, str, Toast.LENGTH_LONG).show();<br>        <span class="hljs-comment">//WebActivity.newInstance(mContext, "https://m3.renrenyoupin.com", "tag");</span><br>        <span class="hljs-keyword">return</span> Uresult.newInstance().status(<span class="hljs-number">0</span>).msg(String.valueOf(api.isWXAppInstalled())).toMap().toString();<br>    &#125;<br><br>    <span class="hljs-meta">@JavascriptInterface</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">executeJs</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        mWebView.post(() -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;<br>                mWebView.evaluateJavascript(str, value -&gt; &#123;<br>                    System.out.println(value);<br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mWebView.loadUrl(str);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中app响应浏览器链接</title>
    <url>/android/ApplicationContext%E4%B8%AD%E5%BC%B9%E5%87%BA%E5%AF%B9%E8%AF%9D%E6%A1%86/</url>
    <content><![CDATA[<h2 id="ApplicationContext中弹出对话框"><a href="#ApplicationContext中弹出对话框" class="headerlink" title="ApplicationContext中弹出对话框"></a>ApplicationContext中弹出对话框</h2><ol>
<li><p>添加权限</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;uses-permission android:<span class="hljs-built_in">name</span>=<span class="hljs-string">"android.permission.SYSTEM_ALERT_WINDOW"</span> /&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>显示对话框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showRestartDialog</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context context)</span> </span>&#123;<br>    AlertDialog.Builder builder = <span class="hljs-keyword">new</span> AlertDialog.Builder(context, R.style.Theme_AppCompat_Light_Dialog);<br>    builder.setMessage(<span class="hljs-string">"应用已更新完毕，是否立即重启 ?"</span>).setCancelable(<span class="hljs-keyword">false</span>)<br>        .setPositiveButton(<span class="hljs-string">"是"</span>, <span class="hljs-keyword">new</span> DialogInterface.OnClickListener() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(DialogInterface dialog, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>                Intent intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());<br>                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);<br>                context.startActivity(intent);<br>            &#125;<br>        &#125;)<br>        .setNegativeButton(<span class="hljs-string">"否"</span>, <span class="hljs-keyword">new</span> DialogInterface.OnClickListener() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(DialogInterface dialog, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>                dialog.cancel();<br>            &#125;<br>        &#125;);<br>    AlertDialog alert = builder.create();<br>    alert.setCancelable(<span class="hljs-keyword">false</span>);<br>    alert.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT); <span class="hljs-comment">// Attention it!</span><br>    alert.show();<br>&#125;<br></code></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.csdn.net/guchuanhang/article/details/44750545" target="_blank" rel="noopener">Application中弹出Dialog - CSDN博客</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>IME输入法</title>
    <url>/android/IME%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<h2 id="输入法遮盖-EditText-问题"><a href="#输入法遮盖-EditText-问题" class="headerlink" title="输入法遮盖 EditText 问题"></a>输入法遮盖 EditText 问题</h2><p>修复弹框不能被顶上去的问题： AndroidBug5497Workaround，<br>原代码在部分手机上会有底部导航栏被遮盖的问题，下面的代码可兼容华为、小米，三星等机型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> android.app.Activity;<br><span class="hljs-keyword">import</span> android.graphics.Rect;<br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.FrameLayout;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AndroidBug5497Workaround</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assistActivity</span><span class="hljs-params">(Activity activity)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> AndroidBug5497Workaround(activity);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> View mChildOfContent;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> usableHeightPrevious;<br>    <span class="hljs-keyword">private</span> FrameLayout.LayoutParams frameLayoutParams;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> contentHeight;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> isfirst = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">private</span> Activity activity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> statusBarHeight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">AndroidBug5497Workaround</span><span class="hljs-params">(Activity activity)</span> </span>&#123;<br>        <span class="hljs-comment">//获取状态栏的高度</span><br>        <span class="hljs-keyword">int</span> resourceId = activity.getResources().getIdentifier(<span class="hljs-string">"status_bar_height"</span>, <span class="hljs-string">"dimen"</span>, <span class="hljs-string">"android"</span>);<br>        statusBarHeight = activity.getResources().getDimensionPixelSize(resourceId);<br>        <span class="hljs-keyword">this</span>.activity = activity;<br>        FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content);<br>        mChildOfContent = content.getChildAt(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">//界面出现变动都会调用这个监听事件</span><br>        mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(() -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (isfirst) &#123;<br>                contentHeight = mChildOfContent.getHeight();<span class="hljs-comment">//兼容华为等机型</span><br>                isfirst = <span class="hljs-keyword">false</span>;<br>            &#125;<br>            possiblyResizeChildOfContent();<br>        &#125;);<br><br>        frameLayoutParams = (FrameLayout.LayoutParams)<br>            mChildOfContent.getLayoutParams();<br>    &#125;<br><br>    <span class="hljs-comment">//重新调整跟布局的高度</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">possiblyResizeChildOfContent</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> usableHeightNow = computeUsableHeight();<br><br>        <span class="hljs-comment">//当前可见高度和上一次可见高度不一致 布局变动</span><br>        <span class="hljs-keyword">if</span> (usableHeightNow != usableHeightPrevious) &#123;<br>            <span class="hljs-comment">//int usableHeightSansKeyboard2 = mChildOfContent.getHeight();//兼容华为等机型</span><br>            <span class="hljs-keyword">int</span> usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight();<br>            <span class="hljs-keyword">int</span> heightDifference = usableHeightSansKeyboard - usableHeightNow;<br>            <span class="hljs-keyword">if</span> (heightDifference &gt; (usableHeightSansKeyboard / <span class="hljs-number">4</span>)) &#123;<br>                <span class="hljs-comment">// keyboard probably just became visible</span><br>                <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;<br>                    <span class="hljs-comment">//frameLayoutParams.height = usableHeightSansKeyboard - heightDifference;</span><br>                    frameLayoutParams.height = usableHeightSansKeyboard - heightDifference + statusBarHeight;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    frameLayoutParams.height = usableHeightSansKeyboard - heightDifference;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                frameLayoutParams.height = contentHeight;<br>            &#125;<br><br>            mChildOfContent.requestLayout();<br>            usableHeightPrevious = usableHeightNow;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算mChildOfContent可见高度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">computeUsableHeight</span><span class="hljs-params">()</span> </span>&#123;<br>        Rect r = <span class="hljs-keyword">new</span> Rect();<br>        mChildOfContent.getWindowVisibleDisplayFrame(r);<br>        <span class="hljs-keyword">return</span> (r.bottom - r.top);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><br>setContentView(R.layout.xxx);<br>AndroidBug5497Workaround.assistActivity(<span class="hljs-keyword">this</span>);<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.csdn.net/tyk9999tyk/article/details/78457372" target="_blank" rel="noopener">android 显示内容被底部导航栏遮挡 - 菜鸟的 android 晋级之路 - CSDN 博客</a></li>
<li><a href="https://www.jianshu.com/p/a95a1b84da11" target="_blank" rel="noopener">关于 AndroidBug5497Workaround 的兼容性问题 - 简书</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>SharedPreference封装</title>
    <url>/android/SharedPreference%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><blockquote>
<p>主要内容：<br>本文介绍了封装后的SharedPreference，以便快速开发；<br>只保留必要的定制，重复的代码封装到一个通用类中；</p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>具体用法参照<code>UspDemo.java</code>文件；</li>
<li>通用源文件为<code>Usp.java</code></li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><script src="https://gist.github.com/lyloou/695fa3c371a4702bcaeeaa7fa3d3feaf.js"></script>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLite封装</title>
    <url>/android/SQLite%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><blockquote>
<p>主要内容：<br>本文介绍了封装后的SQLite，以便快速开发；<br>只保留必要的定制，重复的代码封装到一个通用类中；</p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><code>LouSQLite.java</code>文件为通用的代码，所有项目中不需要修改即可使用；</li>
<li><code>MyCallBack.java</code>文件是自定义的文件，关于项目的数据库配置都在这里进行，例如：数据库名称、数据库版本号、table语句等；</li>
<li><code>LouSQLite.java</code>支持常用的CRUD操作（支持事务）；</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><script src="https://gist.github.com/lyloou/9974be6cce20a32144c8dfb9aa296ec0.js"></script>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Adb相关</title>
    <url>/android/adb/</url>
    <content><![CDATA[<h2 id="restart-adb"><a href="#restart-adb" class="headerlink" title="restart adb"></a>restart adb</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">adb <span class="hljs-built_in">kill</span>-server &amp;&amp; adb start-server<br></code></pre></td></tr></table></figure>

<h2 id="判断当前界面的所属-activity"><a href="#判断当前界面的所属-activity" class="headerlink" title="判断当前界面的所属 activity"></a>判断当前界面的所属 activity</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">adb shell dumpsys activity <span class="hljs-comment"># 加上 -h 可以获取帮助信息</span><br>adb shell dumpsys activity top<br>adb shell dumpsys activity top | grep ACTIVITY<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://testerhome.com/topics/1462" target="_blank" rel="noopener">移动测试基础 android 中 dumpsys 命令使用</a></li>
</ul>
<p><a href="https://blog.csdn.net/qq_31028313/article/details/79679355" target="_blank" rel="noopener">https://blog.csdn.net/qq_31028313/article/details/79679355</a><br>(1)查看当前 Activity ：<br>adb shell “dumpsys window w | grep name=”<br>(2)查看当前栈顶的 Activity ：<br>adb shell “dumpsys activity | grep mFocusedActivity”<br>(3)查看当前栈顶的 Activity 的 Fragment ：<br>adb shell dumpsys activity your.package.name</p>
<h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">adb shell am start -n com.tencent.mm/.ui.LauncherUI<br></code></pre></td></tr></table></figure>

<h2 id="停止程序"><a href="#停止程序" class="headerlink" title="停止程序"></a>停止程序</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">adb shell am force-stop com.tencent.mm<br></code></pre></td></tr></table></figure>

<h2 id="wifi-连接手机"><a href="#wifi-连接手机" class="headerlink" title="wifi 连接手机"></a>wifi 连接手机</h2><p><a href="https://blog.csdn.net/u013250071/article/details/80527993" target="_blank" rel="noopener">https://blog.csdn.net/u013250071/article/details/80527993</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">1.手机打开开发者模式，然后打开USB调试<br><br>2.使用USB数据线连接手机和电脑<br><br>3.在PC端打开cmd命令窗口，输入adb devices ，可以看到已经连接的设备<br><br>4.输入adb tcpip 8888   （设置端口号为8888）<br><br>5.断开手机和电脑的连接<br><br>6.输入adb connect 10.67.161.8:8888，连接成功<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>UnsupportedOperationException at java.util.AbstractList.remove</title>
    <url>/android/UnsupportedOperationException/</url>
    <content><![CDATA[<h2 id="UnsupportedOperationException-at-java-util-AbstractList-remove-AbstractList-java-638"><a href="#UnsupportedOperationException-at-java-util-AbstractList-remove-AbstractList-java-638" class="headerlink" title="UnsupportedOperationException at java.util.AbstractList.remove(AbstractList.java:638)"></a>UnsupportedOperationException at java.util.AbstractList.remove(AbstractList.java:638)</h2><p>【问题场景】</p>
<ul>
<li>在给<code>RecyclerView.Adapter</code>传递数据源的时候，<br>我传递进去了<code>Arrays.asList</code>构成的列表，在调用<code>lists.remove()</code>方法删除某个元素的时候，出现了这个异常；</li>
</ul>
<p>【解答】</p>
<ul>
<li>我使用了<code>Arrays.asList()</code>方法，通过查看源码知道，这个方法调用了<code>Arras.ArrayList(E[])</code>来构建列表，<br>而这个列表是<code>final</code>的，不可modify的，所以会出现<code>UnsupportedOperationException</code>异常；</li>
<li>解决办法1：使用<code>new ArrayList&lt;&gt;();</code>的方式来新建列表，而不是<code>Arrays.asList</code>或数组的方式；</li>
<li>解决方法2：new ArrayList&lt;&gt;(Arrays.asList(“1”,”2”)); // 即封装下就可；</li>
</ul>
<p>【外部链接】</p>
<ul>
<li><a href="http://stackoverflow.com/questions/3200551/unable-to-modify-arrayadapter-in-listview-unsupportedoperationexception" target="_blank" rel="noopener">Unable to modify ArrayAdapter in ListView: UnsupportedOperationException</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>build.gradle配置</title>
    <url>/android/build.gradle%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="bulid-gradle-文件"><a href="#bulid-gradle-文件" class="headerlink" title="bulid.gradle 文件"></a>bulid.gradle 文件</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">  signingConfigs &#123;<br>    renrenDebug &#123;<br>        keyAlias <span class="hljs-string">'test'</span><br>        keyPassword <span class="hljs-string">'test'</span><br>        storeFile file(<span class="hljs-string">'../tool/test.key'</span>)<br>        storePassword <span class="hljs-string">'test'</span><br>    &#125;<br>  &#125;<br>  sourceSets &#123;<br>      main &#123;<br>          manifest.srcFile <span class="hljs-string">'AndroidManifest.xml'</span><br>          java.srcDirs = [<span class="hljs-string">'src'</span>]<br>          resources.srcDirs = [<span class="hljs-string">'src'</span>]<br>          aidl.srcDirs = [<span class="hljs-string">'src'</span>]<br>          renderscript.srcDirs = [<span class="hljs-string">'src'</span>]<br>          res.srcDirs = [<span class="hljs-string">'res'</span>]<br>          assets.srcDirs = [<span class="hljs-string">'assets'</span>]<br>          jniLibs.srcDirs = [<span class="hljs-string">'libs'</span>]<br>      &#125;<br>  &#125;<br><br>  lintOptions &#123;<br>      abortOnError <span class="hljs-literal">false</span>;<br>  &#125;<br>  buildTypes &#123;<br>    debug &#123;<br>        signingConfig signingConfigs.debug<br>        shrinkResources <span class="hljs-literal">false</span><br>        zipAlignEnabled <span class="hljs-literal">false</span><br>        minifyEnabled <span class="hljs-literal">false</span><br><br>        <span class="hljs-comment">// 测试</span><br>        buildConfigField <span class="hljs-string">"boolean"</span>, <span class="hljs-string">"TEST_ENV"</span>, <span class="hljs-string">"true"</span><br>        manifestPlaceholders = [<span class="hljs-string">WECHATAPPID:</span> <span class="hljs-string">"wxea2b67dxxxxxx"</span>]<br>    &#125;<br><br>    release &#123;<br>        signingConfig signingConfigs.release <span class="hljs-comment">// 密钥配置</span><br>        shrinkResources <span class="hljs-literal">true</span> <span class="hljs-comment">// 删除不必要的源文件</span><br>        zipAlignEnabled <span class="hljs-literal">true</span> <span class="hljs-comment">// 压缩对齐</span><br>        minifyEnabled <span class="hljs-literal">true</span><br>        proguardFiles getDefaultProguardFile(<span class="hljs-string">'proguard-android-optimize.txt'</span>), <span class="hljs-string">'proguard-rules.pro'</span><br><br>        <span class="hljs-comment">// 正式</span><br>        buildConfigField <span class="hljs-string">"boolean"</span>, <span class="hljs-string">"TEST_ENV"</span>, <span class="hljs-string">"false"</span><br>        manifestPlaceholders = [<span class="hljs-string">WECHATAPPID:</span> <span class="hljs-string">"wxb093774eaxxxxxx"</span>]<br><br>        applicationVariants.all &#123; variant -&gt;<br>            variant.outputs.each &#123; output -&gt;<br>                <span class="hljs-keyword">def</span> outputFile = output.outputFile<br>                <span class="hljs-keyword">if</span> (outputFile != <span class="hljs-literal">null</span> &amp;&amp; outputFile.name.endsWith(<span class="hljs-string">'.apk'</span>)) &#123;<br>                    <span class="hljs-comment">// 输出apk名称为 LOU_20161101_V0.2.0.apk</span><br>                    <span class="hljs-keyword">def</span> fileName = <span class="hljs-string">"LOU_$&#123;releaseTime()&#125;_V$&#123;defaultConfig.versionName&#125;.apk"</span><br>                    output.outputFile = <span class="hljs-keyword">new</span> File(outputFile.parent, fileName)<br>                &#125;<br><br>            &#125;<br><br>        &#125;<br>    &#125;<br>  &#125;<br><br><span class="hljs-comment">//    AndroidManifest的application标签下添加： &lt;meta-data android:name="UMENG_CHANNEL" android:value="$&#123;UMENG_CHANNEL_VALUE&#125;" /&gt;</span><br><br><span class="hljs-comment">//    productFlavors &#123;</span><br><span class="hljs-comment">//        yingyongbao &#123;&#125;</span><br><span class="hljs-comment">//        wandoujia &#123;&#125;</span><br><span class="hljs-comment">//        xiaomi &#123;&#125;</span><br><span class="hljs-comment">//        qihu360 &#123;&#125;</span><br><span class="hljs-comment">//        baidu &#123;&#125;</span><br><span class="hljs-comment">//        meizu &#123;&#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    productFlavors.all &#123;</span><br><span class="hljs-comment">//        flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br><br><span class="hljs-keyword">def</span> releaseTime() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Date().format(<span class="hljs-string">"yyyMMdd"</span>, TimeZone.getTimeZone(<span class="hljs-string">"UTC"</span>))<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="proguard-混淆配置"><a href="#proguard-混淆配置" class="headerlink" title="proguard 混淆配置"></a>proguard 混淆配置</h1><h2 id="为什么要过滤混淆"><a href="#为什么要过滤混淆" class="headerlink" title="为什么要过滤混淆"></a>为什么要过滤混淆</h2><blockquote>
<p>（<a href="http://blog.csdn.net/fengyuzhengfan/article/details/43876197）" target="_blank" rel="noopener">http://blog.csdn.net/fengyuzhengfan/article/details/43876197）</a><br>ProGuard 默认会对第三方库也进行混淆的，而第三方库有的已经混淆过了，有的使用了 Java 反射技术，所以我们在进行代码混淆的时候要排除这些第三方库。排除对第三方库的混淆需要在混淆规则文件（通常是：proguard-project.txt 或 proguard.cfg 或 proguard-rules.pro 或 proguard-rules.txt 也可以是其它的文件名只要在配置文件中将含有混淆规则的文件名配置进去就行了）中添加如下规则： 1.如果使用了 Gson 之类的工具要使 JavaBean 类即实体类不被混淆。 2.如果使用了自定义控件那么要保证它们不参与混淆。 3.如果使用了枚举要保证枚举不被混淆。 4.对第三方库中的类不进行混淆</p>
</blockquote>
<h2 id="proguard-rules-pro-文件"><a href="#proguard-rules-pro-文件" class="headerlink" title="proguard-rules.pro 文件"></a>proguard-rules.pro 文件</h2><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># If your project uses WebView with JS, uncomment the following</span><br><span class="hljs-comment"># and specify the fully qualified class name to the JavaScript interface</span><br><span class="hljs-comment"># class:</span><br>-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;<br>  public *;<br>&#125;<br><br><span class="hljs-comment"># 忽略警告</span><br>-ignorewarning<br><br><span class="hljs-comment"># 移除日志</span><br>-assumenosideeffects class android.util.Log &#123;<br>    public static *** d(...);<br>    public static *** i(...);<br>    public static *** w(...);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://as.quanke.name/代码混淆规则配置文件proguard-rulespro.html" target="_blank" rel="noopener">代码混淆规则配置文件:proguard-rules.pro</a></li>
</ul>
<h1 id="Avoid-Maven-dynamic-dependency-resolution-such-as-2-1"><a href="#Avoid-Maven-dynamic-dependency-resolution-such-as-2-1" class="headerlink" title="Avoid Maven dynamic dependency resolution. (such as 2.1.+)"></a>Avoid Maven dynamic dependency resolution. (such as <code>2.1.+</code>)</h1><p>this result in different and unstable builds or subtle, untracked difference<br>in behavior between builds.</p>
<h1 id="在配置-build-gradle-的时候，避免直接写入敏感信息（例如：密码），而是写入到版本控制工具"><a href="#在配置-build-gradle-的时候，避免直接写入敏感信息（例如：密码），而是写入到版本控制工具" class="headerlink" title="在配置 build.gradle 的时候，避免直接写入敏感信息（例如：密码），而是写入到版本控制工具"></a>在配置 <code>build.gradle</code> 的时候，避免直接写入敏感信息（例如：密码），而是写入到版本控制工具</h1><p>忽略的文件<code>gradle.properties</code>中。</p>
<blockquote>
<p><a href="https://github.com/futurice/android-best-practices#gradle-configuration" target="_blank" rel="noopener">https://github.com/futurice/android-best-practices#gradle-configuration</a></p>
</blockquote>
<h1 id="针对测试版本和发布版本使用不同的-appId-这样两个版本就可以同时存在在一个设备上了。"><a href="#针对测试版本和发布版本使用不同的-appId-这样两个版本就可以同时存在在一个设备上了。" class="headerlink" title="针对测试版本和发布版本使用不同的 appId, 这样两个版本就可以同时存在在一个设备上了。"></a>针对测试版本和发布版本使用不同的 appId, 这样两个版本就可以同时存在在一个设备上了。</h1><p>可以通过前缀或后缀的方式来区分。</p>
<blockquote>
<p><a href="https://github.com/futurice/android-best-practices#gradle-configuration" target="_blank" rel="noopener">https://github.com/futurice/android-best-practices#gradle-configuration</a></p>
</blockquote>
<h1 id="使用-Maven-依赖方案代替使用导入-jar-包方案"><a href="#使用-Maven-依赖方案代替使用导入-jar-包方案" class="headerlink" title="使用 Maven 依赖方案代替使用导入 jar 包方案"></a>使用 Maven 依赖方案代替使用导入 jar 包方案</h1><p>如果在你的项目中你明确使用率 jar 文件，那么它们可能成为永久的版本，如 2.1.1.下载 jar 包更新他们是很繁琐的， 这个问题 Maven 很好的解决了，这在 Android Gradle 构建中也是推荐的方法。你可以指定版本的一个范围，如 2.1.+,然后 Maven 会自动升级到制定的最新版本，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">dependencies &#123;<br>    compile <span class="hljs-string">'com.netflix.rxjava:rxjava-core:0.19.+'</span><br>    compile <span class="hljs-string">'com.netflix.rxjava:rxjava-android:0.19.+'</span><br>    compile <span class="hljs-string">'com.fasterxml.jackson.core:jackson-databind:2.4.+'</span><br>    compile <span class="hljs-string">'com.fasterxml.jackson.core:jackson-core:2.4.+'</span><br>    compile <span class="hljs-string">'com.fasterxml.jackson.core:jackson-annotations:2.4.+'</span><br>    compile <span class="hljs-string">'com.squareup.okhttp:okhttp:2.0.+'</span><br>    compile <span class="hljs-string">'com.squareup.okhttp:okhttp-urlconnection:2.0.+'</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.kancloud.cn/thinkphp/android-best-practices/42169" target="_blank" rel="noopener">Gradle 配置</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Context上下文</title>
    <url>/android/context/</url>
    <content><![CDATA[<h2 id="添加mContext"><a href="#添加mContext" class="headerlink" title="添加mContext"></a>添加<code>mContext</code></h2><ul>
<li><p>在Activity和Fragment中，经常需要用到上下文信息；<br>虽然通过<code>类名.this</code>的方式虽然也可以，但是<code>mContext</code>将更方便易懂，尤其是将代码拷贝来拷贝去时；</p>
</li>
<li><p>将<code>mContext</code>声明在基类中（例如：<code>BaseActivity</code>、<code>BaseFragment</code>）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Activity mContext;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>在BaseActivity的<code>onCreate</code>方法中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">mContext = <span class="hljs-keyword">this</span>;<br></code></pre></td></tr></table></figure>

<p>或者在BaseFragment中的<code>onCreate</code>中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">mContext = getActivity();<br></code></pre></td></tr></table></figure>
<p>这样所有继承自<code>BaseActivity</code>和<code>BaseFragment</code>的类，均可以直接使用<code>mContext</code>了；</p>
<ul>
<li>扩展：类似的方法，可以让所有的子类直接使用<code>TAG</code>，而不需要在自己的类中声明和初始化；<br>在<code>BaseActivity</code>中添加：<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> String TAG = getClass().getSimpleName();<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="https://possiblemobile.com/2013/06/context/" target="_blank" rel="noopener">Context, What Context?</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Fragment相关</title>
    <url>/android/fragment/</url>
    <content><![CDATA[<h2 id="Fragment中监听返回键"><a href="#Fragment中监听返回键" class="headerlink" title="Fragment中监听返回键"></a>Fragment中监听返回键</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//主界面获取焦点,用来监听返回键</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getFocus</span><span class="hljs-params">()</span> </span>&#123;<br>    View view = getView();<br>    <span class="hljs-keyword">if</span> (view == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    view.setFocusableInTouchMode(<span class="hljs-keyword">true</span>);<br>    view.requestFocus();<br>    view.setOnKeyListener(<span class="hljs-keyword">new</span> View.OnKeyListener() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onKey</span><span class="hljs-params">(View v, <span class="hljs-keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (event.getAction() == KeyEvent.ACTION_UP &amp;&amp; keyCode == KeyEvent.KEYCODE_BACK) &#123;<br>                <span class="hljs-comment">// 监听到返回按钮点击事件</span><br>                <span class="hljs-keyword">if</span> (mCbControlSelectAll.getVisibility() == View.VISIBLE) &#123;<br>                    sync(<span class="hljs-keyword">false</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><a href="http://blog.csdn.net/ys743276112/article/details/51205227" target="_blank" rel="noopener">Android必知必会-Fragment监听返回键事件</a></li>
</ul>
<h2 id="通过调用-fragment-的-isAdded-方法，来判断当前的-fragment-是否阵亡。"><a href="#通过调用-fragment-的-isAdded-方法，来判断当前的-fragment-是否阵亡。" class="headerlink" title="通过调用 fragment 的 isAdded() 方法，来判断当前的 fragment 是否阵亡。"></a>通过调用 fragment 的 <code>isAdded()</code> 方法，来判断当前的 fragment 是否阵亡。</h2><ul>
<li>具体用法参考：<code>com.example.android.architecture.blueprints.todoapp.tasks.TasksContract.isActive();</code></li>
<li><code>isAdded()</code>文档：Return true if the fragment is currently added to its activity.</li>
</ul>
<h2 id="How-to-implement-onBackPressed-in-Fragments"><a href="#How-to-implement-onBackPressed-in-Fragments" class="headerlink" title="How to implement onBackPressed() in Fragments?"></a><a href="https://stackoverflow.com/questions/5448653/how-to-implement-onbackpressed-in-fragments" target="_blank" rel="noopener">How to implement onBackPressed() in Fragments?</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OnBackPressedListener</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doBack</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// create method to set listener in CustomActivity</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOnBackPressedListener</span><span class="hljs-params">(OnBackPressedListener onBackPressedListener)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.onBackPressedListener = onBackPressedListener;<br>&#125;<br><br><span class="hljs-comment">// in override onBackPressed implement something like that</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onBackPressed</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (onBackPressedListener != <span class="hljs-keyword">null</span>)<br>        onBackPressedListener.doBack();<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">super</span>.onBackPressed();<br>&#125;<br><br><span class="hljs-comment">// in your fragment in onCreateView you should add our listener</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;<br>    activity = getActivity();<br>    ((CustomActivity)activity).setOnBackPressedListener(<span class="hljs-keyword">new</span> OnBackPressedListener()&#123;<br>        <span class="hljs-meta">@override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doBack</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-comment">// do your logic</span><br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> view;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>JetPack</title>
    <url>/android/jetPack/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://www.bilibili.com/video/av53400133/?spm_id_from=333.788.videocard.12" target="_blank" rel="noopener">Android 开发基础教程（2019）第 10 集 ViewModel_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>
</li>
<li><p><a href="https://github.com/android/sunflower" target="_blank" rel="noopener">android/sunflower: A gardening app illustrating Android development best practices with Android Jetpack.</a></p>
</li>
</ul>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650826588&amp;idx=1&amp;sn=21288ece071c7c0d1ead1d4cd8a95c67&amp;chksm=80b7b3c2b7c03ad4877d1204f27734b7b5f13990d2af774df5b96f699cc28778e43843d007b2&amp;scene=0#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650826588&amp;idx=1&amp;sn=21288ece071c7c0d1ead1d4cd8a95c67&amp;chksm=80b7b3c2b7c03ad4877d1204f27734b7b5f13990d2af774df5b96f699cc28778e43843d007b2&amp;scene=0#rd</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">1. Android Jetpack 架构组件之 Lifecycle（使用篇）<br>https://blog.csdn.net/Alexwll/article/details/80638905<br><br>2. Android Jetpack 架构组件之 Lifecycle（源码篇）<br>https://blog.csdn.net/Alexwll/article/details/82491901<br><br>3. Android Jetpack 架构组件之 ViewModel （源码篇）<br>https://blog.csdn.net/Alexwll/article/details/82459614<br><br>4. Android Jetpack 架构组件之 LiveData（使用、源码篇）<br>https://blog.csdn.net/Alexwll/article/details/82996003<br><br>5. Android Jetpack架构组件之 Paging（使用、源码篇）<br>https://blog.csdn.net/Alexwll/article/details/83246201<br><br>6. Android Jetpack 架构组件之 Room（使用、源码篇）<br>https://blog.csdn.net/Alexwll/article/details/83033460<br><br>7. Android Jetpack 架构组件之Navigation<br>https://blog.csdn.net/Alexwll/article/details/83244004<br><br>8. Android Jetpack架构组件之WorkManger<br>https://blog.csdn.net/Alexwll/article/details/83244871<br></code></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/81a284969f03" target="_blank" rel="noopener">即学即用 Android Jetpack - ViewModel &amp; LiveData - 简书</a></p>
<blockquote>
<p>LiveData is an observable data holder class. Unlike a regular observable, LiveData is lifecycle-aware, meaning it respects the lifecycle of other app components, such as activities, fragments, or services.</p>
</blockquote>
<blockquote>
<p>The ViewModel class is designed to store and manage UI-related data in a lifecycle conscious way. The ViewModel class allows data to survive configuration changes such as screen rotations.</p>
</blockquote>
<p>可以通过下面的图来看 <code>ViewModel</code> 和 <code>LiveData</code> 之间的关系<br><img src="https://upload-images.jianshu.io/upload_images/9271486-93980cb4a2458d6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/803" alt><br>还可以通过下面的代码来看 <code>ViewModel</code> 和 <code>LiveData</code> 之间的关系</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShoeModel</span> <span class="hljs-keyword">constructor</span></span>(shoeRepository: ShoeRepository) : ViewModel() &#123;<br><br>    <span class="hljs-comment">// 品牌的观察对象 默认观察所有的品牌</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> brand = MutableLiveData&lt;String&gt;().apply &#123;<br>        value = ALL<br>    &#125;<br><br>    <span class="hljs-comment">// 鞋子集合的观察类</span><br>    <span class="hljs-keyword">val</span> shoes: LiveData&lt;List&lt;Shoe&gt;&gt; = brand.switchMap &#123;<br>        <span class="hljs-comment">// Room数据库查询，只要知道返回的是LiveData&lt;List&lt;Shoe&gt;&gt;即可</span><br>        <span class="hljs-keyword">if</span> (it == ALL) &#123;<br>            shoeRepository.getAllShoes()<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            shoeRepository.getShoesByBrand(it)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setBrand</span><span class="hljs-params">(brand:<span class="hljs-type">String</span>)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.brand.value = brand<br><br>        <span class="hljs-keyword">this</span>.brand.map &#123;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">clearBrand</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.brand.value = ALL<br>    &#125;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ALL = <span class="hljs-string">"所有"</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="验证-LiveData-的在两个-fragments-上共享数据"><a href="#验证-LiveData-的在两个-fragments-上共享数据" class="headerlink" title="验证 LiveData 的在两个 fragments 上共享数据"></a>验证 LiveData 的在两个 fragments 上共享数据</h2><ul>
<li><a href="https://www.jianshu.com/p/81a284969f03" target="_blank" rel="noopener">即学即用 Android Jetpack - ViewModel &amp; LiveData - 简书</a></li>
</ul>
<p><strong>源码</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// LoginLiveData</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginLiveData</span> : <span class="hljs-type">MutableLiveData</span>&lt;<span class="hljs-type">LoginInfo</span>&gt;</span>() &#123;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> sInstance: LoginLiveData<br><br>        <span class="hljs-meta">@MainThread</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>: LoginLiveData &#123;<br>            sInstance = <span class="hljs-keyword">if</span> (::sInstance.isInitialized) sInstance <span class="hljs-keyword">else</span> LoginLiveData()<br>            <span class="hljs-keyword">return</span> sInstance<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// LoginFragment.onViewCreated</span><br>Log.e(<span class="hljs-string">"TTAG"</span>, <span class="hljs-string">"from LoginFragment, the init liveData is: <span class="hljs-subst">$&#123;LoginLiveData.get().value&#125;</span>"</span>)<br>LoginLiveData.<span class="hljs-keyword">get</span>().observe(viewLifecycleOwner, Observer &#123;<br>    Log.e(<span class="hljs-string">"TTAG"</span>, <span class="hljs-string">"from LoginFragment, the liveData changed: <span class="hljs-variable">$it</span>"</span>)<br>&#125;)<br>Handler().postDelayed(&#123;<br>    LoginLiveData.<span class="hljs-keyword">get</span>().apply &#123;<br>        value = LoginInfo(<span class="hljs-string">"login"</span>, <span class="hljs-string">"login"</span>, <span class="hljs-string">"login@qq.com"</span>)<br>    &#125;<br>&#125;, <span class="hljs-number">2000</span>)<br><br><span class="hljs-comment">// WelcomeFragment.onViewCreated</span><br>Log.e(<span class="hljs-string">"TTAG"</span>, <span class="hljs-string">"from LoginFragment, the init liveData is: <span class="hljs-subst">$&#123;LoginLiveData.get().value&#125;</span>"</span>)<br>LoginLiveData.<span class="hljs-keyword">get</span>().observe(viewLifecycleOwner, Observer &#123;<br>    Log.e(<span class="hljs-string">"TTAG"</span>, <span class="hljs-string">"from LoginFragment, the liveData changed: <span class="hljs-variable">$it</span>"</span>)<br>&#125;)<br>Handler().postDelayed(&#123;<br>    LoginLiveData.<span class="hljs-keyword">get</span>().apply &#123;<br>        value = LoginInfo(<span class="hljs-string">"login"</span>, <span class="hljs-string">"login"</span>, <span class="hljs-string">"login@qq.com"</span>)<br>    &#125;<br>&#125;, <span class="hljs-number">2000</span>)<br></code></pre></td></tr></table></figure>

<p><strong>日志</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 首次进入welcome</span><br>E/TTAG: from WelcomeFragment, the init liveData is: null<br>E/TTAG: from WelcomeFragment, the liveData changed:LoginInfo(account=welcome, pwd=welcome, email=welcome@qq.com)<br><span class="hljs-comment"># 点击进入login</span><br>E/TTAG: from LoginFragment, the init liveData is: LoginInfo(account=welcome, pwd=welcome, email=welcome@qq.com)<br>E/TTAG: from LoginFragment, the liveData changed: LoginInfo(account=welcome, pwd=welcome, email=welcome@qq.com)<br>E/TTAG: from LoginFragment, the liveData changed: LoginInfo(account=login, pwd=login, email=login@qq.com)<br></code></pre></td></tr></table></figure>

<h2 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h2><p><a href="https://www.jianshu.com/p/815c7db24b6d" target="_blank" rel="noopener">即学即用 Android Jetpack - Room - 简书</a></p>
<p><a href="https://www.jianshu.com/p/3e358eb9ac43" target="_blank" rel="noopener">Android Room 框架学习 - 简书</a></p>
<h2 id="Paging"><a href="#Paging" class="headerlink" title="Paging"></a>Paging</h2><h4 id="问题：-Jetpack-Paging-闪烁"><a href="#问题：-Jetpack-Paging-闪烁" class="headerlink" title="问题： Jetpack Paging 闪烁"></a>问题： Jetpack Paging 闪烁</h4><p>描述： 一点点的不相关的修改都会导致列表刷新，源码如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>    <span class="hljs-keyword">val</span> DIFF_CALLBACK = <span class="hljs-keyword">object</span> : DiffUtil.ItemCallback&lt;DbFlowDay&gt;() &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">areItemsTheSame</span><span class="hljs-params">(oldItem: <span class="hljs-type">DbFlowDay</span>, newItem: <span class="hljs-type">DbFlowDay</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>            <span class="hljs-keyword">return</span> oldItem === newItem<br>        &#125;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">areContentsTheSame</span><span class="hljs-params">(oldItem: <span class="hljs-type">DbFlowDay</span>, newItem: <span class="hljs-type">DbFlowDay</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>            <span class="hljs-keyword">return</span> oldItem.day == newItem.day<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>解决，如下源码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>    <span class="hljs-keyword">val</span> DIFF_CALLBACK = <span class="hljs-keyword">object</span> : DiffUtil.ItemCallback&lt;DbFlowDay&gt;() &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">areItemsTheSame</span><span class="hljs-params">(oldItem: <span class="hljs-type">DbFlowDay</span>, newItem: <span class="hljs-type">DbFlowDay</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>            <span class="hljs-keyword">return</span> oldItem.id == newItem.id <span class="hljs-comment">// ！！！ 这里，比较id，而不是对象</span><br>        &#125;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">areContentsTheSame</span><span class="hljs-params">(oldItem: <span class="hljs-type">DbFlowDay</span>, newItem: <span class="hljs-type">DbFlowDay</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>            <span class="hljs-keyword">return</span> oldItem.day == newItem.day<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="databinding-recyclerView"><a href="#databinding-recyclerView" class="headerlink" title="databinding recyclerView"></a>databinding recyclerView</h2><p><a href="https://www.jianshu.com/p/379a8f5347de" target="_blank" rel="noopener">DataBinding 在 RecyclerView 中的使用 - 简书</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中app响应浏览器链接</title>
    <url>/android/app%E5%93%8D%E5%BA%94%E6%B5%8F%E8%A7%88%E5%99%A8%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="App响应外部链接（类似：http-https-tel-mailto）"><a href="#App响应外部链接（类似：http-https-tel-mailto）" class="headerlink" title="App响应外部链接（类似：http, https, tel, mailto）"></a>App响应外部链接（类似：http, https, tel, mailto）</h2><p>主要步骤是，配置、使用、获取数据；</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">在自定义的 webview中点击<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"lyloou://..."</span>&gt;</span>链接，可以跳转到app。<br>在系统浏览器中（魅族）打开一个页面，页面中包含<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"lyloou://..."</span>&gt;</span>链接，可以跳转<br>在chrome浏览器中打开一个页面，页面中包含<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"lyloou://..."</span>&gt;</span>链接，可以跳转<br>在qq浏览器中打开一个页面，页面中包含<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"lyloou://..."</span>&gt;</span>链接，可以跳转<br><br>直接通过浏览器的地址栏输入，不可以跳转到app。<br>微信对话中点击，不可以跳转app。<br>qq对话中点击，不可以跳转app。<br><br>app没有安装的时候，点击链接都没有任何反应。<br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">".MainActivity"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.action.MAIN"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.category.LAUNCHER"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 必要的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.action.VIEW"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.category.DEFAULT"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.category.BROWSABLE"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:host</span>=<span class="hljs-string">"lou.app"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:pathPrefix</span>=<span class="hljs-string">"/openwith"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">"lyloou"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="在html中使用"><a href="#在html中使用" class="headerlink" title="在html中使用"></a>在html中使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    如果把html代码放在了 WebView中，如果设置了setWebViewClient()，</span><br><span class="hljs-comment">    其中重写的方法不要拦截，否则app无法响应； （即，重写shouldOverrideUrlLoading方法时需要小心，不设置webviewClient为妙）</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"lyloou://lou.app/openwith?name=zhangsan&amp;age=26"</span>&gt;</span>启动应用程序<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>    Intent i_getvalue = getIntent();<br>    String action = i_getvalue.getAction();<br><br>    <span class="hljs-keyword">if</span> (Intent.ACTION_VIEW.equals(action)) &#123;<br>        Uri uri = i_getvalue.getData();<br>        <span class="hljs-keyword">if</span> (uri != <span class="hljs-keyword">null</span>) &#123;<br>            String name = uri.getQueryParameter(<span class="hljs-string">"name"</span>);<br>            String age = uri.getQueryParameter(<span class="hljs-string">"age"</span>);<br>            Log.i(TAG, <span class="hljs-string">"getData: name="</span> + name);<br>            Log.i(TAG, <span class="hljs-string">"getData: age="</span> + age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul>
<li><a href="http://blog.csdn.net/geekpark/article/details/16118457" target="_blank" rel="noopener">android实现通过浏览器点击链接打开本地应用（APP）并拿到浏览器传递的数据 - 极客公园 - CSDN博客</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android启动模式</title>
    <url>/android/lanchMode/</url>
    <content><![CDATA[<h2 id="Android-Understanding-Activity-launch-mode"><a href="#Android-Understanding-Activity-launch-mode" class="headerlink" title="Android: Understanding Activity launch mode"></a><a href="https://www.mobomo.com/2011/06/android-understanding-activity-launchmode/" target="_blank" rel="noopener">Android: Understanding Activity launch mode</a></h2><blockquote>
<ul>
<li>‘standard’ and ‘singleTop’ can instantiate multiple activity instances and the instance will stay in the same task.</li>
<li>For ‘singleTask’ or ‘singleInstance’, the activity class uses the singleton pattern, and that instance will be the root activity of a new task. Let’s examine each value:</li>
</ul>
</blockquote>
<h2 id="the-weird-launch-mode"><a href="#the-weird-launch-mode" class="headerlink" title="the weird launch mode"></a>the weird launch mode</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">https://stackoverflow.com/questions/9363200/android-singletask-singletop-and-home-button<br>The behaviour of activity back stack becomes quit weird when define main activity <span class="hljs-keyword">with</span> singleTask <span class="hljs-keyword">at</span> the same <span class="hljs-built_in">time</span>:<br><br>    &lt;activity android:<span class="hljs-keyword">name</span>=<span class="hljs-string">".MainActivity"</span><br>        android:launchMode=<span class="hljs-string">"singleTask"</span>&gt;<br>        &lt;intent-filter&gt;<br>            &lt;<span class="hljs-keyword">action</span> android:<span class="hljs-keyword">name</span>=<span class="hljs-string">"android.intent.action.MAIN"</span> /&gt;<br>            &lt;<span class="hljs-keyword">category</span> android:<span class="hljs-keyword">name</span>=<span class="hljs-string">"android.intent.category.LAUNCHER"</span> /&gt;<br>        &lt;/intent-filter&gt;<br>    &lt;/activity&gt;<br>    <br>What even worse <span class="hljs-keyword">is</span> there <span class="hljs-keyword">is</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">clear</span> explanation <span class="hljs-keyword">in</span> the official dev guide regarding <span class="hljs-keyword">to</span> this special <span class="hljs-keyword">use</span> case. <span class="hljs-keyword">Some</span> sections related <span class="hljs-keyword">to</span> this topic <span class="hljs-keyword">are</span> even <span class="hljs-keyword">self</span>-contradictory.<br><br>Try <span class="hljs-keyword">using</span> launchMode=<span class="hljs-string">"standard"</span> <span class="hljs-keyword">on</span> your MainActivity A, <span class="hljs-keyword">and</span> launchMode=<span class="hljs-string">"singleTask"</span> <span class="hljs-keyword">on</span> your Activity B, which will give the expect behaviour you described.<br></code></pre></td></tr></table></figure>

<h2 id="自学笔记：Activity的启动模式-FLAG-ACTIVITY-CLEAR-TOP和FLAG-ACTIVITY-REORDER-TO-FRONT"><a href="#自学笔记：Activity的启动模式-FLAG-ACTIVITY-CLEAR-TOP和FLAG-ACTIVITY-REORDER-TO-FRONT" class="headerlink" title="自学笔记：Activity的启动模式:FLAG_ACTIVITY_CLEAR_TOP和FLAG_ACTIVITY_REORDER_TO_FRONT"></a><a href="http://blog.51cto.com/glblong/1209829" target="_blank" rel="noopener">自学笔记：Activity的启动模式:FLAG_ACTIVITY_CLEAR_TOP和FLAG_ACTIVITY_REORDER_TO_FRONT</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// A, B, C 和 D ==&gt; A, B</span><br>Intent intent = <span class="hljs-keyword">new</span> Intent(<span class="hljs-keyword">this</span>, B<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);<br>startActivity(intent);<br><br><span class="hljs-comment">// add below code , B will be reused.</span><br>intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// A，B，C和D ==&gt; A,C,D,B，</span><br>Intent intent = <span class="hljs-keyword">new</span> Intent(<span class="hljs-keyword">this</span>, MainActivity<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);<br>startActivity(intent);<br></code></pre></td></tr></table></figure>

<h2 id="深入讲解Android中Activity-launchMode-技术小黑屋"><a href="#深入讲解Android中Activity-launchMode-技术小黑屋" class="headerlink" title="深入讲解Android中Activity launchMode - 技术小黑屋"></a><a href="https://droidyue.com/blog/2015/08/16/dive-into-android-activity-launchmode/" target="_blank" rel="noopener">深入讲解Android中Activity launchMode - 技术小黑屋</a></h2>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Jni实现步骤</title>
    <url>/android/jni%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>配置ndk路径<br><code>ctrl+shift+alt+s</code>,ndk location</p>
</li>
<li><p>配置app下 build.gradle  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 指定生成lib so文件的名称</span><br>defaultConfig&#123;<br>    ndk&#123;<br>        moduleName <span class="hljs-string">"MyJniLib"</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 指定jni路径</span><br>sourceSets&#123;<br>    main&#123;<br>        jni.srcDirs = [<span class="hljs-string">'src/main/jni'</span>,<span class="hljs-string">'src/main/jni/'</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>修改gradle.properties文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">android.userDeprecatedNdk=<span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>设置native接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyloou.secretjni;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ujni</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">"MyJniLib"</span>);<span class="hljs-comment">//之前在build.gradle里面设置的so名字，必须一致</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> String <span class="hljs-title">getSec</span><span class="hljs-params">(<span class="hljs-keyword">int</span> type, <span class="hljs-keyword">int</span> hashcode)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>build项目，生成Ujni.class文件</p>
</li>
<li><p>通过Ujni.class文件生成头文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">javah -d jni -classpath MyProject/app/build/intermediates/classes/debug/com.lyloou.secretjni.Ujni<br></code></pre></td></tr></table></figure>
</li>
<li><p>编写c文件<br>将上一步骤生成的头文件，放在main/jni文件夹下<br>另外新建一个cpp文件实现业务逻辑。</p>
</li>
<li><p>获取so文件<br>编译运行后，在build/intermediates/ndk/debug/lib文件夹下得到一系列包含so文件的文件夹。</p>
</li>
<li><p>只需要保留so文件即可运行项目，jni文件备份起来吧。</p>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.csdn.net/feipeng_/article/details/73554777" target="_blank" rel="noopener">Android Studio jni开发之经典入门demo - FeiPeng_的博客 - CSDN博客</a></p>
</li>
<li><p><a href="http://wxmylife.com/2017/03/22/Android%E9%80%9A%E8%BF%87JNI%E5%8A%A0%E5%AF%86%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0APP%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81/" target="_blank" rel="noopener">Android通过JNI加密，并实现APP签名验证 | wxmylife</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/2a27ad45e023" target="_blank" rel="noopener">Android 密钥保护 - 简书</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/35136485" target="_blank" rel="noopener">android开发如何保障本地加密密钥的安全？ - 知乎</a></p>
</li>
<li><p><a href="https://blog.csdn.net/yy1300326388/article/details/46291417" target="_blank" rel="noopener">Android NDK 运行错误：java.lang.UnsatisfiedLinkError: Couldn’t load XXX indLibrary returned null</a></p>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">//目录结构一定要改成这个样子</span><br>|---src<br>     |---main<br>           |---jniLibs<br>                  |---arm64-v8a<br>                         |---libhello-jni.so<br>                  |---armeabi<br>                         |---libhello-jni.so<br>                  |---armeabi-v7a<br>                         |---libhello-jni.so<br>                  |---x86<br>                         |---libhello-jni.so<br>                  |---x86_64<br>                         |---libhello-jni.so<br>                  |---mips<br>                         |---libhello-jni.so<br>                  |---mips64<br>                         |---libhello-jni.so<br></code></pre></td></tr></table></figure>
<h3 id="方法2［推荐］"><a href="#方法2［推荐］" class="headerlink" title="方法2［推荐］"></a>方法2［推荐］</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">  android &#123;<br>    sourceSets &#123;<br>        main &#123;<br>            jniLibs.srcDirs = [<span class="hljs-string">'libs'</span>]<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle</title>
    <url>/android/gradle/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://medium.com/@prathanbomb/tips-auto-increment-versioncode-of-android-using-gradle-dba0425af97c" target="_blank" rel="noopener">[Tips] Auto-increment versionCode using Gradle – Supitsara Prathan – Medium</a></p>
</li>
<li><p><a href="http://www.infoq.com/cn/articles/android-in-depth-gradle" target="_blank" rel="noopener">深入理解 Android（一）：Gradle 详解</a></p>
</li>
<li><p><a href="https://zllbird.github.io/2016/01/14/android%E4%BD%BF%E7%94%A8gradle%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">【Android】使用 Gradle 进行配置 · 诸隆隆</a></p>
</li>
<li><p><a href="http://www.groovy-lang.org/api.html" target="_blank" rel="noopener">The Apache Groovy programming language - Groovy Development Kit</a></p>
</li>
<li><p><a href="https://docs.gradle.org/current/dsl/" target="_blank" rel="noopener">Gradle DSL Version 4.8</a></p>
</li>
<li><p><a href="https://developer.android.com/studio/build/" target="_blank" rel="noopener">配置构建  |  Android Developers</a></p>
</li>
<li><p><a href="https://developer.android.com/studio/build/building-cmdline" target="_blank" rel="noopener">从命令行构建您的应用  |  Android Developers</a></p>
</li>
</ul>
<h2 id="Plugin-version-VS-Required-Gradle-version"><a href="#Plugin-version-VS-Required-Gradle-version" class="headerlink" title="(Plugin version) VS (Required Gradle version)"></a>(Plugin version) VS (Required Gradle version)</h2><p><a href="https://developer.android.com/studio/releases/gradle-plugin" target="_blank" rel="noopener">Android Gradle plugin release notes | Android Developers</a></p>
<h2 id="了解在构建生命周期的各个阶段所花费的时间"><a href="#了解在构建生命周期的各个阶段所花费的时间" class="headerlink" title="了解在构建生命周期的各个阶段所花费的时间"></a>了解在构建生命周期的各个阶段所花费的时间</h2><p>通过 <code>--profile</code> 来生成报告</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">./gradlew assembleDebug --profile<br></code></pre></td></tr></table></figure>

<h2 id="android-studio-error-mixing-versions-can-lead-to-run-time-crashes"><a href="#android-studio-error-mixing-versions-can-lead-to-run-time-crashes" class="headerlink" title="android studio error- mixing versions can lead to run-time crashes"></a><a href="https://stackoverflow.com/questions/42960731/android-studio-error-mixing-versions-can-lead-to-run-time-crashes" target="_blank" rel="noopener">android studio error- mixing versions can lead to run-time crashes</a></h2><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// Add these lines of code in your build.gradle (Module:app) file at end:</span><br>configurations.all &#123;<br>    resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;<br>        <span class="hljs-keyword">def</span> requested = details.requested<br>        <span class="hljs-keyword">if</span> (requested.group == <span class="hljs-string">'com.android.support'</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!requested.name.startsWith(<span class="hljs-string">"multidex"</span>)) &#123;<br>                details.useVersion <span class="hljs-string">'27.1.1'</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><p>java -DsocksProxyHost=10.1.1.2 -DsocksProxyPort=8877 -Djava.net.socks.username=alibaba -Djava.net.socks.password=secret</p>
<p><a href="https://blog.csdn.net/qq_29033193/article/details/84985536" target="_blank" rel="noopener">AndroidStudio 彻底关闭 http 网络代理方法 - Mr.Liu - CSDN 博客</a></p>
<p><a href="https://blog.csdn.net/WittyCollegeStudent/article/details/78954200" target="_blank" rel="noopener">AndroidStudio 中 Gradle 的 Socks 代理设置 - WittyCollegeStudent 的博客 - CSDN 博客</a></p>
<p><a href="https://blog.boileryao.com/2019/01/config-android-studio-proxy/" target="_blank" rel="noopener">Android Studio 代理配置指南 · 奔跑的锅炉</a></p>
<h2 id="Android-Gradle-下载的依赖包位置"><a href="#Android-Gradle-下载的依赖包位置" class="headerlink" title="Android Gradle 下载的依赖包位置"></a>Android Gradle 下载的依赖包位置</h2><p><a href="https://www.jianshu.com/p/e8db626d768f" target="_blank" rel="noopener">Android Gradle 下载的依赖包位置 - 简书</a></p>
<p>Mac 系统默认下载到：/Users/(用户名)/.gradle/caches/modules-2/files-2.1</p>
<p>Windows 系统默认下载到：C:\Users(用户名).gradle\caches\modules-2\files-2.1</p>
<p>举个例子：<br>错误如下： Download Failed ：<a href="https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.2.31/kotlin-compiler-embeddable-1.2.31.jar" target="_blank" rel="noopener">https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.2.31/kotlin-compiler-embeddable-1.2.31.jar</a><br>文件夹生成的规律是根据依赖中的组织名称，classpath”org.jetbrains.kotlin:kotlin-gradle-plugin<br>地址路径则查找位置是：<br>C:\Users\Administrator.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-compiler-embeddable\1.2.71\b394ac31590bff78aea6619b8dc0e2c0958aa599</p>
<h1 id="还有一种方式：使用-everything-软件来搜索关键字，找到对应目录；"><a href="#还有一种方式：使用-everything-软件来搜索关键字，找到对应目录；" class="headerlink" title="还有一种方式：使用 everything 软件来搜索关键字，找到对应目录；"></a>还有一种方式：使用 <code>everything</code> 软件来搜索关键字，找到对应目录；</h1><h2 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h2><p><img src="https://github.com/lyloou/img/raw/develop/z/20190829145438.png" alt></p>
<ul>
<li><a href="https://stackoverflow.com/questions/31538924/android-build-gradle-importing-flavors-from-another-file" target="_blank" rel="noopener">Android build.gradle importing flavors from another file - Stack Overflow</a><br>The build flavors could be defined in a separate file (<code>build_flavors.gradle</code>) like this:</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">android &#123;<br>    productFlavors &#123;<br>        flavorA &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>        flavorB &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>and then imported into <code>build.gradle</code>:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-string">plugin:</span> <span class="hljs-string">'com.android.application'</span><br>apply <span class="hljs-string">from:</span> <span class="hljs-string">'./build_flavors.gradle'</span><br><br>android &#123;<br>    <span class="hljs-comment">// the rest of your android configuration</span><br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/49815655/include-library-with-flavor-android" target="_blank" rel="noopener">gradle - Include library with flavor android - Stack Overflow</a></li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">android &#123;<br>    ...<br>    <span class="hljs-comment">//flavorDimensions is mandatory with flavors. Use the same name on your 2 files to avoid other conflicts.</span><br>    flavorDimensions <span class="hljs-string">"dim"</span><br>    productFlavors &#123;<br>        nocustomer&#123;<br>            dimension <span class="hljs-string">"dim"</span><br><br>            <span class="hljs-comment">// App and library's flavor have the same name.</span><br>            <span class="hljs-comment">// MatchingFallbacks can be omitted</span><br>            matchingFallbacks = [<span class="hljs-string">"nocustomer"</span>]<br>        &#125;<br>        customerNb&#123;<br>            dimension <span class="hljs-string">"dim"</span><br><br>            <span class="hljs-comment">// Here the app and library's flavor are different</span><br>            <span class="hljs-comment">// Matching fallbacks will select the library's flavor 'customer001'</span><br>            matchingFallbacks = [<span class="hljs-string">"customer001"</span>]<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br>dependencies &#123;<br>    implementation project(<span class="hljs-string">':zblelib'</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>《Gradle 权威指南》 dimension</li>
</ul>
<p>多个 dimension 的前后关系是有优先级顺序的，越靠前的优先级越高：<br><img src="https://github.com/lyloou/img/raw/develop/z/20190830135419.png" alt><br><img src="https://github.com/lyloou/img/raw/develop/z/20190830135528.png" alt></p>
<h2 id="查找冲突的版本号技巧"><a href="#查找冲突的版本号技巧" class="headerlink" title="查找冲突的版本号技巧"></a>查找冲突的版本号技巧</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">./gradlew lib1:dependencies | grep -C 3 com.android.support:appcompat-v7:27.1.1<br>./gradlew app:dependencies | grep -C 3 com.android.support:appcompat-v7:27.1.1<br></code></pre></td></tr></table></figure>

<p>通过上面的方式，可以看到哪个依赖使用了不同的版本号，接着就可以排除方法：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">implementation (<span class="hljs-string">"org.kie.modules:com-google-code-gson:6.5.0.Final"</span>)&#123;<br>    exclude <span class="hljs-string">group:</span> <span class="hljs-string">'com.google.code.gson'</span>, <span class="hljs-string">module:</span> <span class="hljs-string">'gson'</span><br>&#125;<br><span class="hljs-comment">// 使用自己版本的,其中在 gradle.properties中声明 GSON_VERSION=2.8.5</span><br>implementation <span class="hljs-string">"com.google.code.gson:gson:$GSON_VERSION"</span><br></code></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>75ce2b45ad080aeaf919f35ffb1afa47ad0b6cac</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>【Android】logcat</title>
    <url>/android/logcat/</url>
    <content><![CDATA[<h2 id="android-调试时，logcat-错误信息一闪而过"><a href="#android-调试时，logcat-错误信息一闪而过" class="headerlink" title="android 调试时，logcat 错误信息一闪而过"></a>android 调试时，logcat 错误信息一闪而过</h2><ul>
<li><p><a href="https://blog.csdn.net/liaoyi_/article/details/53377425" target="_blank" rel="noopener">Android 手机调试不输出错误日志与错误日志一闪而过的问题 - liaoyi 的博客 - CSDN 博客</a></p>
<blockquote>
<p>原来是华为手机（有可能其他手机也有类似的问题）关闭了输出错误日志的功能。现在我们就需要打开这个功能</p>
<ol>
<li>进入拨号界面输入：<em>#</em>#2846579#*# （当你输入完了之后会自动打开 手机的另外一个设置的板块界面）</li>
<li>依次选择 —&gt; 后台设置 —&gt; LOG 设置 —&gt; LOG 开关 点击打开（手机版本不同界面选项也不同，有的选择 AP 日志勾选，但是大致内容都一样）</li>
<li>重新启动手机（比较新的版本不需要重启）</li>
</ol>
</blockquote>
<blockquote>
<p>同时你可能会遇到错误日志一闪而过的问题，这个可能是华为手机在手机程序崩溃之后系统调用了一些程序，做了一些操作吧，我们没办法去禁止系统做这些操作但是我们可以在</p>
<p>点击设置 —&gt; 进入手机开发者选项 —&gt; 打开手机 USB 调试功能 —&gt; （在此功能模块里面）选择日志记录器缓冲区大小<br>选择一个大一点的缓冲区（具体自己看手机情况选择）</p>
</blockquote>
</li>
<li><p><a href="https://blog.csdn.net/z736232402/article/details/51576963" target="_blank" rel="noopener">android studio logcat 一闪而过 - z736232402 的博客 - CSDN 博客</a></p>
<blockquote>
<p>as 默认选择当前进程，简单点说就是当前进程，我的理解是，如果崩溃了，进程就结束了，所以，就闪过了<br>解决也很简单，第一种就是出现的时候点击下鼠标，logcat 就会停留。第二种就是不要用选择当前的，选择 no filter，如果东西太多，就加过滤，加上包名即可。</p>
</blockquote>
</li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Glide库</title>
    <url>/android/lib-glide/</url>
    <content><![CDATA[<h2 id="根据图片的文件路径，显示给ImageView"><a href="#根据图片的文件路径，显示给ImageView" class="headerlink" title="根据图片的文件路径，显示给ImageView"></a>根据图片的文件路径，显示给ImageView</h2><p>原理：借助 Glide 库来实现；<br>    <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String pathname = <span class="hljs-string">"/storage/emulated/0/lyloou/image/hello_world.png"</span>;<br>File file = <span class="hljs-keyword">new</span> File(pathname);<br>Glide.with(mContext).load(file).asBitmap().into(mIvHi);<br></code></pre></td></tr></table></figure></p>
<h2 id="通过图像-URL-设置圆角图像："><a href="#通过图像-URL-设置圆角图像：" class="headerlink" title="通过图像 URL 设置圆角图像："></a>通过图像 URL 设置圆角图像：</h2><pre><code><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCircleIcon</span><span class="hljs-params">(ImageView view)</span> </span>&#123;<br>    String url = <span class="hljs-string">"https://img.gcall.com/dca5/M00/10/8E/wKhoNlggetaENWylAAAAAAAAAAA457.jpg"</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> w = Uscreen.dp2Px(mContext, <span class="hljs-number">48</span>);<br>    Glide.with(mContext)<br>            .load(url)<br>            .centerCrop()<br>            .fitCenter()<br>            .thumbnail(<span class="hljs-number">0.1f</span>)<br>            .placeholder(R.mipmap.ic_launcher)<br>            .crossFade()<br>            .override(w, w)<br>            .transform(<span class="hljs-keyword">new</span> BitmapTransformation(mContext) &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">protected</span> Bitmap <span class="hljs-title">transform</span><span class="hljs-params">(BitmapPool pool, Bitmap toTransform, <span class="hljs-keyword">int</span> outWidth, <span class="hljs-keyword">int</span> outHeight)</span> </span>&#123;<br>                    <span class="hljs-keyword">return</span> Uview.getBitmapByXfermode(mContext, toTransform,<br>                            Color.parseColor(<span class="hljs-string">"#dddddd"</span>),<br>                            w,<br>                            w, PorterDuff.Mode.SRC_IN);<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-keyword">return</span> getClass().getName();<br>                &#125;<br>            &#125;)<br>            .into(view);<br>&#125;<br></code></pre></td></tr></table></figure></code></pre>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Manifest相关</title>
    <url>/android/manifest/</url>
    <content><![CDATA[<h1 id="Manifest-中注册以内部类形式存在的-Activity"><a href="#Manifest-中注册以内部类形式存在的-Activity" class="headerlink" title="Manifest 中注册以内部类形式存在的 Activity"></a>Manifest 中注册以内部类形式存在的 Activity</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>在《Android 编程权威指南》P127 中，作者建议我们坚持 AUF(Always Use Fragments)原则，即“总是使用 fragment”；<br>另外作者封装了一个很好用的<code>SingleFragmentActivity</code>类，但是这个类通常只有一句话，。<br>个人觉得，为每一个 Activity 都建立一个文件有点浪费。<br>可是使用 Activity（四大组件之一），必须在 Manifest 中注册。<br>那么能不能将所有这类 Activity 放在一个类中进行管理呢？<br>通过搜索关键字：<code>android manifest innerclass</code> 找到了方法；</li>
</ul>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><blockquote>
<ol>
<li>As someone pointed out, in AndroidManifest, use the $ sign, like:<br><code>&lt;activity android:name=&quot;.A$B&quot;&gt;</code></li>
<li>Declare class B as static:<br><code>public static class B</code></li>
</ol>
</blockquote>
<h2 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h2><p><strong>【Activity 管理类】</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//: .../activity/ActivityMgr.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActivityMgr</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">(Activity context, Class clazz)</span></span>&#123;<br>        Intent intent = <span class="hljs-keyword">new</span> Intent(context, clazz);<br>        context.startActivity(intent);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SingleFragmentActivity</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Fragment <span class="hljs-title">createFragment</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LoginFragment();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForgetPasswordActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SingleFragmentActivity</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Fragment <span class="hljs-title">createFragment</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ForgetPasswordFragment();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SingleFragmentActivity</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Fragment <span class="hljs-title">createFragment</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RegisterFragment();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddDeviceActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SingleFragmentActivity</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Fragment <span class="hljs-title">createFragment</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AddDeviceFragment();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>【Activity 注册】</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">".activity.ActivityMgr$LoginActivity"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:clearTaskOnLaunch</span>=<span class="hljs-string">"true"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:launchMode</span>=<span class="hljs-string">"singleTask"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">"portrait"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:theme</span>=<span class="hljs-string">"@style/AppTheme.NoActionBar"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.action.MAIN"</span>/&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.category.LAUNCHER"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">".activity.ActivityMgr$RegisterActivity"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">"portrait"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:theme</span>=<span class="hljs-string">"@style/AppTheme.NoActionBar"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">".activity.ActivityMgr$ForgetPasswordActivity"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">"portrait"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:theme</span>=<span class="hljs-string">"@style/AppTheme.NoActionBar"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">".activity.ActivityMgr$AddDeviceActivity"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">"portrait"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:theme</span>=<span class="hljs-string">"@style/AppTheme.NoActionBar"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>【启动对应 Activity】</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启动忘记密码Activity</span><br>ActivityMgr.start(mContext, ActivityMgr.ForgetPasswordActivity<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br><span class="hljs-comment">// 启动注册Activity</span><br>ActivityMgr.start(mContext, ActivityMgr.RegisterActivity<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br></code></pre></td></tr></table></figure>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul>
<li>同样的方式也可以用于 Receiver 的注册；</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://stackoverflow.com/questions/3687661/declare-inner-activity-in-the-android-manifest" target="_blank" rel="noopener">Declare Inner Activity In The Android Manifest</a></li>
<li><a href="http://stackoverflow.com/questions/3608955/receiver-as-inner-class-in-android" target="_blank" rel="noopener">Receiver as inner class in Android</a></li>
</ul>
<h1 id="Android-Material-and-appcompat-Manifest-merger-failed-Stack-Overflow"><a href="#Android-Material-and-appcompat-Manifest-merger-failed-Stack-Overflow" class="headerlink" title="Android Material and appcompat Manifest merger failed - Stack Overflow"></a><a href="https://stackoverflow.com/questions/51793345/android-material-and-appcompat-manifest-merger-failed/53202089" target="_blank" rel="noopener">Android Material and appcompat Manifest merger failed - Stack Overflow</a></h1><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- In my case, this is working perfectly.. I have added below two line codes inside manifest file --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:replace</span>=<span class="hljs-string">"android:appComponentFactory"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:appComponentFactory</span>=<span class="hljs-string">"whateverString"</span>&gt;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中常见问题及解答</title>
    <url>/android/qa/</url>
    <content><![CDATA[<h2 id="assets文件夹和raw文件夹的区别"><a href="#assets文件夹和raw文件夹的区别" class="headerlink" title="assets文件夹和raw文件夹的区别"></a>assets文件夹和raw文件夹的区别</h2><p>【解答】</p>
<ul>
<li>相同点：以原有形式保存到apk中，均不会被编译成二进制文件；</li>
<li>raw里的文件会被映射到R.id中，assets不会；</li>
<li>assets文件夹里面可以包含目录结构，raw不可；</li>
<li>引用方式不同：参考下面的外部链接；</li>
</ul>
<p>【外部链接】</p>
<ul>
<li><a href="Android中asset文件夹和raw文件夹区别">Android中asset文件夹和raw文件夹区别</a></li>
</ul>
<h2 id="invalidate和postInvalidate的区别"><a href="#invalidate和postInvalidate的区别" class="headerlink" title="invalidate和postInvalidate的区别"></a>invalidate和postInvalidate的区别</h2><p>【解答】</p>
<ul>
<li>invalidate必须在主线程中调用，变量发生改变时用来刷新界面；</li>
<li>postInvalidate可以在非主线程中调，用来刷新界面；</li>
<li>通过查看源码发现：postInvalidate是通过Handler间接调用了invalidate;</li>
</ul>
<p>【外部链接】</p>
<ul>
<li><a href="http://blog.csdn.net/mars2639/article/details/6650876" target="_blank" rel="noopener">Android笔记：invalidate()和postInvalidate() 的区别及使用</a></li>
</ul>
<h2 id="java-lang-RuntimeException-Performing-stop-of-activity-that-is-not-resumed"><a href="#java-lang-RuntimeException-Performing-stop-of-activity-that-is-not-resumed" class="headerlink" title="java.lang.RuntimeException: Performing stop of activity that is not resumed"></a>java.lang.RuntimeException: Performing stop of activity that is not resumed</h2><ul>
<li><a href="http://www.aichengxu.com/java/6992563.htm" target="_blank" rel="noopener">http://www.aichengxu.com/java/6992563.htm</a></li>
<li><a href="https://stackoverflow.com/questions/21947675/android-4-4-2-java-lang-runtimeexception-performing-stop-of-activity-that-is/23246159#23246159" target="_blank" rel="noopener">https://stackoverflow.com/questions/21947675/android-4-4-2-java-lang-runtimeexception-performing-stop-of-activity-that-is/23246159#23246159</a><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方案1：</span><br>Handler handler = <span class="hljs-keyword">new</span> Handler(<span class="hljs-keyword">new</span> Handler.Callback() &#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;<br>       <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>           <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>             <span class="hljs-comment">//Start another Activity Here</span><br>           <span class="hljs-keyword">default</span>:<br>           <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;);<br>handler.sendEmptyMessageDelayed(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>);<br><br><span class="hljs-comment">// 方案2：</span><br><span class="hljs-keyword">new</span> Handler().postDelay(()-&gt;&#123;doSomething()&#125;, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Retrofit</title>
    <url>/android/retrofit/</url>
    <content><![CDATA[<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">ext &#123;<br>    rxjavaVersion = <span class="hljs-string">'2.1.1'</span><br>    rxandroidVersion = <span class="hljs-string">'2.0.1'</span><br>    retrofitVersion = <span class="hljs-string">'2.3.0'</span><br>&#125;<br>implementation <span class="hljs-string">"io.reactivex.rxjava2:rxandroid:$rxandroidVersion"</span><br>implementation <span class="hljs-string">"io.reactivex.rxjava2:rxjava:$rxjavaVersion"</span><br>implementation <span class="hljs-string">"com.squareup.retrofit2:retrofit:$retrofitVersion"</span><br>implementation <span class="hljs-string">"com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"</span><br>implementation <span class="hljs-string">"com.squareup.retrofit2:converter-gson:$retrofitVersion"</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetWork</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">get</span><span class="hljs-params">(@NonNull String baseUrl, @NonNull Class&lt;T&gt; clazz)</span> </span>&#123;<br>        String key = clazz.getSimpleName().concat(baseUrl);<br>        <span class="hljs-keyword">if</span> (map.containsKey(key)) &#123;<br>            <span class="hljs-comment">//noinspection unchecked</span><br>            <span class="hljs-keyword">return</span> (T) map.get(key);<br>        &#125;<br>        Retrofit retrofit = <span class="hljs-keyword">new</span> Retrofit.Builder()<br>                .baseUrl(baseUrl)<br>                .addConverterFactory(GsonConverterFactory.create())<br>                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())<br>                .build();<br>        T t = retrofit.create(clazz);<br>        map.put(key, t);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetWorkTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIp</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;String&gt; ips = Arrays.asList(<br>                <span class="hljs-string">"104.194.84.57"</span><br>                , <span class="hljs-string">"14.194.84.55"</span><br>                , <span class="hljs-string">"13.194.84.55"</span><br>        );<br>        CountDownLatch latch = <span class="hljs-keyword">new</span> CountDownLatch(ips.size());<br>        CompositeDisposable compositeDisposable = <span class="hljs-keyword">new</span> CompositeDisposable();<br><br>        compositeDisposable.addAll(ips.stream()<br>                .map(s -&gt; getDisposable(latch, s))<br>                .toArray(Disposable[]::<span class="hljs-keyword">new</span>));<br>        <span class="hljs-keyword">try</span> &#123;<br>            latch.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Disposable <span class="hljs-title">getDisposable</span><span class="hljs-params">(CountDownLatch latch, String ip)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> NetWork.get(<span class="hljs-string">"http://ip-api.com/"</span>, IpService<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><br><span class="hljs-class">                .<span class="hljs-title">getIpDetail</span>(<span class="hljs-title">ip</span>)</span><br><span class="hljs-class">                .<span class="hljs-title">subscribeOn</span>(<span class="hljs-title">Schedulers</span>.<span class="hljs-title">io</span>())</span><br><span class="hljs-class">                .<span class="hljs-title">observeOn</span>(<span class="hljs-title">Schedulers</span>.<span class="hljs-title">computation</span>())</span><br><span class="hljs-class">                .<span class="hljs-title">subscribe</span>(<span class="hljs-title">ipDetail</span> -&gt; </span>&#123;<br>                    latch.countDown();<br>                    System.out.println(<span class="hljs-string">"city:"</span> + ipDetail.getCity());<br>                &#125;, throwable -&gt; &#123;<br>                    latch.countDown();<br>                    System.out.println(<span class="hljs-string">"error:"</span> + throwable);<br>                &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IpService</span> </span>&#123;<br>     <span class="hljs-meta">@GET</span>(<span class="hljs-string">"json/&#123;ip&#125;"</span>)<br>    <span class="hljs-function">Observable&lt;IpDetail&gt; <span class="hljs-title">getIpDetail</span><span class="hljs-params">(@Path(<span class="hljs-string">"ip"</span>)</span> String ip)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IpDetail</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String as;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String country;<br>    <span class="hljs-keyword">private</span> String countryCode;<br>    <span class="hljs-keyword">private</span> String isp;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> lat;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> lon;<br>    <span class="hljs-keyword">private</span> String org;<br>    <span class="hljs-keyword">private</span> String query;<br>    <span class="hljs-keyword">private</span> String region;<br>    <span class="hljs-keyword">private</span> String regionName;<br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-keyword">private</span> String timezone;<br>    <span class="hljs-keyword">private</span> String zip;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> as;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAs</span><span class="hljs-params">(String as)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.as = as;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCity</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> city;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCity</span><span class="hljs-params">(String city)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCountry</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> country;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCountry</span><span class="hljs-params">(String country)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.country = country;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCountryCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> countryCode;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCountryCode</span><span class="hljs-params">(String countryCode)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.countryCode = countryCode;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getIsp</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> isp;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIsp</span><span class="hljs-params">(String isp)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.isp = isp;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getLat</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> lat;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLat</span><span class="hljs-params">(<span class="hljs-keyword">double</span> lat)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.lat = lat;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getLon</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> lon;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLon</span><span class="hljs-params">(<span class="hljs-keyword">double</span> lon)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.lon = lon;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getOrg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> org;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrg</span><span class="hljs-params">(String org)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.org = org;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getQuery</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> query;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setQuery</span><span class="hljs-params">(String query)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.query = query;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRegion</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> region;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRegion</span><span class="hljs-params">(String region)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.region = region;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRegionName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> regionName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRegionName</span><span class="hljs-params">(String regionName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.regionName = regionName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStatus</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(String status)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.status = status;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTimezone</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> timezone;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTimezone</span><span class="hljs-params">(String timezone)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.timezone = timezone;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getZip</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> zip;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setZip</span><span class="hljs-params">(String zip)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.zip = zip;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>MaterialDesign(材料设计)</title>
    <url>/android/material-design/</url>
    <content><![CDATA[<h2 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h2><ul>
<li><a href="http://code.hootsuite.com/tips-and-tricks-for-android-material-support-library-2-electric-boogaloo/" target="_blank" rel="noopener">TIPS AND TRICKS FOR ANDROID MATERIAL SUPPORT LIBRARY 2: ELECTRIC BOOGALOO</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Drawable相关</title>
    <url>/android/drawable/</url>
    <content><![CDATA[<h2 id="动态修改-shape-中的颜色"><a href="#动态修改-shape-中的颜色" class="headerlink" title="动态修改 shape 中的颜色"></a>动态修改 shape 中的颜色</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- drawable/opera_circle.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">shape</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span> <span class="hljs-attr">android:shape</span>=<span class="hljs-string">"oval"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">solid</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">"#fff002"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">size</span> <span class="hljs-attr">android:height</span>=<span class="hljs-string">"64dp"</span> <span class="hljs-attr">android:width</span>=<span class="hljs-string">"64dp"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">shape</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- layout/ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/item_mode_list_iv_color"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:padding</span>=<span class="hljs-string">"28dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@drawable/opera_circle"</span>/&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ImageView ivColor = getView(R.id.item_mode_list_iv_color);<br>GradientDrawable drawable = (GradientDrawable) ivColor.getDrawable();<br>drawable.setColor(Color.parseColor(<span class="hljs-string">"#2b3c89"</span>));<br></code></pre></td></tr></table></figure>

<h2 id="动态修改-Selector-–-gt-layer-list-–-gt-shape-中的颜色"><a href="#动态修改-Selector-–-gt-layer-list-–-gt-shape-中的颜色" class="headerlink" title="动态修改 Selector –&gt; layer-list –&gt; shape 中的颜色"></a>动态修改 Selector –&gt; layer-list –&gt; shape 中的颜色</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- drawable/selector_skin_color.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_checked</span>=<span class="hljs-string">"true"</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layer-list</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:left</span>=<span class="hljs-string">"4dp"</span> <span class="hljs-attr">android:top</span>=<span class="hljs-string">"4dp"</span> <span class="hljs-attr">android:right</span>=<span class="hljs-string">"4dp"</span> <span class="hljs-attr">android:bottom</span>=<span class="hljs-string">"4dp"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">shape</span> <span class="hljs-attr">android:shape</span>=<span class="hljs-string">"oval"</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">solid</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">"@android:color/transparent"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">shape</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layer-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_checked</span>=<span class="hljs-string">"false"</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layer-list</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:left</span>=<span class="hljs-string">"12dp"</span> <span class="hljs-attr">android:top</span>=<span class="hljs-string">"12dp"</span> <span class="hljs-attr">android:right</span>=<span class="hljs-string">"12dp"</span> <span class="hljs-attr">android:bottom</span>=<span class="hljs-string">"12dp"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">shape</span> <span class="hljs-attr">android:shape</span>=<span class="hljs-string">"oval"</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">solid</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">"@android:color/transparent"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">shape</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layer-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> RadioButton <span class="hljs-title">getCircleRadioButton</span><span class="hljs-params">(<span class="hljs-keyword">int</span> color)</span> </span>&#123;<br>    Context context = getContext();<br>    <span class="hljs-keyword">int</span> w = Uscreen.dp2Px(context, <span class="hljs-number">48</span>);<br>    RadioButton rbtn = <span class="hljs-keyword">new</span> RadioButton(context);<br>    rbtn.setLayoutParams(<span class="hljs-keyword">new</span> RadioGroup.LayoutParams(w, w));<br>    rbtn.setButtonDrawable(<span class="hljs-keyword">new</span> ColorDrawable(Color.TRANSPARENT));<br>    rbtn.setBackgroundResource(R.drawable.selector_skin_color);<br><br>    <span class="hljs-comment">// 动态修改颜色；</span><br>    Drawable drawable = rbtn.getBackground();<br>    <span class="hljs-keyword">if</span>(drawable  <span class="hljs-keyword">instanceof</span> StateListDrawable)&#123;<br>        StateListDrawable gradientDrawable = (StateListDrawable) drawable;<br>        ConstantState constantState = gradientDrawable.getConstantState();<br>        <span class="hljs-keyword">if</span>(constantState <span class="hljs-keyword">instanceof</span> DrawableContainerState)&#123;<br>            DrawableContainerState drawableContainerState = (DrawableContainerState)constantState;<br>            Drawable[] children = drawableContainerState.getChildren();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; children.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (children[i] <span class="hljs-keyword">instanceof</span> LayerDrawable) &#123;<br>                    LayerDrawable selectedItem = (LayerDrawable) children[i];<br>                    GradientDrawable selectedDrawable = (GradientDrawable) selectedItem.getDrawable(<span class="hljs-number">0</span>);<br>                    selectedDrawable.mutate();<br>                    selectedDrawable.setColor(color);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> rbtn;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>具体应用参考：<a href="http://blog.csdn.net/ly1414725328/article/details/51386418" target="_blank" rel="noopener">【Android】自定义 View —— 设置中的选择皮肤项</a></p>
<h2 id="让-Selector-中的图片居右对齐"><a href="#让-Selector-中的图片居右对齐" class="headerlink" title="让 Selector 中的图片居右对齐"></a>让 Selector 中的图片居右对齐</h2><p>抛出问题：<br>实现如图的效果和功能，当选中时后面有一个对勾，当非选中时没有对勾，点击「发送」的时候给所有选中的 item 发送消息。<br><img src="https://github.com/lyloou/img/raw/develop/z/20191211143106.jpg" alt="让Selector中的图片居右对齐"></p>
<p>复杂的做法是：<br>通过自定义一个实体类，每个对象都有一个名称属性和一个表示是否是选中状态属性；<br>给 ListView 设置 item 监听，点击 item 的时候，改变其状态然后刷新列表 ……</p>
<p>简单的做法：<br>因为这里只是为了获取到所有选中的 item，并没有其他的功能需求，我们可以充分利用 ListView 的 choice 功能，<br>（即通过设置 ListView 的多选模式<code>android:choiceMode=&quot;multipleChoice&quot;</code>）；</p>
<p>为了使用简单的做法，我们可能会遇到这样的问题：在哪里设置选中和没选中两种状态；<br>解决办法就是给 item 的根布局设置 selector，根据是否处于激活状态来区分；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- layout/item_lv--&gt;</span><br><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@drawable/llyt_bg_selector"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingBottom</span>=<span class="hljs-string">"8dp"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingTop</span>=<span class="hljs-string">"8dp"</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"浩南"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>如何让 selector 中的图片居右对齐：<br>简单来说，就是利用 bitmap 标签的 gravity 属性和 titleMode 属性来控制。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- drawable/llyt_bg_selector.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_activated</span>=<span class="hljs-string">"true"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bitmap</span> <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@drawable/img_checked"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:tileMode</span>=<span class="hljs-string">"disabled"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:dither</span>=<span class="hljs-string">"true"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:antialias</span>=<span class="hljs-string">"true"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"end|center_vertical"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>如何获取所有选中的条目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SparseBooleanArray sba = listView.getCheckedItemPositions();<br>ArrayList&lt;Friend&gt; checkedLists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; friendAdapter.getCount(); i++) &#123;<br>    <span class="hljs-keyword">if</span> (sba.get(i)) &#123;<br>        checkedLists.add(adapter.getItem(i));<br>    &#125;<br>&#125;<br>Log.e(<span class="hljs-string">"Lou"</span>, <span class="hljs-string">"Get checked items :"</span> + checkedLists);<br></code></pre></td></tr></table></figure>

<p>还有一种思路：<br>通过「点 9」图来实现让图片居右对齐的目的；</p>
<p>外部链接：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/13634259/explanation-of-state-activated-state-selected-state-pressed-state-focused-for" target="_blank" rel="noopener">Explanation of state_activated, state_selected, state_pressed, state_focused for ListView</a></li>
</ul>
<h2 id="背景图片平铺"><a href="#背景图片平铺" class="headerlink" title="背景图片平铺"></a>背景图片平铺</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bitmap</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@drawable/stripes"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:tileMode</span>=<span class="hljs-string">"repeat"</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="推荐教程"><a href="#推荐教程" class="headerlink" title="推荐教程"></a>推荐教程</h2><ul>
<li><a href="https://github.com/keeganlee/kstyle" target="_blank" rel="noopener">KStyle 是一个 Android 的样式开发的学习项目。</a></li>
</ul>
<h2 id="点-9-图-点九图"><a href="#点-9-图-点九图" class="headerlink" title="点 9 图-点九图"></a>点 9 图-点九图</h2><p>我们可以在图片的四个边框绘制一个个的小黑点，<br>在上边框和左边框绘制的部分就表示<strong>当图片需要拉伸时就拉伸黑点标记的区域</strong>，<br>在下边框和右边框绘制的部分则表示<strong>内容会被放置的区域</strong>。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中支持库（Support Library）</title>
    <url>/android/support%20library/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>支持库，为了开发出兼容低版本设备的应用而存在的。</p>
<h2 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h2><ul>
<li><a href="https://developer.android.com/topic/libraries/support-library/features.html" target="_blank" rel="noopener">Support Library Features</a></li>
<li><a href="http://stormzhang.com/android/2015/03/29/android-support-library/" target="_blank" rel="noopener">Android Support兼容包详解</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>TBK</title>
    <url>/android/tbk/</url>
    <content><![CDATA[<h2 id="集成依赖"><a href="#集成依赖" class="headerlink" title="集成依赖"></a>集成依赖</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">allprojects &#123;<br>    repositories &#123;<br>        mavenCentral();<br>        jcenter()<br>        maven &#123;<br>            url <span class="hljs-string">"http://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/"</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//!+Baichuan</span><br><br><span class="hljs-comment">//fastjson</span><br>compile <span class="hljs-string">'com.alibaba:fastjson:1.2.9'</span><br><br><span class="hljs-comment">//支付</span><br>compile <span class="hljs-string">'com.alibaba.alipay:alipaySingle:20160825@jar'</span><br><br><span class="hljs-comment">//登陆</span><br>compile <span class="hljs-string">'com.ali.auth.sdk:alibabauth_core:1.1.4@jar'</span><br>compile <span class="hljs-string">'com.ali.auth.sdk:alibabauth_ui:1.1.4@aar'</span><br>compile <span class="hljs-string">'com.ali.auth.sdk:alibabauth_ext:1.1.4@jar'</span><br><br><span class="hljs-comment">//【可选】仅供特殊合作伙伴使用</span><br><br><span class="hljs-comment">//compile 'com.ali.auth.sdk:alibabauth_accountlink:1.1.4@jar'</span><br><br><span class="hljs-comment">//安全基础</span><br>compile <span class="hljs-string">'com.taobao.android:securityguardaar3:5.1.81@aar'</span><br><br><span class="hljs-comment">//【可选】安全高级，如使用了发放红包、优惠券高级功能，则必须引入</span><br><br><span class="hljs-comment">//compile 'com.taobao.android:securitybodyaar3:5.1.25@aar'</span><br><br><span class="hljs-comment">//Mtop网关</span><br>compile <span class="hljs-string">'com.taobao.android:mtopsdk_allinone_open:1.2.2.4@jar'</span><br><br><span class="hljs-comment">//applink</span><br>compile <span class="hljs-string">'com.taobao.android:alibc_applink:2.0.0.9@jar'</span><br><br><span class="hljs-comment">//UT</span><br>compile <span class="hljs-string">'com.taobao.android:utdid4all:1.1.5.3_proguard@jar'</span><br>compile <span class="hljs-string">'com.alibaba.mtl:app-monitor-sdk:2.5.1.3_for_bc_proguard@jar'</span><br><br><span class="hljs-comment">//电商SDK</span><br>compile <span class="hljs-string">'com.alibaba.sdk.android:alibc_trade_sdk:3.1.1.11@aar'</span><br><br><span class="hljs-comment">//!-Baichuan</span><br></code></pre></td></tr></table></figure>

<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//: Baichuan.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Baichuan</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDetailPage</span><span class="hljs-params">(Activity activity, String id, String pid, CallbackContext callbackContext)</span> </span>&#123;<br>        AlibcBasePage alibcBasePage = <span class="hljs-keyword">new</span> AlibcDetailPage(id);<br>        AlibcTaokeParams alibcTaokeParams = <span class="hljs-keyword">new</span> AlibcTaokeParams(pid, <span class="hljs-string">""</span>, <span class="hljs-string">""</span>);<br>        <span class="hljs-keyword">if</span> (!alibcTaokeParams.isValidPid()) &#123;<br>            callbackContext.error(<span class="hljs-string">"pid无效"</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        showPage(activity, alibcBasePage, alibcTaokeParams, callbackContext);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDetailPageWithUrl</span><span class="hljs-params">(Activity activity, String url, CallbackContext callbackContext)</span> </span>&#123;<br>        AlibcBasePage alibcBasePage = <span class="hljs-keyword">new</span> AlibcPage(url);<br>        showPage(activity, alibcBasePage, <span class="hljs-keyword">null</span>, callbackContext);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showPage</span><span class="hljs-params">(Activity activity, AlibcBasePage alibcBasePage, AlibcTaokeParams alibcTaokeParams, <span class="hljs-keyword">final</span> CallbackContext callbackContext)</span> </span>&#123;<br><br>        AlibcShowParams alibcShowParams = <span class="hljs-keyword">new</span> AlibcShowParams(OpenType.Native, <span class="hljs-keyword">false</span>);<br><br>        HashMap&lt;String, String&gt; exParams = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        exParams.put(AlibcConstants.ISV_CODE, <span class="hljs-string">"appisvcode"</span>);<br><br>        AlibcTrade.show(activity, alibcBasePage, alibcShowParams, alibcTaokeParams, exParams, <span class="hljs-keyword">new</span> AlibcTradeCallback() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, String s)</span> </span>&#123;<br>                callbackContext.error(<span class="hljs-string">"导航失败："</span> + s);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onTradeSuccess</span><span class="hljs-params">(TradeResult tradeResult)</span> </span>&#123;<br>                <span class="hljs-keyword">switch</span> (tradeResult.resultType) &#123;<br>                    <span class="hljs-keyword">case</span> TYPEPAY:<br>                        JSONObject jsonObject = <span class="hljs-keyword">new</span> JSONObject();<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            jsonObject.put(<span class="hljs-string">"successArr"</span>, tradeResult.payResult.paySuccessOrders);<br>                            jsonObject.put(<span class="hljs-string">"failureArr"</span>, tradeResult.payResult.payFailedOrders);<br>                            callbackContext.success(jsonObject);<br>                        &#125; <span class="hljs-keyword">catch</span> (JSONException e) &#123;<br>                            e.printStackTrace();<br>                            callbackContext.error(<span class="hljs-string">"json转换异常:"</span> + e.getMessage());<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> TYPECART:<br>                        callbackContext.success(<span class="hljs-string">"您已经将商品添加到购物车了，赶快去购买吧"</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        callbackContext.error(<span class="hljs-string">"未知的结果类型"</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Activity context)</span> </span>&#123;<br><br>        <span class="hljs-keyword">final</span> AlibcLogin alibcLogin = AlibcLogin.getInstance();<br><br>        alibcLogin.showLogin(context, <span class="hljs-keyword">new</span> AlibcLoginCallback() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">()</span> </span>&#123;<br>                Toast.makeText(context, <span class="hljs-string">"登录成功 "</span>, Toast.LENGTH_LONG).show();<br>                <span class="hljs-comment">//获取淘宝用户信息</span><br>                Log.i(<span class="hljs-string">"Baichuan"</span>, <span class="hljs-string">"获取淘宝用户信息: "</span> + AlibcLogin.getInstance().getSession());<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code, String msg)</span> </span>&#123;<br>                Toast.makeText(context, <span class="hljs-string">"登录失败 "</span>, Toast.LENGTH_LONG).show();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="cordova调用"><a href="#cordova调用" class="headerlink" title="cordova调用"></a>cordova调用</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">名称: MyPlugin.toDetailPage<br>描述: 跳转到淘宝商品详情页面<br>参数: <br>   JSONParam ——  pid和isCounpons必传，goodsId和couponsUrl对应isCounpons选其一<br>    &#123;<br>        pid: <span class="hljs-string">'mm_131641132_33126906_320380416'</span>, <span class="hljs-comment">// 用户对应pid，此参数必传！！！</span><br>        isCoupons: <span class="hljs-number">0</span>, <span class="hljs-comment">// 是否有优惠券，传0（无）或者1（有）</span><br>        goodsId: <span class="hljs-string">'550548242323'</span>, <span class="hljs-comment">// 商品id  </span><br>        couponsUrl: <span class="hljs-string">'优惠券地址'</span> <span class="hljs-comment">// 优惠券地址</span><br>     &#125;<br>   onSuccess —— 成功时的回调，如用户进行购买，则返回&#123;<span class="hljs-string">"successArr"</span>:paySuccessOrders, <span class="hljs-string">"failureArr"</span>:payFailedOrders&#125;，Dictionary类型;如用户将商品加入购物车，则返回“您已经将商品添加到购物车了，赶快去购买吧”，String类型<br>   onError —— 失败时的回调，返回失败原因，String类型<br>使用方法：<br>MyPlugin.toDetailPage(&#123;goodsId: <span class="hljs-string">'550548242323'</span>, pid: <span class="hljs-string">'mm_131641136_43126906_310380416'</span>, isCoupons: <span class="hljs-number">0</span>&#125;, function (success)&#123;&#125;,function (error)&#123;&#125;)<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">toDetailPage</span><span class="hljs-params">(CordovaArgs args, CallbackContext callbackContext)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        JSONObject params = args.getJSONObject(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">if</span> (params.has(<span class="hljs-string">"isCoupons"</span>) &amp;&amp; params.getInt(<span class="hljs-string">"isCoupons"</span>) == <span class="hljs-number">1</span>) &#123;<br>            String couponsUrl = params.has(<span class="hljs-string">"couponsUrl"</span>) ? params.getString(<span class="hljs-string">"couponsUrl"</span>) : <span class="hljs-string">""</span>;<br>            Baichuan.showDetailPageWithUrl(mContext, couponsUrl, callbackContext);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        String pid = params.has(<span class="hljs-string">"pid"</span>) ? params.getString(<span class="hljs-string">"pid"</span>) : <span class="hljs-string">""</span>;<br>        <span class="hljs-keyword">if</span> (TextUtils.isEmpty(pid)) &#123;<br>            callbackContext.error(<span class="hljs-string">"获取PID参数失败"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// use goodsId and pid</span><br>        String id = params.has(<span class="hljs-string">"goodsId"</span>) ? params.getString(<span class="hljs-string">"goodsId"</span>) : <span class="hljs-string">""</span>;<br>        Baichuan.showDetailPage(mContext, id, pid, callbackContext);<br><br>    &#125; <span class="hljs-keyword">catch</span> (JSONException e) &#123;<br>        e.printStackTrace();<br>        callbackContext.error(<span class="hljs-string">"获取参数失败："</span> + e.getMessage());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView相关</title>
    <url>/android/view-recyclerview/</url>
    <content><![CDATA[<h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><ul>
<li>针对多种类型的情况，可以创建多个 <code>ViewHolder</code>和设置多个 <code>type</code></li>
</ul>
<h3 id="分页加载（加载更多）"><a href="#分页加载（加载更多）" class="headerlink" title="分页加载（加载更多）"></a>分页加载（加载更多）</h3><blockquote>
<p><a href="https://github.com/lyloou/lou/blob/demo/test/src/main/java/com/lyloou/test/gank/GankWelfareActivity.java" target="_blank" rel="noopener">https://github.com/lyloou/lou/blob/demo/test/src/main/java/com/lyloou/test/gank/GankWelfareActivity.java</a></p>
</blockquote>
<blockquote>
<p><a href="http://www.gadgetsaint.com/android/recyclerview-header-footer-pagination/#.WRwxJGh96Hs" target="_blank" rel="noopener">http://www.gadgetsaint.com/android/recyclerview-header-footer-pagination/#.WRwxJGh96Hs</a></p>
</blockquote>
<p><em>方案一：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">mRecyclerView.addOnScrollListener(<span class="hljs-keyword">new</span> RecyclerView.OnScrollListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onScrollStateChanged</span><span class="hljs-params">(RecyclerView recyclerView, <span class="hljs-keyword">int</span> newState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onScrollStateChanged(recyclerView, newState);<br><br>        <span class="hljs-keyword">int</span> lastvisibleitemposition = mLayoutManager.findLastVisibleItemPosition();<br><br>        <span class="hljs-keyword">if</span> (lastvisibleitemposition == mAdapter.getItemCount() - <span class="hljs-number">1</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (!loading &amp;&amp; !isLastPage) &#123;<br><br>                loading = <span class="hljs-keyword">true</span>;<br>                fetchData((++pageCount));<br>                <span class="hljs-comment">// Increment the pagecount everytime we scroll to fetch data from the next page</span><br>                <span class="hljs-comment">// make loading = false once the data is loaded</span><br>                <span class="hljs-comment">// call mAdapter.notifyDataSetChanged() to refresh the Adapter and Layout</span><br><br>            &#125;<br><br><br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p><em>方案二：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// http://www.jianshu.com/p/4feb0c16d1b5</span><br><span class="hljs-keyword">private</span> RecyclerView.OnScrollListener mListener = <span class="hljs-keyword">new</span> RecyclerView.OnScrollListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onScrollStateChanged</span><span class="hljs-params">(RecyclerView recyclerView, <span class="hljs-keyword">int</span> newState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onScrollStateChanged(recyclerView, newState);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onScrolled</span><span class="hljs-params">(RecyclerView recyclerView, <span class="hljs-keyword">int</span> dx, <span class="hljs-keyword">int</span> dy)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onScrolled(recyclerView, dx, dy);<br><br>        LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();<br>        <span class="hljs-keyword">int</span> lastVisibleItem = layoutManager.findLastVisibleItemPosition();<br>        <span class="hljs-keyword">int</span> totalItemCount = layoutManager.getItemCount();<br><br>        <span class="hljs-keyword">if</span> (totalItemCount &lt; <span class="hljs-number">250</span> &amp;&amp; lastVisibleItem &gt;= totalItemCount - <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-comment">// 注意：要限制请求，否则请求太多次数，导致服务器崩溃或者服务器拒绝请求（罪过，罪过）。</span><br>            <span class="hljs-keyword">if</span> (mIsLoading) &#123;<br>                Log.i(TAG, <span class="hljs-string">"onScrolled: "</span> + <span class="hljs-string">"加载中---------"</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Log.i(TAG, <span class="hljs-string">"onScrolled: "</span> + <span class="hljs-string">"加载更多了=======》"</span>);<br>                loadSubject();<br>            &#125;<br><br>        &#125;<br><br>        Log.d(TAG, <span class="hljs-string">"onScrolled: lastVisibleItem="</span> + lastVisibleItem);<br>        Log.d(TAG, <span class="hljs-string">"onScrolled: totalItemCount="</span> + totalItemCount);<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<h2 id="加载更多调用-notifyDataSetChanged-时会白一下屏"><a href="#加载更多调用-notifyDataSetChanged-时会白一下屏" class="headerlink" title="加载更多调用 notifyDataSetChanged 时会白一下屏"></a>加载更多调用 notifyDataSetChanged 时会白一下屏</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">getDataListFromNet(++page, dataList-&gt;&#123;<br>    <span class="hljs-keyword">int</span> lastSize = mAdapter.getList().size();<br>    mAdapter.getList().addAll(dataList);<br>    <span class="hljs-comment">// mAdapter.notifyDataSetChanged(); // 调用这个方法会白屏，可以用下面的方式解决</span><br>    mAdapter.notifyItemRangeInserted(lastSize - <span class="hljs-number">1</span>, dataList.size());<br>&#125;);<br></code></pre></td></tr></table></figure>

<h2 id="GridLayoutManager-均分两列的装饰器-ItemDecoration"><a href="#GridLayoutManager-均分两列的装饰器-ItemDecoration" class="headerlink" title="GridLayoutManager 均分两列的装饰器 ItemDecoration"></a>GridLayoutManager 均分两列的装饰器 ItemDecoration</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleItemOffsetDecoration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecyclerView</span>.<span class="hljs-title">ItemDecoration</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> offset;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoubleItemOffsetDecoration</span><span class="hljs-params">(<span class="hljs-keyword">int</span> offset)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.offset = offset;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getItemOffsets</span><span class="hljs-params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> position = parent.getChildLayoutPosition(view);<br>        <span class="hljs-keyword">if</span> (position == <span class="hljs-number">0</span> || position == <span class="hljs-number">1</span>) &#123;<br>            outRect.top = offset;<br>        &#125;<br><br>        outRect.bottom = offset;<br>        <span class="hljs-keyword">if</span> (position % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            outRect.left = offset / <span class="hljs-number">2</span>;<br>            outRect.right = offset;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            outRect.left = offset;<br>            outRect.right = offset / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Tv开发</title>
    <url>/android/tv/</url>
    <content><![CDATA[<p><a href="https://developer.android.com/training/tv/start/" target="_blank" rel="noopener">https://developer.android.com/training/tv/start/</a><br><a href="https://developer.android.com/training/tv/playback/" target="_blank" rel="noopener">https://developer.android.com/training/tv/playback/</a></p>
<p><a href="https://designguidelines.withgoogle.com/android-tv/android-tv/introduction.html#" target="_blank" rel="noopener">https://designguidelines.withgoogle.com/android-tv/android-tv/introduction.html#</a></p>
<p><a href="https://developer.nvidia.com/android-tv-deployment-checklist" target="_blank" rel="noopener">https://developer.nvidia.com/android-tv-deployment-checklist</a></p>
<p><a href="http://corochann.com/android-tv-application-hands-on-tutorial-1-45.html" target="_blank" rel="noopener">http://corochann.com/android-tv-application-hands-on-tutorial-1-45.html</a><br><a href="https://github.com/corochann/AndroidTVappTutorial" target="_blank" rel="noopener">https://github.com/corochann/AndroidTVappTutorial</a></p>
<h2 id="tvheadend"><a href="#tvheadend" class="headerlink" title="tvheadend"></a>tvheadend</h2><p>web: <a href="https://tvheadend.org/" target="_blank" rel="noopener">https://tvheadend.org/</a><br>github: <a href="https://github.com/tvheadend/tvheadend" target="_blank" rel="noopener">https://github.com/tvheadend/tvheadend</a><br>tv: <a href="https://www.youtube.com/watch?v=rDQyHFZ-l9Y" target="_blank" rel="noopener">https://www.youtube.com/watch?v=rDQyHFZ-l9Y</a><br>android: <a href="https://github.com/rsiebert/TVHClient" target="_blank" rel="noopener">https://github.com/rsiebert/TVHClient</a></p>
<h3 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h3><p><a href="https://android-developers.googleblog.com/2016/11/adding-tv-channels-to-your-app-with-the-tif-companion-library.html" target="_blank" rel="noopener">https://android-developers.googleblog.com/2016/11/adding-tv-channels-to-your-app-with-the-tif-companion-library.html</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Tab悬浮效果实现</title>
    <url>/android/view-tab%E6%82%AC%E6%B5%AE/</url>
    <content><![CDATA[<h2 id="tab悬浮效果实现"><a href="#tab悬浮效果实现" class="headerlink" title="tab悬浮效果实现"></a>tab悬浮效果实现</h2><p>一种解决方式是使用开源库（如果布局嵌套很复杂，则不一定适合）：<a href="https://github.com/carlonzo/StikkyHeader" target="_blank" rel="noopener">https://github.com/carlonzo/StikkyHeader</a></p>
<p>另一种解决思路：</p>
<ul>
<li><p>在布局中，使用一个同tab1完全一样的tab2（并设置显示属性为gone）；</p>
</li>
<li><p>获取 tab1 到外层父视图顶部的距离（通过<code>tab1.getTop()</code>获取）；</p>
</li>
<li><p>当滚动的距离超过这个距离时，让外层的tab2显示出来，否则隐藏tab2；（即：<code>(scrollY - tab1.getTop()) &gt; 0</code>）</p>
</li>
<li><p>tab1 和 tab2 在逻辑上做相同的变化；</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ScrollTabView</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">...</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tab1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">...</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ScrollTabView</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tab2</span> <span class="hljs-attr">visibility</span>=<span class="hljs-string">"gone"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重写ScrollView</span><br><span class="hljs-comment">// 参考资料：http://www.jianshu.com/p/8ee4b0896b22</span><br><span class="hljs-comment">// https://github.com/aohanyao/Advanced/blob/master/code/CustomView/ScollTabView/app/src/main/java/aohanyao/com/scolltabview/ScrollLevitateTabView.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScrollTabView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ScrollView</span> </span>&#123;<br>    OnScrollListener mOnScrollListener;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScrollTabView</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(context, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScrollTabView</span><span class="hljs-params">(Context context, AttributeSet attrs)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(context, attrs, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScrollTabView</span><span class="hljs-params">(Context context, AttributeSet attrs, <span class="hljs-keyword">int</span> defStyleAttr)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(context, attrs, defStyleAttr);<br>        setUp();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOnScrollListener</span><span class="hljs-params">(OnScrollListener onScrollListener)</span> </span>&#123;<br>        mOnScrollListener = onScrollListener;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (mOnScrollListener == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        getViewTreeObserver().addOnGlobalLayoutListener(<span class="hljs-keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onGlobalLayout</span><span class="hljs-params">()</span> </span>&#123;<br>                mOnScrollListener.onScroll(getScrollY());<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onScrollChanged</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> oldl, <span class="hljs-keyword">int</span> oldt)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (mOnScrollListener != <span class="hljs-keyword">null</span>) &#123;<br>            mOnScrollListener.onScroll(t);<br>        &#125;<br>        <span class="hljs-keyword">super</span>.onScrollChanged(l, t, oldl, oldt);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OnScrollListener</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onScroll</span><span class="hljs-params">(<span class="hljs-keyword">int</span> scrollY)</span></span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 运用</span><br>ScrollTabView scrollTabView = (ScrollTabView) mView.findViewById(R.id.scroll_tab_view);<br>scrollTabView.setOnScrollListener(<span class="hljs-keyword">new</span> ScrollTabView.OnScrollListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onScroll</span><span class="hljs-params">(<span class="hljs-keyword">int</span> scrollY)</span> </span>&#123;<br>        <span class="hljs-comment">// ScrollView的高度变化决定了tab2的显示与否</span><br>        <span class="hljs-keyword">int</span> deltaY = scrollY - tab1.getTop();<br>        tab2.setVisibility(deltaY &gt; <span class="hljs-number">0</span> ? View.VISIBLE : View.GONE);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Webview相关</title>
    <url>/android/view-webview/</url>
    <content><![CDATA[<h1 id="Android-7-0-webview-不自动刷新"><a href="#Android-7-0-webview-不自动刷新" class="headerlink" title="Android 7.0 webview 不自动刷新"></a>Android 7.0 webview 不自动刷新</h1><p>当 webview 所在的 activity 采用了以下主题时，Android7.0 设备将无法正常运行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"WelcomeBg"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"@android:style/Theme.DeviceDefault.NoActionBar"</span>&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowIsTranslucent"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowNoTitle"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowActionBar"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowBackground"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>之所以有这样的改变，目的是想要提升启动 Activity 的性能，哪里知道 7.0 之后会遇到无法正常渲染 WebView 的问题。</p>
<p>解决办法是：<br>直接使用默认主题，而不再对其包装：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">@android:style/Theme.DeviceDefault.NoActionBar<br></code></pre></td></tr></table></figure>

<h1 id="获取-WebView-的点击元素"><a href="#获取-WebView-的点击元素" class="headerlink" title="获取 WebView 的点击元素"></a>获取 WebView 的点击元素</h1><p>可以通过搜索关键字：<code>HitTestResult getHitTestResult</code>来知道更多内容；</p>
<p>注意：X5WebView，来源于腾讯 TBS 系统，是另外一个继承体系（可以通过打印<code>view.getClass()</code>的方式查看其继承体系）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLongClick</span><span class="hljs-params">(<span class="hljs-keyword">final</span> View view)</span> </span>&#123;<br>    <span class="hljs-comment">//长按点击事件</span><br>    view.setOnLongClickListener(<span class="hljs-keyword">new</span> View.OnLongClickListener() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onLongClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>            <span class="hljs-comment">//响应长按事件（如果webview继承自安卓原生系统）</span><br>            <span class="hljs-keyword">if</span> (view <span class="hljs-keyword">instanceof</span> WebView) &#123;<br>                WebView.HitTestResult result = ((WebView) view).getHitTestResult();<br>                <span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">int</span> type = result.getType();<br>                    <span class="hljs-comment">//判断点击类型如果是图片</span><br>                    <span class="hljs-keyword">if</span> (type == WebView.HitTestResult.IMAGE_TYPE || type == WebView.HitTestResult.SRC_IMAGE_ANCHOR_TYPE) &#123;<br>                        <span class="hljs-comment">//弹出对话框</span><br>                        showDialog(result.getExtra());<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (view <span class="hljs-keyword">instanceof</span> X5WebView) &#123;<br>                <span class="hljs-comment">//响应长按事件（如果webview继承自腾讯的TBS系统）</span><br>                Log.i(TAG, <span class="hljs-string">"onLongClick: x5"</span>);<br>                com.tencent.smtt.sdk.WebView.HitTestResult hitTestResult = ((X5WebView) view).getHitTestResult();<br>                <span class="hljs-keyword">if</span> (hitTestResult != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">int</span> type = hitTestResult.getType();<br>                    <span class="hljs-keyword">if</span> (type == X5WebView.HitTestResult.IMAGE_TYPE || type == X5WebView.HitTestResult.SRC_IMAGE_ANCHOR_TYPE) &#123;<br>                        showDialog(hitTestResult.getExtra());<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>参考资料</strong></p>
<ul>
<li><a href="http://www.cnblogs.com/classloader/p/5302784.html" target="_blank" rel="noopener">获取 Android webview 的点击元素</a></li>
<li><a href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html" target="_blank" rel="noopener">HitTestResult</a></li>
</ul>
<h1 id="需要登录网页授权的页面处理"><a href="#需要登录网页授权的页面处理" class="headerlink" title="需要登录网页授权的页面处理"></a>需要登录网页授权的页面处理</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);<br>webSettings.setUseWideViewPort(<span class="hljs-keyword">true</span>);<br>webSettings.setJavaScriptEnabled(<span class="hljs-keyword">true</span>);<br>webSettings.setDomStorageEnabled(<span class="hljs-keyword">true</span>);<br>webSettings.setLoadWithOverviewMode(<span class="hljs-keyword">true</span>);<br>webview.setWebViewClient(getWebViewClient());<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> WebViewClient <span class="hljs-title">getWebViewClient</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WebViewClient() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceivedHttpAuthRequest</span><span class="hljs-params">(WebView view, HttpAuthHandler handler, String host, String realm)</span> </span>&#123;<br>            <span class="hljs-comment">// [Android-WebView's onReceivedHttpAuthRequest() not called again - Stack Overflow](https://stackoverflow.com/questions/20399339/android-webviews-onreceivedhttpauthrequest-not-called-again)</span><br>            <span class="hljs-keyword">final</span> EditText usernameInput = <span class="hljs-keyword">new</span> EditText(mContext);<br>            usernameInput.setHint(<span class="hljs-string">"Username"</span>);<br><br>            <span class="hljs-keyword">final</span> EditText passwordInput = <span class="hljs-keyword">new</span> EditText(mContext);<br>            passwordInput.setHint(<span class="hljs-string">"Password"</span>);<br>            passwordInput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);<br><br>            LinearLayout ll = <span class="hljs-keyword">new</span> LinearLayout(mContext);<br>            ll.setOrientation(LinearLayout.VERTICAL);<br>            ll.addView(usernameInput);<br>            ll.addView(passwordInput);<br><br>            AlertDialog.Builder authDialog = <span class="hljs-keyword">new</span> AlertDialog<br>                    .Builder(mContext)<br>                    .setTitle(<span class="hljs-string">"Authentication"</span>)<br>                    .setView(ll)<br>                    .setCancelable(<span class="hljs-keyword">false</span>)<br>                    .setPositiveButton(<span class="hljs-string">"OK"</span>, (dialog, whichButton) -&gt; &#123;<br>                        String username = usernameInput.getText().toString();<br>                        String password = passwordInput.getText().toString();<br>                        handler.proceed(username, password);<br>                        Toast.makeText(mContext, username + <span class="hljs-string">":"</span> + password, Toast.LENGTH_LONG).show();<br>                        dialog.dismiss();<br>                    &#125;)<br>                    .setNegativeButton(<span class="hljs-string">"Cancel"</span>, (dialog, whichButton) -&gt; &#123;<br>                        dialog.dismiss();<br>                        view.stopLoading();<br>                    &#125;);<br><br>            authDialog.show();<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android下载网络图片</title>
    <url>/android/%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h2 id="下载网络图片"><a href="#下载网络图片" class="headerlink" title="下载网络图片"></a>下载网络图片</h2><pre><code><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第一步：根据流得到bitmap</span><br><span class="hljs-comment">// 方案1</span><br>Bitmap bitmap = Glide.with(applicationContext)<br>        .load(url)<br>        .asBitmap()<br>        .into(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL)<br>        .get();<br><span class="hljs-comment">// 方案2</span><br>Bitmap bitmap = BitmapFactory.decodeStream(<span class="hljs-keyword">new</span> URL(url).openStream());<br><br><span class="hljs-comment">// 压缩图片</span><br><span class="hljs-comment">// bitmap = Bitmap.createScaledBitmap(bitmap, 120, 120, true);</span><br><br><span class="hljs-comment">// 第二步：保存成文件</span><br><span class="hljs-comment">// 保存图片</span><br>File imgDir = <span class="hljs-keyword">new</span> File(getDiskCacheDir(applicationContext), <span class="hljs-string">"image_caches"</span>);<br><span class="hljs-keyword">if</span> (!imgDir.exists()) &#123;<br>    imgDir.mkdirs();<br>&#125;<br>File imgFile = <span class="hljs-keyword">new</span> File(imgDir, fileName);<br>fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(imgFile);<br>Bitmap.CompressFormat compressFormat = Bitmap.CompressFormat.PNG;<br>bitmap.compress(compressFormat, <span class="hljs-number">100</span>, fileOutputStream);<br>fileOutputStream.flush();<br></code></pre></td></tr></table></figure></code></pre><h2 id="Glide预加载图片"><a href="#Glide预加载图片" class="headerlink" title="Glide预加载图片"></a>Glide预加载图片</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preloadImage</span><span class="hljs-params">(Context context, AdZone adZone)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (AdZone.Item item : adZone.getItems()) &#123;<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Glide.with(context.getApplicationContext())<br>                        .load(item.getPic())<br>                        .downloadOnly(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL)<br>                        .get();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Glide.with(getApplicationContext())<br>    .load(pic)<br>    .diskCacheStrategy(DiskCacheStrategy.ALL)<br>    .into(<span class="hljs-keyword">new</span> GlideDrawableImageViewTarget(ivWelcome) &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setResource</span><span class="hljs-params">(GlideDrawable resource)</span> </span>&#123;<br>            <span class="hljs-comment">// https://github.com/bumptech/glide/issues/275</span><br>            <span class="hljs-keyword">super</span>.setResource(resource);<br><br>            ivWelcome.setOnClickListener(v -&gt; &#123;<br>                sendAdZoneItemBroadcast(item);<br>            &#125;);<br>            ivWelcome.setVisibility(View.VISIBLE);<br><br>            <span class="hljs-comment">// set countDown</span><br>            toCountDown();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLoadFailed</span><span class="hljs-params">(Exception e, Drawable errorDrawable)</span> </span>&#123;<br>            <span class="hljs-keyword">super</span>.onLoadFailed(e, errorDrawable);<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure>
<ul>
<li><a href="https://blog.csdn.net/qq_30740239/article/details/53466426" target="_blank" rel="noopener">Glide下载图片和缓存图片</a></li>
<li><a href="https://stackoverflow.com/questions/37964187/preload-multiple-images-with-glide" target="_blank" rel="noopener">java - Preload multiple images with Glide - Stack Overflow</a></li>
</ul>
<h2 id="主要介绍Android图片OutOfMemory异常bitmap-size-exceeds-VM-budget的原因及解决方法，顺带提及Dalvik-heap-size"><a href="#主要介绍Android图片OutOfMemory异常bitmap-size-exceeds-VM-budget的原因及解决方法，顺带提及Dalvik-heap-size" class="headerlink" title="主要介绍Android图片OutOfMemory异常bitmap size exceeds VM budget的原因及解决方法，顺带提及Dalvik heap size"></a><a href="http://www.trinea.cn/android/android-image-outofmemory-bitmap-size-exceeds-vm-budget/" target="_blank" rel="noopener">主要介绍Android图片OutOfMemory异常bitmap size exceeds VM budget的原因及解决方法，顺带提及Dalvik heap size</a></h2>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中巧用官方自带View</title>
    <url>/android/view/</url>
    <content><![CDATA[<h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><h3 id="字符串资源里的变量替换"><a href="#字符串资源里的变量替换" class="headerlink" title="字符串资源里的变量替换"></a>字符串资源里的变量替换</h3><p>在 xml 中定位占位符（其中<code>1</code>表示第一个变量，多个变量递增表示）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- values/strings.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"replace_str"</span>&gt;</span>你好，%1$s：欢迎您！<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>java 代码中动态指定<code>%1$s</code>处的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String str = getString(R.string.replace_str, <span class="hljs-string">"小明"</span>);<br></code></pre></td></tr></table></figure>

<h3 id="使用-HTML-格式化文本"><a href="#使用-HTML-格式化文本" class="headerlink" title="使用 HTML 格式化文本"></a>使用 HTML 格式化文本</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">textView.setText(Html.fromHtml(HTML_STR));<br></code></pre></td></tr></table></figure>

<h3 id="跑马灯效果不生效"><a href="#跑马灯效果不生效" class="headerlink" title="跑马灯效果不生效"></a>跑马灯效果不生效</h3><p>需要在代码中设置<code>tv.setSelected(true)</code></p>
<blockquote>
<p><a href="http://stackoverflow.com/questions/3332924/textview-marquee-not-working" target="_blank" rel="noopener">TextView Marquee not working</a></p>
</blockquote>
<h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://blog.csdn.net/sdkfjksf/article/details/51317204" target="_blank" rel="noopener">TextView 实战之你真的懂我么？</a></li>
</ul>
<h2 id="TextView-设置空格"><a href="#TextView-设置空格" class="headerlink" title="TextView 设置空格"></a>TextView 设置空格</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">&amp;#<span class="hljs-number">160</span>;&amp;#<span class="hljs-number">160</span>;&amp;#<span class="hljs-number">160</span>;&amp;#<span class="hljs-number">8201</span>;&amp;#<span class="hljs-number">160</span>;&amp;#<span class="hljs-number">160</span>;&amp;#<span class="hljs-number">8201</span>;<br></code></pre></td></tr></table></figure>

<h3 id="TextView-html-渲染（注意：html-渲染的方式无法改变字体的大小，可以调整颜色、粗细、斜体等属性）"><a href="#TextView-html-渲染（注意：html-渲染的方式无法改变字体的大小，可以调整颜色、粗细、斜体等属性）" class="headerlink" title="TextView html 渲染（注意：html 渲染的方式无法改变字体的大小，可以调整颜色、粗细、斜体等属性）"></a>TextView html 渲染（注意：html 渲染的方式无法改变字体的大小，可以调整颜色、粗细、斜体等属性）</h3><pre><code><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">renderWithHtml</span><span class="hljs-params">(<span class="hljs-keyword">final</span> TextView tv, String data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<br>        tv.setText(Html.fromHtml(data, Html.FROM_HTML_MODE_COMPACT));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        tv.setText(Html.fromHtml(data));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h2 id="TextView-渲染字体"><a href="#TextView-渲染字体" class="headerlink" title="TextView 渲染字体"></a>TextView 渲染字体</h2><blockquote>
<p><a href="http://www.jianshu.com/p/2671e78089f9" target="_blank" rel="noopener">Android TextView 个别字体格式设置小结 - 简书</a></p>
</blockquote>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SpannableString msp = <span class="hljs-keyword">new</span> SpannableString(<span class="hljs-string">"字体测试字体大小一半两倍前景色背景色正常粗体斜体粗斜体下划线删除线x1x2电话邮件网站短信彩信地图X轴综合"</span>);<br><br><span class="hljs-comment">//设置字体(default,default-bold,monospace,serif,sans-serif)</span><br>msp.setSpan(<span class="hljs-keyword">new</span> TypefaceSpan(<span class="hljs-string">"monospace"</span>), <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);<br>msp.setSpan(<span class="hljs-keyword">new</span> TypefaceSpan(<span class="hljs-string">"serif"</span>), <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);<br><br><span class="hljs-comment">//设置字体大小（绝对值,单位：像素）</span><br>msp.setSpan(<span class="hljs-keyword">new</span> AbsoluteSizeSpan(<span class="hljs-number">20</span>), <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);<br>msp.setSpan(<span class="hljs-keyword">new</span> AbsoluteSizeSpan(<span class="hljs-number">20</span>, <span class="hljs-keyword">true</span>), <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="hljs-comment">//第二个参数boolean dip，如果为true，表示前面的字体大小单位为dip，否则为像素，同上。</span><br><br><span class="hljs-comment">//设置字体大小（相对值,单位：像素） 参数表示为默认字体大小的多少倍</span><br>msp.setSpan(<span class="hljs-keyword">new</span> RelativeSizeSpan(<span class="hljs-number">0.5f</span>), <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="hljs-comment">//0.5f表示默认字体大小的一半</span><br>msp.setSpan(<span class="hljs-keyword">new</span> RelativeSizeSpan(<span class="hljs-number">2.0f</span>), <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="hljs-comment">//2.0f表示默认字体大小的两倍</span><br><br><span class="hljs-comment">//设置字体前景色</span><br>msp.setSpan(<span class="hljs-keyword">new</span> ForegroundColorSpan(Color.MAGENTA), <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="hljs-comment">//设置前景色为洋红色</span><br><br><span class="hljs-comment">//设置字体背景色</span><br>msp.setSpan(<span class="hljs-keyword">new</span> BackgroundColorSpan(Color.CYAN), <span class="hljs-number">15</span>, <span class="hljs-number">18</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="hljs-comment">//设置背景色为青色</span><br><br><span class="hljs-comment">//设置字体样式正常，粗体，斜体，粗斜体</span><br>msp.setSpan(<span class="hljs-keyword">new</span> StyleSpan(android.graphics.Typeface.NORMAL), <span class="hljs-number">18</span>, <span class="hljs-number">20</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="hljs-comment">//正常</span><br>msp.setSpan(<span class="hljs-keyword">new</span> StyleSpan(android.graphics.Typeface.BOLD), <span class="hljs-number">20</span>, <span class="hljs-number">22</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="hljs-comment">//粗体</span><br>msp.setSpan(<span class="hljs-keyword">new</span> StyleSpan(android.graphics.Typeface.ITALIC), <span class="hljs-number">22</span>, <span class="hljs-number">24</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="hljs-comment">//斜体</span><br>msp.setSpan(<span class="hljs-keyword">new</span> StyleSpan(android.graphics.Typeface.BOLD_ITALIC), <span class="hljs-number">24</span>, <span class="hljs-number">27</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="hljs-comment">//粗斜体</span><br><br><span class="hljs-comment">//设置下划线</span><br>msp.setSpan(<span class="hljs-keyword">new</span> UnderlineSpan(), <span class="hljs-number">27</span>, <span class="hljs-number">30</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);<br><br><span class="hljs-comment">//设置删除线</span><br>msp.setSpan(<span class="hljs-keyword">new</span> StrikethroughSpan(), <span class="hljs-number">30</span>, <span class="hljs-number">33</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);<br><br><span class="hljs-comment">//设置上下标</span><br>msp.setSpan(<span class="hljs-keyword">new</span> SubscriptSpan(), <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="hljs-comment">//下标</span><br>msp.setSpan(<span class="hljs-keyword">new</span> SuperscriptSpan(), <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);   <span class="hljs-comment">//上标</span><br><br><span class="hljs-comment">//超级链接（需要添加setMovementMethod方法附加响应）</span><br>msp.setSpan(<span class="hljs-keyword">new</span> URLSpan(<span class="hljs-string">"tel:4155551212"</span>), <span class="hljs-number">37</span>, <span class="hljs-number">39</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="hljs-comment">//电话</span><br>msp.setSpan(<span class="hljs-keyword">new</span> URLSpan(<span class="hljs-string">"mailto:webmaster@google.com"</span>), <span class="hljs-number">39</span>, <span class="hljs-number">41</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="hljs-comment">//邮件</span><br>msp.setSpan(<span class="hljs-keyword">new</span> URLSpan(<span class="hljs-string">"http://www.baidu.com"</span>), <span class="hljs-number">41</span>, <span class="hljs-number">43</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="hljs-comment">//网络</span><br>msp.setSpan(<span class="hljs-keyword">new</span> URLSpan(<span class="hljs-string">"sms:4155551212"</span>), <span class="hljs-number">43</span>, <span class="hljs-number">45</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="hljs-comment">//短信   使用sms:或者smsto:</span><br>msp.setSpan(<span class="hljs-keyword">new</span> URLSpan(<span class="hljs-string">"mms:4155551212"</span>), <span class="hljs-number">45</span>, <span class="hljs-number">47</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="hljs-comment">//彩信   使用mms:或者mmsto:</span><br>msp.setSpan(<span class="hljs-keyword">new</span> URLSpan(<span class="hljs-string">"geo:38.899533,-77.036476"</span>), <span class="hljs-number">47</span>, <span class="hljs-number">49</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="hljs-comment">//地图</span><br><br><span class="hljs-comment">//设置字体大小（相对值,单位：像素） 参数表示为默认字体宽度的多少倍</span><br>msp.setSpan(<span class="hljs-keyword">new</span> ScaleXSpan(<span class="hljs-number">2.0f</span>), <span class="hljs-number">49</span>, <span class="hljs-number">51</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); <span class="hljs-comment">//2.0f表示默认字体宽度的两倍，即X轴方向放大为默认字体的两倍，而高度不变</span><br><span class="hljs-comment">//SpannableString对象设置给TextView</span><br>tokenTv.setText(msp);<br><span class="hljs-comment">//设置TextView可点击</span><br>tokenTv.setMovementMethod(LinkMovementMethod.getInstance());<br></code></pre></td></tr></table></figure></code></pre><h3 id="Android-开发，你遇上-Emoji-头疼吗？-掘金"><a href="#Android-开发，你遇上-Emoji-头疼吗？-掘金" class="headerlink" title="Android 开发，你遇上 Emoji 头疼吗？ - 掘金"></a><a href="https://juejin.im/post/5a45b38451882512d823076a" target="_blank" rel="noopener">Android 开发，你遇上 Emoji 头疼吗？ - 掘金</a></h3><h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h2><h3 id="交叉使用-mipmap-和-drawable"><a href="#交叉使用-mipmap-和-drawable" class="headerlink" title="交叉使用 mipmap 和 drawable"></a>交叉使用 mipmap 和 drawable</h3><p>钻牛角尖：先必须获取到之前的 Drawable，然后将这个 Drawable 进行转换，然后进行图片替换；<br>解决思路：通过覆盖的单向方式，而不用知道之前是图片资源还是 Drawable 资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ImageView ivMain = findViewById(R.id.iv_main);<br><span class="hljs-keyword">if</span>(满足条件)&#123;<br>  ivMain.setBackgroundResource(R.id.selected);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  ivMain.setBackgroundResource(R.id.unselected);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="ImageView-加载-GIF-图片"><a href="#ImageView-加载-GIF-图片" class="headerlink" title="ImageView 加载 GIF 图片"></a>ImageView 加载 GIF 图片</h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ImageView iv = (ImageView) findViewById(R.id.vp_iv);<br>Glide<br>  .with(<span class="hljs-keyword">this</span>)<br>  .load(<span class="hljs-string">"https://i.imgur.com/l9lffwf.gif"</span>)<br>  .into(iv);<br></code></pre></td></tr></table></figure>

<p>外部链接</p>
<ul>
<li><a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a></li>
</ul>
<h3 id="加载网络图片"><a href="#加载网络图片" class="headerlink" title="加载网络图片"></a>加载网络图片</h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Picasso<br>  .with(<span class="hljs-keyword">this</span>)<br>  .load(<span class="hljs-string">"https://i.imgur.com/l9lffwf.gif"</span>)<br>  .placeholder(R.mipmap.ic_launcher)<br>  .into(iv);<br></code></pre></td></tr></table></figure>

<p>外部链接</p>
<ul>
<li><a href="https://github.com/square/picasso" target="_blank" rel="noopener">Picasso</a></li>
</ul>
<hr>
<h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><h3 id="定位光标位置："><a href="#定位光标位置：" class="headerlink" title="定位光标位置："></a>定位光标位置：</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String name = <span class="hljs-string">"Lou"</span>;<br>EditText et = (EditText)findViewById(R.id.et_name);<br>et.setSelection(name.length()); <span class="hljs-comment">// 将光标至于文字最后</span><br></code></pre></td></tr></table></figure>

<h3 id="使光标颜色和文字颜色保持一致（EditText-不显示光标问题）："><a href="#使光标颜色和文字颜色保持一致（EditText-不显示光标问题）：" class="headerlink" title="使光标颜色和文字颜色保持一致（EditText 不显示光标问题）："></a>使光标颜色和文字颜色保持一致（EditText 不显示光标问题）：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有的时候发现EditText里的光标无法显示的问题，很可能是光标的颜色和背景重合了，可以通过设置光标的颜色属性来让其显示 --&gt;</span><br><span class="hljs-comment">&lt;!-- 在EditText标签中添加如下属性 --&gt;</span><br>android:textCursorDrawable="@null"<br></code></pre></td></tr></table></figure>

<h3 id="外部链接-1"><a href="#外部链接-1" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0216/858.html" target="_blank" rel="noopener">修改 EditText 的光标颜色</a></li>
<li><a href="http://stackoverflow.com/questions/7238450/set-edittext-cursor-color" target="_blank" rel="noopener">Set EditText cursor color</a></li>
</ul>
<hr>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>ListView 中不可见的元素，其对应的 view 为 null。这是容易理解的，性能优化。<br>（在 updateItem 的时候要做两方面的处理，即数据(updateItemData)和视图(updateItemView)）</p>
<h3 id="添加空白"><a href="#添加空白" class="headerlink" title="添加空白"></a>添加空白</h3><ul>
<li>在 ListView 的顶部和底部添加空白（见外部链接）</li>
<li>在 Item 之间添加空白（通过 Divider 的方式）</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/alarm_bg"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ListView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/lv_main"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">android:paddingTop</span>=<span class="hljs-string">"16dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:paddingBottom</span>=<span class="hljs-string">"16dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:clipToPadding</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">android:scrollbars</span>=<span class="hljs-string">"none"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:divider</span>=<span class="hljs-string">"@android:color/transparent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:dividerHeight</span>=<span class="hljs-string">"10dp"</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="外部链接-2"><a href="#外部链接-2" class="headerlink" title="外部链接"></a>外部链接</h4><ul>
<li><a href="http://stackoverflow.com/questions/6288167/add-margin-above-top-listview-item-and-below-last-in-android" target="_blank" rel="noopener">Add margin above top ListView item (and below last) in Android</a></li>
<li><a href="http://stackoverflow.com/questions/4984313/spacing-between-listview-items-android" target="_blank" rel="noopener">Spacing between listView Items Android</a></li>
</ul>
<hr>
<h2 id="修改-DatePicker-日期选择器默认样式（同理适用于-TimePicker）"><a href="#修改-DatePicker-日期选择器默认样式（同理适用于-TimePicker）" class="headerlink" title="修改 DatePicker 日期选择器默认样式（同理适用于 TimePicker）"></a>修改 DatePicker 日期选择器默认样式（同理适用于 TimePicker）</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://github.com/lyloou/img/raw/develop/z/date_picker.jpg" alt="DatePicker"></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用Holo样式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">DatePicker</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/dialog_personal_birth_dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">"@android:style/Widget.Holo.DatePicker"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span>/&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String mBirth = <span class="hljs-string">"1981.12.11"</span>;<br><span class="hljs-keyword">final</span> DatePicker dp = dialogBirth.getView(R.id.dialog_personal_birth_dp);<br>dp.setCalendarViewShown(<span class="hljs-keyword">false</span>); <span class="hljs-comment">// 不要显示Calendar视图</span><br>Uview.changeTimePickerSepColor(dp, Color.DKGRAY); <span class="hljs-comment">// 修改分割线样式</span><br>String[] birth = mBirth.split(<span class="hljs-string">"\\."</span>);<br>dp.init(Integer.parseInt(birth[<span class="hljs-number">0</span>]),<br>        Integer.parseInt(birth[<span class="hljs-number">1</span>]) - <span class="hljs-number">1</span>,<br>        Integer.parseInt(birth[<span class="hljs-number">2</span>]),<br>        <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//: Uview.java</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">changeTimePickerSepColor</span><span class="hljs-params">(ViewGroup group, <span class="hljs-keyword">int</span> color)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (NumberPicker np : getNumberPickers(group)) &#123;<br>        changeNumberPickerSepColor(np, color);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;NumberPicker&gt; <span class="hljs-title">getNumberPickers</span><span class="hljs-params">(ViewGroup group)</span> </span>&#123;<br>    List&lt;NumberPicker&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;NumberPicker&gt;();<br>    <span class="hljs-keyword">if</span> (group == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> lists;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; group.getChildCount(); i++) &#123;<br>        View v = group.getChildAt(i);<br>        <span class="hljs-keyword">if</span> (v <span class="hljs-keyword">instanceof</span> NumberPicker) &#123;<br>            lists.add((NumberPicker) v);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v <span class="hljs-keyword">instanceof</span> LinearLayout) &#123;<br>            List&lt;NumberPicker&gt; ls = getNumberPickers((ViewGroup) v);<br>            <span class="hljs-keyword">if</span> (ls.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> ls;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> lists;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">changeNumberPickerSepColor</span><span class="hljs-params">(NumberPicker np, <span class="hljs-keyword">int</span> color)</span> </span>&#123;<br>    Field[] pickerFields = NumberPicker<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getDeclaredFields</span>()</span>;<br>    <span class="hljs-keyword">for</span> (Field f : pickerFields) &#123;<br>        <span class="hljs-keyword">if</span> (f.getName().equals(<span class="hljs-string">"mSelectionDivider"</span>)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                f.setAccessible(<span class="hljs-keyword">true</span>);<br>                f.set(np, <span class="hljs-keyword">new</span> ColorDrawable(color));<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 分割线粗细</span><br>    <span class="hljs-keyword">for</span> (Field f : pickerFields) &#123;<br>        <span class="hljs-keyword">if</span> (f.getName().equals(<span class="hljs-string">"mSelectionDividerHeight"</span>)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                f.setAccessible(<span class="hljs-keyword">true</span>);<br>                f.set(np, <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="给-imageview-设置-tag-值来传值"><a href="#给-imageview-设置-tag-值来传值" class="headerlink" title="给 imageview 设置 tag 值来传值"></a>给 imageview 设置 tag 值来传值</h2><p>ivSetting.setTag(room.getId());<br>这样在进入设置界面时，可以通过 getTag 的方式获取到 room 的 id。</p>
<blockquote>
<p><a href="http://www.vogella.com/tutorials/Retrofit/article.html#create-activity" target="_blank" rel="noopener">http://www.vogella.com/tutorials/Retrofit/article.html#create-activity</a></p>
</blockquote>
<h2 id="主题中使用-tint-会导致-imageview-显示空白"><a href="#主题中使用-tint-会导致-imageview-显示空白" class="headerlink" title="主题中使用 tint 会导致 imageview 显示空白"></a>主题中使用 tint 会导致 imageview 显示空白</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:tint"</span>&gt;</span>#ffffff<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Toolbar相关</title>
    <url>/android/view-toolbar/</url>
    <content><![CDATA[<h2 id="设置状态栏透明，并保持住-toolbar-在status之下（支持-API-19-以上）："><a href="#设置状态栏透明，并保持住-toolbar-在status之下（支持-API-19-以上）：" class="headerlink" title="设置状态栏透明，并保持住 toolbar 在status之下（支持 API 19 以上）："></a>设置状态栏透明，并保持住 toolbar 在status之下（支持 API 19 以上）：</h2><ol>
<li>添加到 theme： <code>&lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;true&lt;/item&gt;</code></li>
<li>使 toolbar 的 marginTop 正好等于 statusHeight： <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setToolbarMarginTop</span><span class="hljs-params">(Activity activity, Toolbar toolbar)</span></span>&#123;<br>   ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) toolbar.getLayoutParams();<br>   params.topMargin = getStatusBarHeight(activity);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getStatusBarHeight</span><span class="hljs-params">(Activity activity)</span></span>&#123;<br>   <span class="hljs-keyword">int</span> resourceId = activity.getResources().getIdentifier(<span class="hljs-string">"status_bar_height"</span>, <span class="hljs-string">"dimen"</span>, <span class="hljs-string">"android"</span>);<br>   <span class="hljs-keyword">int</span> statusBarHeight = activity.getResources().getDimensionPixelSize(resourceId);<br>   <span class="hljs-keyword">return</span> statusBarHeight;<br>&#125;<br></code></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>加密</title>
    <url>/android/%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><ul>
<li><a href="https://www.zhihu.com/question/35136485" target="_blank" rel="noopener">android开发如何保障本地加密密钥的安全？ - 知乎</a></li>
<li><a href="http://leehong2005.com/2016/08/08/android-so-signature-check/" target="_blank" rel="noopener">Android so库防客户端破解的解决方案</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android启动屏和引导页</title>
    <url>/android/%E5%90%AF%E5%8A%A8%E5%B1%8F%E5%92%8C%E5%BC%95%E5%AF%BC%E9%A1%B5/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.jianshu.com/p/2368218b60b6" target="_blank" rel="noopener">Android技巧1：启动屏+功能引导页 - 简书</a></li>
<li><a href="https://github.com/bingoogolapple/BGABanner-Android" target="_blank" rel="noopener">BGABanner-Android</a></li>
</ul>
<h2 id="启动app的时候闪黑屏？"><a href="#启动app的时候闪黑屏？" class="headerlink" title="启动app的时候闪黑屏？"></a>启动app的时候闪黑屏？</h2><p>可以用自己app的logo来代替黑屏，且看如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- res/drawable/welcome_bg --&gt;</span><br><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">layer-list</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">color</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">"@color/colorPrimary"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bitmap</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@mipmap/screen"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:tileMode</span>=<span class="hljs-string">"disabled"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">layer-list</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- add below code to your style.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"WelcomeAppTheme"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"@android:style/Theme.DeviceDefault.NoActionBar.Fullscreen"</span>&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowBackground"</span>&gt;</span>@drawable/welcome_bg<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="预加载主内容"><a href="#预加载主内容" class="headerlink" title="预加载主内容"></a>预加载主内容</h2><p>为了在展示欢迎页的时候提前加载，我们调换下MainActivity和WelcomeActivity顺序</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- add below code to your AndroidMainfest.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">".MainActivity"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:configChanges</span>=<span class="hljs-string">"orientation|keyboardHidden|keyboard|screenSize|locale"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:launchMode</span>=<span class="hljs-string">"singleTop"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">"portrait"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:theme</span>=<span class="hljs-string">"@style/AppTheme"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span> <span class="hljs-attr">android:label</span>=<span class="hljs-string">"@string/app_name"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.action.MAIN"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.category.LAUNCHER"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">".WelcomeActivity"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">"true"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">"portrait"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:theme</span>=<span class="hljs-string">"@style/WelcomeAppTheme"</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>    toNext();<br><br>    initData();<br>    initView();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">toNext</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (MyApplication.sSkipWelcome) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    MyApplication.sSkipWelcome = <span class="hljs-keyword">true</span>;<br><br>    Intent intent = <span class="hljs-keyword">new</span> Intent(<span class="hljs-keyword">this</span>, WelcomeActivity<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>    startActivity(intent);<br>    overridePendingTransition(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 禁用动画</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>可以参考： <a href="https://github.com/lyloou/lou/blob/demo/test/src/main/AndroidManifest.xml" target="_blank" rel="noopener">https://github.com/lyloou/lou/blob/demo/test/src/main/AndroidManifest.xml</a></p>
<h2 id="启动已经存在的activity栈"><a href="#启动已经存在的activity栈" class="headerlink" title="启动已经存在的activity栈"></a>启动已经存在的<code>activity</code>栈</h2><ul>
<li><a href="https://stackoverflow.com/questions/15359124/resume-the-activity-instead-of-starting-if-already-exists-in-back-stack" target="_blank" rel="noopener">android - Resume the Activity instead of Starting if already exists in back stack - Stack Overflow</a><figure class="highlight smali"><table><tr><td class="code"><pre><code class="hljs smali">You can<span class="hljs-built_in"> add </span>this two lines<span class="hljs-built_in"> and </span>try:<br><br>    intent.addFlags(Intent.F<span class="hljs-class">LAG_ACTIVITY_CLEAR_TOP);</span><br>    intent.addFlags(Intent.F<span class="hljs-class">LAG_ACTIVITY_NEW_TASK);</span><br><br>Write this in your manifest file inside Activity<br><br>    &lt;activity<br>        android:name=<span class="hljs-string">".SettingsActivity"</span><br>        android:launchMode=<span class="hljs-string">"singleInstance"</span><br>        android:screenOrientation=<span class="hljs-string">"portrait"</span> &gt;<br>    &lt;/activity&gt;<br><br><span class="hljs-string">"singleTask"</span><span class="hljs-built_in"> and </span><span class="hljs-string">"singleInstance"</span> activities can only begin a task. They are always at the root of the activity stack. Moreover, the device can hold only one<span class="hljs-built_in"> instance </span>of the activity at a time — only one such task.<br><br>You can use SingleTask<span class="hljs-built_in"> or </span>SingleInstance<br><br><span class="hljs-string">"singleTask"</span> - The<span class="hljs-keyword"> system</span> creates the activity at the root of a<span class="hljs-built_in"> new </span>task<span class="hljs-built_in"> and </span>routes the intent to it. However,<span class="hljs-built_in"> if </span>an<span class="hljs-built_in"> instance </span>of the activity already exists, the<span class="hljs-keyword"> system</span> routes the intent to existing<span class="hljs-built_in"> instance </span>through a call to its onNewIntent() method, rather than creating a<span class="hljs-built_in"> new </span>one.<br><br><span class="hljs-string">"singleInstance"</span> - Same as <span class="hljs-string">"singleTask"</span>, except that the<span class="hljs-keyword"> system</span> doesn't launch any other activities into the task holding the instance. The activity is always the single<span class="hljs-built_in"> and </span>only member of its task.<br><br>Refer this link http://developer.android.com/guide/topics/manifest/activity-element.html<br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>可以参考： <a href="https://github.com/lyloou/lou/blob/demo/test/src/main/java/com/lyloou/test/WelcomeActivity.java" target="_blank" rel="noopener">https://github.com/lyloou/lou/blob/demo/test/src/main/java/com/lyloou/test/WelcomeActivity.java</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>《第一行代码》读书笔记</title>
    <url>/android/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>主要内容：<br>对书上的重点和难点内容进行总结和回顾；</p>
<p>任务列表：</p>
<ul>
<li><input checked disabled type="checkbox"> 优化文档结构(2016.05.26)</li>
</ul>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><blockquote>
<p>每一次学习 ， 都会有新的收获；<br>我相信我看到的奇迹，没有是平白无故产生的，它们是源于环环相扣的逻辑巧妙组合而成。</p>
</blockquote>
<h3 id="隐藏标题栏（p35）"><a href="#隐藏标题栏（p35）" class="headerlink" title="隐藏标题栏（p35）"></a>隐藏标题栏（p35）</h3><p>在调用 setContentView（）之前，写上下面代码：<br><code>requestWindowFeature(Window.FEATURE_NO_TITLE);</code></p>
<p>========== 更新 2016.05.23 10:42:53 =============<br>也可以通过配置主题的方式应用到所有 Activity 中：<br>在<code>AppTheme</code>中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowNoTitle"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowBackground"</span>&gt;</span>@android:color/white<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="隐式-Intent（p44）"><a href="#隐式-Intent（p44）" class="headerlink" title="隐式 Intent（p44）"></a>隐式 Intent（p44）</h3><p>隐式里的 category 和 data 就像是更精确的<code>过滤器</code></p>
<h3 id="保存临时数据-（p67）"><a href="#保存临时数据-（p67）" class="headerlink" title="保存临时数据 （p67）"></a>保存临时数据 （p67）</h3><p>当启动新的活动时，当前的活动数据如果不加以保存，那么就会有可能丢失掉数据（系统回收）。<br>这样的用户体验不好，可以通过在<code>onSaveInstanceState()</code>方法中保存数据来解决这个问题。（重要的数据还是在 onPause 中保存的好，在 onPause 中不要进行耗时操作）<br>相应的，在<code>onCreate(Bundle)</code>中进行恢复操作。</p>
<h3 id="活动启动模式（p68）"><a href="#活动启动模式（p68）" class="headerlink" title="活动启动模式（p68）"></a>活动启动模式（p68）</h3><p>使用方式：在 Manifest.xml 的对应 activity 中添加<code>android:launchMode=&quot;standard|singleTop|singleTask|singleInstance&quot;</code><br>参数说明：</p>
<ol>
<li>standard 模式：无论返回栈中是否存在该活动，每次启动都会创建一个新的实例（例如，自己启动自己，也会创建多个实例出来）</li>
<li>singleTop 模式：如果返回栈的栈顶是要启动的活动，则直接使用它，而不是再创建一个新的活动实例出来。</li>
<li>singleTask 模式：使该活动在整个应用程序的上下文中只存在一个实例，如果不在栈顶，则将该活动上面的所有活动出栈，如果没有该活动，则创建一个活动实例。</li>
<li>singleInstance 模式：指定为该模式的活动就启用新的返回栈来管理这个活动。（还不是很了解）</li>
</ol>
<h3 id="技巧："><a href="#技巧：" class="headerlink" title="技巧："></a>技巧：</h3><h4 id="进入某个界面在日志中打印对应的-Activity-的名称（方便定位）-（p77）："><a href="#进入某个界面在日志中打印对应的-Activity-的名称（方便定位）-（p77）：" class="headerlink" title="进入某个界面在日志中打印对应的 Activity 的名称（方便定位） （p77）："></a>进入某个界面在日志中打印对应的 Activity 的名称（方便定位） （p77）：</h4><p>原理： 简单来说是通过 java 的重写机制 。<br>具体步骤：</p>
<ol>
<li>创建一个基类 Activity，例如<code>BaseActivity</code>；</li>
<li>在基类 Activity 的 onCreate()方法中，添加代码<code>Log.d(&quot;BaseActivity&quot;, getClass().getSimpleName())</code></li>
</ol>
<h4 id="随时随地退出程序（p78）："><a href="#随时随地退出程序（p78）：" class="headerlink" title="随时随地退出程序（p78）："></a>随时随地退出程序（p78）：</h4><p>利用 List 作为保存 Activity 的容器：一旦有 Activity 被创建，就加入到容器中；对应的，一旦 Activity 被销毁，就从容器中移除 。在想要退出的地方，逐个结束容器中的 Activity. <code>activity.finish()</code><br>参考网址：<a href="http://book.51cto.com/art/201407/446022.htm" target="_blank" rel="noopener"> 2.6.2 　随时随地退出程序 </a></p>
<h4 id="启动活动（p80）："><a href="#启动活动（p80）：" class="headerlink" title="启动活动（p80）："></a>启动活动（p80）：</h4><p>给 Activity 添加一个封装优美的，静态的，清晰的启动方法。<br>步骤：</p>
<ol>
<li>在 Activity 中定义一个静态的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String mArg0;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object mArg1;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startActivity</span><span class="hljs-params">(Activity context, String arg0, Object arg1)</span></span>&#123;<br>     mArg0 = arg0;<br>     mArg1 = arg1;<br>     context.startActivity( <span class="hljs-keyword">this</span>.getClass() );<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>在需要启动 SecondActivity 的地方调用：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SecondActivity.startActivity(mContext, arg0, arg1);<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><blockquote>
<p>从整体到局部，从构架到细节。</p>
</blockquote>
<h3 id="宽度，高度（p84）"><a href="#宽度，高度（p84）" class="headerlink" title="宽度，高度（p84）"></a>宽度，高度（p84）</h3><p>match_parent：表示让当前控件的大小和父控件的大小一样<br>fill_parent：match_parent 的别名<br>wrap_content：使当前控件的大小正好包含住控件的内容（文字，图片 ） 等。</p>
<h3 id="控件可见性（p98）"><a href="#控件可见性（p98）" class="headerlink" title="控件可见性（p98）"></a>控件可见性（p98）</h3><h4 id="在-xml-布局中控制："><a href="#在-xml-布局中控制：" class="headerlink" title="在 xml 布局中控制："></a>在 xml 布局中控制：</h4><p>为控件添加属性（所有控件均支持），<code>android:visibility=&quot;visible|invisible|gone&quot;</code><br>visible 或者不写：可见，占空间<br>invisible：不可见，占空间（透明状态）<br>gone：不可见，不占空间</p>
<h4 id="Java-代码中控制："><a href="#Java-代码中控制：" class="headerlink" title="Java 代码中控制："></a>Java 代码中控制：</h4><p>动态控制可见性：<code>View.setVisibility(View.VISIBLE|View.INVISIBLE|View.GONE)</code><br>效果同 xml<br>另外，可以通过<code>getVisibility()</code>方法获取当前的控件状态，根据比较的结果，可以做一些特定的操作；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">View view = findViewById(R.id.tv_main);<br><span class="hljs-keyword">if</span>(view.getVisibility() == View.GONE)&#123;<br>    <span class="hljs-comment">// TODO 如果视图是隐藏的，do：</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(view.getVisibility() == View.VISIBLE) &#123;<br>    <span class="hljs-comment">// TODO 如果视图是显示的， do：</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="LinearLayout-重要属性说明（p105）"><a href="#LinearLayout-重要属性说明（p105）" class="headerlink" title="LinearLayout 重要属性说明（p105）"></a>LinearLayout 重要属性说明（p105）</h3><ul>
<li>android:orientation=”vertical|horizontal”；控制 LinearLayout 的排列方向 （该属性用在 LinearLayout 本身上）</li>
<li>android:layout_gravity=”left|right|top|bottom|center_vertical|center_horizontal”；控件在父控件中的对齐方式。（该属性用在 LinearLayout 的子控件中）</li>
<li>android:layout_weight=”1”；通过比例的方式控制控件的大小。 （该属性用在 LinearLayout 的子控件中，剩余空间按比例分配。适配方案还得靠它）</li>
</ul>
<p><strong>易混淆的属性（p107）</strong><br><code>android:layout_gravity</code>和<code>android:gravity</code>属性区别：</p>
<ol>
<li><code>android:layout_gravity</code>属性：用于指定该控件在父控件中的对齐方式（可选值：<code>top|bottom|left|right|center|center_vertical|center_horizontal</code> ）</li>
<li><code>android:gravity</code>属性：用于指定控件中的内容在控件中的对齐方式（ 可选值：<code>top|bottom|left|right|center|center_vertical|center_horizontal</code> ）</li>
<li>注意：<span style="color:red">layout_gravity，当父控件 LinearLayout 排列方向是 horizontal 时，<br>只有垂直方向的对齐方式才会生效（bottom, top, center_vertical）；<br>当父控件 LinearLayout 排列方向是 vertical 时，只有水平方向的对齐方式才会生效（left，right，center_horizontal）</span></li>
</ol>
<h3 id="RelaviteLayout-布局"><a href="#RelaviteLayout-布局" class="headerlink" title="RelaviteLayout 布局"></a>RelaviteLayout 布局</h3><p><em>相对于父布局进行定位：</em></p>
<ul>
<li>android:layout_alignParentTop=”true”</li>
<li>android:layout_alignParentBottom=”true”</li>
<li>android:layout_alignParentLeft=”true”</li>
<li>android:layout_alignParentRight=”true”</li>
<li>android:layout_centerInParent=”true”</li>
</ul>
<p><em>相对于其他控件进行布局：</em></p>
<ul>
<li>android:layout_above=”@id/view3”</li>
<li>android:layout_below=”@id/view3”</li>
<li>android:layout_toRightOf=”@id/view3”</li>
<li>android:layout_toLeftOf=”@id/view3”</li>
</ul>
<p><em>相对于其他控件的边缘进行对齐显示：</em></p>
<ul>
<li>android:layout_alignRight= “@id/view3”</li>
<li>android:layout_alignLeft= “@id/view3”</li>
<li>android:layout_alignTop= “@id/view3”</li>
<li>android:layout_alignBottom= “@id/view3”</li>
</ul>
<p><em>其他：</em></p>
<ul>
<li>android:layout_centerVertical=”true”</li>
<li>android:layout_centerHorizontal=”true”</li>
</ul>
<p><strong>注意 1</strong>：通过<code>@id/tv_view</code>引用的控件一定要先定义；而通过<code>@+id/tv_view</code>引用的控件也可以出现在后面。<br><strong>注意 2</strong>：可以在一个控件中使用上面的一个或多个。例如，相对于父布局的“左上”布局，<br>就需要填写两个属性<code>android:layout_alignParentTop=&quot;true&quot;;android:layout_alignParentLeft=&quot;true&quot;</code>。</p>
<h3 id="TableLayout-布局"><a href="#TableLayout-布局" class="headerlink" title="TableLayout 布局"></a>TableLayout 布局</h3><ul>
<li>TableLayout 中的每一个 TableRow 都表示表格中的一行，每一个子控件表示一列。</li>
<li>TableRow 中的控件不可以指定宽度。</li>
<li>在 TableLayout 中添加属性：<ul>
<li><code>android:stretchColumns=&quot;1&quot;</code>，使指定的那一列拉伸，以自动适应屏幕的宽度。（0 表示第一列，1 表示第二列）</li>
<li><code>android:shrinkColumns=&quot;0&quot;</code>，收缩指定的列；</li>
<li><code>android:collapseColumns=&quot;0&quot;</code>，隐藏指定的列；</li>
</ul>
</li>
</ul>
<h3 id="其他布局"><a href="#其他布局" class="headerlink" title="其他布局"></a>其他布局</h3><ul>
<li>FrameLayout 布局<br>（所有控件默认摆放在左上角；多个子控件情况下下面的控件覆盖上面的控件；可通过 gravity 和 layout_gravity 来控制子控件的对齐方式）</li>
<li>AbsoluteLayout 布局（不推荐使用）</li>
</ul>
<h3 id="ListView-控件（p127）"><a href="#ListView-控件（p127）" class="headerlink" title="ListView 控件（p127）"></a>ListView 控件（p127）</h3><p><strong>需要的元素：</strong></p>
<ol>
<li>数据源</li>
<li>单个 item 的 layout 布局</li>
<li>适配器（简单的名称显示可继承自 ArrayAdapter，更丰富的布局可继承自 BaseAdapter）</li>
</ol>
<p>*<em>优化 *</em></p>
<ol>
<li>利用 android 自带的缓存机制，convertView；</li>
<li>使用 ViewHolder 和 Tag；每一个 View 都可以存储一个 Tag 对象（看源码 mTag），对控件对应的实体进行缓存。当需要实体的时候，从 tag 中获取；</li>
<li>推荐阅读：<a href="http://blog.csdn.net/ly1414725328/article/details/51337043" target="_blank" rel="noopener">【Android】通用系列 —— 用简单通用的方式操作 ListView</a></li>
</ol>
<p><strong>其他补充：</strong></p>
<ul>
<li>为 listview 绑定适配器：lv.setAdapter(mAdapter);</li>
<li>数据发生变化，要及时更新界面：mAdapter.notifyDataSetChanged();</li>
<li>定位到某一项（即在屏幕上显示这一项）：lv.setSelection(num);</li>
<li>点击事件：setOnItemClickListener(OnItemClickListener ocl);</li>
<li>给 ListView 项的分割线设置为透明色：android:divider=”@null”</li>
<li>不显示滚动条：<code>android:scrollbars=&quot;none&quot;</code></li>
<li>平滑滚动到指定条目：<code>mLv.smoothScrollToPosition(pItem);</code></li>
<li>设置 ListView 不可用：<code>mLv.setEnable(false)</code></li>
<li>设置 listView 不可滑动（可以通过拦截触摸事件，和<code>mLv.setEnable(false)</code>达到的效果不同）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setListViewCannotSlide</span><span class="hljs-params">(ListView lv)</span> </span>&#123;<br>    lv.setOnTouchListener(<span class="hljs-keyword">new</span> OnTouchListener() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onTouch</span><span class="hljs-params">(View v, MotionEvent event)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> event.getAction() == MotionEvent.ACTION_MOVE;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>点击效果：设置 listSelector 和设置 item 的 layout 两种方式。(最好不要混用，推荐使用第二种方式)</li>
<li>取消点击效果：<code>andrdoi:listSelector=&quot;@android:color/transparent&quot;</code></li>
<li>动态取消点击效果：<code>mLv.setSelector(new ColorDrawable(Color.TRANSPARENT));</code></li>
<li>动态设置点击效果：<code>mLv.setSelector(R.drawable.item_selector);</code></li>
</ul>
<p><strong>外部链接</strong></p>
<ul>
<li><a href="http://www.cnblogs.com/loulijun/archive/2012/04/15/2450312.html" target="_blank" rel="noopener">Android 美工坊–listview 更改选中时 item 背景色</a></li>
<li><a href="http://stackoverflow.com/questions/22422196/android-listview-listselector-not-working" target="_blank" rel="noopener">Android ListView listSelector not working</a></li>
</ul>
<hr>
<h2 id="第四章-Fragment-碎片"><a href="#第四章-Fragment-碎片" class="headerlink" title="第四章 Fragment 碎片"></a>第四章 Fragment 碎片</h2><blockquote>
<p>第一遍：不知道自己不知道。<br>第二遍：知道自己不知道，或不知道自己知道。<br>第三遍：知道自己知道。</p>
</blockquote>
<p>简而言之，碎片（Fragment）是一种可以嵌入在活动当中的 UI 片段，它能让程序更加合理和充分地利用大屏幕空间。<br><strong>学习资料：</strong></p>
<ul>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/8881711" target="_blank" rel="noopener">Android Fragment 完全解析，关于碎片你所需知道的一切</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/37970961" target="_blank" rel="noopener">Android Fragment 真正的完全解析（上）</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/37992017" target="_blank" rel="noopener"> [Android Fragment 真正的完全解析（下）] </a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/42628537" target="_blank" rel="noopener"> Android Fragment 你应该知道的一切 </a></li>
</ul>
<p><strong>要点难点：</strong></p>
<ol>
<li>通信–数据传递。</li>
<li>抽象成一个公用的类。</li>
<li>回退栈（remove，add，hide，show 等方法的区别）</li>
<li>屏幕适配：限定符；</li>
<li>双页单页模式（p182）</li>
</ol>
<hr>
<h2 id="第五章-广播机制"><a href="#第五章-广播机制" class="headerlink" title="第五章 广播机制"></a>第五章 广播机制</h2><h3 id="注册广播："><a href="#注册广播：" class="headerlink" title="注册广播："></a>注册广播：</h3><h4 id="1-动态注册-（p190）"><a href="#1-动态注册-（p190）" class="headerlink" title="1. 动态注册 （p190）"></a>1. 动态注册 （p190）</h4><p>新建一个类，继承 BroadcastReceiver，重写父类的 onReceive 方法。<br>自定义的 MainActivity 中通过 Context 的<code>registerReceiver（BroadCastReceiver bc，IntentFilter if）</code>方法来注册 。<br>说明：其中参数 bc 是刚才新建类的实例，参数 if 是广播发送过来的 action 值包装成 IntentFilter 对象。</p>
<p><strong>注意：</strong> 用完之后需要销毁，在 activity 的 onDestroy()方法中调用 unregisterReceiver()方法。<br><strong>注意：</strong> 当访问的内容涉及到系统的关键性信息，那么需要在配置文件中配置相应的权限 permission （ <a href="http://developer.android.com/reference/android/Manifest.permission.html）。" target="_blank" rel="noopener">http://developer.android.com/reference/android/Manifest.permission.html）。</a><br><strong>注意：</strong> 应用程序发送的广播是可以被其他应用程序接收到的。跨进程通信。</p>
<h4 id="2-静态注册"><a href="#2-静态注册" class="headerlink" title="2. 静态注册"></a>2. 静态注册</h4><ul>
<li>创建一个集成自 BroadCast 的类，并重写 onReceive（）方法</li>
<li>类似于 activity 的注册，使用<receiver>标签，使用 android:name 来指定刚才创建的广播接收器（即实现了 BroadCast 的类的实例）</receiver></li>
<li>在<intent-filter>标签中添加想要接收的广播。</intent-filter></li>
</ul>
<p><strong>另外：</strong> 使用静态注册可以达到开机启动的目的。静态注册在程序未启动的时候也可以接收广播。<br><strong>注意：</strong> 监听某些广播也是需要声明权限的。</p>
<p><strong>注意：</strong> 不要在 onReceive()中添加过多的逻辑或者任何的耗时操作，因为在广播接收器中是不允许开启线程的（如果运行时间较长，程序会报错）。<br><strong>应用场合：</strong> 启动其他组件，例如创建一条状态栏通知，或启动一个服务等。</p>
<h3 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h3><p><strong>标准广播</strong><br>例如在 MainActivity 中点击按钮时发送广播：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Intent intent = <span class="hljs-keyword">new</span> Intent(<span class="hljs-string">"com.lyloou.broadcasttest.MY_BROADCAST"</span>);<span class="hljs-comment">//还可以绑定一些数据到Intent中供接收者使用；</span><br>sendBroadcast(intent);<br></code></pre></td></tr></table></figure>

<p><strong>有序广播</strong></p>
<ul>
<li>区别于标准广播的<code>sendBroadcast(Intent intent)</code>, 有序广播是<code>sendOrderedBroadcast(Intent intent, String receiverPermission )</code>。 (可以参考 Context 的 API 文档看更详细内容)</li>
<li>广播接收器的先后顺序，是通过在注册的时候设定的。例如，<code>&lt;intent-filter android:priority=&quot;100&quot;&gt;</code>。</li>
<li>有序广播是可以截断的。在 onRecevie（）中调用<code>abortBroadcast();</code>方法将广播截断，后续的接收器就无法接收到该条广播。<br>（<code>only works with broadcasts sent through Context.sendOrderedBroadcast.</code> ）</li>
</ul>
<h3 id="本地广播（p202）"><a href="#本地广播（p202）" class="headerlink" title="本地广播（p202）"></a>本地广播（p202）</h3><ul>
<li>区别于一般的广播，本地广播只允许本应用程序接收本应用程序发送的广播，解决了广播的安全性问题。<br>其他程序的广播无法发送到我们程序的内部，更安全。比全局广播更高效。</li>
<li>与一般的广播的动态注册方式类似。（一般广播，这里指的是全局广播）</li>
<li>区别于一般广播的接收方式<code>registerReceiver()</code>，本地广播使用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">LocalBroadcastManager  localBroadCastManager =  LocalBroadcastManager.getInstance(Context c);<br>localBroadCastManager.registerReceiver(BroadcastReceiver br, Intent i);<br></code></pre></td></tr></table></figure>

<ul>
<li>区别于一般广播的发送方式<code>sendBroadcast(intent)</code>,本地广播使用：<code>localBroadCastManager.sendBroadcast(intent)</code></li>
<li>注意：也需要 unregister 进行注销处理。</li>
<li>注意：本地广播无法通过静态方式注册接收, 静态注册在程序未启动的时候也可以接收广播，而本地广播肯定是在启动程序之后发送，所以不需要静态注册 。</li>
<li>注意：不可以混用系统广播和本地广播，（例如通过 localBroadCastManager.registerReceiver 来注册蓝牙广播，是不对的，<br>如果非得这样做，onReceiver 中将无法接收到蓝牙开启和关闭的广播）</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在广播接收器写一个弹框（p210）。<br>从广播接收器中启动活动需要注意的内容（p211）：给 Intent 加入 FLAG_ACTIVITY_NEW_TASK 标识。</p>
<hr>
<h2 id="第六章-数据存储"><a href="#第六章-数据存储" class="headerlink" title="第六章 数据存储"></a>第六章 数据存储</h2><h3 id="持久化的方式"><a href="#持久化的方式" class="headerlink" title="持久化的方式"></a>持久化的方式</h3><ul>
<li>文件存储：存储简单的文本数据和二进制数据。</li>
<li>SharePreference 存储 ：存储的是键值对。</li>
<li>数据库–SQLITE： 存储复杂关系型的数据。</li>
</ul>
<h3 id="文件存储（p221）"><a href="#文件存储（p221）" class="headerlink" title="文件存储（p221）"></a>文件存储（p221）</h3><p>核心方法：Context 提供的 openFileInput()和 openFileOutput()方法；<br>注意：不适用于存储复杂类型的数据。</p>
<h3 id="SharePreference-存储（p228）"><a href="#SharePreference-存储（p228）" class="headerlink" title="SharePreference 存储（p228）"></a>SharePreference 存储（p228）</h3><ul>
<li><p>使用<strong>键值对</strong>的方式存储。</p>
</li>
<li><p>使用 xml 格式来对数据进行管理。</p>
</li>
<li><p>获取 SharePreference（下面三种方法不同之处在于参数和存储地址）</p>
<ol>
<li>Context 类中的 getSharedPreference（String filename, MODE_PRIVATE|MODE_MULTI_PROCESS），<br>在系统中的具体表现：<code>/data/data/&lt;package name&gt;/shared_prefs/filename参数名</code></li>
<li>Activity 类中的 getPreference（MODE_PRIVATE|MODE_MULTI_PROCESS），文件名以当前活动的类名起名。</li>
<li>PreferenceManager 类中的 getDefaultSharedPreference（ MODE_PRIVATE|MODE_MULTI_PROCESS ），文件名以包名起名。</li>
</ol>
</li>
<li><p>保存数据步骤：</p>
<ol>
<li>通过获取到的 SharePreference 对象实例 sp，引用其 edit（）方法，<code>SharedPreferences.Editor editor = sp.edit();</code></li>
<li>editor.putInt(“age”,18);</li>
<li>editor.putString(“name”,”Bob”);</li>
<li>…</li>
<li>editor.commit();</li>
</ol>
</li>
<li><p>获取数据步骤：</p>
<ol>
<li>同样首先获取到 SharePreference 对象实例 sp；</li>
<li>int age = sp.getInt(“age”, 0);</li>
<li>String name = sp.getString(“name”, “”);</li>
<li>…</li>
<li>获取到数据后的其他操作。</li>
</ol>
</li>
</ul>
<h3 id="数据库（SQLITE-p238）"><a href="#数据库（SQLITE-p238）" class="headerlink" title="数据库（SQLITE-p238）"></a>数据库（SQLITE-p238）</h3><ul>
<li>创建一个 继承自 SQLiteOpenHelper 类的帮助类，重写 onCreate()和 onUpgrate()方法，在这两个方法中实现创建表和升级数据库的逻辑。</li>
<li>通过帮助类获取实例：getReadableDatabase()和 getWritableDatabase()方法获取实例。两者的区别是前者在磁盘满的时候以只读方式打开数据库，而后者直接抛出异常。</li>
<li>通过 db.execSQL（）可以直接执行数据库语句。</li>
<li>事务保证数据安全：进行读写操作，要使用事务（读数据就不需要事务了）；</li>
<li>数据库创建后，将不再重新创建，这意味着在客户端，<code>onCreate()</code>方法只执行一次。 除非卸载掉重新安装，<br>如果是覆盖安装的话，修改了了数据库结构，就要通过<code>onUpgrade()</code>方法来控制了。</li>
</ul>
<h4 id="CRUD-–-添加数据"><a href="#CRUD-–-添加数据" class="headerlink" title="CRUD – 添加数据"></a>CRUD – 添加数据</h4><p>利用 ContentValues 组件一组数据，通过 insert 来添加到数据库中。<br>ContentValues 利用键值的方式添加：，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ContentValues contentValues = <span class="hljs-keyword">new</span> ContentValues();<br>contentValues.put(<span class="hljs-string">"name"</span>, <span class="hljs-string">"think in java"</span>);<br>contentValues.put(<span class="hljs-string">"version"</span>, <span class="hljs-number">3</span>);<br>db.insert(<span class="hljs-string">"Book"</span>, <span class="hljs-keyword">null</span>, contentValues);<br></code></pre></td></tr></table></figure>

<h4 id="CRUD-–-更改数据"><a href="#CRUD-–-更改数据" class="headerlink" title="CRUD – 更改数据"></a>CRUD – 更改数据</h4><p>利用 ContentValues 组件一组数据，通过 update 来添加到数据库中。<br>ContentValues 利用键值的方式更新：，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ContentValues contentValues = <span class="hljs-keyword">new</span> ContentValues();<br>contentValues.put(<span class="hljs-string">"version"</span>, <span class="hljs-number">4</span>);<br>db.update(<span class="hljs-string">"Book"</span>, contentValues, <span class="hljs-string">"name=?"</span> , <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"think in java"</span>&#125;);<br></code></pre></td></tr></table></figure>

<h3 id="CRUD-–-删除数据"><a href="#CRUD-–-删除数据" class="headerlink" title="CRUD – 删除数据"></a>CRUD – 删除数据</h3><p>获取到 db 实例后，即可执行删除操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SQLiteDatabase db = dbHelper.getWritableDatabase();<br>db.delete(<span class="hljs-string">"Book"</span>, <span class="hljs-string">"version &lt; ?"</span>, <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"4"</span>&#125;);<br></code></pre></td></tr></table></figure>

<h3 id="CRUD-–-查询数据"><a href="#CRUD-–-查询数据" class="headerlink" title="CRUD – 查询数据"></a>CRUD – 查询数据</h3><p>利用 db 的 query 方法来得到一个 Cursor 实例。对 Cursor 进行取值操作，即可得到想要的值。<br>cursor.moveToFirst(); 指针移动到第一行；<br>cursor.moveToNext(); 指针移动到下一个；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Cursor cursor = db.query(<span class="hljs-string">"Book"</span>, <span class="hljs-keyword">null</span> , <span class="hljs-keyword">null</span> , <span class="hljs-keyword">null</span> , <span class="hljs-keyword">null</span> , <span class="hljs-keyword">null</span> , <span class="hljs-keyword">null</span> );<br>cursor.moveToFirst();<br>Log.d(<span class="hljs-string">"LOU"</span>,cursor.getString(cursor.getColumnIndex( <span class="hljs-string">"name"</span> )));<br>Log.d(<span class="hljs-string">"LOU"</span>,cursor.getInt( cursor.getColumnIndex( <span class="hljs-string">"version"</span> )) );<br>cursor.close();<br></code></pre></td></tr></table></figure>

<p><strong>技巧：</strong> 利用 switch 来优化数据库升级（p264）。</p>
<hr>
<h2 id="第七章-内容提供器（p268）"><a href="#第七章-内容提供器（p268）" class="headerlink" title="第七章 内容提供器（p268）"></a>第七章 内容提供器（p268）</h2><blockquote>
<p>首先作为一个客户端程序员，来使用 API，接着创建自己的 API；</p>
</blockquote>
<ul>
<li><p>内容提供器主要用于在不同的应用程序之间实现数据共享，目前内容提供器是 Android 实现跨程序共享数据的标准方式。</p>
</li>
<li><p>ContentProvider 比起文件和 SharedPreference 的 MODE_WORLD_READABLE 和 MODE_WORLD_WRITEABLE 两种操作模式要更安全可靠。<br>因为你只提供想要给其他程序访问的数据，其他数据就不会有任何影响。</p>
</li>
<li><p>ContentResolver 对象获取方式：‘’以通过 Context 的 getContentResolver()来获取。</p>
</li>
<li><p>ContentResolver 提供的一些方法进行 CRUD 操作。<br>（基本类似于数据库的 CRUD，最明显的区别就是：<br>数据库中的 CRUD 方法传入的参数是 <strong>表名</strong>，而 ContentResolver 中的传入的参数是 <strong>Uri</strong>，<br>对应的继承自 ContentProvider 的自定义内容提供器里面的 CRUD 方法设置的参数也是 <strong>Uri</strong>。）</p>
</li>
<li><p>内容提供器的用法有两种：</p>
<ol>
<li>使用现有的提供器来读取和操作某程序的数据。（作为客户端）</li>
<li>自己创建 ContentProvider 给自己的程序或其他程序提供外部访问接口，以供其读取和操作数据。（客户端和 API 端都有）</li>
</ol>
</li>
<li><p>Uri：区别于 SQLiteDatabase 接受的参数<code>table</code>，ContentResolver 接受的参数是“URI”，<br>要对某程序的数据进行读取和操作，需要制定其<code>Uri</code>。</p>
</li>
<li><p>URI 格式：由两部分组成，权限 authority 和路径 path（p269） + 通配符的使用 （p277）</p>
</li>
<li><p>UriMatcher 的使用（p279）</p>
</li>
<li><p>Uri 的 getPathSegments()方法可以将字符串按照“/”分割成字符串列表，通过 get(0)这种方式访问列表中的字符串。</p>
</li>
<li><p>所有内容提供者必须提供的方法（getType()），getType()方法的实现，用于获取 Uri 对象所对应的 MIME 类型；（p280）</p>
</li>
<li><p>自定义的 ContentProvider 需要注册到 Manifest 中（p286）。</p>
</li>
</ul>
<p><strong>注意：</strong> 在每次创建内容提供者的时候，都要提醒自己，是不是真的需要这样做。<br>因为只有真正需要将数据共享出去的时候我们才应该创建内容提供器，<br>仅仅是用于内部程序访问的数据没必要使用内容提供者。</p>
<p><em>Lou:</em> ContentProvider 扮演的是程序和程序之间数据传递的桥梁角色。<br>A 程序规定好自己的哪些数据内容可以访问，并设置好对应的 Uri，<br>B 程序借助 ContentProvider 提供器传入 A 程序规定好的 Uri 来读取和操作 A 程序的数据。<br>在 ContentProvider 中操作数据库，<br>就好像是 ContentProvider 提供了一个包装，<br>在其内根据传入的 Uri 来进行具体的数据库操作，<br>对外只需要提供一个接口即可（接口需要有正确的参数，例如 Uri、过滤条件等）。</p>
<hr>
<h2 id="第八章-多媒体"><a href="#第八章-多媒体" class="headerlink" title="第八章 多媒体"></a>第八章 多媒体</h2><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ol>
<li>得到 manager：<code>NotificationManager manager = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);</code></li>
<li>得到 notification 实例：<code>Notification notification = new Notification(R.drawable.ic_launcher, &quot;This is ticker text&quot;, System.currentTimeMillis());</code></li>
<li>设置通知里的布局：<code>notification.setLatesEventInfor(this, &quot;This is content title&quot;, &quot;This is content text&quot;, null);</code>，<br>其中第四个参数是用来设置点击通知触发的逻辑，用 PendingIntent 来设定。</li>
<li>利用 manager 发出通知：<code>manager.notify(1, notification);</code>，其中 1 是该通知的唯一标志，可以用于之后的取消。</li>
</ol>
<h4 id="取消通知栏的通知"><a href="#取消通知栏的通知" class="headerlink" title="取消通知栏的通知"></a>取消通知栏的通知</h4><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">NotificationManager manager = (NotificationManager)getSystemService(NOTIFICATION_SERVICE)<span class="hljs-comment">;</span><br>manager.cancel(<span class="hljs-number">1</span>)<span class="hljs-comment">; //其中1表示刚才设置的通知唯一标志。</span><br></code></pre></td></tr></table></figure>

<h4 id="通知栏点击事件处理"><a href="#通知栏点击事件处理" class="headerlink" title="通知栏点击事件处理"></a>通知栏点击事件处理</h4><p><strong>使用 PendingIntent（p302）</strong></p>
<ul>
<li>被延迟执行的 Intent。（Intent 倾向于立即执行某个动作，PendingIntent 倾向于在某个合适的时机去执行某个动作）</li>
<li>通过 getActivity()，或 getBroadCast()，或 getService()来获取 PendingIntent 实例，<br>PendingIntent 结合第二个参数 Intent 来构建出“意图”，当被点击时执行相应的逻辑。 （p302） 1. 如果使用的是 getActivity()，那么就执行 startActivity(intent); 其中 intent：<code>Intent intent = new Intent(getActivity(), MyActivity.class)</code>，指定其目标 Activity。 2. 如果使用的是 getBroadCast()，那么就调用 sendBroadCast(intent); 其中 intent：<code>Intent intent = new Intent(&quot;com.example.broadcasttext.MY_BROADCAST&quot;)</code>,指定其 action。 3. 如果使用的是 getService()，那么就调用 startService(intent);其中 intent：<code>Intent intent = new Intent(getActivity(), MyService.class)</code>，指定目标 service。</li>
<li>将得到的实例作为<code>notification.setLatesEvenInfor()</code>的第四个参数以实现点击通知的逻辑（启动一个 Activity、发送一条广播、启动某个服务等等 ）。</li>
</ul>
<h4 id="通知的交互处理（p305）"><a href="#通知的交互处理（p305）" class="headerlink" title="通知的交互处理（p305）"></a>通知的交互处理（p305）</h4><ul>
<li>添加声音：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Uri soundUri = Uri.fromFile(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"/system/media/audio/ringtones/Basic_tone.ogg"</span>));<br>notification.sound = sounUri;<br></code></pre></td></tr></table></figure>

<ul>
<li>添加振动：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span>[] vibrates = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>&#125;;<br>notification.vibrate = vibrates;<br><span class="hljs-comment">// 注意：需要添加震动权限 &lt;uses-permission android:name="android.permission.VIBRATE"/&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>添加 LED 通知</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">notification.ledARGB = Color.GREEN;<br>notification.ledOnMS = <span class="hljs-number">1000</span>;<br>notification.ledOffMS = <span class="hljs-number">1000</span>;<br>notification.flags = Notification.FLAG_SHOW_LIGHTS;<br></code></pre></td></tr></table></figure>

<ul>
<li>设置默认通知类型：</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">notification.defaults</span> = Notification.DEFAUT_ALL<br></code></pre></td></tr></table></figure>

<ul>
<li>扩展：<br>点亮屏幕</li>
</ul>
<hr>
<h2 id="第九章-服务"><a href="#第九章-服务" class="headerlink" title="第九章 服务"></a>第九章 服务</h2><h3 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h3><p>子线程中不允许进行 UI 操作。</p>
<p>异步消息处理机制：</p>
<ul>
<li>handler</li>
<li>AsyncTask</li>
<li>Activity.runOnUIThread(Runnable runnable)</li>
<li>IntentService</li>
</ul>
<h4 id="Handler（p348）"><a href="#Handler（p348）" class="headerlink" title="Handler（p348）"></a>Handler（p348）</h4><ol>
<li>在主线程中创建 Handler 实例，并重写 handMessage()方法。</li>
<li>在子线程中通过 handler 发送消息（<code>handler.sendMessage(msg);</code>）</li>
<li>msg 会被添加到 MessageQueue 等待处理。</li>
<li>Looper 不断的监测 MessageQueue 中是否有 Message，如果有那么就取出来分发到 handler 的 handleMessage()方法中处理。</li>
<li>在 handler.handleMessage()方法中进行 UI 操作。</li>
</ol>
<h4 id="AsyncTask（p349）"><a href="#AsyncTask（p349）" class="headerlink" title="AsyncTask（p349）"></a>AsyncTask（p349）</h4><ol>
<li><p>AsyncTask 是一个抽象类，需要去继承才能用。</p>
</li>
<li><p>三个泛型参数</p>
<ul>
<li>Params：执行 AsyncTask 任务需要的参数（例如进行网络操作的 URL 字符串）；</li>
<li>Progress：后台执行任务的百分比；</li>
<li>Result：任务的执行完成后的返回值（例如 Bitmap）</li>
</ul>
</li>
<li><p>常用的方法（重写）</p>
<ul>
<li>onPreExecute()，任务执行之前的初始化操作（可以进行 UI 更新）。</li>
<li>doInBackground(Params…)，耗时操作（不可用进行 UI 更新）</li>
<li>onProgressUpdate(Progress…)，当在 doInBackground 方法里调用 publishProgres(Progress…)时会被调用，用于更新当前的 UI 状态。（可以进行 UI 更新）</li>
<li>onPostExecute(Result)，当执行完 doInBackground()方法之后，返回 Result 值给 onPostExecute()方法。用于善后操作。（可以进行 UI 更新）</li>
</ul>
</li>
<li><p>执行方式：<code>new MyAsyncTask().execute();</code></p>
</li>
</ol>
<h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><ul>
<li>间接继承自 Context</li>
<li>不要因为服务是后台的概念，就把服务和线程搞混了，服务依然是在主线程中运行（即和活动共用一个线程）<br>外部连接里有不错的解释：<br>如果服务中用到耗时操作，依然需要使用子线程：</li>
<li>外部连接：<ul>
<li><a href="http://blog.csdn.net/jie1991liu/article/details/16105605" target="_blank" rel="noopener">Service 和 Thread 的关系</a>。</li>
<li><a href="http://www.360doc.com/content/14/0319/20/12928831_361969514.shtml" target="_blank" rel="noopener">android service 与子线程之浅谈</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>既然在 Service 里也要创建一个子线程，那为什么不直接在 Activity 里创建呢？<br>这是因为 Activity 很难对 Thread 进行控制，当 Activity 被销毁之后，<br>就没有任何其它的办法可以再重新获取到之前创建的子线程的实例。<br>而且在一个 Activity 中创建的子线程，另一个 Activity 无法对其进行操作。<br>但是 Service 就不同了，所有的 Activity 都可以与 Service 进行关联，<br>然后可以很方便地操作其中的方法，即使 Activity 被销毁了，之后只要重新与 Service 建立关联，<br>就又能够获取到原有的 Service 中 Binder 的实例。<br>因此，使用 Service 来处理后台任务，Activity 就可以放心地 finish，<br>完全不需要担心无法对后台任务进行控制的情况。</p>
</blockquote>
<h4 id="两种方式创建服务"><a href="#两种方式创建服务" class="headerlink" title="两种方式创建服务"></a>两种方式创建服务</h4><ol>
<li>startService(serviceIntent);</li>
<li>bindService(bindIntent, connection, BIND_AUTO_CREATE);</li>
</ol>
<ul>
<li>我们完全有可能对一个服务既调用了 startService()方法，有调用了 bindService()方法。<br>这种情况如何销毁服务？需要同时调用 stopService()（或者 stopself()）和 unBindService()方法才行。（p364）</li>
<li>stopself()可以在 MyService 的任何位置调用，以停止服务。</li>
<li>stopService()跟 startService()一样，需要根据传入的参数来确定 stop 哪个服务。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">Intent stopIntent = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Intent(<span class="hljs-params">this</span>, MyService.<span class="hljs-params">class</span>)</span>;<br>stop<span class="hljs-constructor">Service(<span class="hljs-params">stopIntent</span>)</span>;<br></code></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>需要在 Manifest 中注册服务。</li>
<li>通过 bindService 的方式创建的服务，可以更方便的控制它。</li>
<li>IntentService，一个异步的，可以自动停止的服务。（p367）。<br>在重写的方法 onHandleIntent()里的进行耗时操作；</li>
</ul>
<h4 id="服务的应用"><a href="#服务的应用" class="headerlink" title="服务的应用"></a>服务的应用</h4><p>定时任务（Alarm）</p>
<h4 id="外部连接"><a href="#外部连接" class="headerlink" title="外部连接"></a>外部连接</h4><ul>
<li><a href="http://blog.csdn.net/p106786860/article/details/17885115" target="_blank" rel="noopener">Android 基本功：IntentService 的使用</a></li>
<li><a href="http://www.cnblogs.com/mengdd/archive/2013/03/24/2979944.html" target="_blank" rel="noopener">Android Service 的生命周期</a></li>
<li><a href="http://www.cnblogs.com/mengdd/archive/2013/03/24/2979903.html" target="_blank" rel="noopener">Android Service 的绑定 续篇：关于绑定的补充说明</a></li>
<li><a href="http://www.cnblogs.com/yejiurui/p/3429451.html" target="_blank" rel="noopener">深入理解 Android 的 startservice 和 bindservice</a></li>
</ul>
<hr>
<h2 id="第十章-网络技术"><a href="#第十章-网络技术" class="headerlink" title="第十章 网络技术"></a>第十章 网络技术</h2><h3 id="使用-Http-协议访问网络（注意要添加网络权限）"><a href="#使用-Http-协议访问网络（注意要添加网络权限）" class="headerlink" title="使用 Http 协议访问网络（注意要添加网络权限）"></a>使用 Http 协议访问网络（注意要添加网络权限）</h3><h4 id="HttpURLConnection（p380）"><a href="#HttpURLConnection（p380）" class="headerlink" title="HttpURLConnection（p380）"></a>HttpURLConnection（p380）</h4><p><strong>get 数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendRequestWithHttpURLConnection</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">new</span> Thread(<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>            HttpURLConnection connection = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">try</span>&#123;<br>                URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">"http://www.lyloou.com"</span>);<br>                connection = (HttpURLConnection)url.openConnection();<br><br>                <span class="hljs-comment">// Get表示希望从服务器获取数据；Post表示希望提交数据给服务器</span><br>                connection.setRequestMethod(<span class="hljs-string">"GET"</span>);<br><br>                <span class="hljs-comment">// 设置连接超时</span><br>                connection.setConnectionTimeout(<span class="hljs-number">8000</span>);<br><br>                <span class="hljs-comment">// 设置读取超时</span><br>                connection.setReadTimeout(<span class="hljs-number">8000</span>);<br><br>                <span class="hljs-comment">// 获取输入流</span><br>                InputStream in = connection.getInputStream();<br><br>                <span class="hljs-comment">// 对输入流进行读取操作</span><br>                BufferReader reader = <span class="hljs-keyword">new</span> BufferReader(<span class="hljs-keyword">new</span> InputStreamReader(in));<br>                StringBuilder response = <span class="hljs-keyword">new</span> StringBuilder();<br>                String line;<br>                <span class="hljs-keyword">while</span>((line=reader.readline()) != <span class="hljs-keyword">null</span>)&#123;<br>                    response.append(line);<br>                &#125;<br><br>                <span class="hljs-comment">// 将结果返回</span><br>                Message msg = <span class="hljs-keyword">new</span> Message();<br>                msg.what = <span class="hljs-number">1</span>;<br>                msg.obj = response.toString();<br>                handler.sendMessage(msg);<br>            &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>                    connection.disconnect();<br>                &#125;<br>            &#125;<br>        &#125;<br>    ).start();<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>post 数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取输出流并写出数据。</span><br>DataOutputStream out =  <span class="hljs-keyword">new</span>  DataOutputStream( connection.getOutputStream());<br>out.writeBytes(<span class="hljs-string">"username=admin&amp;password=123456"</span>);<br></code></pre></td></tr></table></figure>

<h4 id="HttpClient（p385-）"><a href="#HttpClient（p385-）" class="headerlink" title="HttpClient（p385 ）"></a>HttpClient（p385 ）</h4><p><strong>get 数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendRequestWithHttpClient</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">new</span> Thread(<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>            HttpClient httpClient = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">try</span>&#123;<br>                httpClient = <span class="hljs-keyword">new</span> DefaultHttpClient();<br>                HttpGet httpGet = <span class="hljs-keyword">new</span> HttpGet(<span class="hljs-string">"http://www.baidu.com"</span>);<br>                HttpResponse httpResponse = httpClient.execute(httpGet);<br><br>                <span class="hljs-keyword">if</span>(httpResponse.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>) &#123;<br>                    HttpEntity entity = httpResponse.getEntity();<br><br>                    <span class="hljs-comment">// 将entity转换为字符串，并指定字符集编码</span><br>                    String response = EntityUtils.toString(entity, <span class="hljs-string">"utf-8"</span>);<br><br>                    <span class="hljs-comment">// 将结果返回</span><br>                    Message msg = <span class="hljs-keyword">new</span> Message();<br>                    msg.what = <span class="hljs-number">1</span>;<br>                    msg.obj = response.toString();<br>                    handler.sendMessage(msg);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span>(client != <span class="hljs-keyword">null</span>)&#123;<br>                    client.disconnect();<br>                &#125;<br>            &#125;<br>        &#125;<br>    ).start();<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>post 数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">HttpPost httpPost = <span class="hljs-keyword">new</span> HttpPost(<span class="hljs-string">" http://www.baidu.com"</span>);<br><br>List&lt;NameValuePair&gt; params = <span class="hljs-keyword">new</span> ArrayList&lt;NameValuePair&gt;();<br>params.add(<span class="hljs-keyword">new</span> BasicNameValuePair(<span class="hljs-string">"username"</span>, <span class="hljs-string">"admin"</span>));<br>params.add(<span class="hljs-keyword">new</span> BasicNameValuePair(<span class="hljs-string">"password"</span>, <span class="hljs-string">"123456"</span>));<br><br>UrlEncodedFormEntity entity = <span class="hljs-keyword">new</span> UrlEncodedFormEntity(param, <span class="hljs-string">"utf-8"</span>);<br>httpPost.setEntity(entity);<br>HttpResponse httpResponse  =  httpClient.execute(httpPost);<br></code></pre></td></tr></table></figure>

<h4 id="回调机制（p406，真牛）"><a href="#回调机制（p406，真牛）" class="headerlink" title="回调机制（p406，真牛）"></a>回调机制（p406，真牛）</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HttpCallbackListener</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onFinish</span><span class="hljs-params">(String response)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Exception e)</span></span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendRequest</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String address, <span class="hljs-keyword">final</span> HttpCallbackListener listener)</span></span>&#123;<br>  <span class="hljs-keyword">new</span> Thread(<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>          HttpURLConnection connection = <span class="hljs-keyword">null</span>;<br>          <span class="hljs-keyword">try</span>&#123;<br>              URL url = <span class="hljs-keyword">new</span> URL( address );<br>              connection = (HttpURLConnection)url.openConnection();<br><br>              <span class="hljs-comment">// Get表示希望从服务器获取数据；Post表示希望提交数据给服务器</span><br>              connection.setRequestMethod(<span class="hljs-string">"GET"</span>);<br><br>              <span class="hljs-comment">// 设置连接超时</span><br>              connection.setConnectionTimeout(<span class="hljs-number">8000</span>);<br><br>              <span class="hljs-comment">// 设置读取超时</span><br>              connection.setReadTimeout(<span class="hljs-number">8000</span>);<br><br>              <span class="hljs-comment">// 获取输入流</span><br>              InputStream in = connection.getInputStream();<br><br>              <span class="hljs-comment">// 对输入流进行读取操作</span><br>              BufferReader reader = <span class="hljs-keyword">new</span> BufferReader(<span class="hljs-keyword">new</span> InputStreamReader(in));<br>              StringBuilder response = <span class="hljs-keyword">new</span> StringBuilder();<br>              String line;<br>              <span class="hljs-keyword">while</span>((line=reader.readline()) != <span class="hljs-keyword">null</span>)&#123;<br>                  response.append(line);<br>              &#125;<br><br>             <span class="hljs-comment">// 将结果回调到参数中去处理，而不是return的方式返回数据（return的数据可能因为主线程先执行完而不能接受到，而通过参数就一定会执行了）。</span><br>             <span class="hljs-keyword">if</span>( listener != <span class="hljs-keyword">null</span>)&#123;<br>                 listener.onFinish(response.toString());<br>             &#125;<br>          &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>             <span class="hljs-keyword">if</span>( listener != <span class="hljs-keyword">null</span>)&#123;<br>                 listener.onError(e);<br>             &#125;<br>          &#125; <span class="hljs-keyword">finally</span> &#123;<br>              <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>                  connection.disconnect();<br>              &#125;<br>          &#125;<br>      &#125;<br>  ).start();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="XML-解析"><a href="#XML-解析" class="headerlink" title="XML 解析"></a>XML 解析</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">apps</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Google Maps<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">app</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">app</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Chrome<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">app</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">app</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Google Play<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">app</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">apps</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="PULL-方式（p391-）"><a href="#PULL-方式（p391-）" class="headerlink" title="PULL 方式（p391 ）"></a>PULL 方式（p391 ）</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseXMLWithPull</span><span class="hljs-params">(String xmlData)</span></span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        XmlPullParserFactory factory = XmlPullParserFactory.newInstance();<br>        XmlPullParser xmlPullParser = factory.newPullParser();<br>        xmlPullParser.setInput(<span class="hljs-keyword">new</span> StringReader(xmlData));<br>        <span class="hljs-keyword">int</span> eventType = xmlPullParser.getEventType();<br>        String id = <span class="hljs-string">""</span>;<br>        String name = <span class="hljs-string">""</span>;<br>        String version = <span class="hljs-string">""</span>;<br><br>        <span class="hljs-keyword">while</span> (eventType != XmlPullParser.END_DOCUMENT) &#123;<br>            String nodename = xmlPullParser.getName();<br>            <span class="hljs-keyword">switch</span>(eventType) &#123;<br>            <span class="hljs-keyword">case</span> XmlPullParser.START_TAG:&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">"id"</span>.equals(nodename))&#123;<br>                    id = xmlPullParser.nextText();<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">"name"</span>.equals(nodename))&#123;<br>                    name = xmlPullParser.nextText();<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">"version"</span>.equals(nodename))&#123;<br>                    version = xmlPullParser.nextText();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">case</span> XmlPullParser.END_TAG:&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">"app"</span>.equals(nodename))&#123;<br>                    Log.d(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"id is "</span> + id);<br>                    Log.d(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"name is "</span> + name);<br>                    Log.d(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"version is "</span> + version);<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            eventType = xmlPullParser.next();<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="SAX-方式（p394）"><a href="#SAX-方式（p394）" class="headerlink" title="SAX 方式（p394）"></a>SAX 方式（p394）</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseXMLWithSAX</span><span class="hljs-params">(String xmlData)</span></span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        SAXParserFactory factory = SAXParserFactory.newInstance();<br>        XMLReader xmlReader = factory.newSAXParser().getXMLReader();<br>        ContentHandler contentHandler = <span class="hljs-keyword">new</span> ContentHandler();<br><br>        xmlReader.setContentHandler(contentHandler);<br>        xmlReader.parse(<span class="hljs-keyword">new</span> InputSource(<span class="hljs-keyword">new</span> StringReader(xmlData)));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// ......</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContentHandler</span> <span class="hljs-title">extend</span> <span class="hljs-title">DefaultHandler</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String nodeName;<br>    <span class="hljs-keyword">private</span> StringBuilder id;<br>    <span class="hljs-keyword">private</span> StringBuilder name;<br>    <span class="hljs-keyword">private</span> StringBuilder version;<br><br>    <span class="hljs-comment">// startDocument会在开始XML解析的时候调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SAXException</span>&#123;<br>        id = <span class="hljs-keyword">new</span> StringBuilder();<br>        name = <span class="hljs-keyword">new</span> StringBuilder();<br>        version = <span class="hljs-keyword">new</span> StringBuilder();<br>    &#125;<br><br>    <span class="hljs-comment">// startElement会在解析某个节点的时候调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startElement</span><span class="hljs-params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="hljs-keyword">throws</span> SAXException</span>&#123;<br>        nodeName = localName;<br>    &#125;<br><br>    <span class="hljs-comment">// characters会在获取节点内容的时候调用，可能会调用多次，需要对澶蠕动char进行控制</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">characters</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] ch, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> length)</span> <span class="hljs-keyword">throws</span> SAXException</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">"id"</span>.equals(nodeName))&#123;<br>            id.append(ch, start, length);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">"name"</span>.equals(nodeName))&#123;<br>            name.append(ch, start, length);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">"version"</span>.equals(nodeName))&#123;<br>            version.append(ch, start, length);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// endElement会在完成解析某个节点的时候调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">endElement</span><span class="hljs-params">(String uri, String localName, String qName)</span> <span class="hljs-keyword">throws</span> SAXException</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">"app"</span>.equals(localName))&#123;<br>            Log.d(<span class="hljs-string">"ContentHandler"</span>, <span class="hljs-string">"id is "</span> + id.toString().trim());<br>            Log.d(<span class="hljs-string">"ContentHandler"</span>, <span class="hljs-string">"name is "</span> + name.toString().trim());<br>            Log.d(<span class="hljs-string">"ContentHandler"</span>, <span class="hljs-string">"version is "</span> + version.toString().trim());<br><br>            <span class="hljs-comment">// 清空还原数据</span><br>            id.setLength(<span class="hljs-number">0</span>);<br>            name.setLength(<span class="hljs-number">0</span>);<br>            version.setLength(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// endDocument会在完成解析XML的时候调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">endDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SAXException</span>&#123;<br>        Log.d(<span class="hljs-string">"ContentHandler"</span>, <span class="hljs-string">"completed!!!"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="扩展：DOM-方式"><a href="#扩展：DOM-方式" class="headerlink" title="扩展：DOM 方式"></a>扩展：DOM 方式</h4><h3 id="解析-JSON"><a href="#解析-JSON" class="headerlink" title="解析 JSON"></a>解析 JSON</h3><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<br>  &#123; <span class="hljs-attr">"id"</span>: <span class="hljs-string">"5"</span>, <span class="hljs-attr">"version"</span>: <span class="hljs-string">"5.5"</span>, <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Angry Birds"</span> &#125;,<br>  &#123; <span class="hljs-attr">"id"</span>: <span class="hljs-string">"6"</span>, <span class="hljs-attr">"version"</span>: <span class="hljs-string">"7.0"</span>, <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Clash of Clans"</span> &#125;,<br>  &#123; <span class="hljs-attr">"id"</span>: <span class="hljs-string">"7"</span>, <span class="hljs-attr">"version"</span>: <span class="hljs-string">"3.5"</span>, <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Hey Day"</span> &#125;<br>]<br></code></pre></td></tr></table></figure>

<h4 id="JSONObject-方式（p399）"><a href="#JSONObject-方式（p399）" class="headerlink" title="JSONObject 方式（p399）"></a>JSONObject 方式（p399）</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseJSONWithJSONObject</span><span class="hljs-params">(String jsonData)</span></span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        JSONArray jsonArray = <span class="hljs-keyword">new</span> JSONArray(jsonData);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;jsonArray.length(); i++) &#123;<br>            JSONObject jsonObject = jsonArray.getJSONObject(i);<br><br>            String id = jsonObject.getString(<span class="hljs-string">"id"</span>);<br>            String version = jsonObject.getString(<span class="hljs-string">"version"</span>);<br>            String name = jsonObject.getString(<span class="hljs-string">"name"</span>);<br><br>            Log.d(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"id is "</span> + id);<br>            Log.d(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"version is "</span> + version);<br>            Log.d(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"name is "</span> + name);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="GSON-方式（p401）"><a href="#GSON-方式（p401）" class="headerlink" title="GSON 方式（p401）"></a>GSON 方式（p401）</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String version;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setVersion</span><span class="hljs-params">(String version)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.version = version;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getVersion</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.version;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//......</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseJSONWithGSON</span><span class="hljs-params">(String jsonData)</span></span>&#123;<br>    Gson gson = <span class="hljs-keyword">new</span> Gson();<br>    List&lt;App&gt; appList = gson.fromJson(jsonData, <span class="hljs-keyword">new</span> TypeToken&lt;List&lt;App&gt;&gt;()&#123;&#125;.getType());<br><br>    <span class="hljs-keyword">for</span> (App app : appList) &#123;<br>        Log.d(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"id is "</span> + app.getId());<br>        Log.d(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"name is "</span> + app.getName());<br>        Log.d(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"version is "</span> + app.getVersion());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="扩展：Jackson-方式，FastJSON-方式"><a href="#扩展：Jackson-方式，FastJSON-方式" class="headerlink" title="扩展：Jackson 方式，FastJSON 方式"></a>扩展：Jackson 方式，FastJSON 方式</h4>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android图片裁剪和上传服务器（含：拍照、图库选取）</title>
    <url>/android/%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E5%92%8C%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">mContext.startActivity(<span class="hljs-keyword">new</span> Intent(mContext, CropImageActivity<span class="hljs-class">.<span class="hljs-keyword">class</span>))</span>;<br></code></pre></td></tr></table></figure>

<h2 id="权限声明"><a href="#权限声明" class="headerlink" title="权限声明"></a>权限声明</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.INTERNET"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.READ_PHONE_STATE"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.CAMERA"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.FLASHLIGHT"</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="注册Activity"><a href="#注册Activity" class="headerlink" title="注册Activity"></a>注册Activity</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">".CropImageActivity"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">"portrait"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:theme</span>=<span class="hljs-string">"@style/myTransparent"</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="注册Provider"><a href="#注册Provider" class="headerlink" title="注册Provider"></a>注册Provider</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">provider</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.support.v4.content.FileProvider"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:authorities</span>=<span class="hljs-string">"$&#123;PACKAGE_NAME&#125;.FileProvider"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:grantUriPermissions</span>=<span class="hljs-string">"true"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.support.FILE_PROVIDER_PATHS"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:resource</span>=<span class="hljs-string">"@xml/file_paths"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">provider</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="透明的theme"><a href="#透明的theme" class="headerlink" title="透明的theme"></a>透明的theme</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myTransparent"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"@android:style/Theme.DeviceDefault.Light.NoActionBar.Fullscreen"</span>&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowBackground"</span>&gt;</span>@color/transparent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowNoTitle"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowAnimationStyle"</span>&gt;</span>@android:style/Animation.Translucent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="xml-file-paths"><a href="#xml-file-paths" class="headerlink" title="xml/file_paths"></a>xml/file_paths</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- res/xml/file_paths --&gt;</span><br><br><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">paths</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"root"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">""</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">files-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"files"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">""</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"cache"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">""</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">external-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"external"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">""</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">external-files-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"external_file"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">""</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">external-cache-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"external_cache"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">""</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">paths</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="util-uri"><a href="#util-uri" class="headerlink" title="util/uri"></a>util/uri</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类：SystemProgramUtils 系统程序适配</span><br><span class="hljs-comment"> * 1. 拍照</span><br><span class="hljs-comment"> * 2. 相册</span><br><span class="hljs-comment"> * 3. 裁切</span><br><span class="hljs-comment"> * 作者： qxc</span><br><span class="hljs-comment"> * 日期：2018/2/23.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SystemProgramUtils</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> REQUEST_CODE_PAIZHAO = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> REQUEST_CODE_ZHAOPIAN = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> REQUEST_CODE_CAIQIE = <span class="hljs-number">3</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paizhao</span><span class="hljs-params">(Activity activity, File outputFile)</span> </span>&#123;<br>        Intent intent = <span class="hljs-keyword">new</span> Intent();<br>        intent.setAction(<span class="hljs-string">"android.media.action.IMAGE_CAPTURE"</span>);<br>        intent.addCategory(<span class="hljs-string">"android.intent.category.DEFAULT"</span>);<br>        Uri uri = FileProviderUtils.uriFromFile(activity, outputFile);<br>        intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);<br>        activity.startActivityForResult(intent, REQUEST_CODE_PAIZHAO);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zhaopian</span><span class="hljs-params">(Activity activity)</span> </span>&#123;<br>        Intent intent = <span class="hljs-keyword">new</span> Intent();<br>        intent.setType(<span class="hljs-string">"image/*"</span>);<br>        intent.setAction(<span class="hljs-string">"android.intent.action.PICK"</span>);<br>        intent.addCategory(<span class="hljs-string">"android.intent.category.DEFAULT"</span>);<br>        activity.startActivityForResult(intent, REQUEST_CODE_ZHAOPIAN);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Caiqie</span><span class="hljs-params">(Activity activity, Uri uri, File outputFile, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>        Intent intent = <span class="hljs-keyword">new</span> Intent(<span class="hljs-string">"com.android.camera.action.CROP"</span>);<br>        FileProviderUtils.setIntentDataAndType(activity, intent, <span class="hljs-string">"image/*"</span>, uri, <span class="hljs-keyword">true</span>);<br>        intent.putExtra(<span class="hljs-string">"crop"</span>, <span class="hljs-string">"true"</span>);<br>        intent.putExtra(<span class="hljs-string">"aspectX"</span>, <span class="hljs-number">1</span>);<br>        intent.putExtra(<span class="hljs-string">"aspectY"</span>, <span class="hljs-number">1</span>);<br>        intent.putExtra(<span class="hljs-string">"outputX"</span>, width);<br>        intent.putExtra(<span class="hljs-string">"outputY"</span>, height);<br>        <span class="hljs-comment">//return-data为true时，直接返回bitmap，可能会很占内存，不建议，小米等个别机型会出异常！！！</span><br>        <span class="hljs-comment">//所以适配小米等个别机型，裁切后的图片，不能直接使用data返回，应使用uri指向</span><br>        <span class="hljs-comment">//裁切后保存的URI，不属于我们向外共享的，所以可以使用fill://类型的URI</span><br>        Uri outputUri = Uri.fromFile(outputFile);<br>        intent.putExtra(MediaStore.EXTRA_OUTPUT, outputUri);<br>        intent.putExtra(<span class="hljs-string">"return-data"</span>, <span class="hljs-keyword">false</span>);<br><br>        intent.putExtra(<span class="hljs-string">"outputFormat"</span>, Bitmap.CompressFormat.JPEG.toString());<br>        intent.putExtra(<span class="hljs-string">"noFaceDetection"</span>, <span class="hljs-keyword">true</span>);<br>        activity.startActivityForResult(intent, REQUEST_CODE_CAIQIE);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类：FileProviderUtils</span><br><span class="hljs-comment"> * 从APP向外共享的文件URI时，必须使用该类进行适配，否则在7.0以上系统，会报错：FileUriExposedException(文件Uri暴露异常)</span><br><span class="hljs-comment"> * 作者： qxc</span><br><span class="hljs-comment"> * 日期：2018/2/23.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileProviderUtils</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从文件获得URI</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activity 上下文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file     文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 文件对应的URI</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Uri <span class="hljs-title">uriFromFile</span><span class="hljs-params">(Activity activity, File file)</span> </span>&#123;<br>        Uri fileUri;<br>        <span class="hljs-comment">//7.0以上进行适配</span><br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<br>            String p = activity.getPackageName() + <span class="hljs-string">".FileProvider"</span>;<br>            fileUri = FileProvider.getUriForFile(<br>                    activity,<br>                    p,<br>                    file);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            fileUri = Uri.fromFile(file);<br>        &#125;<br>        <span class="hljs-keyword">return</span> fileUri;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置Intent的data和类型，并赋予目标程序临时的URI读写权限</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activity  上下文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> intent    意图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type      类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file      文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> writeAble 是否赋予可写URI的权限</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIntentDataAndType</span><span class="hljs-params">(Activity activity,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            Intent intent,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            String type,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            File file,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            <span class="hljs-keyword">boolean</span> writeAble)</span> </span>&#123;<br>        <span class="hljs-comment">//7.0以上进行适配</span><br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<br>            intent.setDataAndType(uriFromFile(activity, file), type);<br>            <span class="hljs-comment">//临时赋予读写Uri的权限</span><br>            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);<br>            <span class="hljs-keyword">if</span> (writeAble) &#123;<br>                intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            intent.setDataAndType(Uri.fromFile(file), type);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置Intent的data和类型，并赋予目标程序临时的URI读写权限</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context   上下文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> intent    意图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type      类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileUri   文件uri</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> writeAble 是否赋予可写URI的权限</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIntentDataAndType</span><span class="hljs-params">(Context context,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            Intent intent,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            String type,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            Uri fileUri,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            <span class="hljs-keyword">boolean</span> writeAble)</span> </span>&#123;<br>        <span class="hljs-comment">//7.0以上进行适配</span><br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<br>            intent.setDataAndType(fileUri, type);<br>            <span class="hljs-comment">//临时赋予读写Uri的权限</span><br>            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);<br>            <span class="hljs-keyword">if</span> (writeAble) &#123;<br>                intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            intent.setDataAndType(fileUri, type);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// [Android 拍照，从图库选择照片，并裁剪，上传到服务器 - 简书](https://www.jianshu.com/p/bfd9fe0592cb)</span><br><span class="hljs-comment">// [拍照/从相册读取图片后进行裁剪的方法 - developer_Kale - 博客园](http://www.cnblogs.com/tianzhijiexian/p/3989296.html)</span><br><span class="hljs-comment">// [Android 7.0适配 -- FileProvider 拍照、选择相册、裁切图片, 小米机型适配 - 简书](https://www.jianshu.com/p/bec4497c2a63)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CropImageActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Activity</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TAG = CropImageActivity<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getSimpleName</span>()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TMP_DIR = Environment.getExternalStorageDirectory() + <span class="hljs-string">"/renrenyoupin/tmp"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> width;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> height;<br>    <span class="hljs-keyword">private</span> File file;<br>    <span class="hljs-keyword">private</span> Activity mContext;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CAMERA_REQUEST_CODE = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        mContext = <span class="hljs-keyword">this</span>;<br><br>        <span class="hljs-keyword">if</span> (savedInstanceState == <span class="hljs-keyword">null</span>) &#123;<br>            initIconFile(<span class="hljs-keyword">true</span>);<br><br>            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) &#123;<br>                showDialog();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            requestPermission();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initIconFile</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> remove)</span> </span>&#123;<br>        File tmpDir = <span class="hljs-keyword">new</span> File(TMP_DIR);<br>        <span class="hljs-keyword">if</span> (!tmpDir.exists()) &#123;<br>            tmpDir.mkdirs();<br>        &#125;<br>        file = <span class="hljs-keyword">new</span> File(tmpDir.getAbsolutePath(), <span class="hljs-string">"icon.png"</span>);<br>        <span class="hljs-keyword">if</span> (remove &amp;&amp; file.exists()) &#123;<br>            file.delete();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@TargetApi</span>(Build.VERSION_CODES.M)<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">requestPermission</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (ContextCompat.checkSelfPermission(mContext, Manifest.permission.CAMERA)<br>                == PackageManager.PERMISSION_GRANTED<br>                &amp;&amp; ContextCompat.checkSelfPermission(mContext, Manifest.permission.WRITE_EXTERNAL_STORAGE)<br>                == PackageManager.PERMISSION_GRANTED<br>                &amp;&amp; ContextCompat.checkSelfPermission(mContext, Manifest.permission.READ_EXTERNAL_STORAGE)<br>                == PackageManager.PERMISSION_GRANTED) &#123;<br>            showDialog();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//申请相机权限和STORAGE权限</span><br>            ActivityCompat.requestPermissions(<br>                    mContext,<br>                    <span class="hljs-keyword">new</span> String[]&#123;Manifest.permission.CAMERA,<br>                            Manifest.permission.WRITE_EXTERNAL_STORAGE,<br>                            Manifest.permission.READ_EXTERNAL_STORAGE<br>                    &#125;,<br>                    CAMERA_REQUEST_CODE);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-keyword">int</span> requestCode, String[] permissions, <span class="hljs-keyword">int</span>[] grantResults)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);<br>        <span class="hljs-keyword">if</span> (requestCode == CAMERA_REQUEST_CODE) &#123;<br>            <span class="hljs-keyword">if</span> (grantResults[<span class="hljs-number">0</span>] == PackageManager.PERMISSION_GRANTED<br>                    &amp;&amp; grantResults[<span class="hljs-number">1</span>] == PackageManager.PERMISSION_GRANTED<br>                    &amp;&amp; grantResults[<span class="hljs-number">2</span>] == PackageManager.PERMISSION_GRANTED) &#123;<br>                showDialog();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                String msg = <span class="hljs-string">"没有相关运行权限"</span>;<br>                <span class="hljs-comment">//Toast.makeText(mContext, msg, Toast.LENGTH_SHORT).show();</span><br>                backWithError(msg);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDialog</span><span class="hljs-params">()</span> </span>&#123;<br>        Intent intent = getIntent();<br>        width = intent.getIntExtra(<span class="hljs-string">"width"</span>, <span class="hljs-number">0</span>);<br>        height = intent.getIntExtra(<span class="hljs-string">"height"</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (width == <span class="hljs-number">0</span>) &#123;<br>            width = <span class="hljs-number">350</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (height == <span class="hljs-number">0</span>) &#123;<br>            height = <span class="hljs-number">350</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">new</span> AlertDialog.Builder(<span class="hljs-keyword">this</span>)<br>                .setTitle(<span class="hljs-string">"更换头像"</span>)<br>                .setItems(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"拍照"</span>, <span class="hljs-string">"从相册选择"</span>,&#125;, (dialog, which) -&gt; &#123;<br>                    <span class="hljs-keyword">switch</span> (which) &#123;<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//拍照</span><br>                            SystemProgramUtils.paizhao(mContext, file);<br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//从相册选择</span><br>                            SystemProgramUtils.zhaopian(mContext);<br>                            <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;)<br>                .setOnCancelListener(dialog -&gt; finish())<br>                .create()<br>                .show();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onActivityResult</span><span class="hljs-params">(<span class="hljs-keyword">int</span> requestCode, <span class="hljs-keyword">int</span> resultCode, Intent data)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (requestCode != SystemProgramUtils.REQUEST_CODE_PAIZHAO &amp;&amp; data == <span class="hljs-keyword">null</span>) &#123;<br>            finish();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        Bitmap bitmap;<br>        Uri uri;<br>        <span class="hljs-keyword">switch</span> (requestCode) &#123;<br>            <span class="hljs-keyword">case</span> SystemProgramUtils.REQUEST_CODE_PAIZHAO:     <span class="hljs-comment">// 从相机跳回来</span><br>                <span class="hljs-keyword">if</span> (resultCode == Activity.RESULT_CANCELED) &#123;<br>                    finish();<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (file == <span class="hljs-keyword">null</span>) &#123;<br>                    initIconFile(<span class="hljs-keyword">false</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>                    backWithError(<span class="hljs-string">"拍照异常"</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-comment">// 启动裁剪器</span><br>                SystemProgramUtils.Caiqie(mContext, FileProviderUtils.uriFromFile(mContext, file), file, width, height);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SystemProgramUtils.REQUEST_CODE_ZHAOPIAN:     <span class="hljs-comment">// 从图库跳回来</span><br>                <span class="hljs-comment">// 此处的uri 是content类型的。 还有一种是file 型的。应该转换为后者</span><br>                uri = data.getData();<br>                <span class="hljs-keyword">if</span> (uri == <span class="hljs-keyword">null</span>) &#123;<br>                    backWithError(<span class="hljs-string">"图片无效"</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                SystemProgramUtils.Caiqie(mContext, uri, file, width, height);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SystemProgramUtils.REQUEST_CODE_CAIQIE:     <span class="hljs-comment">// 从裁剪处跳回来</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    uri = Uri.fromFile(file);<br>                    bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(uri));<br>                    <span class="hljs-comment">// 方法1</span><br>                    uri = saveBitmap(bitmap);<br>                    <span class="hljs-keyword">if</span> (uri == <span class="hljs-keyword">null</span>) &#123;<br>                        backWithError(<span class="hljs-string">"裁剪失败"</span>);<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    sentImage(uri.getPath());<br>                &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>                    ex.printStackTrace();<br>                &#125;<br><br><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sentImage</span><span class="hljs-params">(String path)</span> </span>&#123;<br>        UokHttp.init().postImageFile(<span class="hljs-keyword">new</span> ICallBack() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUrl</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> APP_URL + <span class="hljs-string">"/android/user_center/person/edit_avatar"</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doResponse</span><span class="hljs-params">(JSONObject responseInfo)</span> </span>&#123;<br>                backWithSuccess(responseInfo);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doError</span><span class="hljs-params">(String errorMsg)</span> </span>&#123;<br>                backWithError(errorMsg);<br>            &#125;<br>        &#125;, path);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backWithSuccess</span><span class="hljs-params">(JSONObject responseInfo)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (Rryp.instance != <span class="hljs-keyword">null</span> &amp;&amp; Rryp.instance.getCurrentCallbackContext() != <span class="hljs-keyword">null</span>) &#123;<br>            Rryp.instance.getCurrentCallbackContext().success(responseInfo);<br>        &#125;<br>        finish();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backWithError</span><span class="hljs-params">(String errorMsg)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (Rryp.instance != <span class="hljs-keyword">null</span> &amp;&amp; Rryp.instance.getCurrentCallbackContext() != <span class="hljs-keyword">null</span>) &#123;<br>            Rryp.instance.getCurrentCallbackContext().error(errorMsg);<br>        &#125;<br>        finish();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把 Bitmap 保存在SD卡路径后，返回file 类型的 uri</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bm</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Uri <span class="hljs-title">saveBitmap</span><span class="hljs-params">(Bitmap bm)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (bm == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>            bm.compress(Bitmap.CompressFormat.PNG, <span class="hljs-number">80</span>, fos);<br>            fos.flush();<br>            fos.close();<br>            <span class="hljs-keyword">return</span> Uri.fromFile(file);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.jianshu.com/p/bfd9fe0592cb" target="_blank" rel="noopener">Android 拍照，从图库选择照片，并裁剪，上传到服务器 - 简书</a></li>
<li><a href="http://www.cnblogs.com/tianzhijiexian/p/3989296.html" target="_blank" rel="noopener">拍照/从相册读取图片后进行裁剪的方法 - developer_Kale - 博客园</a></li>
<li><a href="https://www.jianshu.com/p/bec4497c2a63" target="_blank" rel="noopener">Android 7.0适配 – FileProvider 拍照、选择相册、裁切图片, 小米机型适配 - 简书</a></li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>android中单图分享：微信好友、QQ好友、微博、本地</title>
    <url>/android/%E5%8D%95%E5%9B%BE%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<p>qq 需要添加 lib 库：<code>open_sdk_r6008_lite.jar</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// qq</span><br>implementation files(<span class="hljs-string">'../libs/open_sdk_r6008_lite.jar'</span>)<br><span class="hljs-comment">// 微博</span><br>implementation <span class="hljs-string">"com.sina.weibo.sdk:core:$WEIBO_VERSION"</span><br><span class="hljs-comment">// wechat</span><br>implementation <span class="hljs-string">"com.tencent.mm.opensdk:wechat-sdk-android-without-mta:$WECHAT_VERSION"</span><br></code></pre></td></tr></table></figure>

<h2 id="方案-1"><a href="#方案-1" class="headerlink" title="方案 1"></a>方案 1</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uposter</span> </span>&#123;<br><br>    <span class="hljs-comment">// [Android 分享功能之 微信 图片分享 - 陈三哥 - CSDN博客](https://blog.csdn.net/brokge/article/details/51851625)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shareWeChatFriend</span><span class="hljs-params">(Activity context, String path)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-comment">// [java - exposed beyond app through ClipData.Item.getUri - Stack Overflow](https://stackoverflow.com/questions/48117511/exposed-beyond-app-through-clipdata-item-geturi)</span><br>            Uri uri = FileProvider.getUriForFile(context.getApplicationContext(), context.getPackageName() + <span class="hljs-string">".provider"</span>, <span class="hljs-keyword">new</span> File(path));<br><br>            Intent shareIntent = <span class="hljs-keyword">new</span> Intent();<br>            <span class="hljs-comment">//发送图片到朋友圈</span><br>            <span class="hljs-comment">//ComponentName comp = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.ShareToTimeLineUI");</span><br>            <span class="hljs-comment">//发送图片给好友。</span><br>            ComponentName comp = <span class="hljs-keyword">new</span> ComponentName(<span class="hljs-string">"com.tencent.mm"</span>, <span class="hljs-string">"com.tencent.mm.ui.tools.ShareImgUI"</span>);<br>            shareIntent.setComponent(comp);<br>            shareIntent.setAction(Intent.ACTION_SEND);<br>            shareIntent.putExtra(Intent.EXTRA_STREAM, uri);<br>            shareIntent.setType(<span class="hljs-string">"image/jpeg"</span>);<br>            context.startActivity(Intent.createChooser(shareIntent, <span class="hljs-string">"分享图片"</span>));<br>        &#125;).start();<br>    &#125;<br><br>    <span class="hljs-comment">// [QQ分享官方第三方接入（分享纯图片及截取view的bitmap图） - haibo_bear的博客 - CSDN博客](https://blog.csdn.net/haibo_bear/article/details/51321204)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shareToQQFriend</span><span class="hljs-params">(Activity context, String path)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            Tencent tencent = Tencent.createInstance(QQ_APP_ID, context);<br>            Bundle shareParams = <span class="hljs-keyword">new</span> Bundle();<br>            shareParams.putInt(QQShare.SHARE_TO_QQ_KEY_TYPE, QQShare.SHARE_TO_QQ_TYPE_IMAGE);<br>            shareParams.putString(QQShare.SHARE_TO_QQ_IMAGE_LOCAL_URL, path);<br>            shareParams.putString(QQShare.SHARE_TO_QQ_APP_NAME, context.getResources().getString(R.string.app_name));<br>            shareParams.putInt(QQShare.SHARE_TO_QQ_EXT_INT, QQShare.SHARE_TO_QQ_FLAG_QZONE_ITEM_HIDE);<br>            tencent.shareToQQ(context, shareParams, <span class="hljs-keyword">null</span>);<br>        &#125;).start();<br>    &#125;<br><br>    <span class="hljs-comment">// [Android 调用系统分享文字、图片、文件，可直达微信、朋友圈、QQ、QQ空间、微博 - 她叫我小渝的个人空间 - OSCHINA](https://my.oschina.net/u/1462828/blog/2086000)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shareToWeiboFriend</span><span class="hljs-params">(Activity context, String path)</span> </span>&#123;<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            Intent intent = <span class="hljs-keyword">new</span> Intent();<br>            intent.setPackage(<span class="hljs-string">"com.sina.weibo"</span>);<br>            intent.setAction(Intent.ACTION_SEND);<br>            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>            Uri uri = FileProvider.getUriForFile(context.getApplicationContext(), context.getPackageName() + <span class="hljs-string">".provider"</span>, <span class="hljs-keyword">new</span> File(path));<br>            intent.putExtra(Intent.EXTRA_STREAM, uri);<br>            intent.setType(<span class="hljs-string">"image/*"</span>);   <span class="hljs-comment">//分享文件</span><br>            context.startActivity(Intent.createChooser(intent, <span class="hljs-string">"分享"</span>));<br>        &#125;).start();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveImage</span><span class="hljs-params">(Activity context, String path)</span> </span>&#123;<br>        <span class="hljs-comment">// [How can I display images from a specific folder on android gallery - Stack Overflow](https://stackoverflow.com/questions/13418807/how-can-i-display-images-from-a-specific-folder-on-android-gallery)</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleMediaScanner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MediaScannerConnection</span>.<span class="hljs-title">MediaScannerConnectionClient</span> </span>&#123;<br><br>            <span class="hljs-keyword">private</span> MediaScannerConnection mMs;<br>            <span class="hljs-keyword">private</span> File mFile;<br>            <span class="hljs-keyword">private</span> Context mContext;<br><br>            <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingleMediaScanner</span><span class="hljs-params">(Context context, File f)</span> </span>&#123;<br>                mFile = f;<br>                mContext = context;<br>                mMs = <span class="hljs-keyword">new</span> MediaScannerConnection(context, <span class="hljs-keyword">this</span>);<br>                mMs.connect();<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMediaScannerConnected</span><span class="hljs-params">()</span> </span>&#123;<br>                mMs.scanFile(mFile.getAbsolutePath(), <span class="hljs-keyword">null</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onScanCompleted</span><span class="hljs-params">(String path, Uri uri)</span> </span>&#123;<br>                Intent intent = <span class="hljs-keyword">new</span> Intent(Intent.ACTION_VIEW);<br>                intent.setData(uri);<br>                mContext.startActivity(intent);<br>                mMs.disconnect();<br>            &#125;<br><br>        &#125;<br>        View v = context.findViewById(android.R.id.content);<br>        Snackbar snackbar = Snackbar.make(v, <span class="hljs-string">"保存成功"</span>, Snackbar.LENGTH_LONG);<br>        snackbar.setAction(<span class="hljs-string">"点击查看"</span>, v1 -&gt; &#123;<br>            <span class="hljs-comment">// showGallery(context);</span><br>            <span class="hljs-keyword">new</span> SingleMediaScanner(context, <span class="hljs-keyword">new</span> File(path));<br>        &#125;);<br>        snackbar.show();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showGallery</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>        context.startActivity(<span class="hljs-keyword">new</span> Intent(Intent.ACTION_VIEW,<br>            Uri.parse(<span class="hljs-string">"content://media/internal/images/media"</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>调用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Uposter.saveImage(mContext, <span class="hljs-string">"/sotrage/0/a.jpg"</span>)<br></code></pre></td></tr></table></figure>

<h2 id="方案-2"><a href="#方案-2" class="headerlink" title="方案 2"></a>方案 2</h2><p>或者通过面向对象的方式来实现：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> interface Share &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Activity context)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isInstall</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">String</span> path)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">String</span> <span class="hljs-title">getNotInstallTip</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>其他类实现上面的接口，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PosterShareWechat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PosterShare</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Activity context;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Activity context)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.context = context;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isInstall</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Uapp.isWechatAvilible(context);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(String path)</span> </span>&#123;<br>        <span class="hljs-comment">// [Android 分享功能之 微信 图片分享 - 陈三哥 - CSDN博客](https://blog.csdn.net/brokge/article/details/51851625)</span><br>        <span class="hljs-comment">// [java - exposed beyond app through ClipData.Item.getUri - Stack Overflow](https://stackoverflow.com/questions/48117511/exposed-beyond-app-through-clipdata-item-geturi)</span><br>        Uri uri = FileProvider.getUriForFile(context.getApplicationContext(), context.getPackageName() + <span class="hljs-string">".provider"</span>, <span class="hljs-keyword">new</span> File(path));<br><br>        Intent shareIntent = <span class="hljs-keyword">new</span> Intent();<br>        <span class="hljs-comment">//发送图片到朋友圈</span><br>        <span class="hljs-comment">//ComponentName comp = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.ShareToTimeLineUI");</span><br>        <span class="hljs-comment">//发送图片给好友。</span><br>        ComponentName comp = <span class="hljs-keyword">new</span> ComponentName(<span class="hljs-string">"com.tencent.mm"</span>, <span class="hljs-string">"com.tencent.mm.ui.tools.ShareImgUI"</span>);<br>        shareIntent.setComponent(comp);<br>        shareIntent.setAction(Intent.ACTION_SEND);<br>        shareIntent.putExtra(Intent.EXTRA_STREAM, uri);<br>        shareIntent.setType(<span class="hljs-string">"image/jpeg"</span>);<br>        context.startActivity(Intent.createChooser(shareIntent, <span class="hljs-string">"分享图片"</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getNotInstallTip</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"您没有安装微信"</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>调用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">posterShare = <span class="hljs-keyword">new</span> PosterShareWechat();<br>posterShare.init(context);<br><span class="hljs-keyword">if</span> (!posterShare.isInstall()) &#123;<br>    Utoast.show(posterShare.getNotInstallTip());<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>posterShare.execute(path);<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>基于委托的SharedPreference封装</title>
    <url>/android/%E5%9F%BA%E4%BA%8E%E5%A7%94%E6%89%98%E7%9A%84SharedPreference%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="委托教程"><a href="#委托教程" class="headerlink" title="委托教程"></a>委托教程</h2><ul>
<li><a href="https://www.kotlincn.net/docs/reference/delegated-properties.html" target="_blank" rel="noopener">委托属性 - Kotlin 语言中文站</a></li>
</ul>
<p>关于委托的教程，具体参考上面链接即可，下面直接给出<code>SharedPreferences</code>封装的代码。</p>
<h2 id="SharedPreference-封装"><a href="#SharedPreference-封装" class="headerlink" title="SharedPreference 封装"></a>SharedPreference 封装</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultSPreference</span>&lt;<span class="hljs-type">T</span>&gt;</span>(key: String, defaultValue: T) :<br>    SPreference&lt;T&gt;(<span class="hljs-string">"default"</span>, key, defaultValue)<br><br><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SPreference</span>&lt;<span class="hljs-type">T</span>&gt;</span>(<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> spName: String,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> key: String,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> defaultValue: T<br>) : ReadWriteProperty&lt;Any?, T&gt; &#123;<br>    <span class="hljs-keyword">val</span> prefs: SharedPreferences <span class="hljs-keyword">by</span> lazy &#123;<br>        App.instance.getSharedPreferences(spName, Context.MODE_PRIVATE)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getValue</span><span class="hljs-params">(thisRef: <span class="hljs-type">Any</span>?, property: <span class="hljs-type">KProperty</span>&lt;*&gt;)</span></span>: T &#123;<br>        <span class="hljs-keyword">return</span> findPreference(key, defaultValue)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setValue</span><span class="hljs-params">(thisRef: <span class="hljs-type">Any</span>?, property: <span class="hljs-type">KProperty</span>&lt;*&gt;, value: <span class="hljs-type">T</span>)</span></span> &#123;<br>        putPreference(key, value)<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">findPreference</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, <span class="hljs-keyword">default</span>: <span class="hljs-type">T</span>)</span></span>: T = with(prefs) &#123;<br>        <span class="hljs-keyword">val</span> res: Any = <span class="hljs-keyword">when</span> (<span class="hljs-keyword">default</span>) &#123;<br>            <span class="hljs-keyword">is</span> <span class="hljs-built_in">Long</span> -&gt; getLong(name, <span class="hljs-keyword">default</span>)<br>            <span class="hljs-keyword">is</span> String -&gt; getString(name, <span class="hljs-keyword">default</span>) ?: <span class="hljs-keyword">default</span><br>            <span class="hljs-keyword">is</span> <span class="hljs-built_in">Int</span> -&gt; getInt(name, <span class="hljs-keyword">default</span>)<br>            <span class="hljs-keyword">is</span> <span class="hljs-built_in">Boolean</span> -&gt; getBoolean(name, <span class="hljs-keyword">default</span>)<br>            <span class="hljs-keyword">is</span> <span class="hljs-built_in">Float</span> -&gt; getFloat(name, <span class="hljs-keyword">default</span>)<br>            <span class="hljs-keyword">else</span> -&gt; <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">"This type can not be resolved in SpPreferences"</span>)<br>        &#125;<br>        <span class="hljs-meta">@Suppress(<span class="hljs-meta-string">"UNCHECKED_CAST"</span>)</span><br>        res <span class="hljs-keyword">as</span> T<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;U&gt;</span> <span class="hljs-title">putPreference</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, value: <span class="hljs-type">U</span>)</span></span> = with(prefs.edit()) &#123;<br>        <span class="hljs-keyword">when</span> (value) &#123;<br>            <span class="hljs-keyword">is</span> <span class="hljs-built_in">Long</span> -&gt; putLong(name, value)<br>            <span class="hljs-keyword">is</span> String -&gt; putString(name, value)<br>            <span class="hljs-keyword">is</span> <span class="hljs-built_in">Int</span> -&gt; putInt(name, value)<br>            <span class="hljs-keyword">is</span> <span class="hljs-built_in">Boolean</span> -&gt; putBoolean(name, value)<br>            <span class="hljs-keyword">is</span> <span class="hljs-built_in">Float</span> -&gt; putFloat(name, value)<br>            <span class="hljs-keyword">else</span> -&gt; <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">"This type can not be saved into SpPreferences"</span>)<br>        &#125;.apply()<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> SPreference<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">remove</span><span class="hljs-params">(key: <span class="hljs-type">String</span>)</span></span> &#123;<br>    prefs.edit().remove(key).apply()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> SPreference<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">clear</span><span class="hljs-params">()</span></span> &#123;<br>    prefs.edit().clear().apply()<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> a: String <span class="hljs-keyword">by</span> DefaultSPreference(Key.SCHEDULE_ITEM_A.name, <span class="hljs-string">""</span>)<br></code></pre></td></tr></table></figure>

<p>通过上面的委托，给 <code>a</code> 赋值就直接保存到 SharedPreferences 文件中了。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">a = <span class="hljs-string">"your value here"</span><br></code></pre></td></tr></table></figure>

<p>当获取 <code>a</code> 的值时，实际调用的就是 SharedPreferences 中<code>key</code>对应的值</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">toast(a)<br></code></pre></td></tr></table></figure>

<p>如果使用了 data-binding，可以直接把 <code>a</code>，传递给 <code>EditText</code>，<br>当页面加载后， <code>EditText</code> 中的值就会被 <code>a</code> 填充；<br>当 <code>EditText</code> 中的文字变化时，就会存到 SharedPreferences 中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/editTextA"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:inputType</span>=<span class="hljs-string">"none"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:padding</span>=<span class="hljs-string">"10dp"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:text</span>=<span class="hljs-string">"@=&#123;data.a&#125;"</span>/&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>可以在<code>flow</code>项目中查看更多细节 <code>https://github.com/lyloou/flow</code></p>
<p>参考资料：《kotlin for android developers》中文版——泛型 preference 委托</p>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Android学习资料</title>
    <url>/android/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<h2 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a>电子书</h2><h3 id="https-github-com-futurice-android-best-practices"><a href="#https-github-com-futurice-android-best-practices" class="headerlink" title="https://github.com/futurice/android-best-practices"></a><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="noopener">https://github.com/futurice/android-best-practices</a></h3><h3 id="Android-开发最佳实践"><a href="#Android-开发最佳实践" class="headerlink" title="Android 开发最佳实践"></a><a href="http://www.kancloud.cn/thinkphp/android-best-practices" target="_blank" rel="noopener">Android 开发最佳实践</a></h3><ul>
<li>Gradle 配置(例如：使用 Maven 依赖方案代替使用导入jar包方案、通过<code>gradle.properties</code>配置敏感信息)</li>
<li>如何安排包的结构；<a href="https://www.kancloud.cn/thinkphp/android-best-practices/42171" target="_blank" rel="noopener">https://www.kancloud.cn/thinkphp/android-best-practices/42171</a></li>
<li>资源文件命名推荐；<a href="https://www.kancloud.cn/thinkphp/android-best-practices/42175" target="_blank" rel="noopener">https://www.kancloud.cn/thinkphp/android-best-practices/42175</a></li>
</ul>
<h3 id="Android-Studio-使用艺术"><a href="#Android-Studio-使用艺术" class="headerlink" title="Android Studio 使用艺术"></a><a href="https://www.gitbook.com/book/quanke/android-studio/details" target="_blank" rel="noopener">Android Studio 使用艺术</a></h3><h2 id="Android-Best-Practices"><a href="#Android-Best-Practices" class="headerlink" title="Android Best Practices"></a><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="noopener">Android Best Practices</a></h2><h2 id="牛人网址"><a href="#牛人网址" class="headerlink" title="牛人网址"></a>牛人网址</h2><ul>
<li><a href="http://keeganlee.me/archive" target="_blank" rel="noopener">Keegan小钢</a></li>
<li><a href="http://stormzhang.com" target="_blank" rel="noopener">stormzhang</a></li>
<li><a href="http://droidyue.com/" target="_blank" rel="noopener">技术小黑屋</a></li>
<li><a href="http://androiddevtools.cn/" target="_blank" rel="noopener">AndroidDevTools</a></li>
<li><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="noopener">郭霖的专栏</a></li>
<li><a href="http://www.importnew.com/" target="_blank" rel="noopener">ImportNew</a></li>
<li><a href="http://www.trinea.cn/" target="_blank" rel="noopener">Trinea</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android安全性</title>
    <url>/android/%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h2 id="网络安全性配置"><a href="#网络安全性配置" class="headerlink" title="网络安全性配置"></a>网络安全性配置</h2><ul>
<li><a href="https://developer.android.com/training/articles/security-config" target="_blank" rel="noopener">网络安全性配置  |  Android Developers</a></li>
<li><a href="https://www.jianshu.com/p/57047a84e559" target="_blank" rel="noopener">Android P(9.0) http 网络请求的问题 - 简书</a></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- res/xml/network_security_config.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">network-security-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base-config</span> <span class="hljs-attr">cleartextTrafficPermitted</span>=<span class="hljs-string">"true"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">network-security-config</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:networkSecurityConfig</span>=<span class="hljs-string">"@xml/network_security_config"</span></span><br><span class="hljs-tag">&gt;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中布局技巧</title>
    <url>/android/%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="使用tools属性"><a href="#使用tools属性" class="headerlink" title="使用tools属性"></a>使用<code>tools</code>属性</h2><h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0309/2567.html" target="_blank" rel="noopener">android中xml tools属性详解</a></li>
<li><a href="http://tools.android.com/tech-docs/tools-attributes" target="_blank" rel="noopener">Tools Attributes</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中的广播</title>
    <url>/android/%E5%B9%BF%E6%92%AD/</url>
    <content><![CDATA[<h2 id="BroadcastReceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h2><ul>
<li>广播是一种可以跨进程的通信方式。（引用自：《第一行代码》p199）</li>
</ul>
<blockquote>
<p>需要注意的是，不要在<code>onReceiver()</code>中添加过多的逻辑或进行任何耗时操作，因为在广播接收器中是不允许开启线程的，<br>当<code>onReceiver()</code>方法运行了较长时间而没有结束时，程序就会报错。因此，广播接收器更多的是扮演一种打开其他组件的角色，<br>比如创建一条状态栏通知，或者启动一个服务等。（引用自：《第一行代码》p196）</p>
</blockquote>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开源库相关</title>
    <url>/android/%E5%BC%80%E6%BA%90%E5%BA%93/</url>
    <content><![CDATA[<h2 id="ButterKnife注解"><a href="#ButterKnife注解" class="headerlink" title="ButterKnife注解"></a>ButterKnife注解</h2><p><strong>网址</strong>： <a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">https://github.com/JakeWharton/butterknife</a></p>
<p><strong>注意</strong>：如果想要在lib/app中使用Butterknife库，则需要在当前module的build.gradle中添加compile信息;<br>如果你在lib库的build.gradle中引用了Butterknife的compile信息，<br>然后想要在app中直接使用Butterknife，这样的结果是注解失败；就会出现NullpointException;<br><code>https://www.google.com/search?q=NullPointerException+butterknife</code></p>
<p><strong>AS插件</strong>：Android Butterknife Zelezny</p>
<ul>
<li>在使用的时候，注意，把光标放置在<code>R.layout.layout_other</code>上面，点击<code>Alt+Insert</code>，选择<code>Generate ButterKnife Injections</code>；</li>
<li>自定义live template模块：<code>ButterKnife.findById</code> –&gt; <code>fbi</code>。（即按一下fbi，就显示出来<code>ButterKnife.findById(, R.id.)</code>）</li>
</ul>
<p><strong>使用 ButterKnife 可能会让你的IDE编译速度变慢。</strong></p>
<blockquote>
<p>In the initial configuration incremental compilation takes 45s out of 1m 10s, but if Butterknife is removed then project is compiled in 15s only! Three times faster! Whole incremental build without Butterknife is 40s.<br>First and most important, the hypothesis was correct, modularizing project can significantly speed up build process, but not for all configurations.</p>
</blockquote>
<ul>
<li><a href="https://medium.freecodecamp.org/how-modularisation-affects-build-time-of-an-android-application-43a984ce9968" target="_blank" rel="noopener">How modularization can speed up your Android app’s built time</a></li>
</ul>
<h2 id="Volley"><a href="#Volley" class="headerlink" title="Volley"></a>Volley</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li>依据application上下文，初始化volley组件；</li>
<li>配置参数和请求数据；</li>
<li>添加到请求队列；</li>
<li>结果处理；</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>一般情况下，用get和post两种请求方式；<br>post请求使用：StringRequest对象；<br>get请求使用：JsonObjectRequest对象；</p>
<h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="https://github.com/mcxiaoke/android-volley" target="_blank" rel="noopener">android-volley</a></li>
<li><a href="http://bxbxbai.github.io/2014/09/14/android-working-with-volley/" target="_blank" rel="noopener">Android库Volley的使用介绍</a></li>
</ul>
<h2 id="Stetho-A-debug-bridge-for-Android-applications"><a href="#Stetho-A-debug-bridge-for-Android-applications" class="headerlink" title="Stetho - A debug bridge for Android applications"></a>Stetho - A debug bridge for Android applications</h2><blockquote>
<p>Stetho is a debug bridge for Android applications from Facebook that integrates with the Chrome desktop browser’s Developer Tools. With Stetho you can easily inspect your application, most notably the network traffic. It also allows you to easily inspect and edit SQLite databases and the shared preferences in your app. You should, however, make sure that Stetho is only enabled in the debug build and not in the release build variant.<br><a href="https://github.com/futurice/android-best-practices#use-stetho" target="_blank" rel="noopener">https://github.com/futurice/android-best-practices#use-stetho</a></p>
</blockquote>
<h2 id="AndroidUtilCode"><a href="#AndroidUtilCode" class="headerlink" title="AndroidUtilCode"></a><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="noopener">AndroidUtilCode</a></h2><blockquote>
<p> Android developers should collect the following utils</p>
</blockquote>
<h2 id="BaseMoudle"><a href="#BaseMoudle" class="headerlink" title="BaseMoudle"></a><a href="https://github.com/xiaoxiangyeyuHeaven/BaseMoudle" target="_blank" rel="noopener">BaseMoudle</a></h2><blockquote>
<p>BaseMoudle是一个支持rxjava+retrofit2+mvp 同时支持mvc开发的一款框架</p>
</blockquote>
<h2 id="UltimateAndroidReference"><a href="#UltimateAndroidReference" class="headerlink" title="UltimateAndroidReference"></a><a href="https://github.com/aritraroy/UltimateAndroidReference" target="_blank" rel="noopener">UltimateAndroidReference</a></h2><blockquote>
<p>Ultimate Android Reference - Your Road to Become a Better Android Developer （学习什么？这里清除了）</p>
</blockquote>
<h2 id="MultiType"><a href="#MultiType" class="headerlink" title="MultiType"></a><a href="https://github.com/drakeet/MultiType" target="_blank" rel="noopener">MultiType</a></h2><h2 id="Effective-MultiType"><a href="#Effective-MultiType" class="headerlink" title="Effective-MultiType"></a><a href="https://github.com/drakeet/Effective-MultiType" target="_blank" rel="noopener">Effective-MultiType</a></h2><blockquote>
<p>现在好了，我们有了 MultiType，简单来说，MultiType 就是一个多类型列表视图的中间分发框架，它能帮助你快速并且清晰地开发一些复杂的列表页面。 它本是为聊天页面开发的，聊天页面的消息类型也是有大量不同种类，且新增频繁，而 MultiType 能够轻松胜任。</p>
</blockquote>
<h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>引入开源库的时候，注意要及时引入 proguard （以免忘记）</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中巧用官方自带View —— 导航</title>
    <url>/android/%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<h2 id="TabLayout"><a href="#TabLayout" class="headerlink" title="TabLayout"></a>TabLayout</h2><ul>
<li>步骤：<ol>
<li>布局（TabLayout和ViewPager位置关系）；</li>
<li>自定义Adapter（继承自 FragmentPagerAdapter），并配置Fragment和tab标题内容；</li>
<li>java代码中给ViewPager绑定Adapter；</li>
</ol>
</li>
</ul>
<ol>
<li><p>布局</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">merge</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">              <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">View</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"0.1dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/tab_sep"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.support.design.widget.TabLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/sliding_tabs"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">"@style/MyCustomTabLayout"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabMode</span>=<span class="hljs-string">"fixed"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">View</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"0.1dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/tab_sep"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.support.v4.view.ViewPager</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/viewpager"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"0px"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">merge</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>自定义Adapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModeListVpAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FragmentPagerAdapter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String mTabTitles[];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Mode.Position[] mPosition = Mode.Position.values();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> PAGE_COUNT = mPosition.length;<br>    <span class="hljs-keyword">private</span> Context mContext;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ModeListVpAdapter</span><span class="hljs-params">(FragmentManager fm, Context context)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(fm);<br>        mContext = context;<br>        mTabTitles = context.getResources().getStringArray(R.array.main_tabs);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> PAGE_COUNT;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Fragment <span class="hljs-title">getItem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ModeListFragment.newInstance(position); <span class="hljs-comment">// 根据position返回对应的fragment</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CharSequence <span class="hljs-title">getPageTitle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mTabTitles[position]; <span class="hljs-comment">// 根据position返回对应的tab标题</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ViewPager viewPager = (ViewPager) findViewById(R.id.viewpager);<br>viewPager.setAdapter(<span class="hljs-keyword">new</span> ModeListVpAdapter(getSupportFragmentManager(), mContext));<br><br>TabLayout tabLayout = (TabLayout) findViewById(R.id.sliding_tabs);<br>tabLayout.setupWithViewPager(viewPager);<br>viewPager.setCurrentItem(<span class="hljs-number">2</span>); <span class="hljs-comment">// 默认选中第二个tab</span><br></code></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><a href="https://guides.codepath.com/android/google-play-style-tabs-using-tablayout" target="_blank" rel="noopener">Google Play Style Tabs using TabLayout</a></li>
</ul>
<h2 id="DrawerLayout-amp-NavigationView"><a href="#DrawerLayout-amp-NavigationView" class="headerlink" title="DrawerLayout &amp; NavigationView"></a>DrawerLayout &amp; NavigationView</h2><ul>
<li>NavigationView隐藏menu：不使用app:menu属性即可；</li>
<li>给NavigationView头部布局组件设置点击事件：可以通过<code>mNavView.getHeaderView(0)</code>获取根布局的view引用；</li>
<li>禁用滑动<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// lock</span><br>mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);<br><span class="hljs-comment">// unlock</span><br>mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://stackoverflow.com/questions/17051104/disable-the-swipe-gesture-that-opens-the-navigation-drawer-in-android" target="_blank" rel="noopener">disable the swipe gesture that opens the navigation drawer in android</a></li>
<li><a href="http://stackoverflow.com/questions/26440879/how-do-i-use-drawerlayout-to-display-over-the-actionbar-toolbar-and-under-the-st" target="_blank" rel="noopener">How do I use DrawerLayout to display over the ActionBar/Toolbar and under the status bar?</a></li>
<li><a href="http://www.jianshu.com/p/3fe2acac0ddb" target="_blank" rel="noopener">使用 DrawerLayout 实现 Material Design风格的侧滑</a></li>
</ul>
<h2 id="ToolBar"><a href="#ToolBar" class="headerlink" title="ToolBar"></a>ToolBar</h2><ul>
<li><p>切换fragment时对应显示不同的菜单：<br>通过控制自定义的标志，然后调用<code>invalidateOptionsMenu();</code>刷新菜单即可；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onPrepareOptionsPanel</span><span class="hljs-params">(View view, Menu menu)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (mMode == DEVICE_FRAGMENT) &#123;<br>        menu.findItem(R.id.action_add).setVisible(<span class="hljs-keyword">true</span>);<br>        menu.findItem(R.id.action_ok).setVisible(<span class="hljs-keyword">false</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mMode == SETTING_TIME_FRAGMENT) &#123;<br>        menu.findItem(R.id.action_add).setVisible(<span class="hljs-keyword">false</span>);<br>        menu.findItem(R.id.action_ok).setVisible(<span class="hljs-keyword">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onPrepareOptionsPanel(view, menu);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>在Fragment中获取ToolBar对象，并监听点击事件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Toolbar toolbar = (Toolbar) getActivity().findViewById(R.id.toolbar);<br>TextView tvTitle = (TextView) toolbar.findViewById(R.id.tv_nav_title);<br>tvTitle.setText(<span class="hljs-string">"标题1"</span>);<br><br><span class="hljs-comment">// 处理toolbar上的菜单点击事件；</span><br>toolbar.setOnMenuItemClickListener(<span class="hljs-keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onMenuItemClick</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span> (item.getItemId()) &#123;<br>            <span class="hljs-keyword">case</span> R.id.action_ok:<br>                Usp.init(mContext).putInt(CKeys.KEY_TS, indexInTIMES(mRgSettingTime.getCheckedRadioButtonId()));<br>                Utoast.toastOnMain(mContext, mContext.getString(R.string.time_setting_setted));<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><blockquote>
<p>Toolbar 里面有两个属性很关键:<br>android:minHeight=”?attr/actionBarSize”,这个表示引用系统 ActionBar 的高度.<br>android:paddingTop=”@dimen/tool_bar_top_padding”这个是来引用资源文件里面的tool_bar_top_padding的高度,这个高度主要是为了对5.0做适配,在5.0 上为24dp,其他版本为0dp</p>
</blockquote>
<h3 id="外部链接-1"><a href="#外部链接-1" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://stackoverflow.com/questions/26813991/actionbar-toolbar-not-showing-on-lollipop-version-of-app" target="_blank" rel="noopener">ActionBar/Toolbar not showing on Lollipop version of app</a></li>
<li><a href="http://stackoverflow.com/questions/26440879/how-do-i-use-drawerlayout-to-display-over-the-actionbar-toolbar-and-under-the-st" target="_blank" rel="noopener">How do I use DrawerLayout to display over the ActionBar/Toolbar and under the status bar?</a></li>
<li><a href="http://www.jianshu.com/p/3fe2acac0ddb" target="_blank" rel="noopener">使用 DrawerLayout 实现 Material Design风格的侧滑</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中的小技巧</title>
    <url>/android/%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="双击-view-执行-runnable"><a href="#双击-view-执行-runnable" class="headerlink" title="双击 view 执行 runnable"></a>双击 view 执行 runnable</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDoubleClickRunnable</span><span class="hljs-params">(View view, Runnable task)</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> DoubleClick().click(view, task);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleClick</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 双击 View 触发 task</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">click</span><span class="hljs-params">(View view, Runnable task)</span> </span>&#123;<br>        view.setOnClickListener(v -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (++count &gt;= <span class="hljs-number">2</span>) &#123;<br>                task.run();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">new</span> Timer().schedule(<span class="hljs-keyword">new</span> TimerTask() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                    count = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;, <span class="hljs-number">500</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>例如：双击回到顶部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 双击 toolbar，让 webivew 回到顶部</span><br>Uview.setDoubleClickRunnable(mToolbar, () -&gt; mWebView.scrollTo(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure>

<h2 id="按返回键，返回到桌面而不销毁程序"><a href="#按返回键，返回到桌面而不销毁程序" class="headerlink" title="按返回键，返回到桌面而不销毁程序"></a>按返回键，返回到桌面而不销毁程序</h2><p>解决办法：在需要退出的地方，使用<code>Activity.moveTaskToBack(true)</code>方法</p>
<h3 id="具体代码："><a href="#具体代码：" class="headerlink" title="具体代码："></a>具体代码：</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">onKeyDown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; mContext.isTaskRoot())&#123;<br>        moveTaskToBack(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.<span class="hljs-title">onKeyDown</span><span class="hljs-params">(keyCode, event)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://blog.csdn.net/nihaoqiulinhe/article/details/16822279" target="_blank" rel="noopener">Android 按返回键退出程序但不销毁</a></li>
</ul>
<h2 id="跳过欢迎界面时机"><a href="#跳过欢迎界面时机" class="headerlink" title="跳过欢迎界面时机"></a>跳过欢迎界面时机</h2><p>原理：使用 Application 的生命周期。（在后台未被清理的时候，再次打开程序时 Application 的<code>onCreate()</code>方法不会再执行。）</p>
<p>关于 Application 的 onCreate()方法：<br>在应用的第一个组件启动之前，系统会先调用此方法。</p>
<h3 id="外部链接-1"><a href="#外部链接-1" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://blog.csdn.net/ly1414725328/article/details/50752123" target="_blank" rel="noopener">【Android】启动时跳过欢迎界面的时机</a></li>
<li><a href="http://www.cnblogs.com/renqingping/archive/2012/10/24/Application.html" target="_blank" rel="noopener">Android 中 Application 类用法</a><blockquote>
<p>Application 对象的生命周期是整个程序中最长的，它的生命周期就等于这个程序的生命周期。<br>因为它是全局的单例的，所以在不同的 Activity,Service 中获得的对象都是同一个对象。<br>所以可以通过 Application 来进行一些，<br>如：数据传递、数据共享和数据缓存等操作。</p>
</blockquote>
</li>
<li><a href="http://www.molingyu.com/blog/2015/05/12/application%E4%B8%8Eactivity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/" target="_blank" rel="noopener">Application 与 Activity 的生命周期</a></li>
</ul>
<h2 id="给-Activity-添加快捷方式到桌面"><a href="#给-Activity-添加快捷方式到桌面" class="headerlink" title="给 Activity 添加快捷方式到桌面"></a>给 Activity 添加快捷方式到桌面</h2><h3 id="外部链接-2"><a href="#外部链接-2" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://stackoverflow.com/questions/21542409/home-screen-app-shortcut-is-not-working-android-app-isnt-installed" target="_blank" rel="noopener">home screen app shortcut is not working android. app isn’t installed</a></li>
<li><a href="http://blog.zanlabs.com/2015/03/14/android-shortcut-summary/" target="_blank" rel="noopener">Android 桌面快捷方式那些事与那些坑</a></li>
</ul>
<h2 id="运行-java-文件"><a href="#运行-java-文件" class="headerlink" title="运行 java 文件"></a>运行 java 文件</h2><p>在 Android Studio 中的 app module 中运行 Java 测试代码，会发现很慢；<br>可以尝试创建 java library 模块来运行 java 测试今古代码；</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>推送方案选取</title>
    <url>/android/%E6%8E%A8%E9%80%81%E6%96%B9%E6%A1%88%E9%80%89%E5%8F%96/</url>
    <content><![CDATA[<h1 id="免费"><a href="#免费" class="headerlink" title="免费"></a>免费</h1><ul>
<li>信鸽</li>
</ul>
<h1 id="第三方推送服务"><a href="#第三方推送服务" class="headerlink" title="第三方推送服务"></a>第三方推送服务</h1><ul>
<li>友盟</li>
<li>极光推送</li>
</ul>
<h1 id="手机ROM厂商推送"><a href="#手机ROM厂商推送" class="headerlink" title="手机ROM厂商推送"></a>手机ROM厂商推送</h1><h2 id="Flyme"><a href="#Flyme" class="headerlink" title="Flyme"></a>Flyme</h2><p>Flyme推送目前支持哪些平台？<br>Flyme推送平台目前只支持魅族手机的flyme系统。</p>
<p>Android推送中，多个app都使用推送时，他们会共享连接吗？<br>在Flyme系统（4.0，4.5，5）上，会直接使用系统长连接通道，所有app会和系统共享一个长连接；目前在其他Rom上，没有共享连接。</p>
<p>Flyme推送收费吗？<br>Flyme推送平台的基础推送功能是免费的，但是某些定制功能会考虑收费，在功能和体验上会有不同。</p>
<p>参考资料<br><a href="http://open-wiki.flyme.cn/index.php?title=魅族推送平台常见问题" target="_blank" rel="noopener">http://open-wiki.flyme.cn/index.php?title=魅族推送平台常见问题</a></p>
<h2 id="MIUI"><a href="#MIUI" class="headerlink" title="MIUI"></a>MIUI</h2><p>小米消息推送服务在MIUI上为系统级通道，并且全<br>平台通用，可以为开发者提供稳定、可靠、高效的<br>推送服务</p>
<p>参考资料</p>
<ul>
<li><a href="http://dev.xiaomi.com/console/appservice/push.html" target="_blank" rel="noopener">http://dev.xiaomi.com/console/appservice/push.html</a></li>
</ul>
<h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/eclipsexys/article/details/52575602" target="_blank" rel="noopener">推送 从入门到放弃</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTMxMjQzMw==&mid=2648112527&idx=1&sn=b23c1b5f3e32e343ad96d705bd4d63ff" target="_blank" rel="noopener">国内Top500Android应用分析报告</a></li>
</ul>
<h1 id="渠道列表"><a href="#渠道列表" class="headerlink" title="渠道列表"></a>渠道列表</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">10086</span>com<br><span class="hljs-number">189</span>store<br><span class="hljs-number">360</span>mobile<br><span class="hljs-number">3</span>gcn<br><span class="hljs-number">91</span>market<br>anzhi<br>appchina<br>baidu<br>gfan<br>googleplay<br>hicloud<br>lenovomm<br>meizu<br>mumayi<br>myapp<br>nduoa<br>samsungapps<br>uc<br>wandoujia<br>wostore<br>xiaomi<br>yingyongbao<br>yingyonghui<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>《Android群英传》读书笔记</title>
    <url>/android/%E3%80%8AAndroid%E7%BE%A4%E8%8B%B1%E4%BC%A0%E3%80%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="《Android群英传》-笔记"><a href="#《Android群英传》-笔记" class="headerlink" title="《Android群英传》 笔记"></a>《Android群英传》 笔记</h2><p>| apk 安装路径： –p220(q1)</p>
<ul>
<li><code>/system/app</code> : 系统及别的 apk;</li>
<li><code>/data/app</code> : 用户安装的 apk;</li>
</ul>
<p>| android 管理器<br>  pm(package manager)： 主宰着应用的包管理；<br>  am(activity manager): 主宰着应用的活动管理； –p210(q1)</p>
<p>| 如果说系统信息好比是国家的 GDP， 那么 Apk 应用信息则像是对个人的经济普查。 –p210(q1)</p>
<p>| 一个 Task 中的 Activity 可以来自不同的 APP，<br>同一个 App 的  Activity 也可能不再一个 Task 中。 –p200(q1)</p>
<p>| 一个合理的任务调度栈不仅是性能的保证，更是提供性能的基础。 –p200(q1)</p>
<p>| 如果你得自定义 View 需要频繁刷新，或者刷新时数据处理量比较大，<br>那么就可以考虑使用 SurfaceView 来取代 View 了。 –p155(q1)</p>
<p>| canvas 的方法： –p118(q1)</p>
<ul>
<li>save(): 保存画布；作用是将之前的所有已绘制图像保存起来，让后续的操作就好像在新图层上操作一样;</li>
<li>restore(): 合并图层；作用是将 save 之后的和 save 之前的图像进行合并；</li>
<li>translate(): 坐标系的平移；</li>
<li>rotate(): 坐标系的翻转；</li>
</ul>
<p>| scrollTo、scrollBy 方法移动的是 View 的 content, 即让 View 的内容移动( content )，<br>如果在 ViewGroup 中使用 scrollTo、 scrollBy 方法，那么移动的将是所有子 View；<br>例如： TextView, content 就是它的文本; ImageView, content 就是它的 drawable. –p95(q1)</p>
<p>| 形象的事件处理机制： –p62(q1)</p>
<ul>
<li>事件的传递顺序：<br>  总经理(MyViewGroupA) –&gt; 部长(MyViewGroupB) –&gt; 你(View)。<br>  事件传递的时候，先执行 dispatchTouchEvent() 方法，再执行 onInterceptTouchEvent()<br>  方法（注意：View 没有 onInterceptTouchEvent方法，只有 ViewGroup 有这个方法）。</li>
<li>事件的处理顺序：<br>  你(View) –&gt; 部长(MyViewGroupB) –&gt; 总经理(MyViewGroupB)。<br>  事件处理都是执行 onTouchEvent() 方法。</li>
<li>事件传递的返回值： true, 拦截；false, 不拦截, 继续流程；    </li>
<li>事件处理的返回值： true, 处理了，不用审核； false, 给上级处理。</li>
<li>初始情况下，返回值都是 false。</li>
</ul>
<p>| 动态控制UI模板的方法：接口回调、提供 public 方法。 –p48(q1)</p>
<ul>
<li>接口回调<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Ilistener</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">click</span><span class="hljs-params">(View v)</span></span>;  <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">innerMethod</span><span class="hljs-params">(View v)</span> </span>&#123;<br>  mIlistener.click(v);<br>&#125;<br><br><span class="hljs-comment">// 声明和初始化</span><br>Ilistener mIlistener;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(Ilistener listener)</span></span>&#123;<br>  mIlistener = listener;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>提供 public 方法<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String mStr;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">publicMethod</span><span class="hljs-params">(String str)</span> </span>&#123;<br>  mStr = str;<br>&#125;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>| 解释 bitmap 和 Canvas  –p38(q1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 装载画布：将 bitmap 装载到画布 canvas 上,</span><br><span class="hljs-comment">// 这个 bitmap 存储了所有绘制在 Canvas.drawXXX 方法的像素信息</span><br>Canvas canvas = <span class="hljs-keyword">new</span> Canvas(bitmap);<br></code></pre></td></tr></table></figure>
<p>代码解释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Canvas canvas;<br>Bitmap bitmap1, bitmap2;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initBitmap</span><span class="hljs-params">()</span> </span>&#123;<br>  bitmap1 = <span class="hljs-keyword">new</span> Bitmap(...);<br>  bitmap2 = <span class="hljs-keyword">new</span> Bitmap(...);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initCanvas</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">this</span>.canvas = <span class="hljs-keyword">new</span> Canvas(bitmap2);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(Canvas canvas)</span> </span>&#123;<br>  canvas.drawBitmap(bitmap1, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">null</span>);<br>  canvas.drawBitmap(bitmap2, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">null</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">changeBitmap2</span><span class="hljs-params">()</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>


<p>| Canvas 就像一个画板，使用 Paint 就可以在上面作画了。 –p37(q1)</p>
<p>| 其实，Android 就好像那个蒙着眼睛画画的人，你必须精确地告诉它如何去画，<br>它才能绘出你想要的图形；–p34(q1)|</p>
<p>| Intent - Android上的信使，信息传递的载体；<br>–p5(q1)</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝SDK支付</title>
    <url>/android/%E6%94%AF%E4%BB%98%E5%AE%9DSDK%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<h1 id="通过本地安装的支付宝支付"><a href="#通过本地安装的支付宝支付" class="headerlink" title="通过本地安装的支付宝支付"></a>通过本地安装的支付宝支付</h1><p>Android端的实现比较简单，</p>
<ol>
<li><a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.8MZxo2&treeId=59&articleId=103662&docType=1" target="_blank" rel="noopener">下载SDK和DEMO</a></li>
<li>导入支付宝sdk后，需要注意权限、配置、混淆等；</li>
<li>通过后台获取得到<code>orderInfo</code>字符串</li>
<li>唤起支付宝：【需要在新线程中调用支付接口。（可参考alipay_demo实现）】</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> String orderInfo = <span class="hljs-string">"从后台获取得到的orderInfo"</span>;<br><br>PayTask alipay = <span class="hljs-keyword">new</span> PayTask(mActivity);<br>Map&lt;String, String&gt; result = alipay.payV2(orderInfo, <span class="hljs-keyword">true</span>);<br>PayResult payResult = <span class="hljs-keyword">new</span> PayResult(result);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 对于支付结果，请商户依赖服务端的异步通知结果。同步通知结果，仅作为支付结束的通知。</span><br><span class="hljs-comment"> */</span><br>String resultInfo = payResult.getResult();<span class="hljs-comment">// 同步返回需要验证的信息</span><br>String resultStatus = payResult.getResultStatus();<br><br><span class="hljs-comment">// 判断resultStatus 为9000则代表支付成功</span><br><span class="hljs-keyword">if</span> (TextUtils.equals(resultStatus, <span class="hljs-string">"9000"</span>)) &#123;<br>    <span class="hljs-comment">// 该笔订单是否真实支付成功，需要依赖服务端的异步通知。</span><br>    Toast.makeText(mActivity, <span class="hljs-string">"支付成功"</span>, Toast.LENGTH_SHORT).show();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 该笔订单真实的支付结果，需要依赖服务端的异步通知。</span><br>    Toast.makeText(mActivity, <span class="hljs-string">"支付失败"</span>, Toast.LENGTH_SHORT).show();<br>&#125;<br></code></pre></td></tr></table></figure>


<h1 id="如果本地没有安装支付宝，就跳转到wap支付"><a href="#如果本地没有安装支付宝，就跳转到wap支付" class="headerlink" title="如果本地没有安装支付宝，就跳转到wap支付"></a>如果本地没有安装支付宝，就跳转到wap支付</h1><p>我相信在<code>PayTask.payV2</code>中，有对是否安装支付宝做判断，<br>我们需要在<code>Manifest</code>中注册<code>H5PayActivity</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">"com.alipay.sdk.app.H5PayActivity"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:configChanges</span>=<span class="hljs-string">"orientation|keyboardHidden|navigation"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">"behind"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:windowSoftInputMode</span>=<span class="hljs-string">"adjustResize|stateHidden"</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/u013067184/article/details/46922997" target="_blank" rel="noopener">Android 支付宝 SDK 无法跳转到wap支付</a></li>
<li><a href="https://doc.open.alipay.com/doc2/detail.htm?treeId=59&articleId=103682&docType=1" target="_blank" rel="noopener">蚂蚁金服-开发文档——修改Manifest</a></li>
<li><a href="http://blog.csdn.net/ylbf_dev/article/details/50448727" target="_blank" rel="noopener">混淆出错-The same input jar is specified twice 解决办法</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中的性能优化</title>
    <url>/android/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h1><ul>
<li><a href="http://blog.csdn.net/u010687392/article/details/50035061" target="_blank" rel="noopener">Android性能优化之被忽视的优化点</a></li>
<li><a href="http://blog.csdn.net/column/details/best.html" target="_blank" rel="noopener">Android性能优化</a></li>
</ul>
<h1 id="在正式环境中关闭日志"><a href="#在正式环境中关闭日志" class="headerlink" title="在正式环境中关闭日志"></a>在正式环境中关闭日志</h1><ul>
<li><a href="https://blog.csdn.net/jiese1990/article/details/21752159" target="_blank" rel="noopener">android 代码优化：关闭输出日志 - CSDN博客</a></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># insert below code to proguard-rules.pro</span><br><br><span class="hljs-comment"># 移除日志</span><br>-assumenosideeffects class android.util.Log &#123;<br>    public static *** d(...);<br>    public static *** i(...);<br>    public static *** w(...);<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># insert below code to build.gradle</span><br><br>release &#123;<br>    signingConfig signingConfigs.renrenDebug // 密钥配置<br>    shrinkResources true // 删除不必要的源文件<br>    zipAlignEnabled true // 压缩对齐<br>    minifyEnabled true<br>    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>推送</title>
    <url>/android/%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><ol>
<li>集成华为推送时出现下面错误<blockquote>
<p>错误:28: 集成HMS需要将证书文件打包到APK中，请直接将assets目录拷贝到应用工程根目录。</p>
</blockquote>
</li>
</ol>
<p>从下面链接下载 hmssdk-gradle-{version}.zip ，将 assets 中的内容拷贝到你自己的 module 的 assets 中。</p>
<p>developer.huawei.com/consumer/cn/service/hms/catalog/huaweipush_agent.html?page=hmssdk_huaweipush_devprepare_agent#4 下载SDK</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android渠道打包</title>
    <url>/android/%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="为什么需要渠道打包"><a href="#为什么需要渠道打包" class="headerlink" title="为什么需要渠道打包"></a>为什么需要渠道打包</h1><ul>
<li>为了统计各市场的效果（活跃数、下单数等），需要用某种方式唯一标识它们。</li>
<li>客户端访问API时会在请求参数中带上渠道号，以便后台接下来计算不同渠道的效果。</li>
</ul>
<h1 id="添加渠道方法"><a href="#添加渠道方法" class="headerlink" title="添加渠道方法"></a>添加渠道方法</h1><p>在<code>AndroidManifest.xml</code>中的<code>application</code>标签下添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- UMENG配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">"UMENG_CHANNEL"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:value</span>=<span class="hljs-string">"$&#123;UMENG_CHANNEL_VALUE&#125;"</span>/&gt;</span><br></code></pre></td></tr></table></figure>

<p>在<code>build.gradle</code>文件中的<code>android</code>标签下添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">productFlavors &#123;<br>    xiaomi &#123;&#125;<br>    qihu360 &#123;&#125;<br>    baidu &#123;&#125;<br>    wandoujia &#123;&#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br>productFlavors.all &#123;<br>    flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]<br>&#125;<br></code></pre></td></tr></table></figure>


<h1 id="获取渠道方法"><a href="#获取渠道方法" class="headerlink" title="获取渠道方法"></a>获取渠道方法</h1><p>在java代码中获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 调用方式</span><br>Utoast.show(<span class="hljs-keyword">this</span>, <span class="hljs-string">"渠道："</span> + getApplicationMetaValue(<span class="hljs-keyword">this</span>, <span class="hljs-string">"UMENG_CHANNEL"</span>));<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getApplicationMetaValue</span><span class="hljs-params">(Context context, String name)</span> </span>&#123;<br>    String value = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ApplicationInfo appInfo = context.getPackageManager()<br>                .getApplicationInfo(context.getPackageName(),<br>                        PackageManager.GET_META_DATA);<br>        value = appInfo.metaData.getString(name);<br>    &#125; <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="扩展（更快速的打包方式）："><a href="#扩展（更快速的打包方式）：" class="headerlink" title="扩展（更快速的打包方式）："></a>扩展（更快速的打包方式）：</h1><p>渠道打包的另一种解决方案：使用python脚本在<code>META-INFO</code>中添加<code>channel_&lt;渠道名&gt;</code>名称的空文件；</p>
<ul>
<li><a href="https://github.com/GavinCT/AndroidMultiChannelBuildTool" target="_blank" rel="noopener">AndroidMultiChannelBuildTool</a></li>
</ul>
<h1 id="友盟提供的设置渠道方案"><a href="#友盟提供的设置渠道方案" class="headerlink" title="友盟提供的设置渠道方案"></a>友盟提供的设置渠道方案</h1><ol>
<li><p>就是上面的通过<code>AndroidManifest</code>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"UMENG_CHANNEL"</span> <span class="hljs-attr">android:value</span>=<span class="hljs-string">"UMeng"</span> /&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>通过在代码中执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String channel = getApplicationMetaValue(<span class="hljs-keyword">this</span>, <span class="hljs-string">"UMENG_CHANNEL"</span>);<br>AnalyticsConfig.setChannel(channel);<br></code></pre></td></tr></table></figure></li>
</ol>
<p><strong>NOTE1:</strong> 坑，不能同时设置两种方式，友盟技术的解释是优先使用第一次取到了渠道名；如果采用java代码的方式，需要在<code>Application</code>中设置，而不是<code>Activity</code>；</p>
<p><strong>NOTE2:</strong> 也可以通过url将渠道名传递给后台，由后台来做统计；</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.jianshu.com/p/a9ccdf67ca6c" target="_blank" rel="noopener">Android多渠道打包没你想的那么复杂</a></li>
<li><a href="http://tech.meituan.com/mt-apk-packaging.html" target="_blank" rel="noopener">美团Android自动化之旅—生成渠道包</a></li>
<li><a href="http://stormzhang.com/devtools/2015/01/15/android-studio-tutorial6/" target="_blank" rel="noopener">ANDROID STUDIO系列教程六–GRADLE多渠道打包</a></li>
<li><a href="http://blog.csdn.net/yy1300326388/article/details/48296221" target="_blank" rel="noopener">［Android Studio 权威教程］多渠道打包和一键完成（全部产品）打包并签名</a></li>
<li><a href="http://loody.github.io/2016/02/26/2016-02-26-android-multi-%20package/" target="_blank" rel="noopener">Android多渠道打包方案介绍</a></li>
</ul>
<h1 id="从keystore中获取md5"><a href="#从keystore中获取md5" class="headerlink" title="从keystore中获取md5"></a>从keystore中获取md5</h1><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">keytool.exe -v -list -keystore lyloou.jks<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>多端登录同步策略</title>
    <url>/android/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h2 id="字段表示"><a href="#字段表示" class="headerlink" title="字段表示"></a>字段表示</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">本地列表：local_list；<br>单项：<span class="hljs-keyword">local</span><br>本地修改时间： <span class="hljs-built_in">localTime</span><br>上次快照时间： snapTime<br><br>远程列表：remote_list；<br>单项：remote<br>上次同步时间： syncTime<br></code></pre></td></tr></table></figure>

<h2 id="状态判断"><a href="#状态判断" class="headerlink" title="状态判断"></a>状态判断</h2><ol>
<li><p>本地删除的（还没提交到远程，就删除的，针对这种情况可以直接清理掉）</p>
<blockquote>
<p>(local.snapTime == 0L &amp;&amp; local.isDisabled)</p>
</blockquote>
</li>
<li><p>无变化的</p>
<blockquote>
<p>(local.localTime == local.snapTime) &amp;&amp; (local.snapTime == remote.syncTime)</p>
</blockquote>
</li>
<li><p>本地新增的</p>
<blockquote>
<p>((local.snapTime == 0L) &amp;&amp; (local.localTime &gt; 0))</p>
</blockquote>
</li>
<li><p>远程新增的</p>
<blockquote>
<p>(remote_list.subtract(local_list))</p>
</blockquote>
</li>
<li><p>本地修改的</p>
<blockquote>
<p>((local.snapTime == remote.syncTime) &amp;&amp; (local.localTime &gt; local.snapTime))</p>
</blockquote>
</li>
<li><p>远程修改的</p>
<blockquote>
<p>((local.localTime == local.snapTime) &amp;&amp; (remote.syncTime &gt; local.snapTime))</p>
</blockquote>
</li>
<li><p>远程和本地都有修改的</p>
<blockquote>
<p>(local.localTime &gt; local.snapTime) &amp;&amp; (remote.syncTime &gt; local.snapTime)</p>
</blockquote>
</li>
</ol>
<h2 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h2><p>对于前 6 个状态，是不需要处理冲突的， 简单的合并处理即可。</p>
<p>对于第 7 个，是需要手动来解决的。</p>
<h2 id="上传同步"><a href="#上传同步" class="headerlink" title="上传同步"></a>上传同步</h2><ol>
<li>取当前时间：</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> now = Date().time<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>设置修改时间：</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">sync_list.map &#123; it.syncTime=now &#125;<br>local_list.map &#123; it.localTime=now; it.snapTime=now &#125;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>上传 sync_list 到服务器</li>
</ol>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><p><a href="https://www.yinkh.top/article/72/" target="_blank" rel="noopener">Android 离线数据同步策略 | YinKH 博客</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/1d889fb14ca3" target="_blank" rel="noopener">基于 diff 的文件同步算法（上） - 简书</a></p>
</li>
</ul>
<blockquote>
<p>从客户端的角度来看，文件同步的本质是本地文件集合与云端文件集合的对比。从实现角度来讲，客户端会保存一份云端文件集合的快照，通过将快照和云端集合对比可以计算出云端文件变更，通过将快照和本地集合对比则可以计算出本地文件变更。对于本地文件的变更，需要将文件提交至云端；对于云端文件的变更，需要将文件同步至本地。对于文件同步在云端和本地都有修改的情况下，就需要进行冲突处理。</p>
</blockquote>
<p>为减少内存占用，不采取云端快照到本地的方式；这里换了种方式：在本地数据库中只加了个 snapTime 快照时间 ，来作为参考点；</p>
<h2 id="更多思考"><a href="#更多思考" class="headerlink" title="更多思考"></a>更多思考</h2><ul>
<li>在处理冲突期间，远程数据库已经被另一端上传覆盖了。</li>
<li>本地的修改时间比快照时间还小？</li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android规范</title>
    <url>/android/%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><code>color.xml</code> 由基本色构成，而不是针对每个模块或组件分别设置。</li>
<li><code>dimens.xml</code> 同上。</li>
<li><code>string.xml</code> 由于语言的多样性，属性名具体一点会更好。另外，value 值不要全部使用大写（用<code>textAllCaps</code>）。</li>
<li><code>layout</code> 中的层级不要太多。<blockquote>
<p><a href="https://github.com/futurice/android-best-practices#resources" target="_blank" rel="noopener">https://github.com/futurice/android-best-practices#resources</a></p>
</blockquote>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://keeganlee.me/post/android/20150709" target="_blank" rel="noopener">Android技术积累:开发规范</a></li>
<li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="noopener">Google Java编程风格指南</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android网络相关</title>
    <url>/android/%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><ul>
<li><a href="https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture" target="_blank" rel="noopener">Packet Capture - Google Play 上的应用</a></li>
<li>fiddle</li>
</ul>
<h2 id="okhttp3-set-cookie"><a href="#okhttp3-set-cookie" class="headerlink" title="okhttp3 set cookie"></a>okhttp3 set cookie</h2><h3 id="从-webview-中获取-cookie"><a href="#从-webview-中获取-cookie" class="headerlink" title="从 webview 中获取 cookie"></a>从 webview 中获取 cookie</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// https://stackoverflow.com/questions/17654631/android-webview-read-cookies/20241864</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCookie</span><span class="hljs-params">(String siteName, String cookieName)</span> </span>&#123;<br>    String cookieValue = <span class="hljs-keyword">null</span>;<br><br>    CookieManager cookieManager = CookieManager.getInstance();<br>    String cookies = cookieManager.getCookie(siteName);<br>    <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>) &#123;<br>        String[] temp = cookies.split(<span class="hljs-string">";"</span>);<br>        <span class="hljs-keyword">for</span> (String ar1 : temp) &#123;<br>            <span class="hljs-keyword">if</span> (ar1.contains(cookieName)) &#123;<br>                String[] temp1 = ar1.split(<span class="hljs-string">"="</span>);<br>                cookieValue = temp1[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cookieValue;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br>File file = <span class="hljs-keyword">new</span> File(filePath);<br>RequestBody requestBody = <span class="hljs-keyword">new</span> MultipartBody.Builder()<br>        .setType(MultipartBody.FORM)<br>        .addFormDataPart(<span class="hljs-string">"file"</span>, file.getName(), RequestBody.create(MediaType.parse(<span class="hljs-string">"image/*"</span>), file))<br>        .build();<br><br>Request request = <span class="hljs-keyword">new</span> Request.Builder()<br>        .url(callBack.getUrl())<br>        .post(requestBody)<br>        .addHeader(<span class="hljs-string">"Accept"</span>, <span class="hljs-string">"*/*"</span>)<br>        .addHeader(<span class="hljs-string">"cookie"</span>, <span class="hljs-string">"ci_session="</span> + getCookie(APP_URL, <span class="hljs-string">"ci_session"</span>))<br>        .build();<br>client.newCall(request).enqueue(callBack);<br></code></pre></td></tr></table></figure>

<h3 id="Automatic-cookie-handling-with-OkHttp-3"><a href="#Automatic-cookie-handling-with-OkHttp-3" class="headerlink" title="Automatic cookie handling with OkHttp 3"></a>Automatic cookie handling with OkHttp 3</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// https://stackoverflow.com/questions/34881775/automatic-cookie-handling-with-okhttp-3/35346473</span><br><span class="hljs-comment">// https://github.com/franmontiel/PersistentCookieJar</span><br>CookieJar cookieJar = <span class="hljs-keyword">new</span> PersistentCookieJar(<span class="hljs-keyword">new</span> SetCookieCache(),<br>                     <span class="hljs-keyword">new</span> SharedPrefsCookiePersistor(context));<br>OkHttpClient okHttpClient = <span class="hljs-keyword">new</span> OkHttpClient.Builder()<br>                    .cookieJar(cookieJar)<br>                    .build();<br></code></pre></td></tr></table></figure>

<h2 id="获取网络时间"><a href="#获取网络时间" class="headerlink" title="获取网络时间"></a>获取网络时间</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Utime</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String URL_DEFAULT = <span class="hljs-string">"http://lyloou.com"</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 获取时间戳（始终使用网络时间，如果获取网络时间失败，才使用本地时间）</span><br><span class="hljs-comment">     * 注意该方法涉及网络操作，不要在主线程中调用</span><br><span class="hljs-comment">     * 返回的是以秒为单位的时间字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getTimeStamp</span><span class="hljs-params">(String url)</span> </span>&#123;<br><br>        <span class="hljs-keyword">final</span> String urlRrBase = getBaseUrl(url);<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> phoneTime = System.currentTimeMillis() / <span class="hljs-number">1000</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 生成连接对象</span><br>            URLConnection uc = <span class="hljs-keyword">new</span> URL(urlRrBase).openConnection();<br>            <span class="hljs-comment">// 发出连接</span><br>            uc.connect();<br>            <span class="hljs-keyword">long</span> webTimeMillis = uc.getDate();<br>            <span class="hljs-comment">// 读取网站日期时间</span><br>            <span class="hljs-keyword">long</span> webTime = webTimeMillis / <span class="hljs-number">1000</span>;<br>            <span class="hljs-keyword">return</span> String.valueOf(webTime);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> String.valueOf(phoneTime);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getBaseUrl</span><span class="hljs-params">(String url)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (TextUtils.isEmpty(url)) &#123;<br>            <span class="hljs-keyword">return</span> URL_DEFAULT;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            URI uri = <span class="hljs-keyword">new</span> URI(url);<br>            <span class="hljs-keyword">return</span> uri.getScheme() + <span class="hljs-string">"://"</span> + uri.getHost();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> URL_DEFAULT;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>权限问题</title>
    <url>/android/%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p>参考资料：<a href="https://www.2cto.com/kf/201611/561860.html" target="_blank" rel="noopener">Android 6.0 动态权限申请详解 - Android移动开发技术文章_手机开发 - 红黑联盟</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@TargetApi</span>(Build.VERSION_CODES.M)<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">requestPermission</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (ContextCompat.checkSelfPermission(mContext, Manifest.permission.CAMERA)<br>            == PackageManager.PERMISSION_GRANTED<br>            &amp;&amp; ContextCompat.checkSelfPermission(mContext, Manifest.permission.WRITE_EXTERNAL_STORAGE)<br>            == PackageManager.PERMISSION_GRANTED<br>            &amp;&amp; ContextCompat.checkSelfPermission(mContext, Manifest.permission.READ_EXTERNAL_STORAGE)<br>            == PackageManager.PERMISSION_GRANTED) &#123;<br>        <span class="hljs-comment">// doSthHere();</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//申请相机权限和STORAGE权限</span><br>        ActivityCompat.requestPermissions(<br>                mContext,<br>                <span class="hljs-keyword">new</span> String[]&#123;Manifest.permission.CAMERA,<br>                        Manifest.permission.WRITE_EXTERNAL_STORAGE,<br>                        Manifest.permission.READ_EXTERNAL_STORAGE<br>                &#125;,<br>                CAMERA_REQUEST_CODE);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-keyword">int</span> requestCode, String[] permissions, <span class="hljs-keyword">int</span>[] grantResults)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);<br>    <span class="hljs-keyword">if</span> (requestCode == CAMERA_REQUEST_CODE) &#123;<br>        <span class="hljs-keyword">if</span> (grantResults[<span class="hljs-number">0</span>] == PackageManager.PERMISSION_GRANTED<br>                &amp;&amp; grantResults[<span class="hljs-number">1</span>] == PackageManager.PERMISSION_GRANTED<br>                &amp;&amp; grantResults[<span class="hljs-number">2</span>] == PackageManager.PERMISSION_GRANTED) &#123;<br>            <span class="hljs-comment">// doSthHere();</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            String msg = <span class="hljs-string">"没有相关运行权限"</span>;<br>            Toast.makeText(mContext, msg, Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 弹窗</title>
    <url>/android/%E5%BC%B9%E7%AA%97/</url>
    <content><![CDATA[<h2 id="弹出和隐藏进度条"><a href="#弹出和隐藏进度条" class="headerlink" title="弹出和隐藏进度条"></a>弹出和隐藏进度条</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Dialog dialog;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDialog</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context ctx)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (ctx <span class="hljs-keyword">instanceof</span> Activity) &#123;<br>        <span class="hljs-keyword">final</span> Activity context = (Activity) ctx;<br>        context.runOnUiThread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">int</span> spacing = Uscreen.dp2Px(context, <span class="hljs-number">16</span>);<br>                LinearLayout layout = <span class="hljs-keyword">new</span> LinearLayout(context);<br>                LinearLayout.LayoutParams layoutParams = <span class="hljs-keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);<br>                layout.setLayoutParams(layoutParams);<br>                layout.setGravity(Gravity.CENTER);<br>                layout.setPadding(spacing, spacing, spacing, spacing);<br>                <span class="hljs-comment">// add ProgressBar</span><br>                ProgressBar bar = <span class="hljs-keyword">new</span> ProgressBar(context);<br>                layout.addView(bar, layoutParams);<br><br>                dialog = <span class="hljs-keyword">new</span> Dialog(context, android.R.style.Theme_Holo_Dialog_NoActionBar);<br>                dialog.setCancelable(<span class="hljs-keyword">false</span>);<br>                dialog.getWindow().setDimAmount(<span class="hljs-number">0.3f</span>);<br>                dialog.setContentView(layout);<br>                dialog.show();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dismissDialog</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (dialog != <span class="hljs-keyword">null</span> &amp;&amp; dialog.isShowing()) &#123;<br>        dialog.dismiss();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="单个操作的-alert"><a href="#单个操作的-alert" class="headerlink" title="单个操作的 alert"></a>单个操作的 alert</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlertOneItem</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Context context;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> Consumer&lt;Boolean&gt; consumer;<br>    <span class="hljs-keyword">private</span> String positiveTips = <span class="hljs-string">"确定"</span>;<br>    <span class="hljs-keyword">private</span> String negativeTips = <span class="hljs-string">"取消"</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">AlertOneItem</span><span class="hljs-params">(Context context, Consumer&lt;Boolean&gt; consumer)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.context = context;<br>        <span class="hljs-keyword">this</span>.consumer = consumer;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AlertOneItem <span class="hljs-title">builder</span><span class="hljs-params">(Context context, Consumer&lt;Boolean&gt; consumer)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AlertOneItem(context, consumer);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AlertOneItem <span class="hljs-title">title</span><span class="hljs-params">(String title)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.title = title;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AlertOneItem <span class="hljs-title">message</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AlertOneItem <span class="hljs-title">positiveTips</span><span class="hljs-params">(String positiveTips)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.positiveTips = positiveTips;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AlertOneItem <span class="hljs-title">negativeTips</span><span class="hljs-params">(String negativeTips)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.negativeTips = negativeTips;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        AlertDialog.Builder builder = <span class="hljs-keyword">new</span> AlertDialog.Builder(context);<br>        <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(title)) &#123;<br>            builder.setTitle(title);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(message)) &#123;<br>            builder.setMessage(message);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(negativeTips)) &#123;<br>            builder.setNegativeButton(negativeTips, (dialog, which) -&gt; consumer.accept(<span class="hljs-keyword">false</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(positiveTips)) &#123;<br>            builder.setPositiveButton(positiveTips, (dialog, which) -&gt; consumer.accept(<span class="hljs-keyword">true</span>));<br>        &#125;<br><br>        builder.setCancelable(<span class="hljs-keyword">true</span>);<br>        builder.create();<br>        builder.show();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 调用</span><br>Udialog.AlertOneItem.builder(context, result -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (result) &#123;<br>            toSetWallpaperAsync(context, imageView, color);<br>        &#125;<br>    &#125;).message(<span class="hljs-string">"设置成壁纸?"</span>).show();<br></code></pre></td></tr></table></figure>

<h2 id="多个操作的-alert-（方案-1）"><a href="#多个操作的-alert-（方案-1）" class="headerlink" title="多个操作的 alert （方案 1）"></a>多个操作的 alert （方案 1）</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> OperateType &#123;<br>    REFRESH(<span class="hljs-string">"刷新"</span>),<br>    COPY_LINK(<span class="hljs-string">"复制链接"</span>),<br>    COPY_MD_LINK(<span class="hljs-string">"复制md链接"</span>),<br>    OPEN_WITH_BROWSER(<span class="hljs-string">"在浏览器中打开"</span>),<br>    ;<br>    String title;<br><br>    OperateType(String title) &#123;<br>        <span class="hljs-keyword">this</span>.title = title;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OperateType <span class="hljs-title">indexOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> OperateType.values()[index];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] toStrArray() &#123;<br>        OperateType[] values = OperateType.values();<br>        String[] result = <span class="hljs-keyword">new</span> String[values.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>            result[i] = values[i].title;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMorePressed</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> AlertDialog.Builder(mContext)<br>            .setTitle(<span class="hljs-string">"操作"</span>)<br>            .setItems(OperateType.toStrArray(), (dialog, which) -&gt; &#123;<br>                <span class="hljs-keyword">switch</span> (OperateType.indexOf(which)) &#123;<br>                    <span class="hljs-keyword">case</span> REFRESH:<br>                        mWvContent.reload();<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> COPY_LINK:<br>                        copyToClipboard(mWvContent.getUrl(), <span class="hljs-string">"已复制到剪切板"</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> COPY_MD_LINK:<br>                        String title = mWvContent.getTitle();<br>                        String url = mWvContent.getUrl();<br>                        copyToClipboard(<span class="hljs-string">"- ["</span> + title + <span class="hljs-string">"]"</span> + <span class="hljs-string">"("</span> + url + <span class="hljs-string">")"</span>, <span class="hljs-string">"已复制到剪切板"</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> OPEN_WITH_BROWSER:<br>                        Uri uri = Uri.parse(mWvContent.getUrl());<br>                        Intent intent = <span class="hljs-keyword">new</span> Intent(Intent.ACTION_VIEW, uri);<br>                        startActivity(intent);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                &#125;<br>            &#125;)<br>            .create().show();<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="多个操作的-alert（方案-2）"><a href="#多个操作的-alert（方案-2）" class="headerlink" title="多个操作的 alert（方案 2）"></a>多个操作的 alert（方案 2）</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlertMultiItem</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; nameList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">private</span> List&lt;Runnable&gt; taskList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">private</span> Context context;<br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">AlertMultiItem</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.context = context;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AlertMultiItem <span class="hljs-title">builder</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AlertMultiItem(context);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AlertMultiItem <span class="hljs-title">title</span><span class="hljs-params">(String title)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.title = title;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AlertMultiItem <span class="hljs-title">add</span><span class="hljs-params">(String title, Runnable runnable)</span> </span>&#123;<br>        nameList.add(title);<br>        taskList.add(runnable);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String[] getItemNames() &#123;<br>        String[] result = <span class="hljs-keyword">new</span> String[nameList.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nameList.size(); i++) &#123;<br>            result[i] = nameList.get(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        AlertDialog.Builder builder = <span class="hljs-keyword">new</span> AlertDialog.Builder(context);<br>        <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(title)) &#123;<br>            builder.setTitle(title);<br>        &#125;<br>        builder.setItems(getItemNames(), (dialog, which) -&gt; taskList.get(which).run());<br>        builder.create();<br>        builder.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br>Udialog.AlertMultiItem.builder(mContext)<br>        .add(<span class="hljs-string">"复制内容"</span>, () -&gt; copyContent())<br>        .add(<span class="hljs-string">"复制全部"</span>, () -&gt; copyAll())<br>        .add(<span class="hljs-string">"删除此项"</span>, () -&gt; delete())<br>        .show();<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中资源文件相关</title>
    <url>/android/%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="resources标签"><a href="#resources标签" class="headerlink" title="resources标签"></a>resources标签</h2><ul>
<li>所有的资源文件，都可以放在同一个<code>&lt;resources&gt;</code>标签下面；但放到不同的文件中，更方便查找<br>例如：<code>color</code>、<code>declare-styleable</code>、<code>dimen</code>、<code>integer</code>、<code>item</code>、<code>string</code>、<code>style</code>。</li>
</ul>
<h2 id="string标签translatable属性"><a href="#string标签translatable属性" class="headerlink" title="string标签translatable属性"></a>string标签translatable属性</h2><p>使用<code>translatable=&quot;false&quot;</code>属性可以让内容直接嵌入到引用的地方，而不做翻译处理。</p>
<ul>
<li><p>举例来说，下面的用法就可以将<code>android.support.design.widget.AppBarLayout$ScrollingViewBehavior</code>直接嵌入到了<code>ScrollView</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScrollView</span></span><br><span class="hljs-tag">   <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">   <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">   <span class="hljs-attr">app:layout_behavior</span>=<span class="hljs-string">"@string/appbar_scrolling_view_behavior"</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"appbar_scrolling_view_behavior"</span> <span class="hljs-attr">translatable</span>=<span class="hljs-string">"false"</span>&gt;</span>android.support.design.widget.AppBarLayout$ScrollingViewBehavior<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li>另一种方案：<blockquote>
<p>It’s the ignore attribute of the tools namespace in your strings file, as follows:</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span></span><br><span class="hljs-tag">  <span class="hljs-attr">tools:ignore</span>=<span class="hljs-string">"MissingTranslation"</span> &gt;</span><br>  <span class="hljs-comment">&lt;!-- your strings here; no need now for the translatable attribute --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h3><p>不希望字符串被翻译。</p>
<h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://tools.android.com/recent/non-translatablestrings" target="_blank" rel="noopener">Non-translatable Strings</a></li>
<li><a href="http://stackoverflow.com/questions/3925072/what-is-the-purpose-of-using-translatable-in-android-strings/13688979" target="_blank" rel="noopener">What is the purpose of using translatable in Android strings?</a></li>
<li><a href="http://stackoverflow.com/questions/12590739/avoid-android-lint-complains-about-not-translated-string" target="_blank" rel="noopener">Avoid Android Lint complains about not-translated string</a><blockquote>
<p>If you don’t want a string to be translated, you should only define it in the “base values/folder”, which means do not enter the string in the translated values/folder.</p>
</blockquote>
</li>
</ul>
<h2 id="string动态设置下划线文本的方案；"><a href="#string动态设置下划线文本的方案；" class="headerlink" title="string动态设置下划线文本的方案；"></a>string动态设置下划线文本的方案；</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 还可以使用：&lt;b&gt;、&lt;i&gt;、&lt;u&gt;等html标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"nav_name"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>%1$s<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/tv_nav_name"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:text</span>=<span class="hljs-string">"@string/nav_name"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">"@color/colorPrimary"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"18sp"</span>/&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 动态控制带下划线的文本内容</span><br>String name = <span class="hljs-string">"昵称"</span>;<br>tvName.setText(mContext.getString(R.string.nav_name, name));<br></code></pre></td></tr></table></figure>

<h2 id="使用string字符串资源的一些建议"><a href="#使用string字符串资源的一些建议" class="headerlink" title="使用string字符串资源的一些建议"></a>使用string字符串资源的一些建议</h2><ul>
<li>不同模块相同的文字不要复用，最好每个模块都对应自己的字符串资源（否则，牵一发而动全身，除非你就想要这样）；</li>
</ul>
<h2 id="string字符串中的单复数"><a href="#string字符串中的单复数" class="headerlink" title="string字符串中的单复数"></a>string字符串中的单复数</h2><ul>
<li>单纯引用<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plurals</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"book"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"one"</span>&gt;</span>book<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"others"</span>&gt;</span>books<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plurals</span>&gt;</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> bookCount = <span class="hljs-number">4</span>;<br>mContext.gerResources().getQuantityString(R.plurals.book, bookCount);<br><span class="hljs-comment">//~ result: books</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plurals</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"book"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"one"</span>&gt;</span>%d book found.<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"others"</span>&gt;</span>%d books found.<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plurals</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> bookCount = <span class="hljs-number">4</span>;<br>mContext.gerResources().getQuantityString(R.plurals.book, bookCount, bookCount);<br><span class="hljs-comment">//~ result: 4 books found.</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>When using the getQuantityString() method,<br>you need to pass the count twice if your string includes string formatting with a number.<br>For example, for the string %d songs found,<br>the first count parameter selects the appropriate plural string<br>and the second count parameter is inserted into the %d placeholder.<br>If your plural strings do not include string formatting,<br>you don’t need to pass the third parameter to getQuantityString.</p>
</blockquote>
<h3 id="外部链接-1"><a href="#外部链接-1" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://blog.jiguang.cn/android-strings/" target="_blank" rel="noopener">不可不知的 Android strings.xml 那些事</a></li>
<li><a href="https://developer.android.com/guide/topics/resources/string-resource.html#StylingWithSpannables" target="_blank" rel="noopener">String Resources</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>网络请求巧用</title>
    <url>/android/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%B7%A7%E7%94%A8/</url>
    <content><![CDATA[<h2 id="用到的库"><a href="#用到的库" class="headerlink" title="用到的库"></a>用到的库</h2><ul>
<li>Retrofit</li>
<li>RxJava2</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">def rxandroidVersion = <span class="hljs-string">'2.0.1'</span><br>implementation <span class="hljs-string">"io.reactivex.rxjava2:rxandroid:<span class="hljs-variable">$rxandroidVersion</span>"</span><br>def retrofitVersion = <span class="hljs-string">'2.8.0'</span><br>implementation <span class="hljs-string">"com.squareup.retrofit2:retrofit:<span class="hljs-variable">$retrofitVersion</span>"</span><br>implementation <span class="hljs-string">"com.squareup.retrofit2:adapter-rxjava2:<span class="hljs-variable">$retrofitVersion</span>"</span><br>implementation <span class="hljs-string">"com.squareup.retrofit2:converter-gson:<span class="hljs-variable">$retrofitVersion</span>"</span><br>implementation <span class="hljs-string">'com.google.code.gson:gson:2.8.5'</span><br><br>implementation <span class="hljs-string">'androidx.core:core-ktx:1.2.0'</span><br>implementation <span class="hljs-string">'androidx.lifecycle:lifecycle-extensions:2.2.0'</span><br>implementation <span class="hljs-string">'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'</span><br></code></pre></td></tr></table></figure>

<h2 id="服务器统一返回格式"><a href="#服务器统一返回格式" class="headerlink" title="服务器统一返回格式"></a>服务器统一返回格式</h2><p>当 <code>error_code</code> 不为 <code>0</code> 时，就不用解析 <code>data</code>（其值为 <code>null</code>），根据相应的错误码提示给用户；</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"err_code"</span>: <span class="hljs-number">1101</span>,<br>  <span class="hljs-attr">"err_msg"</span>: <span class="hljs-string">"参数name不能为空"</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>当 <code>error_code</code> 为 <code>0</code> 时，就可以解析 <code>data</code>，这个返回值通过实体类或列表来映射得到。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"err_code"</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">"err_msg"</span>: <span class="hljs-string">"ok"</span>,<br>  <span class="hljs-attr">"data"</span>: &#123;<br>    <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"lyloou"</span>,<br>    <span class="hljs-attr">"email"</span>: <span class="hljs-string">"lyloou@qq.com"</span>,<br>    <span class="hljs-attr">"personal_signature"</span>: <span class="hljs-string">"多么美好的太阳"</span>,<br>    <span class="hljs-attr">"gmt_create"</span>: <span class="hljs-string">"2020-01-16T09:38:18.000+0000"</span>,<br>    <span class="hljs-attr">"gmt_modified"</span>: <span class="hljs-string">"2020-03-14T11:27:58.000+0000"</span>,<br>    <span class="hljs-attr">"is_disabled"</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="定义返回类"><a href="#定义返回类" class="headerlink" title="定义返回类"></a>定义返回类</h2><p>通过 CResult 来接收返回的数据，<code>data</code> 的通过泛型来映射成对应实体类（用泛型的好处，是不用为每一个返回都建立一个类）；</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// https://medium.com/@stustirling/responses-errors-with-retrofit-2-rxjava2-6d55eafecf5a</span><br><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CResult</span>&lt;<span class="hljs-type">T</span>&gt;</span>(<span class="hljs-keyword">var</span> err_code: <span class="hljs-built_in">Int</span>, <span class="hljs-keyword">var</span> err_msg: String, <span class="hljs-keyword">var</span> <span class="hljs-keyword">data</span>: T?)<br></code></pre></td></tr></table></figure>

<h2 id="Retrofit-简单封装"><a href="#Retrofit-简单封装" class="headerlink" title="Retrofit 简单封装"></a>Retrofit 简单封装</h2><blockquote>
<p>具体用法参考：<a href="https://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit 官网</a></p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// Network.kt</span><br><span class="hljs-keyword">val</span> gson: Gson = GsonBuilder()<br>    .setDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>)<br>    .setLenient()<br>    .create()<br><span class="hljs-function"><span class="hljs-keyword">fun</span> Any.<span class="hljs-title">toJsonString</span><span class="hljs-params">()</span></span>: String &#123;<br>    <span class="hljs-keyword">return</span> gson.toJson(<span class="hljs-keyword">this</span>)<br>&#125;<br><br><span class="hljs-keyword">object</span> Network &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> headerPairs: (() -&gt; List&lt;Pair&lt;String, String&gt;&gt;)? = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> builder = Retrofit.Builder()<br>        .addConverterFactory(GsonConverterFactory.create(gson))<br>        .addCallAdapterFactory(RxJava2CallAdapterFactory.create());<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">withHeader</span><span class="hljs-params">(pairList: (() -&gt; <span class="hljs-type">List</span>&lt;<span class="hljs-type">Pair</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">String</span>&gt;&gt;))</span></span>: Network &#123;<br>        <span class="hljs-keyword">this</span>.headerPairs = pairList<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">get</span><span class="hljs-params">(baseUrl: <span class="hljs-type">String</span>, clazz: <span class="hljs-type">Class</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: T &#123;<br>        <span class="hljs-keyword">val</span> okHttpBuilder = OkHttpClient.Builder()<br>        headerPairs?.invoke()?.let &#123;<br>            okHttpBuilder.addInterceptor(interceptor(it))<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.baseUrl(baseUrl)<br>            .client(okHttpBuilder.build())<br>            .build().create(clazz)<br>    &#125;<br><br>    <span class="hljs-comment">// 如果是需要授权才能获取信息，统一用这个。</span><br>    <span class="hljs-comment">// 把用户信息和授权信息通过 header 的方式发到服务器</span><br>    <span class="hljs-comment">// [Retrofit — Add Custom Request Header](https://futurestud.io/tutorials/retrofit-add-custom-request-header)</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">auth</span><span class="hljs-params">(userPassword: <span class="hljs-type">UserPassword</span>?)</span></span>: List&lt;Pair&lt;String, String&gt;&gt; &#123;<br>        userPassword?.let &#123;<br>            <span class="hljs-keyword">return</span> listOf(<br>                <span class="hljs-string">"Content-Type"</span> to <span class="hljs-string">"application/json"</span>,<br>                <span class="hljs-string">"Authorization"</span> to it.password,<br>                <span class="hljs-string">"UserId"</span> to it.userId.toString()<br>            )<br>        &#125;<br>        <span class="hljs-keyword">return</span> emptyList()<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">interceptor</span><span class="hljs-params">(headers: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Pair</span>&lt;<span class="hljs-type">String</span>, String&gt;&gt;)</span></span>: (Interceptor.Chain) -&gt; Response &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-keyword">val</span> newBuilder = it.request().newBuilder()<br>        headers.forEach &#123; header -&gt;<br>            newBuilder.addHeader(header.first, header.second)<br>        &#125;<br>        it.proceed(newBuilder.build())<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> Observable<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">defaultScheduler</span><span class="hljs-params">()</span></span>: Observable&lt;T&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.subscribeOn(Schedulers.io())<br>        .unsubscribeOn(Schedulers.io())<br>        .observeOn(AndroidSchedulers.mainThread())<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="准备用户的类和-retrofit-接口"><a href="#准备用户的类和-retrofit-接口" class="headerlink" title="准备用户的类和 retrofit 接口"></a>准备用户的类和 retrofit 接口</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// user.kt</span><br><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>(<br>    <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span>,<br>    <span class="hljs-keyword">val</span> name: String,<br>    <span class="hljs-keyword">val</span> email: String,<br>    <span class="hljs-meta">@SerializedName(<span class="hljs-meta-string">"personal_signature"</span>)</span><br>    <span class="hljs-keyword">val</span> personalSignature: String,<br>    <span class="hljs-meta">@SerializedName(<span class="hljs-meta-string">"gmt_create"</span>)</span><br>    <span class="hljs-keyword">val</span> gmtCreate: Date<br>)<br><br><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserPassword</span></span>(<br>    <span class="hljs-keyword">val</span> userId: <span class="hljs-built_in">Long</span>,<br>    <span class="hljs-keyword">val</span> name: String,<br>    <span class="hljs-keyword">val</span> password: String<br>)<br><br><span class="hljs-keyword">enum</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Url</span></span>(<span class="hljs-keyword">val</span> url: String) : Str &#123;<br>    UserApi(<span class="hljs-string">"http://127.0.0.1:8888/api/v1/user/"</span>),<br>    ;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> Network.<span class="hljs-title">userApi</span><span class="hljs-params">()</span></span>: UserApi &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">get</span>(Url.UserApi.url, UserApi::<span class="hljs-class"><span class="hljs-keyword">class</span>.<span class="hljs-title">java</span>)</span><br>&#125;<br><br><span class="hljs-comment">// 创建带授权的 userApi</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> Network.<span class="hljs-title">userWithAuthApi</span><span class="hljs-params">(userPassword: <span class="hljs-type">UserPassword</span>? = UserPasswordHelper.getUserPassword()</span></span>): UserApi &#123;<br>    <span class="hljs-keyword">return</span> withHeader &#123; auth(userPassword) &#125;<br>        .<span class="hljs-keyword">get</span>(Url.UserApi.url, UserApi::<span class="hljs-class"><span class="hljs-keyword">class</span>.<span class="hljs-title">java</span>);</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="使用方法-1-，基于-Observable"><a href="#使用方法-1-，基于-Observable" class="headerlink" title="使用方法 1 ，基于 Observable"></a>使用方法 1 ，基于 Observable</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserApi</span> </span>&#123;<br>    <span class="hljs-meta">@POST(<span class="hljs-meta-string">"login"</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@Query(<span class="hljs-meta-string">"name"</span>)</span> name: <span class="hljs-type">String</span>, <span class="hljs-meta">@Query(<span class="hljs-meta-string">"password"</span>)</span> password: <span class="hljs-type">String</span>)</span></span>: Observable&lt;CResult&lt;User?&gt;&gt;<br><br>    <span class="hljs-meta">@POST(<span class="hljs-meta-string">"update"</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-meta">@Body</span> user: <span class="hljs-type">User</span>)</span></span>: Observable&lt;CResult&lt;String?&gt;&gt;<br>&#125;<br><br><span class="hljs-comment">// 用户登录</span><br>Network.userApi()<br>    .login(name, encodedPassword)<br>    .defaultScheduler()<br>    .subscribe(&#123;<br>        <span class="hljs-keyword">if</span> (it.err_code == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// save user info to localStorage</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            toast(<span class="hljs-string">"错误代码:<span class="hljs-subst">$&#123;it.err_code&#125;</span>，错误信息：<span class="hljs-subst">$&#123;it.err_msg&#125;</span>"</span>)<br>        &#125;<br>    &#125;, &#123;<br>        toast(<span class="hljs-string">"网络异常：<span class="hljs-subst">$&#123;it.message&#125;</span>"</span>)<br>    &#125;)<br><br><span class="hljs-comment">// 更新用户</span><br>Network.userApi()<br>    .update(user)<br>    .defaultScheduler()<br>    .subscribe(&#123;<br>        <span class="hljs-keyword">if</span> (it.err_code == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// doSuccess</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// do error</span><br>        &#125;<br>    &#125;, &#123;<br>        toast(<span class="hljs-string">"网络异常：<span class="hljs-subst">$&#123;it.message&#125;</span>"</span>)<br>    &#125;)<br></code></pre></td></tr></table></figure>

<h2 id="使用方法-2，基于-kotlin-的-coroutine"><a href="#使用方法-2，基于-kotlin-的-coroutine" class="headerlink" title="使用方法 2，基于 kotlin 的 coroutine"></a>使用方法 2，基于 kotlin 的 coroutine</h2><p>首先给 ViewModel 添加一个 apiForCResult 扩展</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> ViewModel.<span class="hljs-title">apiForCResult</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">    block: <span class="hljs-type">suspend</span> <span class="hljs-type">CoroutineScope</span>.() -&gt; <span class="hljs-type">CResult</span>&lt;<span class="hljs-type">T</span>?&gt;,</span></span><br><span class="hljs-function"><span class="hljs-params">    okFun: (<span class="hljs-type">T</span>?) -&gt; <span class="hljs-type">Unit</span> = &#123;&#125;,</span></span><br><span class="hljs-function"><span class="hljs-params">    failFun: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Unit</span> = &#123;&#125;</span></span><br><span class="hljs-function"><span class="hljs-params">)</span></span> &#123;<br>    viewModelScope.launch &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">val</span> result = withContext(Dispatchers.IO, block)<br>            <span class="hljs-keyword">if</span> (result.err_code == <span class="hljs-number">0</span>) &#123;<br>                okFun(result.<span class="hljs-keyword">data</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                failFun(result.err_msg)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            failFun(<span class="hljs-string">"<span class="hljs-subst">$&#123;e.message&#125;</span>"</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserApi</span> </span>&#123;<br>    <span class="hljs-meta">@POST(<span class="hljs-meta-string">"login"</span>)</span><br>    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@Query(<span class="hljs-meta-string">"name"</span>)</span> name: <span class="hljs-type">String</span>, <span class="hljs-meta">@Query(<span class="hljs-meta-string">"password"</span>)</span> password: <span class="hljs-type">String</span>)</span></span>: CResult&lt;User?&gt;<br><br>    <span class="hljs-meta">@POST(<span class="hljs-meta-string">"update"</span>)</span><br>    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-meta">@Body</span> user: <span class="hljs-type">User</span>)</span></span>: CResult&lt;String?&gt;<br>&#125;<br><br><span class="hljs-comment">// 在 viewModel 中</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginViewModel</span> : <span class="hljs-type">ViewModel</span></span>() &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">        name: <span class="hljs-type">String</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">        password: <span class="hljs-type">String</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">        okFun: (<span class="hljs-type">User</span>?) -&gt; <span class="hljs-type">Unit</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">        failFun: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Unit</span></span></span><br><span class="hljs-function"><span class="hljs-params">    )</span></span> &#123;<br>        apiForCResult(<br>            &#123; Network.userApi().login(name, password) &#125;,<br>            okFun,<br>            failFun<br>        )<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">        user: <span class="hljs-type">User</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">        okFun: (<span class="hljs-type">String</span>?) -&gt; <span class="hljs-type">Unit</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">        failFun: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Unit</span></span></span><br><span class="hljs-function"><span class="hljs-params">    )</span></span> &#123;<br>        apiForCResult(<br>            &#123; Network.userWithAuthApi().update(user) &#125;,<br>            okFun,<br>            failFun<br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserActivity</span></span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(item: <span class="hljs-type">MenuItem</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">when</span> (item.itemId) &#123;<br>            R.id.login -&gt; &#123;<br>                viewModel.login(name, password, ::doSuccess, ::toast)<br>            &#125;<br>            R.id.updaete -&gt; &#123;<br>                viewModel.update(<br>                    user,<br>                    &#123;toast(<span class="hljs-string">"更新成功"</span>)&#125;,<br>                    &#123;toast(it)&#125;<br>                )<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item)<br>    &#125;<br>    <span class="hljs-comment">// 在 activity 中</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>结合使用 kotlin 的扩展功能，可以简化许多冗余的代码。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android通知相关</title>
    <url>/android/%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<p>有些手机默认不开启通知权限，需要我们自己来检测和提示用户开启。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enableNotificationPermission</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.KITKAT) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (Uapp.isNotificationEnabled(context)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> String KEY_SP_CLOSE_NOTIFICATION = <span class="hljs-string">"KEY_SP_CLOSE_NOTIFICATION"</span>;<br>    <span class="hljs-keyword">if</span> (Usp.init(context).getBoolean(KEY_SP_CLOSE_NOTIFICATION, <span class="hljs-keyword">false</span>)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">new</span> AlertDialog.Builder(context,<br>            android.R.style.Theme_DeviceDefault_Light_Dialog)<br>            .setTitle(<span class="hljs-string">"友情提示"</span>).setMessage(<span class="hljs-string">"为了给您提供更好的服务，请开启应用通知权限"</span>)<br>            .setNegativeButton(<span class="hljs-string">"不用了"</span>, (dialog, which) -&gt; Usp.init(context)<br>                    .putBoolean(KEY_SP_CLOSE_NOTIFICATION, <span class="hljs-keyword">true</span>)<br>                    .commit())<br>            .setNeutralButton(<span class="hljs-string">"下次再说"</span>, (dialog, which) -&gt; &#123;<br>                <span class="hljs-comment">// do nothing</span><br>            &#125;)<br>            .setPositiveButton(<span class="hljs-string">"去开启"</span>, (dialog, which) -&gt; &#123;<br>                Uapp.openAppDetailSettings(context);<br>            &#125;)<br>            .setCancelable(<span class="hljs-keyword">false</span>)<br>            .create()<br>            .show();<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uapp</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否开启通知权限</span><br><span class="hljs-comment">     * (https://blog.csdn.net/reglog/article/details/79863751)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequiresApi</span>(api = Build.VERSION_CODES.KITKAT)<br>    <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isNotificationEnabled</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>        String CHECK_OP_NO_THROW = <span class="hljs-string">"checkOpNoThrow"</span>;<br>        String OP_POST_NOTIFICATION = <span class="hljs-string">"OP_POST_NOTIFICATION"</span>;<br><br>        AppOpsManager mAppOps = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);<br>        ApplicationInfo appInfo = context.getApplicationInfo();<br>        String pkg = context.getApplicationContext().getPackageName();<br>        <span class="hljs-keyword">int</span> uid = appInfo.uid;<br><br>        <span class="hljs-comment">/* Context.APP_OPS_MANAGER */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class appOpsClass = Class.forName(AppOpsManager<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getName</span>())</span>;<br><br>            Method checkOpNoThrowMethod = appOpsClass.getMethod(CHECK_OP_NO_THROW, Integer.TYPE, Integer.TYPE,<br>                    String<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>            Field opPostNotificationValue = appOpsClass.getDeclaredField(OP_POST_NOTIFICATION);<br><br>            <span class="hljs-keyword">int</span> value = (Integer) opPostNotificationValue.get(Integer<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>            <span class="hljs-keyword">return</span> ((Integer) checkOpNoThrowMethod.invoke(mAppOps, value, uid, pkg) == AppOpsManager.MODE_ALLOWED);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 跳转APP设置界面</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openAppDetailSettings</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>        <span class="hljs-comment">//跳转设置界面</span><br>        Intent intent = <span class="hljs-keyword">new</span> Intent();<br>        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">9</span>) &#123;<br>            intent.setAction(<span class="hljs-string">"android.settings.APPLICATION_DETAILS_SETTINGS"</span>);<br>            intent.setData(Uri.fromParts(<span class="hljs-string">"package"</span>, context.getPackageName(), <span class="hljs-keyword">null</span>));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &lt;= <span class="hljs-number">8</span>) &#123;<br>            intent.setAction(Intent.ACTION_VIEW);<br>            intent.setClassName(<span class="hljs-string">"com.android.settings"</span>, <span class="hljs-string">"com.android.setting.InstalledAppDetails"</span>);<br>            intent.putExtra(<span class="hljs-string">"com.android.settings.ApplicationPkgName"</span>, context.getPackageName());<br>        &#125;<br><br>        context.startActivity(intent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android面试题</title>
    <url>/android/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>看了那么多书，真心发现一个道理：看懂了并不表示会说会用。</p>
</blockquote>
<h1 id="怎样改变-int-的第二个字节；"><a href="#怎样改变-int-的第二个字节；" class="headerlink" title="怎样改变 int 的第二个字节；"></a>怎样改变 int 的第二个字节；</h1><p>答：一种是采用位运算。<br>还可以通过将 int 转换成二进制的字符串，针对字符串进行操作。<br>（可我当时是什么情况呢，我忘了 int 有几个字节了）<br><img src="http://cdn.lyloou.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98-2021-08-23-14-18-06.png" alt="面试题-2021-08-23-14-18-06"></p>
<h1 id="Java-怎么实现乘以-2-的操作；"><a href="#Java-怎么实现乘以-2-的操作；" class="headerlink" title="Java 怎么实现乘以 2 的操作；"></a>Java 怎么实现乘以 2 的操作；</h1><p>答：通过移位操作的左移运算；（这个也要忘掉？）</p>
<h1 id="介绍下二叉树"><a href="#介绍下二叉树" class="headerlink" title="介绍下二叉树"></a>介绍下<code>二叉树</code></h1><p>答： 每个节点最多有 2 个子树的树结构。<br>使用场景：常被用于实现二叉查找树和二元堆积。<br>存储表示：通过数组和链接串列来存储。<br>访问二叉树的方法：前序遍历，中序遍历，后序遍历。<br>参考资料： <a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="noopener">二叉树-维基百科</a><br>（还是将数据结构和算法恶补下吧，基础太薄弱了）</p>
<h1 id="view-中的draw-和onDraw-区别"><a href="#view-中的draw-和onDraw-区别" class="headerlink" title="view 中的draw()和onDraw()区别"></a>view 中的<code>draw()</code>和<code>onDraw()</code>区别</h1><p>答：</p>
<ul>
<li><code>onDraw()</code>是<code>draw()</code>方法的一部分；</li>
<li>自定义 View 时只需要重写<code>onDraw()</code>方法；<br>（通过源码<code>public void draw(Canvas canvas)</code>,<br>发现在<code>draw()</code>方法中，对<code>onDraw</code>进行了调用）</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">/<span class="hljs-strong">*</span><br><span class="hljs-strong">*</span> Draw traversal performs several drawing steps which must be executed<br><span class="hljs-bullet">* </span>in the appropriate order:<br><span class="hljs-strong">*</span><br><span class="hljs-strong">*</span>      1. Draw the background<br><span class="hljs-bullet">*      </span>2. If necessary, save the canvas' layers to prepare for fading<br><span class="hljs-bullet">*      </span>3. Draw view's content<br><span class="hljs-bullet">*      </span>4. Draw children<br><span class="hljs-bullet">*      </span>5. If necessary, draw the fading edges and restore layers<br><span class="hljs-bullet">*      </span>6. Draw decorations (scrollbars for instance)<br><span class="hljs-strong">*/</span><br></code></pre></td></tr></table></figure>

<p>When implementing a view, implement onDraw instead of draw(Canvas)</p>
<p>参考资料：</p>
<ul>
<li>View.java 源码的 draw(Canvas)方法；</li>
<li><a href="http://www.eoeandroid.com/thread-98648-1-1.html" target="_blank" rel="noopener">[Android 界面] 请教一下 View 中的 draw 和 onDraw 有什么区别</a></li>
</ul>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>【Business】 ID设计</title>
    <url>/business/ID%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.zhihu.com/question/20180484" target="_blank" rel="noopener">分布式系统里用户 ID 生成有什么好的方法和规则能满足“唯一、尽量短、不能直接看出规则”这几个条件? - 知乎</a></li>
<li><a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener">Leaf——美团点评分布式 ID 生成系统 - 美团技术团队</a></li>
</ul>
<h2 id="雪花生成器"><a href="#雪花生成器" class="headerlink" title="雪花生成器"></a>雪花生成器</h2><ul>
<li><a href="https://www.cnblogs.com/relucent/p/4955340.html" target="_blank" rel="noopener">Twitter 的分布式自增 ID 算法 snowflake (Java 版) - relucent - 博客园</a></li>
<li><a href="https://blog.csdn.net/weixin_38657051/article/details/94713695?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase" target="_blank" rel="noopener">Mybatis-Plus 雪花 id 的使用以及解析机器 ID 和数据标识 ID_摩羯座 de 杰杰陆的博客-CSDN 博客</a></li>
<li><a href="https://github.com/lyloou/spring-boot-web/" target="_blank" rel="noopener">https://github.com/lyloou/spring-boot-web/</a></li>
</ul>
<h4 id="根据不同业务配置成多个生成器"><a href="#根据不同业务配置成多个生成器" class="headerlink" title="根据不同业务配置成多个生成器"></a>根据不同业务配置成多个生成器</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyloou.demo.config;<br><br><span class="hljs-keyword">import</span> com.lyloou.common.util.SnowflakeIdWorker;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SnowflakeConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;snowflake.workerId&#125;"</span>)<br>    <span class="hljs-keyword">private</span> Long workerId;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Type &#123;<br>        ORDER(<span class="hljs-string">"ORD"</span>, <span class="hljs-number">0</span>),<br>        REFUND(<span class="hljs-string">"REF"</span>, <span class="hljs-number">1</span>),<br>        RETURN(<span class="hljs-string">"RET"</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">private</span> String prefix;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterId;<br><br>        Type(String prefix, <span class="hljs-keyword">long</span> datacenterId) &#123;<br>            <span class="hljs-keyword">this</span>.prefix = prefix;<br>            <span class="hljs-keyword">this</span>.datacenterId = datacenterId;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPrefix</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> prefix;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function">SnowflakeIdWorker <span class="hljs-title">orderWorker</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SnowflakeIdWorker(workerId, Type.ORDER.datacenterId);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function">SnowflakeIdWorker <span class="hljs-title">refundWorker</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SnowflakeIdWorker(workerId, Type.REFUND.datacenterId);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function">SnowflakeIdWorker <span class="hljs-title">returnWorker</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SnowflakeIdWorker(workerId, Type.RETURN.datacenterId);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="生成器的生成逻辑"><a href="#生成器的生成逻辑" class="headerlink" title="生成器的生成逻辑"></a>生成器的生成逻辑</h4><p>依据类型来生成（如，订单流水 ID、退款流水 ID、退货流水 ID）<br>这里，将 dataCenterId 当做类型来使用（还可以再拆分下，适用不同场景）；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyloou.demo.util;<br><br><span class="hljs-keyword">import</span> com.lyloou.common.exception.CommonException;<br><span class="hljs-keyword">import</span> com.lyloou.common.util.SnowflakeIdWorker;<br><span class="hljs-keyword">import</span> com.lyloou.demo.config.SnowflakeConfig;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SnowflakeIdGenerator</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    SnowflakeIdWorker orderWorker;<br>    <span class="hljs-meta">@Autowired</span><br>    SnowflakeIdWorker refundWorker;<br>    <span class="hljs-meta">@Autowired</span><br>    SnowflakeIdWorker returnWorker;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">genId</span><span class="hljs-params">(SnowflakeConfig.Type type)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> type.getPrefix() + getId(type);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getId</span><span class="hljs-params">(SnowflakeConfig.Type type)</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> ORDER:<br>                <span class="hljs-keyword">return</span> orderWorker.nextId();<br>            <span class="hljs-keyword">case</span> REFUND:<br>                <span class="hljs-keyword">return</span> refundWorker.nextId();<br>            <span class="hljs-keyword">case</span> RETURN:<br>                <span class="hljs-keyword">return</span> returnWorker.nextId();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CommonException(<span class="hljs-string">"无效的类型"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="配置-workerId"><a href="#配置-workerId" class="headerlink" title="配置 workerId"></a>配置 workerId</h4><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># application.yml</span><br><span class="hljs-attr">snowflake:</span><br>  <span class="hljs-attr">workerId:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<p>或者配置成启动参数： -Dsnowflake.workerId=3</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">package</span> com.lyloou.demo;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.RandomUtil;<br><span class="hljs-keyword">import</span> com.lyloou.demo.config.SnowflakeConfig;<br><span class="hljs-keyword">import</span> com.lyloou.demo.util.SnowflakeIdGenerator;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith</span>(SpringRunner<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><br><span class="hljs-class">@<span class="hljs-title">SpringBootTest</span></span><br><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">class</span> <span class="hljs-title">ConfigTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    SnowflakeIdGenerator generator;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSnowflake</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(generator.genId(SnowflakeConfig.Type.values()[RandomUtil.randomInt(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)]));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">REF722513947651084288</span><br><span class="hljs-comment">ORD722513947650953217</span><br><span class="hljs-comment">ORD722513947650953218</span><br><span class="hljs-comment">RET722513947651215361</span><br><span class="hljs-comment">REF722513947651084289</span><br><span class="hljs-comment">ORD722513947650953219</span><br><span class="hljs-comment">REF722513947651084290</span><br><span class="hljs-comment">RET722513947651215362</span><br><span class="hljs-comment">ORD722513947650953220</span><br><span class="hljs-comment">REF722513947651084291</span><br><span class="hljs-comment">ORD722513947650953221</span><br><span class="hljs-comment">RET722513947651215363</span><br><span class="hljs-comment">REF722513947651084292</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h4 id="雪花算法实现"><a href="#雪花算法实现" class="headerlink" title="雪花算法实现"></a>雪花算法实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyloou.common.util;<br><br><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Twitter_Snowflake&lt;br&gt;</span><br><span class="hljs-comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span><br><span class="hljs-comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span><br><span class="hljs-comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span><br><span class="hljs-comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span><br><span class="hljs-comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span><br><span class="hljs-comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span><br><span class="hljs-comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span><br><span class="hljs-comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span><br><span class="hljs-comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SnowflakeIdWorker</span> </span>&#123;<br><br>    <span class="hljs-comment">// ==============================Fields===========================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开始时间截 (2015-01-01)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> twepoch = <span class="hljs-number">1420041600000L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 机器id所占的位数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> workerIdBits = <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据标识id所占的位数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> datacenterIdBits = <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> maxWorkerId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持的最大数据标识id，结果是31</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> maxDatacenterId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列在id中占的位数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> sequenceBits = <span class="hljs-number">12L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 机器ID向左移12位</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> workerIdShift = sequenceBits;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据标识id向左移17位(12+5)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 时间截向左移22位(5+5+12)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> sequenceMask = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 工作机器ID(0~31)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据中心ID(0~31)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 毫秒内序列(0~4095)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequence = <span class="hljs-number">0L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上次生成ID的时间截</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> lastTimestamp = -<span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">//==============================Constructors=====================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> workerId     工作ID (0~31)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> datacenterId 数据中心ID (0~31)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SnowflakeIdWorker</span><span class="hljs-params">(<span class="hljs-keyword">long</span> workerId, <span class="hljs-keyword">long</span> datacenterId)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(String.format(<span class="hljs-string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(String.format(<span class="hljs-string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));<br>        &#125;<br>        <span class="hljs-keyword">this</span>.workerId = workerId;<br>        <span class="hljs-keyword">this</span>.datacenterId = datacenterId;<br>    &#125;<br><br>    <span class="hljs-comment">// ==============================Methods==========================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得下一个ID (该方法是线程安全的)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> SnowflakeId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">long</span> <span class="hljs-title">nextId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> timestamp = timeGen();<br><br>        <span class="hljs-comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span><br>        <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<br>                    String.format(<span class="hljs-string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));<br>        &#125;<br><br>        <span class="hljs-comment">//如果是同一时间生成的，则进行毫秒内序列</span><br>        <span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>            <span class="hljs-comment">//毫秒内序列溢出</span><br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//阻塞到下一个毫秒,获得新的时间戳</span><br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//时间戳改变，毫秒内序列重置</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            sequence = <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//上次生成ID的时间截</span><br>        lastTimestamp = timestamp;<br><br>        <span class="hljs-comment">//移位并通过或运算拼到一起组成64位的ID</span><br>        <span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="hljs-comment">//</span><br>                | (datacenterId &lt;&lt; datacenterIdShift) <span class="hljs-comment">//</span><br>                | (workerId &lt;&lt; workerIdShift) <span class="hljs-comment">//</span><br>                | sequence;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lastTimestamp 上次生成ID的时间截</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间戳</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> <span class="hljs-title">tilNextMillis</span><span class="hljs-params">(<span class="hljs-keyword">long</span> lastTimestamp)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> timestamp = timeGen();<br>        <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = timeGen();<br>        &#125;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回以毫秒为单位的当前时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间(毫秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> <span class="hljs-title">timeGen</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-comment">// 原文链接：https://blog.csdn.net/jiangzeyin_/article/details/80784979</span><br>    <span class="hljs-comment">// SELECT (1146667501642584065&gt;&gt;12)&amp;0x1f as workerId,(1146667501642584065&gt;&gt;17)&amp;0x1f as datacenterId;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">parseInfo</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        id = Long.toBinaryString(Long.parseLong(id));<br>        <span class="hljs-keyword">int</span> len = id.length();<br>        JSONObject jsonObject = <span class="hljs-keyword">new</span> JSONObject();<br>        <span class="hljs-keyword">int</span> sequenceStart = len &lt; workerIdShift ? <span class="hljs-number">0</span> : (<span class="hljs-keyword">int</span>) (len - workerIdShift);<br>        <span class="hljs-keyword">int</span> workerStart = len &lt; datacenterIdShift ? <span class="hljs-number">0</span> : (<span class="hljs-keyword">int</span>) (len - datacenterIdShift);<br>        <span class="hljs-keyword">int</span> timeStart = len &lt; timestampLeftShift ? <span class="hljs-number">0</span> : (<span class="hljs-keyword">int</span>) (len - timestampLeftShift);<br>        String sequence = id.substring(sequenceStart, len);<br>        String workerId = sequenceStart == <span class="hljs-number">0</span> ? <span class="hljs-string">"0"</span> : id.substring(workerStart, sequenceStart);<br>        String dataCenterId = workerStart == <span class="hljs-number">0</span> ? <span class="hljs-string">"0"</span> : id.substring(timeStart, workerStart);<br>        String time = timeStart == <span class="hljs-number">0</span> ? <span class="hljs-string">"0"</span> : id.substring(<span class="hljs-number">0</span>, timeStart);<br>        <span class="hljs-keyword">int</span> sequenceInt = Integer.valueOf(sequence, <span class="hljs-number">2</span>);<br>        jsonObject.put(<span class="hljs-string">"sequence"</span>, sequenceInt);<br>        <span class="hljs-keyword">int</span> workerIdInt = Integer.valueOf(workerId, <span class="hljs-number">2</span>);<br>        jsonObject.put(<span class="hljs-string">"workerId"</span>, workerIdInt);<br>        <span class="hljs-keyword">int</span> dataCenterIdInt = Integer.valueOf(dataCenterId, <span class="hljs-number">2</span>);<br>        jsonObject.put(<span class="hljs-string">"dataCenter"</span>, dataCenterIdInt);<br>        <span class="hljs-keyword">long</span> diffTime = Long.parseLong(time, <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">long</span> timeLong = diffTime + timeStart;<br><br>        jsonObject.put(<span class="hljs-string">"date"</span>, timeLong);<br>        <span class="hljs-keyword">return</span> jsonObject;<br>    &#125;<br><br><br>    <span class="hljs-comment">//==============================Test=============================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SnowflakeIdWorker idWorker = <span class="hljs-keyword">new</span> SnowflakeIdWorker(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; System.currentTimeMillis() - start &lt; <span class="hljs-number">1000</span>; ) &#123;<br>            idWorker.nextId();<br>            count++;<br>        &#125;<br>        System.out.println(count);<br>        <span class="hljs-keyword">long</span> nextId = idWorker.nextId();<br>        System.out.println(nextId);<br>        System.out.println(idWorker.parseInfo(nextId + <span class="hljs-string">""</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 AOP 和 JWT 实现的 Token 身份认证组件</title>
    <url>/business/Token%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote>
<p>基于 AOP 面向切面编程，在执行前后插入身份认证的逻辑。</p>
</blockquote>
<p><strong>原理细节：</strong></p>
<ul>
<li><p>登录过程：这个过程比较简单，将用户 id、用户名、过期时间等属性结合 jwt 工具生成 token，并将用户的信息存入到缓存中，以供后期使用。</p>
</li>
<li><p>验证过程：前端通过 Header 头信息的 Authorization 属性得到 Token，先进行 token 验证，再结合缓存验证，验证成功的话，将用户 id 和用户名等信息存入 <code>ThreadLocal</code> 中，这样在执行切面逻辑的时候。就可以从 <code>ThreadLocal</code> 中获取数据了，如<code>UserManager.getUserId()</code>；执行完成后需要清除 ThreadLocal 中的数据；代码如下</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValidateLoginAspect</span> </span>&#123;<br><br>  <span class="hljs-meta">@Around</span>(<span class="hljs-string">"pointCutMethod()"</span>)<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">preHandle</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> </span>&#123;<br>    <span class="hljs-comment">// ......</span><br>    UserContextHolder.getInstance().setContext(userMap);<br>    <span class="hljs-keyword">final</span> Object proceed;<br>    <span class="hljs-keyword">try</span> &#123;<br>      proceed = pjp.proceed();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      UserContextHolder.getInstance().clear();<br>    &#125;<br>    <span class="hljs-keyword">return</span> proceed;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>认证接口的范围：给 <code>BaseTokenController</code>这个基类添加 <code>@ValidateLogin</code>，<br>可以实现一个效果，只要自己的 <code>Controller</code> 继承了<code>BaseTokenController</code>，那么就不用再声明<code>@ValidateLogin</code>注解，自定义<code>Controller</code>中的 mapping 都需要身份认证。<br>（这样就免去了繁琐配置：在拦截器中通过通配符的方式配置哪些接口需要拦截，哪些接口需要放行）</li>
</ul>
<h2 id="服务端使用方式"><a href="#服务端使用方式" class="headerlink" title="服务端使用方式"></a>服务端使用方式</h2><p><strong>添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lyloou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>component-security-loginvalidator-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lyloou.component.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ol>
<li>继承<code>BaseTokenController</code>类。 因为这个类被<code>@ValidateLogin</code>标记，所以其下的所有子类都需要身份认证（具体实现细节，查看<code>ValidateLoginAspect</code>）。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseTokenController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 从父类继承了ValidateLogin，需要身份验证</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/ping"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">ping</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Integer userId = currentUserId();<br>        System.out.println(userId);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"pong"</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>如果继承了 <code>BaseTokenController</code> 类，又希望其中的某个方法不要被拦截，可以在方法上标记 <code>@IgnoreValidateLogin</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseTokenController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    TokenService tokenService;<br><br>    <span class="hljs-comment">// 手动忽略身份验证</span><br>    <span class="hljs-meta">@IgnoreValidateLogin</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/login"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String userId, String username)</span> </span>&#123;<br><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">"userId"</span>, userId);<br>        map.put(<span class="hljs-string">"userName"</span>, username);<br>        map.put(<span class="hljs-string">"userAvatar"</span>, <span class="hljs-string">"http://cdn.lyloou.com/a.jpg"</span>);<br><br>        <span class="hljs-keyword">final</span> String token = tokenService.createToken(userId, username, JSONUtil.toJsonStr(map));<br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>如果没有继承 <code>BaseTokenController</code>，又希望在其中某个方法中做身份认证，获取用户 id，可以在方法上标记<code>@ValidateLogin</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br><br>    <span class="hljs-comment">// 手动添加身份验证</span><br>    <span class="hljs-meta">@ValidateLogin</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"userinfo"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">userInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(UserManager.X_USER_ID, UserManager.getUserId() + <span class="hljs-string">""</span>);<br>        map.put(UserManager.X_USER_IP, UserManager.getUserIP());<br>        map.put(UserManager.X_USER_NAME, UserManager.getUserName());<br>        map.put(UserManager.X_USER_INFO, UserManager.getUserInfo());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="使用自定义的缓存"><a href="#使用自定义的缓存" class="headerlink" title="使用自定义的缓存"></a>使用自定义的缓存</h2><p>默认使用了内存缓存<code>ConcurrentHashMap</code>（单机版本的）</p>
<p>也可以自定义缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2021/7/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisCodeCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DataCache</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisService redisService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TokenProperties tokenProperties<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, String value)</span> </span>&#123;<br>        set(key, value, tokenProperties.getExpireSecond());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, String value, <span class="hljs-keyword">long</span> timeout)</span> </span>&#123;<br>        redisService.set(key, value, (<span class="hljs-keyword">int</span>) timeout);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisService.get(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        redisService.del(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsKey</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisService.exists(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><p>在 Header 中配置身份认证 Token 的信息：<br>如：<code>Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2Mjg4MzQ3MjQsImV4cCI6MTYyOTQzOTUyNCwieC11c2VyLW5hbWUiOiJhYmNkZSIsIngtdXNlci1pZCI6IjEifQ.x0nIhSUPfxC5FlnzJ-MmJvLnJv7w5ZvFzGlNphdSByE</code></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>登录接口：</p>
<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/20210813155146.png" alt="image-20210813155138945"></p>
<p>获取用户信息接口：</p>
<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/20210813155327.png" alt="image-20210813155327715"></p>
<h2 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h2><p><a href="https://github.com/lyloou/component/tree/master/component-security-loginvalidator-starter" target="_blank" rel="noopener">component/component-security-loginvalidator-starter at master · lyloou/component</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/business/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="（AT、TCC、Saga、XA）模式分析"><a href="#（AT、TCC、Saga、XA）模式分析" class="headerlink" title="（AT、TCC、Saga、XA）模式分析"></a>（AT、TCC、Saga、XA）模式分析</h3><blockquote>
<p>四种分布式事务模式，分别在不同的时间被提出，每种模式都有它的适用场景</p>
<ul>
<li>AT 模式是无侵入的分布式事务解决方案，适用于不希望对业务进行改造的场景，几乎 0 学习成本。</li>
<li>TCC 模式是高性能分布式事务解决方案，适用于核心系统等对性能有很高要求的场景。</li>
<li>Saga 模式是长事务解决方案，适用于业务流程长且需要保证事务最终一致性的业务系统，Saga 模式一阶段就会提交本地事务，无锁，长流程情况下可以保证性能，多用于渠道层、集成层业务系统。事务参与者可能是其它公司的服务或者是遗留系统的服务，无法进行改造和提供 TCC 要求的接口，也可以使用 Saga 模式。</li>
<li>XA 模式是分布式强一致性的解决方案，但性能低而使用较少。</li>
</ul>
</blockquote>
<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/78599954" target="_blank" rel="noopener">分布式事务的 4 种模式 - 知乎</a></p>
</li>
<li><p><a href="https://juejin.cn/post/6844903913691283469" target="_blank" rel="noopener">分布式事务 Seata Saga 模式首秀以及三种模式详解 | Meetup#3 回顾</a></p>
</li>
<li><p><a href="https://tech.antfin.com/community/activities/779/review/901" target="_blank" rel="noopener">分布式事务 Seata 三种模式详解 - 活动回顾</a></p>
</li>
<li><p><a href="http://seata.io/zh-cn/docs/overview/what-is-seata.html" target="_blank" rel="noopener">Seata 是什么</a></p>
</li>
</ul>
<blockquote>
<p>由于 Saga 不保证隔离性，所以我们在业务设计的时候需要做到“宁可长款，不可短款”的原则，长款是指在出现差错的时候站在我方的角度钱多了的情况，钱少了则是短款，因为如果长款可以给客户退款，而短款则可能钱追不回来了，也就是说在业务设计的时候，一定是先扣客户帐再入帐，如果因为隔离性问题造成覆盖更新，也不会出现钱少了的情况。</p>
</blockquote>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>【Business】 分佣设计</title>
    <url>/business/%E5%88%86%E4%BD%A3%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.jianshu.com/p/63115f1631aa" target="_blank" rel="noopener">什么？分销系统分佣比例竟然是这样设置的 - 简书</a></li>
</ul>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>编译问题</title>
    <url>/android/%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>  点击：Refresh all Gradle projects</p>
<ul>
<li><a href="https://blog.csdn.net/longlyboyhe/article/details/51768879" target="_blank" rel="noopener">The APK file does not exist on disk.Error while Installing APK</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>图形验证码解耦设计</title>
    <url>/business/%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E8%A7%A3%E8%80%A6%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>在调用接口时，要求必须有输入正确的图形验证码才能调用（防刷）。<br>但是，看一些代码中将这个功能和其它业务功能耦合在一起。每次有新的接口需要用时，又得重新复制一份，就想到值得优化重构。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>生成时，从全部字母和数字中随机获取 6 个字符。<br>接着借助 BufferedImage 和 ImageIO 工具生成字节码格式的图形验证码。<br>再将字节码形式的图形验证码转换成 base64 字符串，等待发给前端，前端接收后可以转换并显示出来（这样我们就可以统一用 json 的方式来和前端交互，返回格式是一样的；还有一种方式是通过回传 IMAGE 类型的方式，不过缺点是接口不统一，前端要单独处理）。</p>
<p>我们随机生成一个唯一标识（uniqueId），标识这次图形验证码请求，并将对应的验证码（graphValidateCode）存放到缓存（redis）中，并设置过期时间。<br>下一个请求需要带上这个唯一标识，和验证码。<br>结合过滤器，这样获取验证码的逻辑就可以和其它业务逻辑解耦了。</p>
<p>哪个接口需要有正确的图形验证码才放行，只需要配置上 api 即可。</p>
<h2 id="过滤器配置"><a href="#过滤器配置" class="headerlink" title="过滤器配置"></a>过滤器配置</h2><p>在过滤器中（GraphValidateCodeFilter）验证图形验证码，从缓存中获取，然后比对传入的验证码。<br>如果没传入参数，或者参数不对，就抛出错误，在统一管理错误的地方进行处理。</p>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>一般情况，异常是在定义了 ControllerAdvice 注解 或者 RestControllerAdvice 注解的类中管理的。<br>但是过滤器中的异常是在 Servlet 之前调用的，ControllerAdvice 适用于 Controller。<br>不过可以换个思路，我们写一个类来继承 ErrorController ，重写 handleError 方法，在过滤器中异常发生时，最后也会来到这个 handleError 方法中，<br>我们在这里可以直接返回，也可以继续抛出异常，如果选择了继续抛出，接着就可以在 GlobalExceptionHandler 中进行捕获（统一出错出口），<br>这样就可以解决 filter 在 Servlet 之前调用问题。</p>
<p>参考资料：<br><a href="https://github.com/szerhusenBC/jwt-spring-security-demo/issues/63#issuecomment-346495732" target="_blank" rel="noopener">How to ExceptionHandler of type ExpiredJwtException from JwtAuthenticationTokenFilter? · Issue #63 · szerhusenBC/jwt-spring-security-demo</a><br>It’s because the filter comes before Servlet is invoked. ControllerAdvice only applies to the Controller classes.<br>I’m also trying to find the solution to same problem. Been reading some stackoverflow articles, this one seems promising: <a href="https://stackoverflow.com/questions/34595605/how-to-manage-exceptions-thrown-in-filters-in-spring" target="_blank" rel="noopener">https://stackoverflow.com/questions/34595605/how-to-manage-exceptions-thrown-in-filters-in-spring</a> @josevlad<br><a href="https://stackoverflow.com/a/50818385" target="_blank" rel="noopener">https://stackoverflow.com/a/50818385</a></p>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">/*<br><span class="hljs-bullet">* </span>先获取图形验证码<br><span class="hljs-bullet">* </span>http://localhost:8080/api/tool/getGraphValidateCode<br><span class="hljs-bullet">* </span>&#123;<br><span class="hljs-bullet">* </span>"err_code": 200,<br><span class="hljs-bullet">* </span>"err_msg": "ok",<br><span class="hljs-bullet">* </span>"data": &#123;<br><span class="hljs-bullet">* </span>"image": "iVBORw0KGgoAAAANSUhEUgAAAG4AAAAjCAIAAAD6/6geAAABWklEQVR42u2a0RaEIAhE+f8P3d9oX/alzXIYQLBDp8dCveE4YnIcn75dbmkEjbJRNsq+G2WjbJSNEnv0fGnfIh4WzWVpVzv2YVhxjPVKlHijQod7PUpt0+KOIwJldLuEml0fKIry17kaKNHels1KQkzc+6yiKZxevHuCX99FRHkPlAQUGuW0xTsV2ikr45yDi7jLet1R2AvWCS1DeXrFJToqzKko7YO9Nee+WQn6r61RTsblm/PGXQe3guO7HXAImRP8obulzNBmKP/SZF+U6kU8bgUnNn8gSpWWaVFqBW2RGTI2pLLKYJ+Nifm0MO5YGUIWGQtKdKeYVc4gJH+adEQlgtnGAB5zdVZqBY5zo3ZPyhWeV09wxOcXQanuQ1bBaheUU90wVVW9zvByYxpLy4NomQfHAd8yuhr0NKXyT+Jj0jPUb4xneon/GmKkxhhTvS4V+lGkUnoSTL8omDLPAIEmVgAAAABJRU5ErkJggg==",<br><span class="hljs-bullet">* </span>"graphValidateCode": "fHELQ",<br><span class="hljs-bullet">* </span>"uniqueId": "d476ef5e8d6b4e34a7dd5fde9fcd3c78"<br><span class="hljs-bullet">* </span>&#125;<br><span class="hljs-bullet">* </span>&#125;<br>*/<br><br>/*<br><span class="hljs-bullet">* </span>不填写时：<br><span class="hljs-bullet">* </span>http://localhost:8080/api/user/login<br><span class="hljs-bullet">* </span>&#123;<br><span class="hljs-bullet">* </span>"err_code": 400,<br><span class="hljs-bullet">* </span>"err_msg": "缺少参数：uniqueId",<br><span class="hljs-bullet">* </span>"data": null<br><span class="hljs-bullet">* </span>&#125;<br>*/<br><br>/*<br><span class="hljs-bullet">* </span>错误时：<br><span class="hljs-bullet">* </span>http://localhost:8080/api/user/login?uniqueId=bbbb&amp;graphValidateCode=aaaa<br><span class="hljs-bullet">* </span>&#123;<br><span class="hljs-bullet">* </span>"err_code": 400,<br><span class="hljs-bullet">* </span>"err_msg": "输入的图形验证码不正确",<br><span class="hljs-bullet">* </span>"data": null<br><span class="hljs-bullet">* </span>&#125;<br>*/<br><br>/*<br><span class="hljs-bullet">* </span>正确时：<br><span class="hljs-bullet">* </span>http://localhost:8080/api/user/login?uniqueId=d476ef5e8d6b4e34a7dd5fde9fcd3c78&amp;graphValidateCode=fHELQ<br><span class="hljs-bullet">* </span>&#123;<br><span class="hljs-bullet">* </span>"err_code": 200,<br><span class="hljs-bullet">* </span>"err_msg": "ok",<br><span class="hljs-bullet">* </span>"data": "验证了图形验证码才能看到我:login"<br><span class="hljs-bullet">* </span>&#125;<br>*/<br></code></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>RuoYi-VUE</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><a href="https://github.com/lyloou/spring-master/tree/master/spring-security-captcha" target="_blank" rel="noopener">https://github.com/lyloou/spring-master/tree/master/spring-security-captcha</a></p>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中布局技巧</title>
    <url>/android/%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h2 id="Android-屏幕尺寸对应文件夹"><a href="#Android-屏幕尺寸对应文件夹" class="headerlink" title="Android 屏幕尺寸对应文件夹"></a>Android 屏幕尺寸对应文件夹</h2><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">HVGA  : <span class="hljs-type">mdpi</span><br>WVGA  : <span class="hljs-type">hdpi</span><br>FWVGA : <span class="hljs-type">hdpi</span><br>QHD   : <span class="hljs-type">hdpi</span><br><span class="hljs-number">720</span>P  : <span class="hljs-type">xhdpi</span><br><span class="hljs-number">1080</span>P : <span class="hljs-type">xxhdpi</span><br></code></pre></td></tr></table></figure>

<ul>
<li><a href="http://blog.csdn.net/sarsscofy/article/details/9249397" target="_blank" rel="noopener">android 常见分辨率（mdpi、hdpi 、xhdpi、xxhdpi ）及屏幕适配注意事项</a></li>
</ul>
<h2 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">: <span class="hljs-number">48</span>x48<br>: <span class="hljs-number">72</span>x72<br>: <span class="hljs-number">96</span>x96<br>: <span class="hljs-number">144</span>x144<br>: <span class="hljs-number">192</span>x192<br></code></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/13639263/whats-the-correct-size-icon-for-drawable-xxhdpi" target="_blank" rel="noopener">https://stackoverflow.com/questions/13639263/whats-the-correct-size-icon-for-drawable-xxhdpi</a></p>
<h2 id="更新您的应用以充分利用新款-Android-旗舰设备上更大的纵横比"><a href="#更新您的应用以充分利用新款-Android-旗舰设备上更大的纵横比" class="headerlink" title="更新您的应用以充分利用新款 Android 旗舰设备上更大的纵横比"></a><a href="https://googledeveloperschina.blogspot.com/2017/04/android.html" target="_blank" rel="noopener">更新您的应用以充分利用新款 Android 旗舰设备上更大的纵横比</a></h2><ul>
<li><a href="https://www.jianshu.com/p/a386434458be" target="_blank" rel="noopener">https://www.jianshu.com/p/a386434458be</a></li>
<li><a href="https://android-developers.googleblog.com/2017/03/update-your-app-to-take-advantage-of.html" target="_blank" rel="noopener">https://android-developers.googleblog.com/2017/03/update-your-app-to-take-advantage-of.html</a></li>
</ul>
<h2 id="icon-1"><a href="#icon-1" class="headerlink" title="icon"></a>icon</h2><ul>
<li><a href="https://stackoverflow.com/questions/23935810/mipmap-drawables-for-icons" target="_blank" rel="noopener">android - Mipmap drawables for icons - Stack Overflow</a></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>尺寸</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>MDPI</td>
<td>48x48</td>
<td>mipmap-mdpi/ic_launcher.png</td>
</tr>
<tr>
<td>HDPI</td>
<td>72x72</td>
<td>mipmap-hdpi/ic_launcher.png</td>
</tr>
<tr>
<td>XHDPI</td>
<td>96x96</td>
<td>mipmap-xhdpi/ic_launcher.png</td>
</tr>
<tr>
<td>XXHDPI</td>
<td>144x144</td>
<td>mipmap-xxhdpi/ic_launcher.png</td>
</tr>
<tr>
<td>XXXHDPI</td>
<td>192x192</td>
<td>mipmap-xxxhdpi/ic_launcher.png</td>
</tr>
</tbody></table>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mkdir res &amp;&amp; <span class="hljs-built_in">cd</span> res<br>mkdir mipmap-mdpi mipmap-hdpi mipmap-xhdpi mipmap-xxhdpi mipmap-xxxhdpi<br>ic_launcher.png<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>用户树查找优化</title>
    <url>/business/%E7%94%A8%E6%88%B7%E6%A0%91%E6%9F%A5%E6%89%BE%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">    A                   B<br>   / <span class="hljs-string">\</span>                 /|<span class="hljs-string">\</span><br>  C   D               E F G<br> / <span class="hljs-string">\</span>                 / <span class="hljs-string">\</span><br>H   I               J   K<br>   / <span class="hljs-string">\</span><br>  L   M<br>     / <span class="hljs-string">\</span><br>    N   O<br></code></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">id  pid name age  email<br><span class="hljs-number">1</span>	<span class="hljs-number">0</span>	A	 <span class="hljs-number">18</span>	  <span class="hljs-symbol">A@</span>baomidou.com<br><span class="hljs-number">2</span>	<span class="hljs-number">0</span>	B	 <span class="hljs-number">20</span>	  <span class="hljs-symbol">B@</span>baomidou.com<br><span class="hljs-number">3</span>	<span class="hljs-number">1</span>	C	 <span class="hljs-number">28</span>	  <span class="hljs-symbol">C@</span>baomidou.com<br><span class="hljs-number">4</span>	<span class="hljs-number">1</span>	D	 <span class="hljs-number">21</span>	  <span class="hljs-symbol">D@</span>baomidou.com<br><span class="hljs-number">5</span>	<span class="hljs-number">2</span>	E	 <span class="hljs-number">24</span>	  <span class="hljs-symbol">E@</span>baomidou.com<br><span class="hljs-number">6</span>	<span class="hljs-number">2</span>	F	 <span class="hljs-number">18</span>	  <span class="hljs-symbol">F@</span>baomidou.com<br><span class="hljs-number">7</span>	<span class="hljs-number">2</span>	G	 <span class="hljs-number">10</span>	  <span class="hljs-symbol">G@</span>baomidou.com<br><span class="hljs-number">8</span>	<span class="hljs-number">3</span>	H	 <span class="hljs-number">35</span>	  <span class="hljs-symbol">H@</span>baomidou.com<br><span class="hljs-number">9</span>	<span class="hljs-number">3</span>	I	 <span class="hljs-number">21</span>	  <span class="hljs-symbol">I@</span>baomidou.com<br><span class="hljs-number">10</span>	<span class="hljs-number">5</span>	J	 <span class="hljs-number">18</span>	  <span class="hljs-symbol">J@</span>baomidou.com<br><span class="hljs-number">11</span>	<span class="hljs-number">5</span>	K	 <span class="hljs-number">23</span>	  <span class="hljs-symbol">K@</span>baomidou.com<br><span class="hljs-number">12</span>	<span class="hljs-number">9</span>	L	 <span class="hljs-number">18</span>	  <span class="hljs-symbol">L@</span>baomidou.com<br><span class="hljs-number">13</span>	<span class="hljs-number">9</span>	M	 <span class="hljs-number">33</span>	  <span class="hljs-symbol">M@</span>baomidou.com<br><span class="hljs-number">14</span>	<span class="hljs-number">13</span>	N	 <span class="hljs-number">22</span>	  <span class="hljs-symbol">N@</span>baomidou.com<br><span class="hljs-number">15</span>	<span class="hljs-number">13</span>	O	 <span class="hljs-number">11</span>	  <span class="hljs-symbol">O@</span>baomidou.com<br></code></pre></td></tr></table></figure>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>节点和父节点之间只有 id 和 pid 上有关联；没有层级字段，没有当前所在的树高度字段，如何在不改变表的情况下，获取所有子节点？；</p>
<p>如果数据库可以重新设计的话，可以用下面的链接介绍的方式来设计：<br><a href="https://segmentfault.com/a/1190000014284076" target="_blank" rel="noopener">在数据库中存储一棵树，实现无限级分类 - 个人文章 - SegmentFault 思否</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="递归的方式"><a href="#递归的方式" class="headerlink" title="递归的方式"></a>递归的方式</h3><p>找到自己的子节点，再找子子节点，再找子子子节点…<br>这种方式虽能实现，但是如果节点关系复杂越来，因为要每次都要从 sql 中建立连接并查询，就会越来越慢<br>(递归的方式 200 多个后代要 2s 左右才能查出来； 在同样的数据下，用下面介绍的迭代的方式来查不到 100ms)。</p>
<h3 id="迭代的方式"><a href="#迭代的方式" class="headerlink" title="迭代的方式"></a>迭代的方式</h3><ol>
<li>根据 id 查找后代节点时，拼成集合的方式 ids=set(id)，根据 <code>select id,pid from user where pid in (ids)</code> 获取到所有的子节点（拼成实体对象：如具有 id 和 pid 属性的 ParentChild），加入到 ParentChild 列表中；</li>
<li>根据 1 获取的 id 拼成一组新的 ids 获取第二波数据的所有子节点；以此类推，直到 ids 为空为止，说明再无后代了；</li>
<li>根据 ParentChild 列表来构建 map 结构（其中的 key 是节点 ID，value 是直属子节点 ID 列表）</li>
<li>通过在第 3 步获取的 map 缓存，来进行更多的操作，如：查找直属子节点、 查找所有后代；</li>
</ol>
<p>通过迭代的方式，一波一波地获取后代再数据库中进行查询，如果有 10 代，只需要从数据库中，查 10 次即可<br>（用递归的话，可能得成千上万次了），当然如果用户量特别多的时候，就不要用这种只有 id 和 pid 的方式了，得重新设计表了；<br><a href="https://segmentfault.com/a/1190000014284076" target="_blank" rel="noopener">在数据库中存储一棵树，实现无限级分类 - 个人文章 - SegmentFault 思否</a></p>
<h4 id="如何查找直属子节点"><a href="#如何查找直属子节点" class="headerlink" title="如何查找直属子节点"></a>如何查找直属子节点</h4><blockquote>
<p>根据节点 id，直接从 map 缓存中获取即可；</p>
</blockquote>
<h4 id="如何查找所有后代"><a href="#如何查找所有后代" class="headerlink" title="如何查找所有后代"></a>如何查找所有后代</h4><blockquote>
<p>第 1 步： 建 1 个 set 集合，用来存储所有的后代；<br>第 2 步： 根据节点 id，从 map 中先找到直属子节点列表，加入到 set 中；<br>第 3 步： 再根据第 2 步得到的子节点列表，遍历这些子节点，从 map 中获取这些子节点的子节点（递归到第 2 步）</p>
</blockquote>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><strong>service 层实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">UserMapper</span>, <span class="hljs-title">User</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">listDirectChild</span><span class="hljs-params">(Integer userId)</span> </span>&#123;<br>        AbsUserTreeHelper helper = newUserTreeHelper(userId);<br>        <span class="hljs-keyword">return</span> getUsers(helper.getDirectChildIds(userId));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> AbsUserTreeHelper <span class="hljs-title">newUserTreeHelper</span><span class="hljs-params">(Integer userId)</span> </span>&#123;<br>        checkUserId(userId);<br>        AbsUserTreeHelper helper = <span class="hljs-keyword">new</span> UserTreeHelper(<span class="hljs-keyword">this</span>.baseMapper);<br>        helper.init(userId);<br>        <span class="hljs-keyword">return</span> helper;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkUserId</span><span class="hljs-params">(Integer userId)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (userId == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ParamException(<span class="hljs-string">"参数无效：userId为"</span> + userId);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTreeHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbsUserTreeHelper</span> </span>&#123;<br>    UserMapper userMapper;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserTreeHelper</span><span class="hljs-params">(UserMapper userMapper)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userMapper = userMapper;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;ParentChild&gt; <span class="hljs-title">listParentChild</span><span class="hljs-params">(List&lt;Integer&gt; userIdList)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.userMapper.listParentChild(userIdList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>mapper 层实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br><br>    <span class="hljs-function">List&lt;ParentChild&gt; <span class="hljs-title">listParentChild</span><span class="hljs-params">(@Param(<span class="hljs-string">"userIdList"</span>)</span> List&lt;Integer&gt; userIdList)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.lyloou.demo.mapper.UserMapper"</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 通用查询映射结果 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"BaseResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.lyloou.demo.model.User"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"age"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"age"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"email"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"listParentChild"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.lyloou.demo.model.ParentChild"</span>&gt;</span><br>        select id as childId, pid as parentId from t_user where pid in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"userIdList"</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">open</span>=<span class="hljs-string">"("</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">","</span> <span class="hljs-attr">close</span>=<span class="hljs-string">")"</span>&gt;</span><br>            #&#123;item&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>UserTreeHelper 源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserTreeHelper.java</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取用户的直接下属，或全部下属</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTreeHelper</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; parentToChildrenMap;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取map中的所有用户ID</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户ID集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Integer&gt; <span class="hljs-title">getAllIds</span><span class="hljs-params">()</span> </span>&#123;<br>        checkInit();<br>        Set&lt;Integer&gt; allIds = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        Set&lt;Integer&gt; keySet = parentToChildrenMap.keySet();<br>        <span class="hljs-keyword">for</span> (Integer key : keySet) &#123;<br>            allIds.add(key);<br>            allIds.addAll(getAllChildIds(key));<br>        &#125;<br>        <span class="hljs-keyword">return</span> allIds;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取树上的全部用户ID列表（不包含自己）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId 用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 全部用户ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Integer&gt; <span class="hljs-title">getAllChildIds</span><span class="hljs-params">(Integer userId)</span> </span>&#123;<br>        checkInit();<br>        <span class="hljs-keyword">return</span> getAllChildIds(userId, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkInit</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (parentToChildrenMap == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"没有调用初始化方法，请调用init方法初始化"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Set&lt;Integer&gt; <span class="hljs-title">getAllChildIds</span><span class="hljs-params">(Integer userId, Set&lt;Integer&gt; idSet)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (idSet == <span class="hljs-keyword">null</span>) &#123;<br>            idSet = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        &#125;<br>        List&lt;Integer&gt; idList = parentToChildrenMap.getOrDefault(userId, Collections.emptyList());<br>        <span class="hljs-keyword">if</span> (idList.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> idSet;<br>        &#125;<br>        idSet.addAll(idList);<br>        <span class="hljs-keyword">for</span> (Integer id : idList) &#123;<br>            getAllChildIds(id, idSet);<br>        &#125;<br>        <span class="hljs-keyword">return</span> idSet;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取直属用户ID列表 （不包含自己）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId 用户的ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 直属用户ID列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Integer&gt; <span class="hljs-title">getDirectChildIds</span><span class="hljs-params">(Integer userId)</span> </span>&#123;<br>        checkInit();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HashSet&lt;&gt;(parentToChildrenMap.getOrDefault(userId, <span class="hljs-keyword">new</span> ArrayList&lt;&gt;()));<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户ID来初始化 Helper</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId 用户ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Integer userId)</span> </span>&#123;<br>        init(Collections.singletonList(userId));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把一组用户和它们的后代缓存起来</span><br><span class="hljs-comment">     * 后面可以通过map.get(userId) 的方式获取userId对应的直接子节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userIdList 用户列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(List&lt;Integer&gt; userIdList)</span> </span>&#123;<br>        parentToChildrenMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        iterateUser(userIdList);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过迭代的方式重新实现，一波一波地获取，而不是一个一个地获取</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userIdList 用户列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">iterateUser</span><span class="hljs-params">(List&lt;Integer&gt; userIdList)</span> </span>&#123;<br>        Set&lt;ParentChild&gt; allParentChildren = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        List&lt;ParentChild&gt; parentChildren = listParentChild(userIdList);<br>        <span class="hljs-keyword">while</span> (!parentChildren.isEmpty()) &#123;<br>            allParentChildren.addAll(parentChildren);<br><br>            <span class="hljs-comment">// 获取这一波的id</span><br>            List&lt;Integer&gt; newRoundIds = parentChildren.stream().map(ParentChild::getChildId).collect(Collectors.toList());<br>            parentChildren = listParentChild(newRoundIds);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (ParentChild parentChild : allParentChildren) &#123;<br>            List&lt;Integer&gt; oldList = parentToChildrenMap.getOrDefault(parentChild.getParentId(), <span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>            oldList.add(parentChild.getChildId());<br>            parentToChildrenMap.put(parentChild.getParentId(), oldList);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;ParentChild&gt; <span class="hljs-title">listParentChild</span><span class="hljs-params">(List&lt;Integer&gt; userIdList)</span></span>&#123;<br>       <span class="hljs-comment">//伪代码 List&lt;ParentChild&gt; list = select id,pid from user where pid in (userIdList);</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// ParentChild.java</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParentChild</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer pid;<br>&#125;<br><br><span class="hljs-comment">// Main.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UserTreeHelper helper = <span class="hljs-keyword">new</span> UserTreeHelper();<br>        helper.init(<span class="hljs-number">1</span>);<br>        List&lt;Integer&gt; ids = helper.getAllChildIds(<span class="hljs-number">1</span>);<br>        System.out.println(ids);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="更多可查看源码实现"><a href="#更多可查看源码实现" class="headerlink" title="更多可查看源码实现"></a>更多可查看源码实现</h4><p><a href="https://github.com/lyloou/spring-boot-web/blob/v1.1.0/src/main/java/com/lyloou/demo/service/helper/AbsUserTreeHelper.java" target="_blank" rel="noopener">https://github.com/lyloou/spring-boot-web/blob/v1.1.0/src/main/java/com/lyloou/demo/service/helper/AbsUserTreeHelper.java</a></p>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>接口签名校验设计</title>
    <url>/business/%E7%AD%BE%E5%90%8D%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="签名目的"><a href="#签名目的" class="headerlink" title="签名目的"></a>签名目的</h2><ul>
<li>防篡改</li>
<li>防抓包</li>
<li>防刷</li>
<li>更安全</li>
</ul>
<h2 id="签名的主要防御措施："><a href="#签名的主要防御措施：" class="headerlink" title="签名的主要防御措施："></a>签名的主要防御措施：</h2><p>一、 验证签名</p>
<blockquote>
<p>将有效的参数按字典排序，并 md5 或 sha 加密（可以自定义加密算法）得到 param_sign，服务端依据同样的算法得到 server_sign，对比传递过来的 param_sign，不相等断定签名无效。<br>如果请求是 RequestBody ，当作 key 为 “body” ，value 为 json 字符串值传入校验。</p>
</blockquote>
<p>二、 请求的时间是否在限制的时间内（如：1 分钟内）</p>
<blockquote>
<p>判断请求的时间戳是否在允许的范围内</p>
</blockquote>
<p>三、 请求方是否被接口服务注册登记</p>
<blockquote>
<p>判断 clientId 是否有效</p>
</blockquote>
<p>四、 是否重复请求</p>
<blockquote>
<p>通过缓存验证 key (由 clientId+nonce 组成)是否已经存在，nonce 是随机生成的字符串<br>默认开启此功能，并由本地来缓存，可以自定义缓存实现微服务的场景（如 redis 等等）。</p>
</blockquote>
<h2 id="WIKI-文档"><a href="#WIKI-文档" class="headerlink" title="WIKI 文档"></a>WIKI 文档</h2><ul>
<li><a href="https://github.com/lyloou/component/blob/master/component-security-signvalidator-starter/doc/1.1服务端基本使用.md" target="_blank" rel="noopener">1.1 服务端基本使用</a></li>
<li><a href="https://github.com/lyloou/component/blob/master/component-security-signvalidator-starter/doc/1.2客户端基本使用.md" target="_blank" rel="noopener">1.2 客户端基本使用</a></li>
<li><a href="https://github.com/lyloou/component/blob/master/component-security-signvalidator-starter/doc/2.配置说明.md" target="_blank" rel="noopener">2.配置说明</a></li>
<li><a href="https://github.com/lyloou/component/blob/master/component-security-signvalidator-starter/doc/3.自定义缓存.md" target="_blank" rel="noopener">3.自定义缓存</a></li>
<li><a href="doc/4.自定义验证器.md">4.自定义签名</a></li>
<li><a href="https://github.com/lyloou/component/blob/master/component-security-signvalidator-starter/doc/5.签名异常捕获.md" target="_blank" rel="noopener">5.签名异常捕获</a></li>
</ul>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>实现机制：通过拦截器，在真正 handler 之前，对请求拦截后统一处理。</p>
<p>我们可以继承 <code>HandlerInterceptorAdapter</code> 类，然后注册给 WebMvcConfigure，这样我们的拦截器就可以生效了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SignAutoConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> SignInterceptor());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>签名的原理是：</p>
<ul>
<li>客户端将所有有效参数，将 key 按字典排序，加上密钥，然后 md5 加密得到 sign</li>
<li>服务端用同样的方式得到 sign，比较参数中的 sign 和自己生成的 sign</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>支持上面提到的所有防御措施</li>
<li>支持多客户端</li>
<li>支持自定义缓存</li>
<li>支持自定义验证器</li>
<li>支持全局和局部的开关控制</li>
</ul>
<h2 id="客户端工具"><a href="#客户端工具" class="headerlink" title="客户端工具"></a>客户端工具</h2><p><strong>Java 客户端工具</strong></p>
<blockquote>
<p>SimpleHttpUtil<br>具体见 <a href="https://github.com/lyloou/component/blob/master/component-security-signvalidator-starter/doc/1.2客户端基本使用.md" target="_blank" rel="noopener">1.2 客户端基本使用</a></p>
</blockquote>
<p><strong>Js 客户端工具</strong></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/UzEsLtv_ald6Yw1XVAhmwg" target="_blank" rel="noopener">再谈前后端 API 签名安全？</a></li>
<li><a href="https://mp.weixin.qq.com/s/ChwFubuX0HcB0DgIEi5Tog" target="_blank" rel="noopener">前后端 API 交互如何保证数据安全性？</a></li>
<li><a href="https://blog.51cto.com/u_14888386/2515879" target="_blank" rel="noopener">使用 nonce 巩固接口签名安全_猿天地的技术博客_51CTO 博客</a></li>
<li><a href="https://blog.csdn.net/qq_36641443/article/details/108475613" target="_blank" rel="noopener">【AOP 实践】接口签名校验<em>Jayin</em>的博客-CSDN 博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/112555362" target="_blank" rel="noopener">基于 Spring Boot 以及 Redis 使用 Aop 来实现 Api 接口签名验证 - 知乎</a></li>
</ul>
<h2 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h2><p><a href="https://github.com/lyloou/component-parent-test/tree/master/component-security-signvalidator-starter-test" target="_blank" rel="noopener">https://github.com/lyloou/component-parent-test/tree/master/component-security-signvalidator-starter-test</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>订单状态设计</title>
    <url>/business/%E8%AE%A2%E5%8D%95%E7%8A%B6%E6%80%81%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="关于数据库‘状态’字段设计的思考与实践-倒骑的驴-博客园"><a href="#关于数据库‘状态’字段设计的思考与实践-倒骑的驴-博客园" class="headerlink" title="关于数据库‘状态’字段设计的思考与实践 - 倒骑的驴 - 博客园"></a><a href="https://www.cnblogs.com/daoqidelv/p/7384648.html" target="_blank" rel="noopener">关于数据库‘状态’字段设计的思考与实践 - 倒骑的驴 - 博客园</a></h2><table>
<thead>
<tr>
<th>KEY</th>
<th>VALUE</th>
</tr>
</thead>
<tbody><tr>
<td>CREATE_FAILED</td>
<td>创建订单失败（终态）</td>
</tr>
<tr>
<td>PAY_WAITTING</td>
<td>等待买家付款</td>
</tr>
<tr>
<td>PAY_CONFIRMING</td>
<td>付款确认中</td>
</tr>
<tr>
<td>PAY_FAILED</td>
<td>买家付款失败（终态，依赖需求而定）</td>
</tr>
<tr>
<td>PAY_SUCCESS</td>
<td>买家付款成功</td>
</tr>
<tr>
<td>DELIVERED</td>
<td>卖家已发货</td>
</tr>
<tr>
<td>RECEIVED</td>
<td>买家已收货</td>
</tr>
<tr>
<td>RETURNING</td>
<td>退货中</td>
</tr>
<tr>
<td>RETURN_SUCCESS</td>
<td>退货成功（终态）</td>
</tr>
<tr>
<td>CLOSED</td>
<td>订单关闭（终态）</td>
</tr>
</tbody></table>
<p><img src="https://github.com/lyloou/img/raw/develop/z/20190912144017.png" alt></p>
<h2 id="拆表"><a href="#拆表" class="headerlink" title="拆表"></a>拆表</h2><p>order: 根据商家(provider_id)的维度来拆单；<br>order_item: 根据规格(product_id)的维度来拆单；</p>
<h2 id="拆状态"><a href="#拆状态" class="headerlink" title="拆状态"></a>拆状态</h2><p>STATUS: ‘PENDING’,’AUTO_CLOSED’,’CLOSED’,’REVIEW_FAIL’,’REVIEWED’,’PICK_FAIL’,’PICKED’,’FINISHED’</p>
<p>PAY_STATUS: ‘PENDING’,’PAYED’,’REFUND_PROCESSING’,’REFUND_SUCCESS’,’PARTIAL_REFUND’</p>
<p>SHIP_STATUS: ‘NOT_SHIPED’,’SENDING’,’DELIVERED’,’PARTIAL_RETURN’,’FULL_RETURN’,’PARTIAL_SENDING’</p>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>【Business】 权限设计</title>
    <url>/business/%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="后台权限设计"><a href="#后台权限设计" class="headerlink" title="后台权限设计"></a>后台权限设计</h2><p>账号： 登录系统的账号；</p>
<p>角色： 运营、商家、财务、客服、管理员；</p>
<p>权限： 页面权限，操作权限，数据权限；</p>
<p><strong>关系</strong>：</p>
<p>一个账号有多个角色；一个角色有多个权限；</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_40147863/article/details/85320371" target="_blank" rel="noopener">后台权限管理系统设计（图文教程） - 肖朋伟 - CSDN 博客</a></li>
</ul>
<p>ACL</p>
<p>RBAC<br><a href="https://cloud.tencent.com/developer/article/1175271" target="_blank" rel="noopener">手撸 Java Web RBAC 权限管理 - 云+社区 - 腾讯云</a><br><a href="https://github.com/zhaojun1998/Premission-Study/blob/master/README.md" target="_blank" rel="noopener">Premission-Study/README.md at master · zhaojun1998/Premission-Study</a></p>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>Cordova相关</title>
    <url>/cordova/cordova%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="一个坑"><a href="#一个坑" class="headerlink" title="一个坑"></a>一个坑</h2><p>运行环境</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">java:</span> <span class="hljs-string">jdk1.8</span><br><span class="hljs-attr">cordova:</span> <span class="hljs-number">6.4</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure>

<p>通过<code>cordova build android</code>的方式自动编译打包程序时，<br>Manifest文件会被重新生成。</p>
<p>我给第一个Activity设置了屏幕不反旋转的属性<code>android:screenOrientation=&quot;portrait&quot;</code>，但是自动生成的过程中，总会将这行代码自动删除了。</p>
<p>解决办法是：找一个不含该属性的Activity放在第一个位置。</p>
<h2 id="覆盖安装APP，assets文件不更新问题"><a href="#覆盖安装APP，assets文件不更新问题" class="headerlink" title="覆盖安装APP，assets文件不更新问题"></a>覆盖安装APP，assets文件不更新问题</h2><h3 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h3><p>用cordova生成的app，其中的assets文件夹中保存的是前端文件<code>www</code>。如果修改前端代码，<br>覆盖安装app后，其前端代码未生效（原生代码是生效了的）。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol>
<li>在activity中调用 <code>getAssets()</code>方法；</li>
<li>更新版本号；（对于有些机型来说，相同version的app不会更新assets文件，也不可降级覆盖安装。）</li>
</ol>
<p>相信通过上面两个步骤可以解决掉大部分机型的覆盖安装问题；</p>
<blockquote>
<p>open file with <code>context.getAssets()</code> on each startup of the app, when upgrade the app,<br>first launch it and after that check if file has change.<br>Its seems that until you access the file, it is not extracted from the apk to<br><code>/data/data/&lt;your-package&gt;/</code></p>
</blockquote>
<ul>
<li><a href="https://stackoverflow.com/questions/30651788/android-asset-file-not-upgraded-on-app-upgrade" target="_blank" rel="noopener">Android Asset file not upgraded on app upgrade</a></li>
<li><a href="https://stackoverflow.com/questions/33469330/assets-not-replaced-by-version-upgrade" target="_blank" rel="noopener">Assets not replaced by version upgrade?</a></li>
<li><a href="http://www.cnblogs.com/feijian/p/4424923.html" target="_blank" rel="noopener">android开发，assets下面的资源文件不会变化/改动</a></li>
</ul>
<h2 id="cordova-后台切换到前台触发back返回按键"><a href="#cordova-后台切换到前台触发back返回按键" class="headerlink" title="cordova 后台切换到前台触发back返回按键"></a>cordova 后台切换到前台触发back返回按键</h2><p>问题描述：<br>现在app处在前台，这时候来了一个qq消息或者微信消息，点击通知后再次回来app的时候，会触发返回按键<br>这样就有可能会莫名其妙地将之前的编辑操作给毁掉了。</p>
<p>解决办法：<br>思路是这样的，当离开app的时候，设置一个标志表示现在处于后台了，<br>当再次返回来的时候，先检测之前的标志是否在后台，如果是，则不处理返回按键的逻辑；<br>如果不是，则正常执行返回按键的逻辑。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isAppInFront = <span class="hljs-literal">true</span>;<br><br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'pause'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    isAppInFront = <span class="hljs-literal">false</span>;<br>&#125;, <span class="hljs-literal">false</span>);<br><br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'resume'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        isAppInFront = <span class="hljs-literal">true</span>;<br>    &#125;, <span class="hljs-number">200</span>) <span class="hljs-comment">// 注意需要延时，否则拿到的标志一直是true</span><br>&#125;, <span class="hljs-literal">false</span>);<br><br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'backbutton'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 程序不在前台运行，不响应</span><br>    <span class="hljs-keyword">if</span>(!isAppInFront) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 其他点按返回按键的逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>参考资料：  </p>
<ul>
<li><a href="https://stackoverflow.com/questions/29606012/how-to-check-app-running-in-foreground-or-background-in-ionic-cordova-phonegap" target="_blank" rel="noopener">javascript - how to check app running in foreground or background in ionic/cordova/phonegap - Stack Overflow</a></li>
</ul>
<h2 id="cordova插件"><a href="#cordova插件" class="headerlink" title="cordova插件"></a>cordova插件</h2><p>社交类：<br>QQ：<a href="https://github.com/iVanPan/Cordova_QQ" target="_blank" rel="noopener">https://github.com/iVanPan/Cordova_QQ</a><br>微信：<a href="https://github.com/xu-li/cordova-plugin-wechat" target="_blank" rel="noopener">https://github.com/xu-li/cordova-plugin-wechat</a><br>微博：<a href="https://github.com/iVanPan/cordova_weibo" target="_blank" rel="noopener">https://github.com/iVanPan/cordova_weibo</a><br>参考网址：<a href="http://blog.csdn.net/jcy472578/article/details/50718951" target="_blank" rel="noopener">http://blog.csdn.net/jcy472578/article/details/50718951</a></p>
<p>二维码扫描：<a href="https://github.com/phonegap/phonegap-plugin-barcodescanner" target="_blank" rel="noopener">https://github.com/phonegap/phonegap-plugin-barcodescanner</a><br>热更新插件：<a href="https://github.com/nordnet/cordova-hot-code-push/" target="_blank" rel="noopener">https://github.com/nordnet/cordova-hot-code-push/</a></p>
<p>Cordova - 从相册中选择照片并上传，以及拍照上传:<br><a href="http://www.hangge.com/blog/cache/detail_1181.html" target="_blank" rel="noopener">http://www.hangge.com/blog/cache/detail_1181.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">cordova plugin add cordova-plugin-camera<br>cordova plugin add cordova-plugin-file<br>cordova plugin add cordova-plugin-file-transfer<br></code></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>卸载 cordova: <code>npm uninstall -g cordova</code><br>安装 cordova: <code>npm install -g cordova</code><br>安装指定版本 cordova: <code>npm install -g cordova@6.4.0</code></p>
]]></content>
      <tags>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>C编译</title>
    <url>/c/make%20and%20compile/</url>
    <content><![CDATA[<p><a href="https://www.videolan.org/developers/libdvbcsa.html" target="_blank" rel="noopener">https://www.videolan.org/developers/libdvbcsa.html</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="hljs-built_in">local</span>/lib<br>sudo ldconfig -v<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># configure.ac</span><br><span class="hljs-comment"># Makefile.am</span><br>git <span class="hljs-built_in">clone</span> https://code.videolan.org/videolan/libdvbcsa.git<br><span class="hljs-built_in">cd</span> libdvbcsa<br><br>sudo apt-get install automake autoconf<br>sudo apt-get install libtool<br>autoreconf -i<br>./configure<br>make<br>make install<br></code></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/bugutian/p/5560548.html" target="_blank" rel="noopener">https://www.cnblogs.com/bugutian/p/5560548.html</a><br><a href="http://www.51cos.com/?p=1649" target="_blank" rel="noopener">http://www.51cos.com/?p=1649</a></p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>Become a Better Developer</title>
    <url>/developer/become%20a%20better%20developer/</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>~ 自动化<br>~ 规模化<br>~ 低成本<br>~ 高效率</p>
<h2 id="理论学科"><a href="#理论学科" class="headerlink" title="理论学科"></a>理论学科</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; https://time.geekbang.org/column/article/8701</span><br><span class="hljs-quote">&gt; 理论学科。你需要学习像算法、数据结构、网络模型、计算机原理等计算机科学专业需要学习的知识。为什么要学好这些理论上的知识呢？</span><br><span class="hljs-quote">&gt; 其一，这些理论知识可以说是计算机科学这门学科最精华的知识了。说得大一点，这些是人类智慧的精华。你只要想成为高手，这些东西是你必需要掌握和学习的。</span><br><span class="hljs-quote">&gt; 其二，当你在解决一些很复杂或是很难的问题时，这些基础理论知识可以帮到你很多。我过去这 20 年从这些基础理论知识中受益匪浅。</span><br><span class="hljs-quote">&gt; 其三，这些理论知识的思维方式可以让你有触类旁通，一通百通的感觉。虽然知识比较难啃，但啃过以后，你将获益终生。</span><br><span class="hljs-quote">&gt; ———— 陈浩</span><br></code></pre></td></tr></table></figure>

<h2 id="become-a-better-developer"><a href="#become-a-better-developer" class="headerlink" title="become a better developer"></a>become a better developer</h2><hr>
<ul>
<li><a href="https://coolshell.cn/articles/4235.html" target="_blank" rel="noopener">程序员的谎谬之言还是至理名言？ | | 酷 壳 - CoolShell</a></li>
</ul>
<hr>
<ul>
<li><p>All Developers Should Know How They Learn Best (this post)<br><a href="https://www.skorks.com/2009/08/all-developers-should-know-how-they-learn-best/" target="_blank" rel="noopener">https://www.skorks.com/2009/08/all-developers-should-know-how-they-learn-best/</a></p>
</li>
<li><p>The Secret Of Being A Great Mentor<br><a href="https://www.skorks.com/2009/09/the-secret-of-being-a-great-mentor/" target="_blank" rel="noopener">https://www.skorks.com/2009/09/the-secret-of-being-a-great-mentor/</a><br><a href="https://www.skorks.com/2009/09/manufacturing-authority-and-trust/" target="_blank" rel="noopener">https://www.skorks.com/2009/09/manufacturing-authority-and-trust/</a></p>
</li>
<li><p>The Secret Of Being A Great Apprentice</p>
</li>
<li><p>Become A Better Developer By Indexing Your Brain<br><a href="https://www.skorks.com/2009/09/become-a-better-developer-by-indexing-your-brain/" target="_blank" rel="noopener">https://www.skorks.com/2009/09/become-a-better-developer-by-indexing-your-brain/</a></p>
</li>
<li><p>Learn More – Faster By Using The World-Wide Community</p>
</li>
<li><p>What Playing Cards Can Teach Us About Ramping-Up And Transferring Knowledge</p>
</li>
</ul>
<hr>
<ul>
<li>Why Developers Never Use State Machines<br><a href="https://www.skorks.com/2011/09/why-developers-never-use-state-machines/" target="_blank" rel="noopener">https://www.skorks.com/2011/09/why-developers-never-use-state-machines/</a></li>
<li>Manufacturing Authority And Trust<br><a href="https://www.skorks.com/2009/09/manufacturing-authority-and-trust/" target="_blank" rel="noopener">https://www.skorks.com/2009/09/manufacturing-authority-and-trust/</a></li>
</ul>
<h2 id="How-To-Ask-Questions-The-Smart-Way"><a href="#How-To-Ask-Questions-The-Smart-Way" class="headerlink" title="How To Ask Questions The Smart Way"></a><a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">How To Ask Questions The Smart Way</a></h2><h2 id="If-you-want-to-improve-your-self-confidence-improve-your-skills"><a href="#If-you-want-to-improve-your-self-confidence-improve-your-skills" class="headerlink" title="If you want to improve your self-confidence, improve your skills"></a>If you want to improve your self-confidence, improve your skills</h2><blockquote>
<p><a href="https://medium.com/darius-foroux/i-have-15-ideas-to-change-your-life-do-you-have-5-minutes-f84c3f99b3c5" target="_blank" rel="noopener">https://medium.com/darius-foroux/i-have-15-ideas-to-change-your-life-do-you-have-5-minutes-f84c3f99b3c5</a><br>If you don’t believe in yourself, don’t try to search for it in motivational posts, talks, or books.</p>
</blockquote>
<p><a href="http://dariusforoux.com/build-self-confidence-need-win-life/" target="_blank" rel="noopener">You only improve your self-confidence by becoming good at something</a>. How do you get good? By learning, doing, seeing results, and repeating that process for years. Your confidence will grow slowly every day.</p>
<h2 id="How-To-Build-The-Self-Confidence-You-Need-To-Win-At-Life"><a href="#How-To-Build-The-Self-Confidence-You-Need-To-Win-At-Life" class="headerlink" title="How To Build The Self-Confidence You Need To Win At Life"></a><a href="https://dariusforoux.com/build-self-confidence-need-win-life/" target="_blank" rel="noopener">How To Build The Self-Confidence You Need To Win At Life</a></h2><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>Improve your competencies<br><span class="hljs-bullet">- </span>Put them into practice<br><span class="hljs-bullet">- </span>See results<br><span class="hljs-bullet">- </span>Grow more confident<br><span class="hljs-bullet">- </span>Repeat<br></code></pre></td></tr></table></figure>

<h2 id="The-Most-Important-Skill-Nobody-Taught-You-–-Personal-Growth-–-Medium"><a href="#The-Most-Important-Skill-Nobody-Taught-You-–-Personal-Growth-–-Medium" class="headerlink" title="The Most Important Skill Nobody Taught You – Personal Growth – Medium"></a><a href="https://medium.com/personal-growth/the-most-important-skill-nobody-taught-you-9b162377ab77" target="_blank" rel="noopener">The Most Important Skill Nobody Taught You – Personal Growth – Medium</a></h2><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">Fortunately, there <span class="hljs-keyword">is</span> a solution. The only way <span class="hljs-keyword">to</span> avoid being ruined <span class="hljs-keyword">by</span> this fear — like any fear — <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> face <span class="hljs-keyword">it</span>. It’s <span class="hljs-keyword">to</span> let <span class="hljs-keyword">the</span> boredom take you <span class="hljs-keyword">where</span> <span class="hljs-keyword">it</span> wants so you can deal <span class="hljs-keyword">with</span> whatever <span class="hljs-keyword">it</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> really going <span class="hljs-keyword">on</span> <span class="hljs-keyword">with</span> your sense <span class="hljs-keyword">of</span> self. That’s when you’ll hear yourself think, <span class="hljs-keyword">and</span> <span class="hljs-keyword">that</span>’s when you’ll learn <span class="hljs-keyword">to</span> engage <span class="hljs-keyword">the</span> parts <span class="hljs-keyword">of</span> you <span class="hljs-keyword">that</span> are masked <span class="hljs-keyword">by</span> distraction.<br><br>The beauty <span class="hljs-keyword">of</span> this <span class="hljs-keyword">is</span> <span class="hljs-keyword">that</span>, once you cross <span class="hljs-keyword">that</span> initial barrier, you realize <span class="hljs-keyword">that</span> being alone isn’t so bad. Boredom can provide <span class="hljs-keyword">its</span> own stimulation.<br><br>...<br><br>The oldest philosophical wisdom <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> world has one piece <span class="hljs-keyword">of</span> advice <span class="hljs-keyword">for</span> us:<br>know yourself. And there <span class="hljs-keyword">is</span> a good reason why <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span>.<br><br>Without knowing ourselves, <span class="hljs-keyword">it</span>’s almost impossible <span class="hljs-keyword">to</span> find a healthy way <span class="hljs-keyword">to</span> interact <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> world <span class="hljs-keyword">around</span> us.<br>Without taking <span class="hljs-built_in">time</span> <span class="hljs-keyword">to</span> figure <span class="hljs-keyword">it</span> out, we don’t have a foundation <span class="hljs-keyword">to</span> built <span class="hljs-keyword">the</span> <span class="hljs-built_in">rest</span> <span class="hljs-keyword">of</span> our lives <span class="hljs-keyword">on</span>.<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>developer</tag>
      </tags>
  </entry>
  <entry>
    <title>【Business】 登录设计</title>
    <url>/business/%E7%99%BB%E5%BD%95%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="token-过期重新登录后自动发起上个请求"><a href="#token-过期重新登录后自动发起上个请求" class="headerlink" title="token 过期重新登录后自动发起上个请求"></a>token 过期重新登录后自动发起上个请求</h3><p>举个获取用户的 vip 信息的例子</p>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><ol>
<li>用户用带<code>token</code>的 Header 头来获取数据：<code>/user/vip/get_info</code>；</li>
<li>后端返回 <code>606, token过期</code>；</li>
<li>前端重新登录，并发起 <code>/user/vip/get_info</code> 来获取数据；（这个过程在 app 后台进行，不要显示给用户）</li>
</ol>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 伪代码</span><br><br><span class="hljs-comment">// reqBackup 可以也可以用 localStorage 来存储</span><br><span class="hljs-keyword">var</span> reqBackup;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">url, param</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> data = http.fetch(url, param);<br>  <span class="hljs-keyword">if</span> (data.code === <span class="hljs-number">200</span> &amp;&amp; reqBackup.url) &#123;<br>    reqBackup = &#123;&#125;;<br>    fetchData(reqBackup.url, reqBackup.param, reqBackup.callback);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params">url, param, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> data = http.fetch(url, param);<br>  <span class="hljs-comment">// 606, token过期</span><br>  <span class="hljs-keyword">if</span> (data.code === <span class="hljs-number">606</span>) &#123;<br>    reqBackup.url = url;<br>    reqBackup.param = param;<br>    reqBackup.callback = callback;<br>    login();<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (data.code === <span class="hljs-number">200</span>) &#123;<br>    callback(data);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>开发流程</title>
    <url>/developer/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<ol>
<li><p>需求分析的时候，逐个看需求文档，<br>将需求点罗列到思维导图上（便于统筹帷幄），标记关键点、风险点和注意事项<br>（有助记效果，与产品或其他同事交流沟通时，有的放矢）。</p>
</li>
<li><p>概要设计、详细设计（技术选型、）</p>
</li>
<li><p>分析现在代码和数据库对需求的已有支持（不要重新造轮子）。</p>
</li>
<li><p>设计数据库表和字段，设计包结构、类结构和主要方法（类似于列大纲）。</p>
</li>
<li><p>编写接口文档（不是一个人在作战）。</p>
</li>
<li><p>修改配置、开发具体代码，适应新需求。</p>
</li>
<li><p>设计和开发过程中，将数据库、配置等的变动以及上线时的注意事项列一个运维清单（以防上线过程出问题）。</p>
</li>
<li><p>自测，编写单元测试、Postman 测试。</p>
</li>
<li><p>代码优化，魔法数字、命名、结构、注释、算法、设计模式等。</p>
</li>
<li><p>联调。</p>
</li>
<li><p>提测和 bug 修复。</p>
</li>
<li><p>打勾运维清单上线。</p>
</li>
<li><p>项目沉淀、后期优化。</p>
</li>
</ol>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://segmentfault.com/a/1190000021831640" target="_blank" rel="noopener">阿里等大厂的研发流程，进去前先了解一下 - SegmentFault 思否</a></li>
<li><img src="https://raw.githubusercontent.com/lyloou/img/develop/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B_20211216143312_2021-12-16-14-33-13.png" alt="开发流程_20211216143312_2021-12-16-14-33-13"></li>
</ul>
]]></content>
      <tags>
        <tag>developer</tag>
      </tags>
  </entry>
  <entry>
    <title>知识点掌握程度</title>
    <url>/developer/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8E%8C%E6%8F%A1%E7%A8%8B%E5%BA%A6/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>类别</th>
<th>描述</th>
<th>开发者所需级别</th>
</tr>
</thead>
<tbody><tr>
<td>基本知识点</td>
<td>熟练掌握</td>
<td>初中级</td>
</tr>
<tr>
<td>深入知识点</td>
<td>熟练掌握</td>
<td>中高级</td>
</tr>
<tr>
<td>基本知识点的细节</td>
<td>掌握</td>
<td>高级</td>
</tr>
<tr>
<td>系统核心机制</td>
<td>熟悉、掌握</td>
<td>高级、资深</td>
</tr>
<tr>
<td>琐碎的知识点</td>
<td>了解</td>
<td>所有级别</td>
</tr>
</tbody></table>
<blockquote>
<p>来源： <a href="http://blog.csdn.net/singwhatiwanna/article/details/49230997" target="_blank" rel="noopener">http://blog.csdn.net/singwhatiwanna/article/details/49230997</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>developer</tag>
      </tags>
  </entry>
  <entry>
    <title>取四个场次</title>
    <url>/business/%E5%8F%96%E5%9B%9B%E4%B8%AA%E5%9C%BA%E6%AC%A1/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假设一个活动中，有 n 个<code>（n的范围是 1&lt;n&lt;10）</code>场次，场次按时间顺序依次进行。<br>其中每个场次有三种状态：「未开始」、「进行中」、「已结束」<br>要求：以当前时间点为参考点，从场次列表中获取最多 4 个场次。<br>场次具体要求如下：</p>
<ol>
<li>不满足 4 场次或正好 4 场次的全部返回。</li>
<li>大于 4 场次时，获取的四个场次有下面这些情况（场次充足的情况下，只有一个【已结束】的场次）：<br>【未开始、未开始、未开始、未开始】<br>【已结束、未开始、未开始、未开始】<br>【已结束、进行中、未开始、未开始】<br>…</li>
</ol>
<h2 id="解决文案："><a href="#解决文案：" class="headerlink" title="解决文案："></a>解决文案：</h2><p><strong>突破点</strong></p>
<p>找到【已结束】的下标，并以此下标为中心来推断其它几个场次。</p>
<p><strong>具体解决步骤</strong></p>
<ol>
<li>少于 4 场次，全部返回；</li>
<li>多余 4 场次，按以下规则取<br>设：index 为最后一个已结束的场次下标，size 为场次列表数量，hasNext 为是否有下一个场次<br>&lt;1. 如果：index=-1 时，表示都没结束，取前 4 个；hasNext=true<br>&lt;2. 如果：size-index&lt;=4 时，表示未结束的不多了，取后 4 个；hasNext=false<br>&lt;3. 否则：取 index、index+1、index+2、index+3；hasNext=true</li>
</ol>
<p><strong>示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最多展示 4 个场次</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_SCENE_SIZE = <span class="hljs-number">4</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Result <span class="hljs-title">getResult</span><span class="hljs-params">(List&lt;SceneModel&gt; candidateSceneList)</span> </span>&#123;<br>        Result result = <span class="hljs-keyword">new</span> Result();<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> size = candidateSceneList.size();<br><br>        <span class="hljs-comment">// 不足4场次全部返回</span><br>        <span class="hljs-keyword">if</span> (size &lt;= MAX_SCENE_SIZE) &#123;<br>            result.setHasNext(<span class="hljs-keyword">false</span>);<br>            result.setSceneList(candidateSceneList);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">// 多余4场次，按以下规则取</span><br>        List&lt;SceneModel&gt; resultList;<br><br>        <span class="hljs-comment">// 获取最后一个已结束的场次下标</span><br>        <span class="hljs-keyword">int</span> index = getLastFinishedSceneIndex(candidateSceneList);<br><br>        <span class="hljs-comment">// 1. 如果：index=-1 时，表示都没结束，取前4个；hasNext=true</span><br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>            resultList = candidateSceneList.subList(<span class="hljs-number">0</span>, MAX_SCENE_SIZE);<br>            result.setSceneList(resultList);<br>            result.setHasNext(<span class="hljs-keyword">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 如果：size-index&lt;=4 时，表示未结束的不多了，取后4个；hasNext=false</span><br>        <span class="hljs-keyword">if</span> (size - index &lt;= MAX_SCENE_SIZE) &#123;<br>            resultList = candidateSceneList.subList(size - MAX_SCENE_SIZE, size);<br>            result.setSceneList(resultList);<br>            result.setHasNext(<span class="hljs-keyword">false</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">// 3. 否则：取index、index+1、index+2、index+3；hasNext=true</span><br>        resultList = candidateSceneList.subList(index, index + MAX_SCENE_SIZE);<br>        result.setSceneList(resultList);<br>        result.setHasNext(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务同步设计</title>
    <url>/business/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%90%8C%E6%AD%A5%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>需求，将一个表的内容同步到另一个表中，<br>只同步从某个时间段到现在有更新的记录；</p>
<p>解决思路是：</p>
<ul>
<li><p>如果可以修改表结构，可以加一个 【sync_status（同步状态）】 字段：同步完成后，修改下这个记录；有修改时恢复这个记录；</p>
</li>
<li><p>如果无法修改表结构，但是可以通过【update_time（修改时间）】字段来过滤，数据量太多可以分批处理</p>
<ol>
<li>建立一个任务配置表（t_job_config），在这个配置表中，保存上次的同步信息（如：同步名称，同步时间，同步到了哪个 id，等等）</li>
<li>根据名称，从表中获取任务配置，如果没有就为这个名称新建立一条记录；开始时间为 null</li>
<li>记录下当前时间；作为结束时间</li>
<li>取一个最大条数 MAX；从数据库中根据修改时间和 id 获取记录，对这批数据做处理；<br>记录不为空，取上次获得的最后一条 id 做为下次查询的开始 id，如下面代码所示</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf</span>4j<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncStudentJob</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> isSync = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-meta">@Autowired</span><br>    StudentService studentService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JobConfigService jobConfigService;<br><br>    <span class="hljs-meta">@Scheduled</span>(cron = <span class="hljs-string">"0/10 * * * * *"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">syncStudent</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isSync) &#123;<br>            log.info(<span class="hljs-string">"上次还没同步完成"</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            isSync = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> t1 = System.currentTimeMillis();<br>            log.info(<span class="hljs-string">"【Job syncStudent】， 开始同步"</span>);<br>            AtomicLong count = doSyncStudent();<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> t2 = System.currentTimeMillis();<br>            log.info(<span class="hljs-string">"【Job syncStudent】， 完成全部同步，耗时：&#123;&#125;ms，数量：&#123;&#125; "</span>, (t2 - t1) / <span class="hljs-number">1000</span>, count.get());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            isSync = <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> AtomicLong <span class="hljs-title">doSyncStudent</span><span class="hljs-params">()</span> </span>&#123;<br>        AtomicLong count = <span class="hljs-keyword">new</span> AtomicLong();<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> max = <span class="hljs-number">500</span>;<br>        <span class="hljs-keyword">final</span> JobConfigEntity jobConfig = getOrCreateJobConfig();<br>        Objects.requireNonNull(jobConfig, <span class="hljs-string">"获取或创建jobConfig失败"</span>);<br><br>        <span class="hljs-keyword">final</span> LocalDateTime endTime = LocalDateTime.now();<br>        <span class="hljs-keyword">final</span> LocalDateTime lastUpdateTime = getLastUpdateTime(jobConfig);<br>        String lastUpdateId = getLastUpdateId(jobConfig);<br>        List&lt;StudentEntity&gt; list;<br><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>            list = studentService.lambdaQuery()<br>                    .gt(lastUpdateTime != <span class="hljs-keyword">null</span>, StudentEntity::getGmtModified, lastUpdateTime)<br>                    .lt(StudentEntity::getGmtModified, endTime)<br>                    .gt(StudentEntity::getId, lastUpdateId)<br>                    .orderByAsc(StudentEntity::getId)<br>                    .last(String.format(<span class="hljs-string">"limit %s"</span>, max))<br>                    .list();<br>            <span class="hljs-keyword">if</span> (list.isEmpty()) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            doList(list);<br>            count.addAndGet(list.size());<br><br>            <span class="hljs-keyword">final</span> StudentEntity lastStudent = list.get(list.size() - <span class="hljs-number">1</span>);<br>            lastUpdateId = String.valueOf(lastStudent.getId());<br>            updateJobConfig(jobConfig, lastUpdateTime, lastUpdateId);<br><br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>            log.info(<span class="hljs-string">"【Job syncStudent】， 完成一组同步，耗时：&#123;&#125;ms，数量：&#123;&#125; "</span>, (end - start) / <span class="hljs-number">1000</span>, count.get());<br>        &#125; <span class="hljs-keyword">while</span> (list.size() &gt;= max);<br><br>        <span class="hljs-comment">// 更新成新的时间</span><br>        updateJobConfig(jobConfig, endTime, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateJobConfig</span><span class="hljs-params">(JobConfigEntity configEntity, LocalDateTime lastUpdateTime, String lastUpdateId)</span> </span>&#123;<br>        jobConfigService.lambdaUpdate()<br>                .set(JobConfigEntity::getLastUpdateTime, lastUpdateTime)<br>                .set(JobConfigEntity::getLastUpdateId, lastUpdateId)<br>                .eq(JobConfigEntity::getId, configEntity.getId())<br>                .update();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doList</span><span class="hljs-params">(List&lt;StudentEntity&gt; list)</span> </span>&#123;<br>        log.info(<span class="hljs-string">"(&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);<br>        log.info(list.toString());<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException ignored) &#123;<br>        &#125;<br>        log.info(<span class="hljs-string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> LocalDateTime <span class="hljs-title">getLastUpdateTime</span><span class="hljs-params">(JobConfigEntity jobConfig)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> jobConfig.getLastUpdateTime();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getLastUpdateId</span><span class="hljs-params">(JobConfigEntity jobConfig)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> String lastUpdateId = jobConfig.getLastUpdateId();<br>        <span class="hljs-keyword">if</span> (Strings.isEmpty(lastUpdateId)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"0"</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lastUpdateId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> JobConfigEntity <span class="hljs-title">getOrCreateJobConfig</span><span class="hljs-params">()</span> </span>&#123;<br>        String jobName = <span class="hljs-string">"sync.student.name"</span>;<br>        <span class="hljs-keyword">final</span> Optional&lt;JobConfigEntity&gt; configEntityOptional = jobConfigService.lambdaQuery()<br>                .eq(JobConfigEntity::getName, jobName)<br>                .oneOpt();<br>        <span class="hljs-keyword">if</span> (configEntityOptional.isPresent()) &#123;<br>            <span class="hljs-keyword">return</span> configEntityOptional.get();<br>        &#125;<br>        <span class="hljs-keyword">final</span> JobConfigEntity configEntity = <span class="hljs-keyword">new</span> JobConfigEntity();<br>        configEntity.setName(jobName);<br>        jobConfigService.save(configEntity);<br>        <span class="hljs-keyword">return</span> configEntity;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><br><br>Source Server : 127.0.0.1<br>Source Server Type : MySQL<br>Source Server Version : 50731<br>Source Host : 127.0.0.1:3306<br>Source Schema : school<br><br>Target Server Type : MySQL<br>Target Server Version : 50731<br>File Encoding : 65001<br><br>Date: 28/12/2020 18:37:34<br>\*/<br><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">NAMES</span> utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">---</span><br><br><span class="hljs-comment">-- Table structure for t_job_config</span><br><br><span class="hljs-comment">---</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`t_job_config`</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`t_job_config`</span> (<br><span class="hljs-string">`id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'主键 ID'</span>,<br><span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'要同步的业务名称'</span>,<br><span class="hljs-string">`last_update_time`</span> datetime(<span class="hljs-number">0</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'上次同步时间'</span>,<br><span class="hljs-string">`last_update_id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'上次同步到了哪里(排序的 id 才有意义，结合 last_update_time 使用)'</span>,<br><span class="hljs-string">`memo`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'备注'</span>,<br><span class="hljs-string">`ext`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'备用字段'</span>,<br><span class="hljs-string">`gmt_create`</span> datetime(<span class="hljs-number">0</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CURRENT_TIMESTAMP</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建时间'</span>,<br><span class="hljs-string">`gmt_modified`</span> datetime(<span class="hljs-number">0</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CURRENT_TIMESTAMP</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CURRENT_TIMESTAMP</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'修改时间'</span>,<br><span class="hljs-string">`disabled`</span> <span class="hljs-built_in">tinyint</span>(<span class="hljs-number">1</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否已经禁用'</span>,<br>PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>) <span class="hljs-keyword">USING</span> BTREE,<br><span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-string">`idx_name`</span>(<span class="hljs-string">`name`</span>) <span class="hljs-keyword">USING</span> BTREE<br>) <span class="hljs-keyword">ENGINE</span> = MyISAM AUTO_INCREMENT = <span class="hljs-number">7</span> <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> = utf8mb4 <span class="hljs-keyword">COLLATE</span> = utf8mb4_general_ci ROW_FORMAT = Dynamic;<br><br><span class="hljs-comment">---</span><br><br><span class="hljs-comment">-- Table structure for t_student</span><br><br><span class="hljs-comment">---</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`t_student`</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`t_student`</span> (<br><span class="hljs-string">`id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'学生 ID'</span>,<br><span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'学生名称'</span>,<br><span class="hljs-string">`nick_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'学生昵称'</span>,<br><span class="hljs-string">`class_id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'班级 ID'</span>,<br><span class="hljs-string">`email`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'电子邮件'</span>,<br><span class="hljs-string">`phone`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'手机号'</span>,<br><span class="hljs-string">`avatar`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'大头贴'</span>,<br><span class="hljs-string">`gmt_create`</span> datetime(<span class="hljs-number">0</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CURRENT_TIMESTAMP</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建时间'</span>,<br><span class="hljs-string">`gmt_modified`</span> datetime(<span class="hljs-number">0</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CURRENT_TIMESTAMP</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CURRENT_TIMESTAMP</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'修改时间'</span>,<br><span class="hljs-string">`disabled`</span> <span class="hljs-built_in">tinyint</span>(<span class="hljs-number">1</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否已经禁用'</span>,<br>PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>) <span class="hljs-keyword">USING</span> BTREE,<br><span class="hljs-keyword">INDEX</span> <span class="hljs-string">`idx_name`</span>(<span class="hljs-string">`name`</span>) <span class="hljs-keyword">USING</span> BTREE<br>) <span class="hljs-keyword">ENGINE</span> = MyISAM AUTO_INCREMENT = <span class="hljs-number">1000</span> <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> = utf8mb4 <span class="hljs-keyword">COLLATE</span> = utf8mb4_general_ci <span class="hljs-keyword">COMMENT</span> = <span class="hljs-string">'学生表'</span> ROW_FORMAT = Dynamic;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">'student001'</span>, <span class="hljs-string">'学生 001'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'student001@coocaa.com'</span>, <span class="hljs-string">'15212345001'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-28 15:56:56'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">'student002'</span>, <span class="hljs-string">'学生 002'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'student002@coocaa.com'</span>, <span class="hljs-string">'15212345002'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">'student003'</span>, <span class="hljs-string">'学生 003'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'student003@coocaa.com'</span>, <span class="hljs-string">'15212345003'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">'student004'</span>, <span class="hljs-string">'学生 004'</span>, <span class="hljs-number">9</span>, <span class="hljs-string">'student004@coocaa.com'</span>, <span class="hljs-string">'15212345004'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">'student005'</span>, <span class="hljs-string">'学生 005'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'student005@coocaa.com'</span>, <span class="hljs-string">'15212345005'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>, <span class="hljs-string">'student006'</span>, <span class="hljs-string">'学生 006'</span>, <span class="hljs-number">7</span>, <span class="hljs-string">'student006@coocaa.com'</span>, <span class="hljs-string">'15212345006'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-string">'student007'</span>, <span class="hljs-string">'学生 007'</span>, <span class="hljs-number">6</span>, <span class="hljs-string">'student007@coocaa.com'</span>, <span class="hljs-string">'15212345007'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-string">'student008'</span>, <span class="hljs-string">'学生 008'</span>, <span class="hljs-number">5</span>, <span class="hljs-string">'student008@coocaa.com'</span>, <span class="hljs-string">'15212345008'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">9</span>, <span class="hljs-string">'student009'</span>, <span class="hljs-string">'学生 009'</span>, <span class="hljs-number">4</span>, <span class="hljs-string">'student009@coocaa.com'</span>, <span class="hljs-string">'15212345009'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">10</span>, <span class="hljs-string">'student010'</span>, <span class="hljs-string">'学生 010'</span>, <span class="hljs-number">9</span>, <span class="hljs-string">'student010@coocaa.com'</span>, <span class="hljs-string">'15212345010'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">11</span>, <span class="hljs-string">'student011'</span>, <span class="hljs-string">'学生 011'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'student011@coocaa.com'</span>, <span class="hljs-string">'15212345011'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">12</span>, <span class="hljs-string">'student012'</span>, <span class="hljs-string">'学生 012'</span>, <span class="hljs-number">7</span>, <span class="hljs-string">'student012@coocaa.com'</span>, <span class="hljs-string">'15212345012'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">13</span>, <span class="hljs-string">'student013'</span>, <span class="hljs-string">'学生 013'</span>, <span class="hljs-number">6</span>, <span class="hljs-string">'student013@coocaa.com'</span>, <span class="hljs-string">'15212345013'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">14</span>, <span class="hljs-string">'student014'</span>, <span class="hljs-string">'学生 014'</span>, <span class="hljs-number">5</span>, <span class="hljs-string">'student014@coocaa.com'</span>, <span class="hljs-string">'15212345014'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">15</span>, <span class="hljs-string">'student015'</span>, <span class="hljs-string">'学生 015'</span>, <span class="hljs-number">4</span>, <span class="hljs-string">'student015@coocaa.com'</span>, <span class="hljs-string">'15212345015'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">16</span>, <span class="hljs-string">'student016'</span>, <span class="hljs-string">'学生 016'</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'student016@coocaa.com'</span>, <span class="hljs-string">'15212345016'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">17</span>, <span class="hljs-string">'student017'</span>, <span class="hljs-string">'学生 017'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'student017@coocaa.com'</span>, <span class="hljs-string">'15212345017'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">18</span>, <span class="hljs-string">'student018'</span>, <span class="hljs-string">'学生 018'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'student018@coocaa.com'</span>, <span class="hljs-string">'15212345018'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">19</span>, <span class="hljs-string">'student019'</span>, <span class="hljs-string">'学生 019'</span>, <span class="hljs-number">9</span>, <span class="hljs-string">'student019@coocaa.com'</span>, <span class="hljs-string">'15212345019'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">20</span>, <span class="hljs-string">'student020'</span>, <span class="hljs-string">'学生 020'</span>, <span class="hljs-number">5</span>, <span class="hljs-string">'student020@coocaa.com'</span>, <span class="hljs-string">'15212345020'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">21</span>, <span class="hljs-string">'student021'</span>, <span class="hljs-string">'学生 021'</span>, <span class="hljs-number">4</span>, <span class="hljs-string">'student021@coocaa.com'</span>, <span class="hljs-string">'15212345021'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">22</span>, <span class="hljs-string">'student022'</span>, <span class="hljs-string">'学生 022'</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'student022@coocaa.com'</span>, <span class="hljs-string">'15212345022'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">23</span>, <span class="hljs-string">'student023'</span>, <span class="hljs-string">'学生 023'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'student023@coocaa.com'</span>, <span class="hljs-string">'15212345023'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">24</span>, <span class="hljs-string">'student024'</span>, <span class="hljs-string">'学生 024'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'student024@coocaa.com'</span>, <span class="hljs-string">'15212345024'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">25</span>, <span class="hljs-string">'student025'</span>, <span class="hljs-string">'学生 025'</span>, <span class="hljs-number">9</span>, <span class="hljs-string">'student025@coocaa.com'</span>, <span class="hljs-string">'15212345025'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">26</span>, <span class="hljs-string">'student026'</span>, <span class="hljs-string">'学生 026'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'student026@coocaa.com'</span>, <span class="hljs-string">'15212345026'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">27</span>, <span class="hljs-string">'student027'</span>, <span class="hljs-string">'学生 027'</span>, <span class="hljs-number">7</span>, <span class="hljs-string">'student027@coocaa.com'</span>, <span class="hljs-string">'15212345027'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">28</span>, <span class="hljs-string">'student028'</span>, <span class="hljs-string">'学生 028'</span>, <span class="hljs-number">6</span>, <span class="hljs-string">'student028@coocaa.com'</span>, <span class="hljs-string">'15212345028'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">29</span>, <span class="hljs-string">'student029'</span>, <span class="hljs-string">'学生 029'</span>, <span class="hljs-number">5</span>, <span class="hljs-string">'student029@coocaa.com'</span>, <span class="hljs-string">'15212345029'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`school`</span>.<span class="hljs-string">`t_student`</span>(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nick_name`</span>, <span class="hljs-string">`class_id`</span>, <span class="hljs-string">`email`</span>, <span class="hljs-string">`phone`</span>, <span class="hljs-string">`avatar`</span>, <span class="hljs-string">`gmt_create`</span>, <span class="hljs-string">`gmt_modified`</span>, <span class="hljs-string">`disabled`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">30</span>, <span class="hljs-string">'student030'</span>, <span class="hljs-string">'学生 030'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'student030@coocaa.com'</span>, <span class="hljs-string">'15212345030'</span>, <span class="hljs-string">'http://bpic.588ku.com/element_pic/20/06/30/e510dda05e0b09e44cec4e474546a014.jpg'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-string">'2020-12-22 09:33:35'</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>business</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例</title>
    <url>/design-pattern/%E5%8D%95%E4%BE%8B/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">P66</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String []args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                Singleton.getInstance().doSth(); <span class="hljs-comment">// ok, only create one instance</span><br><span class="hljs-comment">//                Singleton.getInstance2().doSth(); // error, will create more than one instance</span><br><span class="hljs-comment">//                Singleton.getInstance3().doSth(); // error, will create more than one instance, too</span><br><span class="hljs-comment">//                Singleton.getInstance4().doSth(); // error, maybe cause NullPointerException</span><br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>            count = count + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(count);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSth</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-comment">// do something</span><br>        &#125;<br><br>        <span class="hljs-comment">// double check</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">synchronized</span> (Singleton<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;<br>                    <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>                        instance = <span class="hljs-keyword">new</span> Singleton();<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance2</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                instance = <span class="hljs-keyword">new</span> Singleton();<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance3</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">synchronized</span> (Singleton<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;<br>                    instance = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance4</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> instance;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    instance = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-参考资料</title>
    <url>/design-pattern/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener">java-design-patterns</a></p>
<blockquote>
<p>Design patterns implemented in Java <a href="http://java-design-patterns.com" target="_blank" rel="noopener">http://java-design-patterns.com</a></p>
</blockquote>
</li>
<li><p><a href="http://c.biancheng.net/design_pattern/" target="_blank" rel="noopener">http://c.biancheng.net/design_pattern/</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Cola架构</title>
    <url>/design-pattern/cola/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/significantfrank/article/details/85785565" target="_blank" rel="noopener">复杂度应对之道 - COLA 应用架构_我的新书《代码精进之路：从码农到工匠》-CSDN 博客_cola 架构</a><br><a href="https://www.jianshu.com/p/a20e1793f6d9" target="_blank" rel="noopener">扩展点设计 - 简书</a><br><a href="https://blog.csdn.net/significantfrank/article/details/79614915#comments_15943809" target="_blank" rel="noopener">复杂性应对之道 - 领域建模_我的新书《代码精进之路：从码农到工匠》-CSDN博客</a><br><a href="https://blog.csdn.net/significantfrank/article/details/79286947" target="_blank" rel="noopener">SOFA企业应用框架_我的新书《代码精进之路：从码农到工匠》-CSDN博客_sofa框架</a></p>
<p><a href="https://tech.meituan.com/2017/12/22/ddd-in-practice.html" target="_blank" rel="noopener">领域驱动设计在互联网业务开发中的实践 - 美团技术团队</a></p>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>cola</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象设计原则</title>
    <url>/design-pattern/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><p>（单开里依接组迪：把<code>蛋</code>打<code>开</code>，<code>里</code>面有 <code>一</code> <code>组</code> <code>姐</code> <code>弟</code> `花）</p>
<ol>
<li>单一职责原则：设计目的单一的类；</li>
<li>开放封闭原则：对扩展开放，对修改关闭；</li>
<li>里氏（Liskov）替换原则：子类可以替换父类；</li>
<li>依赖倒置原则：要依赖抽象，而不是具体实现；针对接口编程，不要针对实现编程；</li>
<li>接口隔离原则：使用多个专门的接口，比使用一个单一的总接口好；</li>
<li>组合重用原则：要尽量使用组合，而不是继承关系达到重用的目的；</li>
<li>迪米特（Demeter）原则（最少知识法则）：一个对象应该对其他对象有尽可能少的了解；</li>
</ol>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK环境部署</title>
    <url>/devops/elk/</url>
    <content><![CDATA[<h2 id="软件和环境："><a href="#软件和环境：" class="headerlink" title="软件和环境："></a>软件和环境：</h2><p>virtual box 6.1<br>centos 7<br>java: jdk1.8.0_171</p>
<p>es: 7.3.0<br>官网地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a><br>下载地址：<a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.3.0-linux-x86_64.tar.gz" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.3.0-linux-x86_64.tar.gz</a></p>
<p>Kibana: 7.3.0<br>官网地址：<a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a><br>下载地址：<a href="https://artifacts.elastic.co/downloads/kibana/kibana-7.3.0-linux-x86_64.tar.gz" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/kibana/kibana-7.3.0-linux-x86_64.tar.gz</a></p>
<p>logstash: 7.3.0<br>官网地址：<a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a><br>下载地址：<a href="https://artifacts.elastic.co/downloads/logstash/logstash-7.3.0.tar.gz" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/logstash/logstash-7.3.0.tar.gz</a></p>
<p>配置 hosts</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># vi /etc/hosts</span><br>172.20.130.84 node.com<br></code></pre></td></tr></table></figure>

<p>关闭防火墙</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">systemctl stop firewalld.service <span class="hljs-comment">#停止firewall</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld.service <span class="hljs-comment">#禁止firewall开机启动</span><br>firewall-cmd --state <span class="hljs-comment"># 查看防火墙</span><br></code></pre></td></tr></table></figure>

<p>java 环境配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># vi /etc/profile</span><br>JAVA_HOME=/usr/java JRE_HOME=/usr/java/jre<br>CLASS_PATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar:<span class="hljs-variable">$JRE_HOME</span>/lib PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JRE_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> JAVA_HOME JRE_HOME CLASS_PATH PATH<br><br><span class="hljs-comment"># source /etc/profile</span><br></code></pre></td></tr></table></figure>

<h4 id="es"><a href="#es" class="headerlink" title="es"></a>es</h4><ol>
<li>单机安装请取消注释：node.name: node-1，否则无法正常启动。修改网络和端口，取消注释 master 节点，单机只保留一个 node</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-string">node.com</span> <span class="hljs-comment">#</span><br><span class="hljs-comment"># Set a custom port for HTTP: #</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> <span class="hljs-string">["node-1"]</span><br></code></pre></td></tr></table></figure>

<ol start="2">
<li>按需修改 vim /usr/elasticsearch/conﬁg/jvm.options 内存设置</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 根据实际情况修改占用内存，默认都是1G，单机1G内存，启动会占用700m+然后在安装kibana 后，基本上无法运行了，运行了一会就挂了报内存不足。</span><br><span class="hljs-comment"># 内存设置超出物理内存，也会无法启动，启动报错。</span><br>-Xms1g<br>-Xmx1g<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>添加 es 用户，es 默认 root 用户无法启动，需要改为其他用户</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">useradd	estest<br><span class="hljs-comment"># 修改密码</span><br>passwd	estest<br>chown -R estest /usr/elasticsearch/<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>修改/etc/sysctl.conf</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">vm.max_map_count=655360<br><span class="hljs-comment"># 是修改生效：sysctl -p</span><br></code></pre></td></tr></table></figure>

<ol start="5">
<li>修改/etc/security/limits.conf</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">*	soft	nofile	<span class="hljs-number">65536</span><br>*	hard	nofile	<span class="hljs-number">65536</span><br>*	soft	nproc	<span class="hljs-number">4096</span><br>*	hard	nproc	<span class="hljs-number">4096</span><br></code></pre></td></tr></table></figure>

<ol start="6">
<li>用 estest 用户启动 es</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">su estest<br>/usr/elasticsearch/bin/elasticsearch<br></code></pre></td></tr></table></figure>

<ol start="7">
<li>测试</li>
</ol>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">curl http://<span class="hljs-keyword">node</span>.com:<span class="hljs-title">9200</span><br></code></pre></td></tr></table></figure>

<h4 id="ik-分词器"><a href="#ik-分词器" class="headerlink" title="ik 分词器"></a>ik 分词器</h4><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.3.0" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.3.0</a></p>
<ol>
<li>在 elasticsearch 的 bin 目录下执行以下命令,es 插件管理器会自动帮我们安装，然后等待安装完成：</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>elasticsearch<span class="hljs-regexp">/bin/</span>elasticsearch-plugin install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/medcl/</span>elasticsearch-analysis-ik<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v7.3.0/</span>elasticsearch-analysis-ik-<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span>.zip<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>下载完成后会提示 Continue with installation?输入 y 即可完成安装</li>
<li>重启 Elasticsearch 和 Kibana</li>
</ol>
<p>测试</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">POST	_analyze<br>&#123;<br><span class="hljs-string">"analyzer"</span>: <span class="hljs-string">"ik_max_word"</span>, <span class="hljs-string">"text"</span>: <span class="hljs-string">"南京市长江大桥"</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h4><p>最好也用 estest 用户操作<br>解压，修改配置（端口号、es 地址等）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># vim /usr/kibana/config/kibana.yml</span><br>server.port: 5601<br>server.host: <span class="hljs-string">"0.0.0.0"</span><br><span class="hljs-comment"># The URLs of the Elasticsearch instances to use for all your queries.</span><br>elasticsearch.hosts: [<span class="hljs-string">"http://192.168.211.136:9200"</span>]<br></code></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">./bin/kibana<br></code></pre></td></tr></table></figure>

<h4 id="按照和运行redis"><a href="#按照和运行redis" class="headerlink" title="按照和运行redis:"></a>按照和运行<code>redis</code>:</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">yum install wget -y<br>wget https://download.redis.io/releases/redis-5.0.8.tar.gz<br>tar -zxf redis-5.0.8.tar.gz<br>yum install gcc -y<br><br><span class="hljs-built_in">cd</span> redis-5.0.8<br>make &amp;&amp; make install<br><br><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/bin/<br>cp ~/redis-5.0.8/redis.conf .<br><span class="hljs-comment"># 配置 redis.conf 的密码为123456，ip为 bind 0.0.0.0</span><br>redis-server redis.conf<br></code></pre></td></tr></table></figure>

<h4 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h4><p>配置 shipper-logstash.conf</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">input &#123;<br>  file &#123;<br>    path =&gt; [<br>      "/log/out.log"<br>    ]<br>  &#125;<br>&#125;<br><br>output &#123;<br>  redis &#123;<br>    host =&gt; "node.com"<br>    port =&gt; 6379<br>    db =&gt; 0<br>    password =&gt; "123456"<br>    data_type =&gt; "channel"<br>    key =&gt; "sb-logback"<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>配置 indexer-logstash.conf</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">input &#123;<br>    redis &#123;<br>        host      =&gt; "node.com"    # redis主机地址<br>        port      =&gt; 6379               # redis端口号<br>        password  =&gt; "123456"<br>        db        =&gt; 0                  # redis数据库编号<br>        data_type =&gt; "channel"          # 使用发布/订阅模式<br>        key       =&gt; "sb-logback"  # 发布通道名称<br>    &#125;<br>&#125;<br><br>filter &#123;<br>     <span class="hljs-comment">#定义数据的格式</span><br>     grok &#123;<br>       match =&gt; &#123; "message" =&gt; "%&#123;TIMESTAMP_ISO8601:time&#125; \[%&#123;NOTSPACE:threadName&#125;\] %&#123;LOGLEVEL:level&#125;  %&#123;DATA:logger&#125; %&#123;NOTSPACE:applicationName&#125; -(?:.*=%&#123;NUMBER:timetaken&#125;ms|)"&#125;<br>     &#125;<br>&#125;<br><br>output &#123;<br>    stdout &#123;&#125;<br>    elasticsearch &#123;<br>        hosts =&gt; "node.com:9200"<br>        index =&gt; "logback"<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="运行-jar，指定输出目录"><a href="#运行-jar，指定输出目录" class="headerlink" title="运行 jar，指定输出目录"></a>运行 jar，指定输出目录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">java -jar spring-api.jar &amp; &gt; /log.out<br></code></pre></td></tr></table></figure>

<h2 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/i1qgONtrtaqHo0o0TcRFGA" target="_blank" rel="noopener">ELK 处理 Spring Boot 日志，妙！</a></li>
<li><a href="./ElasticSearch相关">ElasticSearch 相关</a></li>
<li><a href="https://my.oschina.net/u/4342169/blog/4333777/print" target="_blank" rel="noopener">Docker 安装及安装单机版 ELK 日志收集系统 - osc_dg0eswo7 的个人空间 - OSCHINA</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1026543" target="_blank" rel="noopener">ELK 实时日志分析平台环境部署–完整记录 - 云+社区 - 腾讯云</a></li>
<li><a href="https://wsgzao.github.io/post/elk/" target="_blank" rel="noopener">使用 ELK(Elasticsearch + Logstash + Kibana) 搭建日志集中分析平台实践 | HelloDog</a></li>
<li><a href="https://www.cnblogs.com/cjsblog/p/9476813.html" target="_blank" rel="noopener">Kibana（一张图片胜过千万行日志） - 废物大师兄 - 博客园</a></li>
<li><a href="https://www.cnblogs.com/cjsblog/p/9495024.html" target="_blank" rel="noopener">Filebeat 模块与配置 - 废物大师兄 - 博客园</a></li>
</ul>
]]></content>
      <tags>
        <tag>devops</tag>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins</title>
    <url>/devops/jenkins/</url>
    <content><![CDATA[<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><ul>
<li><p><a href="https://jenkins.io/doc/book/installing/#debian-ubuntu" target="_blank" rel="noopener">Installing Jenkins</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/yjmyzz/p/jenkins-tutorial-part-1.html" target="_blank" rel="noopener">jenkins 入门教程(上) - 菩提树下的杨过 - 博客园</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/yjmyzz/p/jenkins-tutorial-part-2.html" target="_blank" rel="noopener">jenkins 入门教程(中) - 菩提树下的杨过 - 博客园</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/yjmyzz/p/jenkins-tutorial-part-3.html" target="_blank" rel="noopener">jenkins 入门教程(下) - 菩提树下的杨过 - 博客园</a></p>
</li>
</ul>
<ul>
<li><a href="https://blog.csdn.net/itfootball/article/details/44876517" target="_blank" rel="noopener">Jenkins 的关闭、重启 - CSDN 博客</a><ul>
<li>关闭 jenkins 服务: <a href="http://localhost:8080/exit" target="_blank" rel="noopener">http://localhost:8080/exit</a></li>
<li>重新启动 jenkins 服务器: <a href="http://localhost:8080/restart" target="_blank" rel="noopener">http://localhost:8080/restart</a></li>
<li>重载 jenkins 服务器: <a href="http://localhost:8080/reload" target="_blank" rel="noopener">http://localhost:8080/reload</a></li>
</ul>
</li>
</ul>
<p>个人觉得难点在于：密码、授权、密钥的配置。这一步走通了，后面的就好走了。</p>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><ul>
<li><a href="https://stackoverflow.com/questions/31719756/how-to-stop-jenkins-log-from-becoming-huge" target="_blank" rel="noopener">How to stop Jenkins log from becoming huge? - Stack Overflow</a></li>
</ul>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><p>/var/log/jenkins/jenkins.log</p>
]]></content>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 相关</title>
    <url>/devops/ElasticSearch%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html</a></p>
<h2 id="解决-ElasticSearch-ClusterBlockException-blocked-by-FORBIDDEN-12-index-read-only-allow-delete-api"><a href="#解决-ElasticSearch-ClusterBlockException-blocked-by-FORBIDDEN-12-index-read-only-allow-delete-api" class="headerlink" title="解决 ElasticSearch ClusterBlockException[blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];"></a>解决 ElasticSearch ClusterBlockException[blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];</h2><ol>
<li>查看硬盘是否足够：<code>df -h</code></li>
<li>如果不够的话：可以调整 es 设置：</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 控制洪水阶段水印。它默认为95％</span><br>cluster.routing.allocation.disk.watermark.flood_stage: 99%<br><br>或者<br>cluster.routing.allocation.disk.threshold_enabled: false<br></code></pre></td></tr></table></figure>

<p>磁盘够了之后需要手动释放 3.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -XPUT -H <span class="hljs-string">"Content-Type: application/json"</span> http://node.com:9200/_all/_settings -d <span class="hljs-string">'&#123;"index.blocks.read_only_allow_delete": null&#125;'</span><br></code></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">PUT /all/_settings<br>&#123;<br>  "index.blocks.read_only_allow_delete"：null<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://blog.csdn.net/mouday/article/details/86557744" target="_blank" rel="noopener">ElasticSearch 常见的报错及解决_彭世瑜的博客-CSDN 博客</a></li>
<li>[解决：ElasticSearch ClusterBlockException<a href="https://www.cnblogs.com/hellxz/p/11532652.html" target="_blank" rel="noopener">blocked by: [FORBIDDEN/12/index read-only / allow delete (api)]; - 东北小狐狸 - 博客园</a></li>
</ul>
]]></content>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/devops/nginx/</url>
    <content><![CDATA[<h1 id="install-nginx"><a href="#install-nginx" class="headerlink" title="install nginx"></a>install nginx</h1><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt install nginx<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动Nginx</span><br>/etc/init.d/nginx start<br><br><span class="hljs-comment"># 如果nginx已经启动，我们修改配置之后，可以用</span><br>/etc/init.d/nginx reload<br></code></pre></td></tr></table></figure>

<p>在<code>/etc/nginx/nginx.conf</code>末尾有一句：include /etc/nginx/conf.d/*.conf;　　推荐把用户自己的配置放到 conf.d/<br>下面把默认的 server 修改为一个简单的文件服务器，<code>vi /etc/nginx/conf.d/default.conf</code>，修改监听端口 listen 和文件目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs conf"># &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf<br>autoindex on;# 显示目录<br>autoindex_exact_size on;# 显示文件大小<br>autoindex_localtime on;# 显示文件时间<br><br>server &#123;<br>     listen       8080 default_server;<br>     listen       [::]:8080 default_server;<br>     server_name  _;<br>     #root         &#x2F;root&#x2F;share&#x2F;;<br>     root         &#x2F;opt&#x2F;share&#x2F;;<br><br>     # Load configuration files for the default server block.<br>     include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;<br><br>     location &#x2F; &#123;<br>     &#125;<br><br>     error_page 404 &#x2F;404.html;<br>     location &#x3D; &#x2F;40x.html &#123;<br>     &#125;<br><br>     error_page 500 502 503 504 &#x2F;50x.html;<br>     location &#x3D; &#x2F;50x.html &#123;<br>     &#125;<br><br> &#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs conf"># 修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf<br># 由于我们使用的是root用户进行的共享，需要修改nginx.conf的用户，否则会出现权限问题，导致访问的时候出现403 Forbidden的错误<br><br>user root;<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.jianshu.com/p/95602720e7c8" target="_blank" rel="noopener">利用 nginx 搭建小型的文件服务器</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04" target="_blank" rel="noopener">How To Install Nginx on Ubuntu 16.04 | DigitalOcean</a></li>
</ul>
<h2 id="nginx-配置（含-ssl）"><a href="#nginx-配置（含-ssl）" class="headerlink" title="nginx 配置（含 ssl）"></a>nginx 配置（含 ssl）</h2><p>取名为 bs.lyloou.com.conf，并放入文件夹： /etc/nginx/conf.d 中，因为 nginx.conf 中会加载此目录下的文件，可以可以得到注册。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs conf">server<br>&#123;<br>    listen 80;<br>    listen 443 ssl http2;<br>    server_name bs.lyloou.com;<br>    #index index.php index.html index.htm default.php default.htm default.html;<br>    #root &#x2F;www&#x2F;wwwroot&#x2F;bs.lyloou.com;<br><br>    include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;<br><br>    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则<br>    #error_page 404&#x2F;404.html;<br>    #HTTP_TO_HTTPS_START<br>    if ($server_port !~ 443)&#123;<br>        rewrite ^(&#x2F;.*)$ https:&#x2F;&#x2F;$host$1 permanent;<br>    &#125;<br>    #HTTP_TO_HTTPS_END<br>    ssl_certificate    &#x2F;root&#x2F;c&#x2F;nginx&#x2F;33333_bs.lyloou.com.pem;<br>    ssl_certificate_key   &#x2F;root&#x2F;c&#x2F;nginx&#x2F;33333_bs.lyloou.com.key;<br>    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>    ssl_prefer_server_ciphers on;<br>    ssl_session_cache shared:SSL:10m;<br>    ssl_session_timeout 10m;<br>    #error_page 497  https:&#x2F;&#x2F;$host$request_uri;<br><br>    #SSL-END<br><br>    location &#x2F; &#123;<br>        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;<br>    &#125;<br><br>    error_page 404 &#x2F;404.html;<br>    location &#x3D; &#x2F;40x.html &#123;<br>    &#125;<br><br>    error_page 500 502 503 504 &#x2F;50x.html;<br>    location &#x3D; &#x2F;50x.html &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Nginx-–-proxy-pass-配置-Bigberg-博客园"><a href="#Nginx-–-proxy-pass-配置-Bigberg-博客园" class="headerlink" title="Nginx – proxy_pass 配置 - Bigberg - 博客园"></a><a href="https://www.cnblogs.com/bigberg/p/7651197.html" target="_blank" rel="noopener">Nginx – proxy_pass 配置 - Bigberg - 博客园</a></h2><p>在 proxy_pass 中的代理 url 后加上/，代理转发的 url 中就不会带上 location 中匹配路径；<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/20210702092220.png" alt="nginx_2020-08-19-18-50-37"><br>我们访问 <a href="http://my.yemao.com/proxy/index.html，其实是访问到了" target="_blank" rel="noopener">http://my.yemao.com/proxy/index.html，其实是访问到了</a> <a href="http://test.yemao.com/index.html" target="_blank" rel="noopener">http://test.yemao.com/index.html</a></p>
<blockquote>
<p>在 proxy_pass 中的代理 url 后带 / （则不会加上 location 中的匹配路径）<br>在 proxy_pass 中的代理 url 中不带 / （则会加上 location 中的匹配路径）</p>
</blockquote>
<h2 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h2><p><a href="https://www.jianshu.com/p/8671c40a5be8" target="_blank" rel="noopener">Nginx 的 upstream 详解 - 简书</a></p>
<h2 id="分配方式"><a href="#分配方式" class="headerlink" title="分配方式"></a>分配方式</h2><p>Nginx 的 upstream 支持 5 种 分配方式，<strong>其中 轮询、权重、IP 散列这三种为 Nginx 原生支持的分配方式，fair 和 url_hash 为第三方支持的分配方式。</strong></p>
<h4 id="1，轮询"><a href="#1，轮询" class="headerlink" title="1，轮询"></a>1，轮询</h4><p>轮询是 upstream 的默认分配方式，即每个请求按照时间顺序轮流分配到不同的后端服务器，如果某个后端服务器 down 掉后，能自动剔除。</p>
<blockquote>
<p>upstream zhang21（名称）{</p>
<p>server 192.168.1.11：8888；</p>
<p>server 192.168.1.22：8888；</p>
<p>server 192.168.1.33：8888；</p>
<p>}</p>
</blockquote>
<p>####</p>
<h4 id="2，weight（权重）"><a href="#2，weight（权重）" class="headerlink" title="2，weight（权重）"></a>2，weight（权重）</h4><p>轮询的加强版，既可以指定轮询比率，weight 和访问几率成正比，主要应用于后端服务器异质的场景下。</p>
<blockquote>
<p>upstream zhang21 {</p>
<p>server 192.168.1.11 weight=1；</p>
<p>server 192.168.1.22 weight=2；</p>
<p>server 192.168.1.33 weight=3；</p>
<p>}</p>
</blockquote>
<h4 id="3，ip-hash"><a href="#3，ip-hash" class="headerlink" title="3，ip_hash"></a>3，ip_hash</h4><p>每个请求按照访问 Ip（即 Nginx 的前置服务器或客户端 IP）的 hash 结果分配，这样每个访客会固定访问一个后端服务器，可以解决 session 一致问题。</p>
<blockquote>
<p>upstream zhang21 {</p>
<p>ip_hash;</p>
<p>server 192.168.1.11:7777;</p>
<p>server 192.168.1.22:8888;</p>
<p>server 192.168.1.33:9999;</p>
<p>}</p>
</blockquote>
<h4 id="4，fair"><a href="#4，fair" class="headerlink" title="4，fair"></a>4，fair</h4><p>fair 顾名思义，公平地按照后端服务器的响应时间（rt）来分配请求，响应时间（rt）小的后端服务器优先分配请求。</p>
<blockquote>
<p>upstream zhang21 {</p>
<p>server 192.168.1.11;</p>
<p>server 192.168.1.22;</p>
<p>server 192.168.1.33;</p>
<p>}</p>
</blockquote>
<h4 id="5，url-hash"><a href="#5，url-hash" class="headerlink" title="5，url_hash"></a>5，url_hash</h4><p>与 ip_hash 类似，但是按照访问 url 的 hash 结果来分配请求，使得每个 url 定向到同一个后端服务器，主要应用于后端服务器为缓存的场景下。</p>
<blockquote>
<p>upstream zhang21 {</p>
<p>server 192.168.1.11;</p>
<p>server 192.168.1.22;</p>
<p>server 192.168.1.33;</p>
<p>hash $request_uri；</p>
<p>hash_method crc32；</p>
<p>}</p>
</blockquote>
<p>其中，hash_method 为使用的 hash 算法，需要注意，此时 server 语句中不能添加 weight 等参数。</p>
<p>作者：Zhang21<br>链接：<a href="https://www.jianshu.com/p/8671c40a5be8" target="_blank" rel="noopener">https://www.jianshu.com/p/8671c40a5be8</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2 id="nginx-在一个服务器上配置两个项目，并通过两个不同的域名访问-半马-博客园"><a href="#nginx-在一个服务器上配置两个项目，并通过两个不同的域名访问-半马-博客园" class="headerlink" title="nginx 在一个服务器上配置两个项目，并通过两个不同的域名访问 - 半马 - 博客园"></a><a href="https://www.cnblogs.com/banma/p/9069858.html" target="_blank" rel="noopener">nginx 在一个服务器上配置两个项目，并通过两个不同的域名访问 - 半马 - 博客园</a></h2><h2 id="nginx-搭建文件服务器"><a href="#nginx-搭建文件服务器" class="headerlink" title="nginx 搭建文件服务器"></a>nginx 搭建文件服务器</h2><ul>
<li><a href="https://www.jianshu.com/p/d9f886a9666a" target="_blank" rel="noopener">用 nginx 一分钟实现文件服务器 - 简书</a></li>
<li><a href="https://www.yanxurui.cc/posts/server/2017-03-21-NGINX-as-a-file-server/" target="_blank" rel="noopener">NGINX as a file server</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs conf">server &#123;<br>  listen 80;<br>  server_name file.lyloou.com; # 自己PC的ip或者服务器的域名 charset utf-8; # 避免中文乱码<br>  root &#x2F;home&#x2F;xx&#x2F;share; # 存放文件的目录<br>  location &#x2F; &#123;<br>    # download<br>    autoindex on;               # enable directory listing output<br>    autoindex_exact_size off;   # output file sizes rounded to kilobytes, megabytes, and gigabytes<br>    autoindex_localtime on;     # output local times in the directory<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="如何为-nginx-配置-https-免费证书-主啊-博客园"><a href="#如何为-nginx-配置-https-免费证书-主啊-博客园" class="headerlink" title="如何为 nginx 配置 https(免费证书) - 主啊~ - 博客园"></a><a href="https://www.cnblogs.com/immense/p/11402157.html" target="_blank" rel="noopener">如何为 nginx 配置 https(免费证书) - 主啊~ - 博客园</a></h2><p>注意</p>
<ul>
<li>如果用了 docker 要暴露 443 端口</li>
<li>如果用了服务商服务器，要在安全组中配置 443 入方向</li>
</ul>
<h2 id="nginx-设置-websocket-连接"><a href="#nginx-设置-websocket-连接" class="headerlink" title="nginx 设置 websocket 连接"></a>nginx 设置 websocket 连接</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> /market &#123;<br>  <span class="hljs-attribute">index</span> index.html;<br>  <span class="hljs-attribute">client_max_body_size</span>    <span class="hljs-number">5m</span>;<br>  <span class="hljs-attribute">proxy_pass</span> http://172.21.90.214:6001;<br>  <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">"upgrade"</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="无法访问静态资源"><a href="#无法访问静态资源" class="headerlink" title="无法访问静态资源"></a>无法访问静态资源</h2><ul>
<li><a href="https://blog.csdn.net/lwgkzl/article/details/81278985" target="_blank" rel="noopener">nginx 找不到静态（css,js,html）文件 404 报错，root 的解析_lwgkzl 的博客-CSDN 博客_nginx 找不到静态文件</a></li>
<li><a href="https://blog.csdn.net/qq_27184497/article/details/82292399" target="_blank" rel="noopener">解决 nginx 部署后 css、js、图片等样式不加载的问题_qq_27184497 的博客-CSDN 博客_nginx 无法加载 js 与 css</a></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">server&#123;<br>        listen 80;<br>        location / &#123;<br>                proxy_pass http://xd-project;<br><br>        &#125;<br>        <span class="hljs-comment"># 添加下面部分</span><br>        location ~ .* &#123;<br>                proxy_pass http://xd-project;<br>                proxy_set_header Host $http_host;<br>                proxy_set_header X-Real-IP $remote_addr;<br>                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>或者使用下面部分：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">location ~.*(js|css|png|gif|jpg|mp3|ogg)$ &#123;<br>    root /home/kzl/data/app/;<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>这个 location 说明如果你要访问 js,css,png…结尾的文件，你需要在你的访问路径前加上 root。<br>这个 root 实际上就是替换了网页上的 http:10.10.10.10:5000。如果加了这个 location，那么网页在访问 http:10.10.10.10:5000/static/css/morris.css.这个路径的时候，因为文件结尾是 css 匹配到了这个 location,然后网页就会访问</p>
</blockquote>
<h2 id="替代方案：Caddy"><a href="#替代方案：Caddy" class="headerlink" title="替代方案：Caddy"></a>替代方案：Caddy</h2><ul>
<li><p><a href="https://caddyserver.com/" target="_blank" rel="noopener">https://caddyserver.com/</a></p>
</li>
<li><p><a href="https://programmer.help/blogs/5d1a87803e2e9.html" target="_blank" rel="noopener">Using Caddy instead of Nginx, the whole station upgrades https, and the configuration is simpler.</a></p>
</li>
</ul>
<h2 id="配置文本"><a href="#配置文本" class="headerlink" title="配置文本"></a>配置文本</h2><p><a href="https://opstrip.com/2017/08/10/some-nginx-configuration-tips/" target="_blank" rel="noopener">一些 nginx 配置小技巧 | 石尧的博客</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">server &#123;<br>    listen 80;<br>    server_name www.example.com;<br>    access_log /var/log/nginx/www-example-com.log access;<br>    root /etc/nginx/html;<br><br>    ......<br><br>    <span class="hljs-comment"># Aliyun ssl by txt</span><br>    location = /.well-known/pki-validation/fileauth.txt<br>    &#123;<br>        default_type text/plain;<br>        return 200 '201708090000005cpmpl49g1psxj1r86w70mmpi27g61r4f7u2bthwedki0trwtx';<br>    &#125;<br><br>    <span class="hljs-comment"># robots.txt</span><br>    location = /robots.txt &#123;<br>        default_type text/plain;<br>        return 200 'User-agent: *\nDisallow: /\n';<br>    &#125;<br><br>    ......<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="生产环境之-Nginx-高可用方案-日落西风又在吹-博客园"><a href="#生产环境之-Nginx-高可用方案-日落西风又在吹-博客园" class="headerlink" title="生产环境之 Nginx 高可用方案 - 日落西风又在吹 - 博客园"></a><a href="https://www.cnblogs.com/SimpleWu/p/11004902.html" target="_blank" rel="noopener">生产环境之 Nginx 高可用方案 - 日落西风又在吹 - 博客园</a></h2><p>keepalive+vip+双击主备来实现 nginx 高可用。</p>
<blockquote>
<p>Keepalived 软件起初是专为 LVS 负载均衡软件设计的，用来管理并监控 LVS 集群系统中各个服务节点的状态，后来又加入了可以实现高可用的 VRRP 功能。因此，keepalived 除了能够管理 LVS 软件外，还可以作为其他服务的高可用解决方案软件。</p>
</blockquote>
<blockquote>
<p>keepalived 软件主要是通过 VRRP 协议实现高可用功能的。VRRP 是 Virtual  Router  Redundancy Protocol（虚拟路由冗余协议）的缩写，VRRP 出现的目的就是为了解决静态路由的单点故障问题的，它能保证当个别节点宕机时，整个网络可以不间断地运行。所以，keepalived 一方面具有配置管理 LVS 的功能，同时还具有对 LVS 下面节点进行健康检查的功能，另一方面也可以实现系统网络服务的高可用功能。</p>
</blockquote>
<p>检测 nginx 是否存活：check_nginx_pid.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#检测nginx是否启动了</span><br>A=`ps -C nginx --no-header |wc -l`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$A</span> -eq 0 ];<span class="hljs-keyword">then</span>    <span class="hljs-comment">#如果nginx没有启动就启动nginx</span><br>      systemctl start nginx                <span class="hljs-comment">#重启nginx</span><br>      <span class="hljs-keyword">if</span> [ `ps -C nginx --no-header |wc -l` -eq 0 ];<span class="hljs-keyword">then</span>    <span class="hljs-comment">#nginx重启失败，则停掉keepalived服务，进行VIP转移</span><br>              killall keepalived<br>      <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>

<p><a href="https://blog.51cto.com/superpcm/2095395" target="_blank" rel="noopener">Nginx+Keepalived 高可用集群_技术博客的技术博客_51CTO 博客_keepalived nginx</a></p>
<p><a href="https://blog.csdn.net/qq_41833549/article/details/108119975" target="_blank" rel="noopener">如何给集群设置 VIP（虚拟 IP）_沐瑾儿的博客-CSDN 博客_vip 地址 虚拟地址</a></p>
<p><a href="https://blog.csdn.net/kongxx/article/details/73173762" target="_blank" rel="noopener">使用 keepalived 设置虚拟 IP 环境_kongxx 的专栏-CSDN 博客_keepalived virtual_ipaddress</a></p>
<p>阿里云方案：<br><a href="https://help.aliyun.com/document_detail/184485.htm?spm=a2c4g.11186623.0.0.370c3cb3uvYUKS#task-1938181" target="_blank" rel="noopener">HaVip 结合 keepalived 实现主备双机高可用</a></p>
<p><a href="https://coolshell.me/articles/public-network-working-tutorial.html" target="_blank" rel="noopener">科普一下公有云的网络 – 酷 壳 – CoolShell 3F</a></p>
<h2 id="下载而不显示"><a href="#下载而不显示" class="headerlink" title="下载而不显示"></a>下载而不显示</h2><p>当我们使用 Nginx 时,如果要让一些附件比如 txt,pdf,doc 等不直接在浏览器打开,而弹出另存为的对话框(也就是下载),则可以在 nginx 里添加如下配置:</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">location /<br>&#123;<br>if ($request_filename ~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$)&#123;<br>add_header Content-Disposition: 'attachment;';<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="显示而不下载"><a href="#显示而不下载" class="headerlink" title="显示而不下载"></a>显示而不下载</h2><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">//例如<br><span class="hljs-attr">location</span> = /md/test.txt &#123;<br>   //匹配到这里，显示文件内容，而不是下载<br>  root /home/wwwroot/default;<br>  <span class="hljs-comment"># 图片的显示不下载也可以用下面的方式</span><br>  add_header Content-Type text/plain;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="nginx-无权访问目录"><a href="#nginx-无权访问目录" class="headerlink" title="nginx 无权访问目录"></a>nginx 无权访问目录</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/nginx_20220528122340_2022-05-28-12-23-40.png" alt="nginx_20220528122340_2022-05-28-12-23-40"></p>
<p>设置 nginx user 为 root;</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ngrok搭建</title>
    <url>/devops/ngrok/</url>
    <content><![CDATA[<h2 id="配置域名（需支持泛域名功能）"><a href="#配置域名（需支持泛域名功能）" class="headerlink" title="配置域名（需支持泛域名功能）"></a>配置域名（需支持泛域名功能）</h2><table>
<thead>
<tr>
<th>子域名</th>
<th>记录类型</th>
<th>线路类型</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>ngrok</td>
<td>A 记录</td>
<td>通用</td>
<td>170.10.10.100</td>
</tr>
<tr>
<td>*.ngrok</td>
<td>A 记录</td>
<td>通用</td>
<td>170.10.10.100</td>
</tr>
</tbody></table>
<h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><p>…</p>
<h2 id="安装并配置好-go"><a href="#安装并配置好-go" class="headerlink" title="安装并配置好 go"></a>安装并配置好 go</h2><ul>
<li><a href="https://github.com/golang/go/wiki/Ubuntu" target="_blank" rel="noopener">https://github.com/golang/go/wiki/Ubuntu</a></li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-built_in">add</span>-apt-repository <span class="hljs-keyword">pp</span><span class="hljs-variable">a:gophers</span>/archive<br>sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-built_in">get</span> install golang-<span class="hljs-number">1.10</span>-<span class="hljs-keyword">go</span> -<span class="hljs-keyword">y</span><br><br><span class="hljs-built_in">mkdir</span> -<span class="hljs-keyword">p</span> $HOME/<span class="hljs-keyword">c</span><br><span class="hljs-built_in">mkdir</span> -<span class="hljs-keyword">p</span> $HOME/<span class="hljs-keyword">w</span><br><span class="hljs-keyword">ln</span> -<span class="hljs-keyword">sf</span> /usr/lib/<span class="hljs-keyword">go</span>-<span class="hljs-number">1.10</span> $HOME/<span class="hljs-keyword">c</span>/<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">export GOROOT=$HOME/c/go<br>export GOPATH=$HOME/w/go<br>export PATH=$GOROOT/bin:$&#123;GOPATH&#125;/bin:$PATH<br></code></pre></td></tr></table></figure>

<h2 id="编译生成目标文件"><a href="#编译生成目标文件" class="headerlink" title="编译生成目标文件"></a>编译生成目标文件</h2><p>创建并进入临时目录：<code>mkdir $HOME/t &amp;&amp; cd $_</code><br>创建文件<code>build_ngrok.sh</code>加入以下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">"Input your domain name:"</span> DOMAIN<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$DOMAIN</span>"</span> = <span class="hljs-string">""</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> Please input your domain name.<br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br>resultFileName=ngrok_`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;DOMAIN&#125;</span> | sed <span class="hljs-string">'s/\./_/g'</span>`<br><br>currentPwd=$(<span class="hljs-built_in">pwd</span>)<br><span class="hljs-built_in">echo</span> current path: <span class="hljs-variable">$currentPwd</span><br>go get github.com/inconshreveable/ngrok<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/inconshreveable/ngrok<br>git clean -df<br>git checkout -- .<br><br>openssl genrsa -out rootCA.key 2048<br>openssl req -x509 -new -nodes -key rootCA.key -subj <span class="hljs-string">"/CN=<span class="hljs-variable">$DOMAIN</span>"</span> -days 5000 -out rootCA.pem<br>openssl genrsa -out device.key 2048<br>openssl req -new -key device.key -subj <span class="hljs-string">"/CN=<span class="hljs-variable">$DOMAIN</span>"</span> -out device.csr<br>openssl x509 -req -<span class="hljs-keyword">in</span> device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000<br><br>cp rootCA.pem assets/client/tls/ngrokroot.crt<br>cp device.crt assets/server/tls/snakeoil.crt<br>cp device.key assets/server/tls/snakeoil.key<br><br>make release-server<br>GOOS=linux GOARCH=amd64 make release-client<br>GOOS=windows GOARCH=amd64 make release-client<br>GOOS=linux GOARCH=arm make release-client<br>GOOS=darwin GOARCH=amd64 make release-client<br><br>mkdir -p bin/tls<br>mkdir -p bin/out<br><br>cp device.crt bin/tls/snakeoil.crt<br>cp device.key bin/tls/snakeoil.key<br><span class="hljs-built_in">echo</span> <span class="hljs-string">'nohup ./ngrokd -tlsKey="tls/snakeoil.key" -tlsCrt="tls/snakeoil.crt" -domain='</span><span class="hljs-string">"<span class="hljs-variable">$DOMAIN</span>"</span><span class="hljs-string">' -httpAddr=":80" -httpsAddr=":443" &gt; out/nohupd.out 2&gt;&amp;1 &amp;'</span> &gt; ./bin/start.sh<br>chmod +x ./bin/start.sh<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"server_addr: <span class="hljs-variable">$DOMAIN</span>:4443"</span> &gt; ./bin/ngrok.cfg<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"trust_host_root_certs: false"</span> &gt;&gt; ./bin/ngrok.cfg<br><span class="hljs-built_in">echo</span> <span class="hljs-string">'nohup ./ngrok -config=./ngrok.cfg -subdomain=blog -proto=http 8078 &gt; /dev/null 2&gt;&amp;1 &amp;'</span> &gt; ./bin/blog.sh<br>chmod +x ./bin/ngrok_blog.sh<br><br>mv bin <span class="hljs-variable">$&#123;resultFileName&#125;</span><br>tar -zcvf <span class="hljs-variable">$&#123;resultFileName&#125;</span>.tar.gz <span class="hljs-variable">$&#123;resultFileName&#125;</span><br>mv <span class="hljs-variable">$&#123;resultFileName&#125;</span>.tar.gz <span class="hljs-variable">$currentPwd</span>/<span class="hljs-variable">$&#123;resultFileName&#125;</span>.tar.gz<br>git clean -df<br>git checkout -- .<br><span class="hljs-built_in">echo</span> ok! result: <span class="hljs-variable">$&#123;resultFileName&#125;</span>.tar.gz<br></code></pre></td></tr></table></figure>

<ul>
<li>运行 <code>sh build_ngrok.sh</code></li>
<li>根据提示输入已经配置好的域名，例如：ngrok.lyloou.com</li>
<li>在域名对应的服务器上运行：<code>./start.sh</code> （这样，服务器端就完成了）</li>
</ul>
<h2 id="打包和解压"><a href="#打包和解压" class="headerlink" title="打包和解压"></a>打包和解压</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">tar -zcvf ngrok_lyloou_com.tar.gz bin<br>tar -zxvf ngrok_lyloou_com.tar.gz<br></code></pre></td></tr></table></figure>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>realpath ngrok_lyloou_com.tar.gz # 获取文件路径<br>scp <a href="mailto:root@170.10.0.100">root@170.10.0.100</a>:/root/t/ngrok_lyloou_com.tar.gz ngrok_lyloou_com.tar.gz # 从服务器拉取文件</p>
<h2 id="运行服务器（已经在上面的build-ngrok-sh中配置过了）"><a href="#运行服务器（已经在上面的build-ngrok-sh中配置过了）" class="headerlink" title="运行服务器（已经在上面的build_ngrok.sh中配置过了）"></a>运行服务器（已经在上面的<code>build_ngrok.sh</code>中配置过了）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br>./ngrokd -domain=<span class="hljs-string">"ngrok.lyloou.com"</span> -httpAddr=<span class="hljs-string">":80"</span> -httpsAddr=<span class="hljs-string">":443"</span><br><br><span class="hljs-comment">## 或者后台运行</span><br>mkdir out<br>chmod +x ngrokd<br>nohup ./ngrokd -domain=<span class="hljs-string">"ngrok.lyloou.com"</span> -httpAddr=<span class="hljs-string">":80"</span> -httpsAddr=<span class="hljs-string">":443"</span>  &gt; out/nohup_log.out 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure>

<h2 id="运行客户端（在上面的build-ngrok-sh中配置并生成了一个案例ngrok-blog-sh）"><a href="#运行客户端（在上面的build-ngrok-sh中配置并生成了一个案例ngrok-blog-sh）" class="headerlink" title="运行客户端（在上面的build_ngrok.sh中配置并生成了一个案例ngrok_blog.sh）"></a>运行客户端（在上面的<code>build_ngrok.sh</code>中配置并生成了一个案例<code>ngrok_blog.sh</code>）</h2><p>添加配置 ngrok.cfg：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">server_addr: <span class="hljs-string">"ngrok.lyloou.com:4443"</span><br>trust_host_root_certs: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br>nohup ./ngrok -config=./ngrok.cfg -subdomain=lou -proto=http 80 &gt; /dev/null 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果在云平台中运行 ngrok 服务, 需要将<code>4443端口</code>和<code>80端口</code>添加到安全组中，如下表：</p>
<table>
<thead>
<tr>
<th>授权策略</th>
<th>协议类型</th>
<th>端口范围</th>
<th>授权类型(全部)</th>
<th>授权对象</th>
</tr>
</thead>
<tbody><tr>
<td>允许</td>
<td>自定义 TCP</td>
<td>4443/4443</td>
<td>IPv4 地址段访问</td>
<td>0.0.0.0/0</td>
</tr>
<tr>
<td>允许</td>
<td>自定义 TCP</td>
<td>80/80</td>
<td>IPv4 地址段访问</td>
<td>0.0.0.0/0</td>
</tr>
</tbody></table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://morongs.github.io/2016/12/28/dajian-ngrok/" target="_blank" rel="noopener">从零教你搭建 ngrok 服务</a></li>
<li><a href="https://blog.csdn.net/cloume/article/details/51209493" target="_blank" rel="noopener">Ubuntu 下编译安装 ngrok</a></li>
</ul>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight md"><table><tr><td class="code"><pre><code class="hljs md"><span class="hljs-section">#一、系统说明</span><br><br><span class="hljs-bullet">- </span>Windows 使用<span class="hljs-code">`windows_amd64`</span>版本<br><span class="hljs-bullet">- </span>Mac 使用<span class="hljs-code">`darwin_amd64`</span>版本<br><span class="hljs-bullet">- </span>Linux 使用<span class="hljs-code">`linux`</span>版本<br><br><span class="hljs-section">#二、配置说明</span><br>.\ngrok.exe -config=.\ngrok.cfg -subdomain=lou -proto=http 80<br><br><span class="hljs-bullet">- </span>subdomain 指向自定义的子域名<br><span class="hljs-bullet">- </span>proto 指向使用的协议<br><span class="hljs-bullet">- </span>随后的数字表示：准备映射出去的端口号<br><br><span class="hljs-section"># 三、使用方法</span><br><br><span class="hljs-bullet">- </span>Windows 系统执行 ngrok.bat<br><span class="hljs-bullet">- </span>Mac 和 Linux 系统执行 ngrok.sh<br><br><span class="hljs-section"># 四、访问方式</span><br><br>浏览器中打开链接：<br>[<span class="hljs-string">http://lou.ngrok.lyloou.com</span>](<span class="hljs-link">http://lou.ngrok.lyloou.com</span>)<br></code></pre></td></tr></table></figure>

<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/lyloou/build_ngrok" target="_blank" rel="noopener">https://github.com/lyloou/build_ngrok</a></p>
]]></content>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Beego相关</title>
    <url>/go/beego/</url>
    <content><![CDATA[<p>Go语言里面提供了一个完善的net/http包，通过http包可以很方便的就搭建起来一个可以运行的Web服务。<br>同时使用这个包能很简单地对Web的路由，静态文件，模版，cookie等数据进行设置和操作。</p>
<p>万变不离其宗，Go的Web服务工作也离不开我们第一小节介绍的Web工作方式。</p>
<p>Go为了实现高并发和高性能, 使用了goroutines来处理Conn的读写事件, 这样每个请求都能保持独立，相互不会阻塞，可以高效的响应网络事件。这是Go高效的保证。<br><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/03.4.md" target="_blank" rel="noopener">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/03.4.md</a></p>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">o := orm.NewOrm()<br>qs = o.QueryTable(<span class="hljs-string">"user"</span>);<br><span class="hljs-keyword">var</span> pageSize = <span class="hljs-number">50</span> <span class="hljs-comment">// 一页50条</span><br><span class="hljs-keyword">var</span> pageNo = <span class="hljs-number">3</span> <span class="hljs-comment">// 准备取第三页</span><br><span class="hljs-comment">// qs.Limit("[取多少个]","[偏移行数]");</span><br>qs = qs.Limit(pageSize, pageNo*pageSize) <span class="hljs-comment">// 请注意和MySQL语法的区别：LIMIT 50*3, 50</span><br></code></pre></td></tr></table></figure>
<ul>
<li><a href="http://qimo601.iteye.com/blog/1634748" target="_blank" rel="noopener">Mysql 分页语句Limit用法 - 柳北风儿<del>~</del>欲宇仙炅 - ITeye博客</a></li>
</ul>
<h2 id="解析-orm-Params"><a href="#解析-orm-Params" class="headerlink" title="解析[]orm.Params"></a>解析<code>[]orm.Params</code></h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">analyseParams</span><span class="hljs-params">(params *[]orm.Params)</span></span> &#123;<br>    keyImage := <span class="hljs-string">"image"</span><br>    keyStatus := <span class="hljs-string">"status"</span><br>    keyEndAt := <span class="hljs-string">"end_at"</span><br>    <span class="hljs-keyword">for</span> _, param := <span class="hljs-keyword">range</span> *params &#123;<br>        <span class="hljs-comment">// replace image</span><br>        <span class="hljs-keyword">if</span> vv, ok := param[keyImage]; ok &#123;<br>            r := reflect.ValueOf(vv)<br>            <span class="hljs-keyword">if</span> r.Kind() == reflect.String &#123;<br>                temp_arr := strings.Split(r.String(), <span class="hljs-string">","</span>)<br>                param[keyImage] = commons.ImagePath(temp_arr[<span class="hljs-number">0</span>])<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// add status</span><br>        <span class="hljs-keyword">if</span> vv, ok := param[keyEndAt]; ok &#123;<br>            r := reflect.ValueOf(vv)<br>            <span class="hljs-keyword">if</span> r.Kind() == reflect.String &#123;<br>                now := time.Now().UnixNano()<br>                startTime, err := time.Parse(<span class="hljs-string">"2006-01-02 15:04:05"</span>, r.String())<br>                <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                    logs.Error(<span class="hljs-string">"转换时间错误："</span>, err)<br>                    <span class="hljs-keyword">continue</span><br>                &#125;<br>                <span class="hljs-keyword">if</span> startTime.UnixNano() &gt; now &#123;<br>                    param[keyStatus] = <span class="hljs-string">"notbegin"</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// delete marketable_at</span><br>        <span class="hljs-built_in">delete</span>(params, <span class="hljs-string">"marketable_at"</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>go</tag>
        <tag>beego</tag>
      </tags>
  </entry>
  <entry>
    <title>安全</title>
    <url>/devops/security/</url>
    <content><![CDATA[<h2 id="PGP"><a href="#PGP" class="headerlink" title="PGP"></a>PGP</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>PGP（Pretty Good Privacy），用来提高安全性的软件，可以用来验证文件的合法性；例如常用来给邮件加密、解密及验证,以提高电子邮件交流的安全性；</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 需要安装 rng-tools才能成功生成 gpg 密钥</span><br>apt install rng-tools<br><br><span class="hljs-comment"># 生成gpg密钥</span><br>gpg --gen-key<br><br><span class="hljs-comment"># 查看公钥</span><br>gpg --list-keys<br><br><span class="hljs-comment"># 查看私钥</span><br>gpg --list-secret-keys<br><br><span class="hljs-comment"># 上传公钥</span><br>gpg --keyserver hkp://pgp.mit.edu --send-keys FD9EF47E271531EC53C8F6B1EE2E9AE32588D3D8<br><span class="hljs-comment"># or</span><br>gpg --keyserver hkp://pgp.mit.edu --send-keys EE2E9AE32588D3D8<br><br><span class="hljs-comment"># 用户下载公钥</span><br>gpg --keyserver hkp://pgp.mit.edu --recv-keys EE2E9AE32588D3D8<br><br><span class="hljs-comment"># 对文件生成 asc 文件（会生成）以 .asc 的后缀文件</span><br><span class="hljs-comment"># 参数 -a 表示创建 ASCII 的输出；</span><br><span class="hljs-comment"># 参数 -b 表示创建一个独立的文件；</span><br>gpg -ab test.sh<br><br><span class="hljs-comment"># 对文件是否被修改进行验证</span><br>gpg --verify test.sh.asc<br></code></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>《Maven 实战》——版本管理(C13.6)</p>
]]></content>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>酷项目</title>
    <url>/developer/%E9%85%B7%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="Graphviz"><a href="#Graphviz" class="headerlink" title="Graphviz"></a>Graphviz</h2><p>画图工具</p>
<ul>
<li><a href="https://www.google.com/search?client=firefox-b-d&q=graphviz" target="_blank" rel="noopener">graphviz - Google 搜索</a></li>
</ul>
<h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><p>Kibana 是 Elasticsearch 的开源数据可视化仪表板。</p>
<h2 id="nexus"><a href="#nexus" class="headerlink" title="nexus"></a>nexus</h2><p>maven 仓库</p>
<h2 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h2><p>有时，我们需要浏览器处理网页，但并不需要浏览，比如生成网页的截图、抓取网页数据等操作。PhantomJS 的功能，就是提供一个浏览器环境的命令行接口，你可以把它看作一个“虚拟浏览器”，除了不能浏览，其他与正常浏览器一样。它的内核是 WebKit 引擎，不提供图形界面，只能在命令行下使用，我们可以用它完成一些特殊的用途。</p>
<ul>
<li><a href="http://javascript.ruanyifeng.com/tool/phantomjs.html" target="_blank" rel="noopener">PhantomJS – JavaScript 标准参考教程（alpha）</a></li>
<li><a href="https://phantomjs.org/" target="_blank" rel="noopener">PhantomJS - Scriptable Headless Browser</a></li>
</ul>
<h2 id="php-tool"><a href="#php-tool" class="headerlink" title="php tool"></a>php tool</h2><ul>
<li>wamp</li>
<li>phpstudy</li>
</ul>
<h2 id="wareshark"><a href="#wareshark" class="headerlink" title="wareshark"></a>wareshark</h2><p>抓包工具</p>
<h2 id="NSSM"><a href="#NSSM" class="headerlink" title="NSSM"></a>NSSM</h2><p>NSSM is a service helper program similar to srvany and cygrunsrv. It can<br>start any application as an NT service and will restart the service if it<br>fails for any reason.</p>
<h2 id="天若-OCR-文字识别"><a href="#天若-OCR-文字识别" class="headerlink" title="天若 OCR 文字识别"></a>天若 OCR 文字识别</h2><h2 id="pxcook"><a href="#pxcook" class="headerlink" title="pxcook"></a>pxcook</h2><p>前端测量工具</p>
<h2 id="apache-jmeter"><a href="#apache-jmeter" class="headerlink" title="apache-jmeter"></a>apache-jmeter</h2><p>性能测试工具</p>
]]></content>
      <tags>
        <tag>developer</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中的网络请求和数据转发</title>
    <url>/go/get%E5%92%8Cpost/</url>
    <content><![CDATA[<h2 id="GET-amp-POST-请求和转发"><a href="#GET-amp-POST-请求和转发" class="headerlink" title="GET &amp; POST 请求和转发"></a>GET &amp; POST 请求和转发</h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> cfg = beego.AppConfig<br><br><span class="hljs-keyword">type</span> AddressController <span class="hljs-keyword">struct</span> &#123;<br>        baseController<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ac AddressController)</span> <span class="hljs-title">Address</span><span class="hljs-params">()</span></span> &#123;<br>    userId := ac.GetString(<span class="hljs-string">"user_id"</span>)<br>    <span class="hljs-keyword">var</span> url = cfg.String(<span class="hljs-string">"third::user_url"</span>) + <span class="hljs-string">"/user/address?user_id="</span> + userId<br>    body, err := get(url)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        logs.Error(<span class="hljs-string">"get Address error:"</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    ac.Data[<span class="hljs-string">"json"</span>] = <span class="hljs-keyword">string</span>(body)<br>    ac.ServeJSON()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ac AddressController)</span> <span class="hljs-title">AddAddress</span><span class="hljs-params">()</span></span> &#123;<br>    userId := ac.GetString(<span class="hljs-string">"user_id"</span>)<br>    <span class="hljs-keyword">var</span> url = cfg.String(<span class="hljs-string">"third::user_url"</span>) + <span class="hljs-string">"/user/add_address?user_id="</span> + userId<br><br>    body, err := post(url, ac.Ctx.Input.RequestBody)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        logs.Error(<span class="hljs-string">"post AddAddress error:"</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    ac.Data[<span class="hljs-string">"json"</span>] = <span class="hljs-keyword">string</span>(body)<br>    ac.ServeJSON()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">get</span><span class="hljs-params">(url <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;<br>    resp, err := http.Get(url)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    <span class="hljs-keyword">defer</span> resp.Body.Close()<br>    <span class="hljs-keyword">return</span> ioutil.ReadAll(resp.Body)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">post</span><span class="hljs-params">(url <span class="hljs-keyword">string</span>, data []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;<br>    body := bytes.NewBuffer(data)<br>    resp, err := http.Post(url, <span class="hljs-string">"application/json;charset=utf-8"</span>, body)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    <span class="hljs-keyword">defer</span> resp.Body.Close()<br>    <span class="hljs-keyword">return</span> ioutil.ReadAll(resp.Body)<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://blog.csdn.net/typ2004/article/details/38669949" target="_blank" rel="noopener">Golang Web编程的Get和Post请求发送与解析</a></li>
</ul>
]]></content>
      <tags>
        <tag>go</tag>
        <tag>beego</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/devops/docker/</url>
    <content><![CDATA[<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>wget -qO- <a href="https://get.docker.com" target="_blank" rel="noopener">https://get.docker.com</a> | sh</p>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p><a href="https://www.jianshu.com/p/95e397570896" target="_blank" rel="noopener">https://www.jianshu.com/p/95e397570896</a><br>｀｀｀ sh<br>如果还没有 docker group 就添加一个：<br>sudo groupadd docker</p>
<p>将用户加入该 group 内。然后退出并重新登录就生效啦。<br>sudo gpasswd -a ${USER} docker</p>
<p>重启 docker 服务<br>sudo service docker restart</p>
<p>切换当前会话到新 group 或者重启 X 会话<br>newgrp - docker</p>
<p>注意:最后一步是必须的，否则因为 groups 命令获取到的是缓存的组信息，刚添加的组信息未能生效，所以 docker images 执行时同样有错。<br>｀｀｀</p>
<h2 id="加速器"><a href="#加速器" class="headerlink" title="加速器"></a>加速器</h2><p><a href="https://www.daocloud.io" target="_blank" rel="noopener">https://www.daocloud.io</a><br>config docker preference(registry-mirrors) :<br>for ubuntu</p>
<blockquote>
<p>curl -sSL <a href="https://get.daocloud.io/daotools/set_mirror.sh" target="_blank" rel="noopener">https://get.daocloud.io/daotools/set_mirror.sh</a> | sh -s <a href="http://6cde3c02.m.daocloud.io" target="_blank" rel="noopener">http://6cde3c02.m.daocloud.io</a><br>sudo systemctl restart docker.service</p>
</blockquote>
<blockquote>
<p>curl -sSL <a href="https://get.daocloud.io/daotools/set_mirror.sh" target="_blank" rel="noopener">https://get.daocloud.io/daotools/set_mirror.sh</a> | sh -s <a href="http://d1d9aef0.m.daocloud.io" target="_blank" rel="noopener">http://d1d9aef0.m.daocloud.io</a></p>
</blockquote>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">docker run hello-world<br><br>docker run -it alpine sh<br><br>docker images<br><br>docker run -d -p 80:80 nginx<br>docker ps<br>docker <span class="hljs-built_in">kill</span> __id__<br><br>docker run -d -p 9200:9200 elasticsearch<br>docker logs __id__<br></code></pre></td></tr></table></figure>

<h2 id="Docker-中文教程-Docker-开发中文手册-PDF-下载-极客学院-Wiki"><a href="#Docker-中文教程-Docker-开发中文手册-PDF-下载-极客学院-Wiki" class="headerlink" title="Docker 中文教程_Docker 开发中文手册[PDF]下载-极客学院 Wiki"></a><a href="http://wiki.jikexueyuan.com/project/docker/" target="_blank" rel="noopener">Docker 中文教程_Docker 开发中文手册[PDF]下载-极客学院 Wiki</a></h2><p><code>-d</code>: 标示是让 docker 容器在后台运行。<br><code>-P</code>: 标示 Docker 所需的端口映射从主机映射到我们的容器内。<br><code>-t</code>: 表示在新容器内指定一个伪终端或终端，<br><code>-i</code>: 表示允许我们对容器内的 STDIN 进行交互。<br><code>-p</code>: 标识来指定容器端口绑定到主机端口 &gt; <code>sudo docker run -d -p 5000:5000 training/webapp python app.py</code> &gt; <code>sudo ocker port nostalgic_morse 5000</code> &gt; <a href="https://wiki.jikexueyuan.com/project/docker/userguide/dockerlinks.html" target="_blank" rel="noopener">https://wiki.jikexueyuan.com/project/docker/userguide/dockerlinks.html</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo docker run -t -i training/sinatra /bin/bash<br>sudo docker commit -m=<span class="hljs-string">"Added json gem"</span> -a=<span class="hljs-string">"Lou Li"</span> \<br>    9e4dcef3e152 lyloou/sinatra:v2<br>    4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo docker build -t=<span class="hljs-string">"lyloou/sinatra:v2"</span> .<br>sudo docker tag 5db5f8471261 lyloou/sinatra:devel<br>sudo docker push lyloou/sinatra<br>sudo docker rmi lyloou/sinatra<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># http://wiki.jikexueyuan.com/project/docker/examples/nodejs_web_app.html</span><br><span class="hljs-comment"># run in background</span><br>sudo docker run -p 49161:8080 -d lyloou/centos-node-hello:latest<br><br><span class="hljs-comment"># https://askubuntu.com/questions/505506/how-to-get-bash-or-ssh-into-a-running-container-in-background-mode</span><br>sudo docker <span class="hljs-built_in">exec</span> -it f3b /bin/bash<br></code></pre></td></tr></table></figure>

<h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>如果需要数据持久化，可以使用数据卷机制。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">docker run -p 8080:8080 -p 50000:50000 -v /your/home:/var/jenkins_home jenkins<br></code></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">docker volume create --name jenkins_home<br>docker run -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts<br></code></pre></td></tr></table></figure>

<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><h3 id="install-and-run"><a href="#install-and-run" class="headerlink" title="install and run"></a>install and run</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">pip install docker-compose<br><br><span class="hljs-comment"># create file docker-compose.yml</span><br><span class="hljs-comment"># run</span><br>docker-compose up<br></code></pre></td></tr></table></figure>

<h3 id="uninstall-and-remove"><a href="#uninstall-and-remove" class="headerlink" title="uninstall and remove"></a>uninstall and remove</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Stop and remove containers, networks, images, and volumes</span><br>docker-compose down<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取docker服务地址</span><br>[root@iZj6c9zr2mst7l8t6ardbkZ ~]<span class="hljs-comment"># cat show_ip.sh</span><br><span class="hljs-comment">#/bin/bash</span><br>docker inspect --format=<span class="hljs-string">'&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> $(docker ps -aq)<br><br>[root@iZj6c9zr2mst7l8t6ardbkZ ~]<span class="hljs-comment"># ./show_ip.sh</span><br>/nginx - 172.18.0.8<br>/reward - 172.18.0.4<br>/web - 172.18.0.14<br>/app - 172.18.0.7<br>/check - 172.18.0.13<br>/exapi - 172.18.0.3<br>/coin - 172.18.0.12<br>/api - 172.18.0.5<br>/trade - 172.18.0.9<br>/admin - 172.18.0.11<br>/service - 172.18.0.6<br>/rabbitmq - 172.18.0.17<br>/redis2 - 172.18.0.2<br>/zookeeper - 172.18.0.15<br>/redis1 - 172.18.0.10<br>/mysql - 172.18.0.16<br>/nexus3 - 172.17.0.2<br></code></pre></td></tr></table></figure>

<h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><p><a href="https://blog.csdn.net/benpaodelulu_guajian/article/details/90546129" target="_blank" rel="noopener">Docker 错误集合_挂件-CSDN 博客_error: pool overlaps with other one on this addres</a><br>查看 docker 网卡</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">docker<span class="hljs-built_in"> network </span>ls<br></code></pre></td></tr></table></figure>

<p>查看 docker 网卡的相关详细信息 确认是自己创建的 ip 段 然后在删除相应的网卡</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">docker<span class="hljs-built_in"> network </span>inspect <span class="hljs-variable">$&#123;containerid&#125;</span><br></code></pre></td></tr></table></figure>

<p>删除 docker 网卡</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">docker<span class="hljs-built_in"> network </span>rm <span class="hljs-variable">$&#123;containerid&#125;</span><br></code></pre></td></tr></table></figure>

<h2 id="清除日志"><a href="#清除日志" class="headerlink" title="清除日志"></a>清除日志</h2><p><a href="https://stackoverflow.com/a/43570083" target="_blank" rel="noopener">https://stackoverflow.com/a/43570083</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">truncate -s 0 /var/lib/docker/containers/*/*-json.log<br></code></pre></td></tr></table></figure>

<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p><a href="https://blog.csdn.net/jiangyu1013/article/details/96147534" target="_blank" rel="noopener">https://blog.csdn.net/jiangyu1013/article/details/96147534</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">docker logs -f -t --since=<span class="hljs-string">"2017-05-31"</span> --tail=10 edu_web_1<br>docker logs --tail 1 26b12d17fefc<br>docker logs -t 26b12d17fefc<br><br>docker logs [OPTIONS] CONTAINER<br><br>Options:<br><br>--details 显示更多的信息<br><br>-f, --follow 实时输出日志，最后一行为当前时间戳的日志<br><br>--since string 输出日志开始日期，即只输出指定日期之后的日志。<br><br>--tail string 显示最后多少行日志， 默认是all<br>            （如： -tail=10 : 查看最后的 10 行日志。）<br><br>-t, --timestamps 显示时间戳<br></code></pre></td></tr></table></figure>

<h2 id="搭建私有仓库"><a href="#搭建私有仓库" class="headerlink" title="搭建私有仓库"></a>搭建私有仓库</h2><p><a href="https://yeasy.gitbook.io/docker_practice/repository/registry" target="_blank" rel="noopener">https://yeasy.gitbook.io/docker_practice/repository/registry</a></p>
<h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><p>docker stop $(docker ps -aq)</p>
<h2 id="docker-compose-1"><a href="#docker-compose-1" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">docker-compose ps<br>docker-compose up -d<br>docker-compose down<br>docker-compose down -v<br>docker-compose start ce-kafka<br>docker-compose <span class="hljs-built_in">exec</span> ce-kafka bash<br></code></pre></td></tr></table></figure>

<p><img src="http://cdn.lyloou.com/img/docker-2021-09-17-10-38-19.png" alt="docker-2021-09-17-10-38-19"><br><a href="https://docs.docker.com/compose/reference/down/" target="_blank" rel="noopener">https://docs.docker.com/compose/reference/down/</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># rebuild demo-admin</span><br>docker-compose stop demo-admin &amp;&amp; docker-compose rm -f demo-admin<br>docker-compose build demo-admin &amp;&amp; docker-compose up -d demo-admin<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"rebuild demo-admin success."</span><br></code></pre></td></tr></table></figure>
<h2 id="宿主机与容器之前的复制"><a href="#宿主机与容器之前的复制" class="headerlink" title="宿主机与容器之前的复制"></a>宿主机与容器之前的复制</h2><p>容器到宿主机：<code>docker cp container_name:/opt/abc.txt /tmp/</code><br>宿主机到容器：<code>docker cp /tmp/abc.txt container_name:/opt/</code><br>不论容器是否启动，都可以执行上面的命令</p>
<h2 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker inspect aafbdd</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Go代码片段</title>
    <url>/go/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
    <content><![CDATA[<h2 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Na <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Ia <span class="hljs-keyword">interface</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> e error<br>    <span class="hljs-keyword">var</span> na Na<br>    <span class="hljs-keyword">var</span> ia Ia<br>    fmt.Println(na, e, ia)<br><br>    n := <span class="hljs-built_in">new</span>(Na)<br>    i := <span class="hljs-built_in">new</span>(Ia)<br>    fmt.Println(n, i)<br><br>    c := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<br>    fmt.Println(c)<br>&#125;<br><span class="hljs-comment">/* output:</span><br><span class="hljs-comment">&#123;&#125; &lt;nil&gt; &lt;nil&gt;</span><br><span class="hljs-comment">&amp;&#123;&#125; 0xc042008270</span><br><span class="hljs-comment">[0 0]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
<h2 id="make-和-new"><a href="#make-和-new" class="headerlink" title="make 和 new"></a>make 和 new</h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> v = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br>v[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>v[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>v[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span><br>v[<span class="hljs-number">9</span>] = <span class="hljs-number">32</span><br>v = v[:<span class="hljs-built_in">cap</span>(v)]  <span class="hljs-comment">// We can grow s to its capacity by slicing it again  https://blog.golang.org/go-slices-usage-and-internals</span><br>v[<span class="hljs-number">10</span>] = <span class="hljs-number">33</span><br>fmt.Println(v)<br><br><span class="hljs-keyword">var</span> n = <span class="hljs-built_in">new</span>([]<span class="hljs-keyword">byte</span>)<br>n = &amp;v<br>fmt.Println(*n)<br><span class="hljs-comment">/* output:</span><br><span class="hljs-comment">[0 1 2 0 0 0 0 0 0 32 33 0 0 0 0]</span><br><span class="hljs-comment">[0 1 2 0 0 0 0 0 0 32 33 0 0 0 0]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h2 id="How-to-check-if-a-map-contains-a-key-in-go"><a href="#How-to-check-if-a-map-contains-a-key-in-go" class="headerlink" title="How to check if a map contains a key in go?"></a><a href="https://stackoverflow.com/questions/2050391/how-to-check-if-a-map-contains-a-key-in-go" target="_blank" rel="noopener">How to check if a map contains a key in go?</a></h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> val, ok := dict[<span class="hljs-string">"foo"</span>]; ok &#123;<br>    <span class="hljs-comment">//do something here</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Removing-item-s-from-a-slice-while-iterating-in-Go"><a href="#Removing-item-s-from-a-slice-while-iterating-in-Go" class="headerlink" title="Removing item(s) from a slice, while iterating in Go"></a><a href="https://vbauerster.github.io/2017/04/removing-items-from-a-slice-while-iterating-in-go/" target="_blank" rel="noopener">Removing item(s) from a slice, while iterating in Go</a></h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    arr := []<span class="hljs-keyword">int64</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(arr) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>     <span class="hljs-keyword">if</span> arr[i]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>      arr = <span class="hljs-built_in">append</span>(arr[:i], arr[i+<span class="hljs-number">1</span>:]...)<br>     &#125;<br>    &#125;<br>    fmt.Println(arr)<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="过滤selected为false的商品规格"><a href="#过滤selected为false的商品规格" class="headerlink" title="过滤selected为false的商品规格"></a>过滤selected为false的商品规格</h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 方案1 </span><br>specProps := product.SpecProps<br>spec := models.Spec&#123;&#125;<br>err := json.Unmarshal([]<span class="hljs-keyword">byte</span>(specProps), &amp;spec)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>    sItem := <span class="hljs-built_in">make</span>([]models.SpecChildren, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> spec.Spec &#123;<br>        scItem := <span class="hljs-built_in">make</span>([]models.SpecChildrenItem, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> _, vv := <span class="hljs-keyword">range</span> v.Children &#123;<br>            <span class="hljs-keyword">if</span> vv.Selected &#123;<br>                vv.Selected = <span class="hljs-literal">false</span><br>                scItem = <span class="hljs-built_in">append</span>(scItem, vv)<br>            &#125;<br>        &#125;<br>        v.Children = scItem<br>        sItem = <span class="hljs-built_in">append</span>(sItem, v)<br>    &#125;<br>    spec.Spec = sItem<br><br>    data, err := json.Marshal(spec)<br>    <span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>        product.SpecProps = <span class="hljs-keyword">string</span>(data)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 方案2</span><br>specProps := product.SpecProps<br>spec := models.Spec&#123;&#125;<br>err := json.Unmarshal([]<span class="hljs-keyword">byte</span>(specProps), &amp;spec)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">len</span>(spec.Spec); j++ &#123;<br>        v := &amp;spec.Spec[j] <span class="hljs-comment">// Note: need pointer</span><br>        <span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(v.Children) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>            <span class="hljs-keyword">if</span> !v.Children[i].Selected &#123;<br>                <span class="hljs-comment">// https://vbauerster.github.io/2017/04/removing-items-from-a-slice-while-iterating-in-go/</span><br>                v.Children = <span class="hljs-built_in">append</span>(v.Children[:i], v.Children[i+<span class="hljs-number">1</span>:]...)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    specData, err := json.Marshal(spec)<br>    <span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>        product.SpecProps = <span class="hljs-keyword">string</span>(specData)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Converting-Go-struct-to-JSON"><a href="#Converting-Go-struct-to-JSON" class="headerlink" title="Converting Go struct to JSON"></a><a href="https://stackoverflow.com/questions/8270816/converting-go-struct-to-json" target="_blank" rel="noopener">Converting Go struct to JSON</a></h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">"fmt"</span><br>    <span class="hljs-string">"encoding/json"</span><br>)<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    user := &amp;User&#123;name:<span class="hljs-string">"Frank"</span>&#125;<br>    b, err := json.Marshal(user)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Printf(<span class="hljs-string">"Error: %s"</span>, err)<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    fmt.Println(<span class="hljs-keyword">string</span>(b))<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Go-json-Unmarshal-array"><a href="#Go-json-Unmarshal-array" class="headerlink" title="Go json.Unmarshal array"></a>Go json.Unmarshal array</h2><ul>
<li><a href="https://coderwall.com/p/4c2zig/decode-top-level-json-array-into-a-slice-of-structs-in-golang" target="_blank" rel="noopener">Decode top level JSON array into a slice of structs in golang</a><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">"encoding/json"</span><br><br><span class="hljs-keyword">type</span> PublicKey <span class="hljs-keyword">struct</span> &#123;<br>    Id <span class="hljs-keyword">int</span><br>    Key <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> KeysResponse <span class="hljs-keyword">struct</span> &#123;<br>    Collection []PublicKey<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    keysBody := []<span class="hljs-keyword">byte</span>(<span class="hljs-string">`[&#123;"id": 1,"key": "-"&#125;,&#123;"id": 2,"key": "-"&#125;,&#123;"id": 3,"key": "-"&#125;]`</span>)<br>    keys := <span class="hljs-built_in">make</span>([]PublicKey,<span class="hljs-number">0</span>)<br>    json.Unmarshal(keysBody, &amp;keys)<br>    fmt.Printf(<span class="hljs-string">"%#v"</span>, keys)<br>&#125;<br></code></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go基础理论</title>
    <url>/go/%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>简洁 快速 安全<br>并行 有趣 开源<br>内存管理，数组安全，编译迅速</p>
<h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h2><p>Executable commands must always use <code>package main</code>， <a href="https://golang.org/doc/code.html#PackageNames" target="_blank" rel="noopener">https://golang.org/doc/code.html#PackageNames</a><br><code>package main</code> 包表示它是一个可独立运行的包，它在编译后会产生可执行文件。<br><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.1.md#详解" target="_blank" rel="noopener">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.1.md#详解</a><br>除了main包之外，其它的包最后都会生成*.a文件（也就是包文件）并放置在$GOPATH/pkg/$GOOS_$GOARCH中</p>
<blockquote>
<p>每一个可独立运行的Go程序，必定包含一个package main，在这个main包中必定包含一个入口函数main，而这个函数既没有参数，也没有返回值。</p>
</blockquote>
<p>Go使用package（和Python的模块类似）来组织代码。main.main()函数(这个函数位于主包）是每一个独立的可运行程序的入口点。Go使用UTF-8字符串和标识符(因为UTF-8的发明者也就是Go的发明者之一)，所以它天生支持多语言。</p>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.3.md#import" target="_blank" rel="noopener">import</a></h2><ul>
<li>点操作</li>
<li>别名操作</li>
<li><code>_</code>操作</li>
</ul>
<h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><p>常量使用关键字<code>const</code>表示，不可用<code>:=</code>语法定义。<br>var 语句定义了一个变量列表；<br>进一步阅读： <a href="https://blog.golang.org/gos-declaration-syntax" target="_blank" rel="noopener">https://blog.golang.org/gos-declaration-syntax</a></p>
<p><code>:=</code>这个符号直接取代了var和type,这种形式叫做简短声明。不过它有一个限制，那就是它只能用在函数内部；<br>在函数外部使用则会无法编译通过，所以一般用var方式来定义全局变量。<br><code>_</code>（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃。    </p>
<h2 id="零值："><a href="#零值：" class="headerlink" title="零值："></a>零值：</h2><p>数值：0<br>布尔：false<br>指针：nil</p>
<h2 id="指针："><a href="#指针：" class="headerlink" title="指针："></a>指针：</h2><p><code>&amp;</code> 符号会生成一个指向其作用对象的指针；<br><code>*</code> 符号表示指针指向的底层的值；</p>
<h2 id="那么到底传指针有什么好处呢？"><a href="#那么到底传指针有什么好处呢？" class="headerlink" title="那么到底传指针有什么好处呢？"></a>那么到底传指针有什么好处呢？</h2><p>传指针使得多个函数能操作同一个对象。<br>传指针比较轻量级 (8bytes),只是传内存地址，我们可以用指针传递体积大的结构体。如果用参数值传递的话, 在每次copy上面就会花费相对较多的系统开销（内存和时间）。所以当你要传递大的结构体的时候，用指针是一个明智的选择。<br>Go语言中channel，slice，map这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变slice的长度，则仍需要取地址传递指针）</p>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>slice 只能和nil 进行<code>==</code>比较。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">c := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br>fmt.Println(<span class="hljs-built_in">len</span>(c), c == <span class="hljs-literal">nil</span>)<br>c = <span class="hljs-literal">nil</span><br>fmt.Println(<span class="hljs-built_in">len</span>(c), c == <span class="hljs-literal">nil</span>)<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// 0, false</span><br><span class="hljs-comment">// 0, true</span><br></code></pre></td></tr></table></figure>
<ul>
<li><a href="https://yar999.gitbooks.io/gopl-zh/content/ch4/ch4-02.html" target="_blank" rel="noopener">https://yar999.gitbooks.io/gopl-zh/content/ch4/ch4-02.html</a></li>
<li><a href="https://github.com/golang/go/wiki/SliceTricks" target="_blank" rel="noopener">https://github.com/golang/go/wiki/SliceTricks</a></li>
</ul>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>Go没有类。然而，仍然可以在结构体类型上定义方法。<br>一个结构体（struct）就是一个字段的集合</p>
<p><a href="https://yar999.gitbooks.io/gopl-zh/content/ch4/ch4-04.html" target="_blank" rel="noopener">一个命名为S的结构体类型将不能再包含S类型的成员</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> S <span class="hljs-keyword">struct</span> &#123;<br>	SS S <span class="hljs-comment">// error: invalid recursive type S </span><br>	II <span class="hljs-keyword">int</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>但是S类型的结构体可以包含*S指针类型的成员，这可以让我们创建递归的数据结构，比如链表和树结构等。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> S <span class="hljs-keyword">struct</span> &#123;<br>	SS *S <span class="hljs-comment">// ok </span><br>	II <span class="hljs-keyword">int</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>匿名结构体中，<br>引用时可以直接访问子属性，而不需要给出完整的路径<br>但结构体字面值必须遵循形状类型声明时的结构</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;<br>但结构体字面值必须遵循形状类型声明时的结构<br>    X, Y <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>    Center Point<br>    Radius <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Wheel <span class="hljs-keyword">struct</span> &#123;<br>    Circle Circle<br>    Spokes <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> w Wheel<br>w.X = <span class="hljs-number">8</span>            <span class="hljs-comment">// equivalent to w.Circle.Point.X = 8</span><br>w.Y = <span class="hljs-number">8</span>            <span class="hljs-comment">// equivalent to w.Circle.Point.Y = 8</span><br>w.Radius = <span class="hljs-number">5</span>       <span class="hljs-comment">// equivalent to w.Circle.Radius = 5</span><br>w.Spokes = <span class="hljs-number">20</span><br><br><span class="hljs-comment">// 但结构体字面值必须遵循形状类型声明时的结构</span><br>w = Wheel&#123;<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">20</span>&#125;                       <span class="hljs-comment">// compile error: unknown fields</span><br>w = Wheel&#123;X: <span class="hljs-number">8</span>, Y: <span class="hljs-number">8</span>, Radius: <span class="hljs-number">5</span>, Spokes: <span class="hljs-number">20</span>&#125; <span class="hljs-comment">// compile error: unknown fields</span><br></code></pre></td></tr></table></figure>

<h2 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">b := a[:<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/golang/go/wiki/SliceTricks" target="_blank" rel="noopener">https://github.com/golang/go/wiki/SliceTricks</a></li>
</ul>
<h2 id="可导出的"><a href="#可导出的" class="headerlink" title="可导出的"></a>可导出的</h2><p>这个默认行为类似java中的public。<br>大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。<br>大写字母开头的函数也是一样，相当于class中的带public关键词的公有函数；小写字母开头的就是有private关键词的私有函数。<br><a href="http://go-tour-zh.appspot.com/basics/3" target="_blank" rel="noopener">http://go-tour-zh.appspot.com/basics/3</a></p>
<h2 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h2><p>当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。<br>struct不仅仅能够将struct作为匿名字段、自定义类型、内置类型都可以作为匿名字段，而且可以在相应的字段上面进行函数操作</p>
<p>如果内层与继承层都有相同的字段，则：</p>
<ul>
<li>最外层优先访问； 例如：Bob.phone访问的是 Bob 层的字段</li>
<li>可以通过匿名字段访问继承层；Bob.Human.phone 访问的是Human层的字段</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>method是附属在一个给定的类型上的，他的语法和函数的声明语法几乎一样，只是在func后面增加了一个receiver(也就是method所依从的主体)。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Rectangle <span class="hljs-keyword">struct</span> &#123;<br>        width, height <span class="hljs-keyword">float64</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>    radius <span class="hljs-keyword">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r Rectangle)</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span> &#123;<br>    <span class="hljs-keyword">return</span> r.width*r.height<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Circle)</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span> &#123;<br>    <span class="hljs-keyword">return</span> c.radius * c.radius * math.Pi<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在使用method的时候重要注意几点：  </p>
<ul>
<li>虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样</li>
<li>method里面可以访问接收者的字段</li>
<li>调用method通过<code>.</code>访问，就像struct里面访问字段一样</li>
</ul>
<p>指针作为Receiver会对实例对象的内容发生操作,而普通类型作为Receiver仅仅是以副本作为操作对象,并不对原实例对象发生操作。</p>
<p>那是不是method只能作用在struct上面呢？当然不是咯，他可以定义在任何你自定义的类型、内置类型、struct等各种类型上面。这里你是不是有点迷糊了，什么叫自定义类型，自定义类型不就是struct嘛，不是这样的哦，struct只是自定义类型里面一种比较特殊的类型而已，还有其他自定义类型申明，可以通过如下这样的申明来实现。<br><code>type typeName typeLiteral</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ages <span class="hljs-keyword">int</span><br><span class="hljs-keyword">type</span> money <span class="hljs-keyword">float32</span><br><span class="hljs-keyword">type</span> months <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span><br>m := months &#123;<br>    <span class="hljs-string">"January"</span>:<span class="hljs-number">31</span>,<br>    <span class="hljs-string">"February"</span>:<span class="hljs-number">28</span>,<br>    ...<br>    <span class="hljs-string">"December"</span>:<span class="hljs-number">31</span>,<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="函数作为值、类型"><a href="#函数作为值、类型" class="headerlink" title="函数作为值、类型"></a><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.3.md#%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%80%BC%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">函数作为值、类型</a></h3><blockquote>
<p>在Go中函数也是一种变量，我们可以通过type来定义它，它的类型就是所有拥有相同的参数，相同的返回值的一种类型<br><code>type typeName func(input1 inputType1 , input2 inputType2 [, ...]) (result1 resultType1 [, ...])</code><br>函数作为类型到底有什么好处呢？那就是可以把这个类型的函数当做值来传递</p>
</blockquote>
<ul>
<li><a href="https://blog.learngoprogramming.com/go-functions-overview-anonymous-closures-higher-order-deferred-concurrent-6799008dde7b" target="_blank" rel="noopener">First-class funcs</a></li>
</ul>
<p>因此在Go语言里，我们为一些简单的数值、字符串、slice、map来定义一些附加行为很方便。<br>方法可以被声明到任意类型，只要不是一个指针或者一个interface。<br><a href="https://yar999.gitbooks.io/gopl-zh/content/ch6/ch6-01.html" target="_blank" rel="noopener">https://yar999.gitbooks.io/gopl-zh/content/ch6/ch6-01.html</a></p>
<p>此外，为了避免歧义，在声明方法时，如果一个类型名本身是一个指针的话，是不允许其出现在接收器中的，比如下面这个例子：<br><a href="https://yar999.gitbooks.io/gopl-zh/content/ch6/ch6-02.html" target="_blank" rel="noopener">https://yar999.gitbooks.io/gopl-zh/content/ch6/ch6-02.html</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> P *<span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(P)</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">/* ... */</span> &#125; <span class="hljs-comment">// compile error: invalid receiver type</span><br></code></pre></td></tr></table></figure>

<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul>
<li>如果一个method的receiver是*T,你可以在一个T类型的实例变量V上面调用这个method，而不需要&amp;V去调用这个method</li>
<li>如果一个method的receiver是T，你可以在一个*T类型的变量P上面调用这个method，而不需要 *P去调用这个method</li>
</ul>
<p>Go里面的面向对象是如此的简单，没有任何的私有、公有关键字，通过大小写来实现(大写开头的为公有，小写开头的为私有)，方法也同样适用这个原则。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.6.md#26-interface" target="_blank" rel="noopener">接口</a></h2><p>空<code>interface</code>在我们需要存储任意类型的数值的时候相当有用，因为他可以存储任意类型的数值。<br>神奇之处：在java中，必须现有interface，然后才有其继承类；而在go中，可以先有类，然后才有接口（当然，先有接口再有类更是可以的）；<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.6.md" target="_blank" rel="noopener">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.6.md</a><br>简单的说，interface是一组method 签名的组合，我们通过interface来定义对象的一组行为。</p>
<h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.7.md" target="_blank" rel="noopener">并行</a></h2><ul>
<li>必须使用<code>make</code>来创建channel</li>
<li>goroutine是Go并行设计的核心。goroutine说到底其实就是协程，但是它比线程更小，十几个goroutine可能体现在底层就是五六个线程，Go语言内部帮你实现了这些goroutine之间的内存共享。执行goroutine只需极少的栈内存(大概是4~5KB)，当然会根据相应的数据伸缩。也正因为如此，可同时运行成千上万个并发任务。goroutine比thread更易用、更高效、更轻便。</li>
<li>我们可以看到go关键字很方便的就实现了并发编程。 上面的多个goroutine运行在同一个进程里面，共享内存数据，不过设计上我们要遵循：不要通过共享来通信，而要通过通信来共享。<blockquote>
<p><a href="https://www.zhihu.com/question/58004055" target="_blank" rel="noopener">如何理解 Golang 中“不要通过共享内存来通信，而应该通过通信来共享内存”？ - 知乎</a></p>
</blockquote>
</li>
<li>runtime.Gosched()表示让CPU把时间片让给别人,下次某个时候继续恢复执行该goroutine。</li>
<li>make和new的区别 <a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.2.md#makenew操作" target="_blank" rel="noopener">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.2.md#makenew操作</a><blockquote>
<p>make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。</p>
<ol>
<li>new返回指针。<br>new(T)分配了零值填充的T类型的内存空间，并且返回其地址，即一个*T类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型T的零值。</li>
<li>make返回初始化后的（非零）值。<br>make只能创建slice、map和channel，并且返回一个有初始值(非零)的T类型，而不是*T。 在这些项目被初始化之前，slice为nil。</li>
</ol>
</blockquote>
</li>
<li><a href="http://go-tour-zh.appspot.com/concurrency/4" target="_blank" rel="noopener">range和close</a></li>
</ul>
<h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><p>注意：所有字符都是UTF-8处理。  </p>
<p>字符串的处理可以使用<code>strings</code>包来进行搜索（Contains, Index）、替换（Replace）和解析（Split、Join）等操作</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a><a href="http://golang.org/doc/articles/laws_of_reflection.html" target="_blank" rel="noopener">反射</a></h2><h2 id="包"><a href="#包" class="headerlink" title="[包]"></a>[包]</h2><p>当创建一个包，一般要用短小的包名，但也不能太短导致难以理解。<br>包名一般采用单数的形式。标准库的bytes、errors和strings使用了复数形式，这是为了避免和预定义的类型冲突，同样还有go/types是为了避免和type关键字冲突。<br><a href="https://yar999.gitbooks.io/gopl-zh/content/ch10/ch10-06.html" target="_blank" rel="noopener">https://yar999.gitbooks.io/gopl-zh/content/ch10/ch10-06.html</a></p>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go学习资料</title>
    <url>/go/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://coding.imooc.com/class/chapter/180.html#Anchor" target="_blank" rel="noopener">Google资深工程师深度讲解Go语言</a></p>
</li>
<li><p><a href="https://tour.golang.org/welcome/1" target="_blank" rel="noopener">A Tour of Go</a></p>
</li>
<li><p><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a></p>
</li>
<li><p><a href="https://peter.bourgon.org/go-best-practices-2016/" target="_blank" rel="noopener">Go best practices, six years in</a></p>
</li>
<li><p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank" rel="noopener">build-web-application-with-golang</a></p>
</li>
<li><p><a href="https://beego.me/docs/intro/" target="_blank" rel="noopener">beego 简介</a></p>
</li>
<li><p><a href="http://go-tour-zh.appspot.com/concurrency/10" target="_blank" rel="noopener">where to go from here</a></p>
</li>
<li><p><a href="http://fuxiaohei.me/2016/9/20/go-and-http-server.html" target="_blank" rel="noopener">Go 开发 HTTP</a></p>
</li>
</ul>
<h2 id="make-and-new"><a href="#make-and-new" class="headerlink" title="make and new"></a>make and new</h2><table>
<thead>
<tr>
<th>type</th>
<th>object</th>
<th>return</th>
<th>init</th>
</tr>
</thead>
<tbody><tr>
<td>make</td>
<td>channel, slice, map</td>
<td>the relative type</td>
<td>yes</td>
</tr>
<tr>
<td>new</td>
<td>all</td>
<td>pointer</td>
<td>yes</td>
</tr>
</tbody></table>
<ul>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.2.md" target="_blank" rel="noopener">build-web-application-with-golang/02.2.md at master · astaxie/build-web-application-with-golang</a></li>
<li><a href="https://www.godesignpatterns.com/2014/04/new-vs-make.html" target="_blank" rel="noopener">new() vs make() | Go Design Patterns</a></li>
</ul>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>【Go】三方库</title>
    <url>/go/%E4%B8%89%E6%96%B9%E5%BA%93/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://gorm.io/" target="_blank" rel="noopener">GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></p>
</li>
<li><p>beego</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go排序</title>
    <url>/go/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 顺序</span><br>sort.Ints(a []<span class="hljs-keyword">int</span>);<br>sort.Strings(a []<span class="hljs-keyword">string</span>);<br><span class="hljs-comment">// 逆序 https://stackoverflow.com/questions/18343208/how-do-i-reverse-sort-a-slice-of-integer-go</span><br>sort.Sort(sort.Reverse(sort.IntSlice(keys)))<br>sort.Sort(sort.Reverse(sort.StringSlice(keys)))<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go标准库</title>
    <url>/go/%E6%A0%87%E5%87%86%E5%BA%93/</url>
    <content><![CDATA[<h2 id="fmt占位符"><a href="#fmt占位符" class="headerlink" title="fmt占位符"></a>fmt占位符</h2><ul>
<li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example/blob/master/chapter01/01.3.md" target="_blank" rel="noopener">https://github.com/polaris1119/The-Golang-Standard-Library-by-Example/blob/master/chapter01/01.3.md</a></li>
<li><a href="https://golang.org/pkg/fmt/" target="_blank" rel="noopener">https://golang.org/pkg/fmt/</a></li>
</ul>
<h2 id="strconv数字转换"><a href="#strconv数字转换" class="headerlink" title="strconv数字转换"></a>strconv数字转换</h2><ul>
<li>strconv.Itoa （数字转换为字符串）</li>
<li>strconv.Atoi （字符串转换为数字）</li>
</ul>
<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">timeStr := time.Now().Format(<span class="hljs-string">"2006-01-02 15:04:05"</span>)<br>timeStr = time.Parse(<span class="hljs-string">"2006-01-02 15:04:05"</span>, time.Now)<br></code></pre></td></tr></table></figure>

<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><ul>
<li><a href="https://yar999.gitbooks.io/gopl-zh/content/ch4/ch4-05.html" target="_blank" rel="noopener">https://yar999.gitbooks.io/gopl-zh/content/ch4/ch4-05.html</a><blockquote>
<p>Color成员的Tag还带了一个额外的omitempty选项，表示当Go语言结构体成员为空或零值时不生成JSON对象（这里false为零值）。</p>
</blockquote>
<pre><code class="go"></code></pre>
</li>
</ul>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Tutor</title>
    <url>/git/git%20tutor/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://marklodato.github.io/visual-git-guide/index-en.html?no-svg" target="_blank" rel="noopener">A Visual Git Reference</a></p>
</li>
<li><p><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener">连猴子都懂的Git入门</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【开发工具-Git】Git中合并多个项目并保留所有commit提交记录</title>
    <url>/git/Git%E4%B8%AD%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AE%E5%B9%B6%E4%BF%9D%E7%95%99%E6%89%80%E6%9C%89commit%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>通常的合并项目的做法是，将所有项目移动到一个新目录中，并重新生成纳入 git 管理（去掉了.git 文件夹），这样做的弊端是之前的历史提交记录都没有了，想要看之前的记录，还需要再回到旧项目中查看。<br>在本文中，我会介绍怎样完整地保留历史提交记录。</p>
<h2 id="为什么保留提交记录？"><a href="#为什么保留提交记录？" class="headerlink" title="为什么保留提交记录？"></a>为什么保留提交记录？</h2><ol>
<li>可以追踪文件修改历史，方便对比和还原历史。</li>
<li>可以追责，知道之前是谁写的，什么时候写的。</li>
</ol>
<p>拆分</p>
<h2 id="怎样完整地保留提交记录？"><a href="#怎样完整地保留提交记录？" class="headerlink" title="怎样完整地保留提交记录？"></a>怎样完整地保留提交记录？</h2><p>假设有三个项目</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">A：远程地址为：git@github.com:lyloou/merge_a.git ，分支为<span class="hljs-literal">master</span><br>B：远程地址为：git@github.com:lyloou/merge_b.git ，分支为<span class="hljs-literal">master</span><br>C：远程地址为：git@github.com:lyloou/merge_c.git ，分支为<span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure>

<p>合并结果为：<a href="mailto:git@github.com">git@github.com</a>:lyloou/merge_all.git ，分支为 master</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">merge_all<br>  -- merge_a<br>  -- merge_b<br>  -- merge_c<br></code></pre></td></tr></table></figure>

<p><strong>操作步骤</strong></p>
<ol>
<li>在本地新建 merge_all 目录，并初始化</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> merge_all<br><span class="hljs-comment"># 将当前目录初始化为git版本管理的目录</span><br>git init<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>在 merge_all 中添加 merge_a，merge_b，merge_c 的远程分支。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git remote add origin_merge_a git@github.com:lyloou/merge_a.git<br>git remote add origin_merge_b git@github.com:lyloou/merge_b.git<br>git remote add origin_merge_c git@github.com:lyloou/merge_c.git<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>可以验证是否添加成功<code>git remote -v</code></li>
<li>在 merge_all 目录下，获取 merge_a, merge_b,merge_c 的 master 分支数据</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git fetch origin_merge_a master<br>git fetch origin_merge_b master<br>git fetch origin_merge_c master<br></code></pre></td></tr></table></figure>

<ol start="5">
<li>开始合并了，并移动到子目录中</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 合并，并保留历史</span><br>git merge origin_merge_a/master --allow-unrelated-histories<br><span class="hljs-comment"># 新建子文件夹，并移动到此文件中（排除需要忽略的文件夹）</span><br>mkdir merge_a<br>mv !(.|..|.git|merge_a) merge_a<br><span class="hljs-comment"># 生成一条commit日志</span><br>git add . &amp;&amp; git commit -m <span class="hljs-string">"merge merge_a_master and mv to merge_a"</span><br><br>git merge origin_merge_b/master --allow-unrelated-histories<br>mkdir merge_b<br>mv !(.|..|.git|merge_b) merge_b<br>git add . &amp;&amp; git commit -m <span class="hljs-string">"merge merge_b_master and mv to merge_b"</span><br><br>git merge origin_merge_c/master --allow-unrelated-histories<br>mkdir merge_c<br>mv !(.|..|.git|merge_c) merge_c<br>git add . &amp;&amp; git commit -m <span class="hljs-string">"merge merge_c_master and mv to merge_c"</span><br><span class="hljs-comment"># 注意 1： `--allow-unrelated-histories` 的意思是，允许合并不相关历史</span><br><span class="hljs-comment"># 注意 2：执行 `mv !(.|..|.git|merge_a) merge_a` 的过程中可能会报错误 `-bash: !: event not`，执行一下命令 `shopt -s extglob`</span><br></code></pre></td></tr></table></figure>

<ol start="6">
<li>推送 merge_all 的 master 分支到远程</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git remote add origin git@github.com:lyloou/merge_all.git<br>git push -u origin master<br></code></pre></td></tr></table></figure>

<p>至此合并多项目操作就完成了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://0f9de7f3.wiz06.com/wapp/pages/view/share/s/0fDuvP3SO4QS2Hb3sP2Di0ai2_-yc63ErkxP28a9kS3XUYgP" target="_blank" rel="noopener">Wiz 原文</a></li>
<li><a href="https://juejin.cn/post/6885549929960472590" target="_blank" rel="noopener">git 合并两个项目 - 掘金</a></li>
<li><a href="https://blog.csdn.net/m0_37586991/article/details/88617332" target="_blank" rel="noopener">linux mv 命令排除某个文件或文件夹_哪惧明天，风高路斜-CSDN 博客_mv 排除文件</a></li>
<li><a href="https://askubuntu.com/questions/889744/what-is-the-purpose-of-shopt-s-extglob" target="_blank" rel="noopener">command line - What is the purpose of shopt -s extglob - Ask Ubuntu</a></li>
</ul>
<blockquote>
<p>As you can guess, it stands for extended globbing. This option allows for more advanced pattern matching.</p>
</blockquote>
<h2 id="一键合并多个项目-shell-脚本"><a href="#一键合并多个项目-shell-脚本" class="headerlink" title="一键合并多个项目 shell 脚本"></a>一键合并多个项目 shell 脚本</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env sh</span><br><br><span class="hljs-comment">#1. 在本地新建 merge_all 目录，并初始化</span><br>mkdir merge_all<br><span class="hljs-built_in">cd</span> merge_all<br><span class="hljs-comment"># 将当前目录初始化为git版本管理的目录</span><br>git init<br><br><span class="hljs-comment">#2. 在 merge_all 中添加 merge_a，merge_b，merge_c 的远程分支。</span><br>git remote add origin_a git@github.com:lyloou/merge_a.git<br>git remote add origin_b git@github.com:lyloou/merge_b.git<br>git remote add origin_c git@github.com:lyloou/merge_c.git<br><br><span class="hljs-comment">#3. 可以验证是否添加成功`git remote -v`</span><br>git remote -v<br><br><span class="hljs-comment">#4. 在 merge_all 目录下，获取 merge_a, merge_b,merge_c 的 master 分支数据</span><br>git fetch origin_a master<br>git fetch origin_b master<br>git fetch origin_c master<br><br><span class="hljs-comment">#5. 开始合并了，并移动到子目录中</span><br><br><span class="hljs-comment"># 注意 执行 `mv !(.|..|.git|merge_a) merge_a` 的过程中可能会报错误 `-bash: !: event not`，执行一下命令 `shopt -s extglob`</span><br><span class="hljs-built_in">shopt</span> -s extglob<br><br><span class="hljs-comment"># 合并，并保留历史</span><br>git merge origin_a/master --allow-unrelated-histories<br><span class="hljs-comment"># 新建子文件夹，并移动到此文件中（排除需要忽略的文件夹）</span><br>mkdir merge_a &amp;&amp; mv !(.|..|.git|merge_a) merge_a<br><span class="hljs-comment"># 生成一条commit日志</span><br>git add . &amp;&amp; git commit -m <span class="hljs-string">"merge and mv to merge_a"</span><br><br>git merge origin_b/master --allow-unrelated-histories<br>mkdir merge_b &amp;&amp; mv !(.|..|.git|merge_a|merge_b) merge_b<br>git add . &amp;&amp; git commit -m <span class="hljs-string">"merge and mv to merge_b"</span><br><br>git merge origin_c/master --allow-unrelated-histories<br>mkdir merge_c &amp;&amp; mv !(.|..|.git|merge_a|merge_b|merge_c) merge_c<br>git add . &amp;&amp; git commit -m <span class="hljs-string">"merge and mv to merge_c"</span><br><br><span class="hljs-comment">#6. 推送 merge_all 的 master 分支到远程</span><br>git remote add origin git@github.com:lyloou/merge_all.git<br>git push -u origin master<br></code></pre></td></tr></table></figure>

<p><a href="http://lyloou.com/git/Git中合并多个项目并保留所有commit记录/" target="_blank" rel="noopener">阅读原文</a></p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Go命令行工具</title>
    <url>/go/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="The-Command"><a href="#The-Command" class="headerlink" title="The Command"></a>The Command</h2><ul>
<li>通过 <code>go build</code> 来编译，<a href="http://wiki.jikexueyuan.com/project/go-command-tutorial/0.1.html" target="_blank" rel="noopener">可以来检验 lib 函数是否有错误，不会生成文件到 pkg 中去。</a></li>
<li>在执行 <code>go install</code> 的时候，才会生成到 pkg 中。</li>
<li><code>go env GOPATH</code> prints the effective current GOPATH; it prints the default location if the environment variable is unset.</li>
</ul>
<h2 id="标准命令详解"><a href="#标准命令详解" class="headerlink" title="标准命令详解"></a><a href="http://wiki.jikexueyuan.com/project/go-command-tutorial/0.0.html" target="_blank" rel="noopener">标准命令详解</a></h2><h2 id="go-How-to-get-all-dependency-files-for-a-program-using-Golang-Stack-Overflow"><a href="#go-How-to-get-all-dependency-files-for-a-program-using-Golang-Stack-Overflow" class="headerlink" title="go - How to get all dependency files for a program using Golang - Stack Overflow"></a><a href="https://stackoverflow.com/questions/32758235/how-to-get-all-dependency-files-for-a-program-using-golang" target="_blank" rel="noopener">go - How to get all dependency files for a program using Golang - Stack Overflow</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">go get -d -v ./...<br></code></pre></td></tr></table></figure>
<p><code>...</code> is a special pattern, tells to go down recursively</p>
<h2 id="格式化整个目录"><a href="#格式化整个目录" class="headerlink" title="格式化整个目录"></a>格式化整个目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">gofmt -w -l src<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go测试</title>
    <url>/go/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">"errors"</span><br>    <span class="hljs-string">"testing"</span><br><br>    <span class="hljs-string">"github.com/lyloou/goer/pkg/basic"</span><br>    <span class="hljs-string">"github.com/lyloou/goer/pkg/math"</span><br>)<br><br><span class="hljs-comment">// https://yar999.gitbooks.io/gopl-zh/content/ch11/ch11-02.html</span><br><span class="hljs-comment">// 表格驱动测试</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestDivide</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> tests = []<span class="hljs-keyword">struct</span> &#123;<br>        a   <span class="hljs-keyword">int64</span><br>        b   <span class="hljs-keyword">int64</span><br>        r   <span class="hljs-keyword">int64</span><br>        err error<br>    &#125;&#123;<br>        &#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">nil</span>&#125;,<br>        &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">nil</span>&#125;,<br>        &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">nil</span>&#125;,<br>        &#123;<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, errors.New(<span class="hljs-string">"division by zero"</span>)&#125;,<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> _, test := <span class="hljs-keyword">range</span> tests &#123;<br>        <span class="hljs-keyword">if</span> r, err := math.Divide(test.a, test.b); r != test.r || !basic.IsSameError(err, test.err) &#123;<br>            t.Errorf(<span class="hljs-string">"Divide(%d, %d) got (%d, %v), want (%d, %v)"</span>, test.a, test.b, r, err, test.r, test.err)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试扩展包(External test package)：<br>目的：解决包的循环依赖问题。<br>方法：给包名添加<code>_test</code>后缀。<br><a href="https://yar999.gitbooks.io/gopl-zh/content/ch11/ch11-02.html" target="_blank" rel="noopener">https://yar999.gitbooks.io/gopl-zh/content/ch11/ch11-02.html</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">// 产品代码<br>$ go list -f=&#123;&#123;.GoFiles&#125;&#125; github.com/lyloou/goer/pkg/math<br>// 包内测试<br>$ go list -f=&#123;&#123;.TestGoFiles&#125;&#125; github.com/lyloou/goer/pkg/math<br>// 测试扩展包<br>$ go list -f=&#123;&#123;.XTestGoFiles&#125;&#125; github.com/lyloou/goer/pkg/math<br></code></pre></td></tr></table></figure>

<p>像<code>fmt/export_test.go</code>中所表现的，通过提供一个秘密出口的小技巧，来进行测试扩展包的白盒测试。<br>—— <a href="https://yar999.gitbooks.io/gopl-zh/content/ch11/ch11-02.html" target="_blank" rel="noopener">https://yar999.gitbooks.io/gopl-zh/content/ch11/ch11-02.html</a> (11.2.4)</p>
<blockquote>
<p>开始一个好的测试的关键是通过实现你真正想要的具体行为，然后才是考虑简化测试代码。<br>最好的接口是直接从库的抽象接口开始，针对公共接口编写一些测试函数。</p>
</blockquote>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>在Github提交pr</title>
    <url>/git/github%E6%8F%90%E4%BA%A4pr/</url>
    <content><![CDATA[<h1 id="在-github-提交-pr"><a href="#在-github-提交-pr" class="headerlink" title="在 github 提交 pr"></a>在 github 提交 pr</h1><ul>
<li>fork 一份到自己的仓库</li>
<li>设置本地的 origin url: <code>git remote set-url origin https://github.com/lyloou/WeexErosFramework.git</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查看默认上游的远程信息</span><br>git remote <span class="hljs-keyword">show</span> origin<br><br><span class="hljs-comment"># 添加多一个上游</span><br>git remote <span class="hljs-keyword">add</span> upstream https://github.com/bmfe/WeexErosFramework.git<br><br><span class="hljs-comment"># 查看新上游的远程信息</span><br>git remote <span class="hljs-keyword">show</span> upstream<br><br><span class="hljs-comment"># 将上游upstream的新内容拉取下来</span><br>git pull upstream <span class="hljs-keyword">master</span>:<span class="hljs-keyword">master</span><br><br><span class="hljs-comment"># 修改提交</span><br>git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">"new feature"</span><br>git push<br></code></pre></td></tr></table></figure>

<ul>
<li><p>进入自己 fork 的项目</p>
</li>
<li><p>有个<code>new pull request</code>按钮，按照提示进行即可</p>
</li>
</ul>
<h1 id="第一次参与开源"><a href="#第一次参与开源" class="headerlink" title="第一次参与开源"></a>第一次参与开源</h1><p><a href="https://github.com/firstcontributions/first-contributions/blob/master/translations/README.chs.md" target="_blank" rel="noopener">first-contributions/README.chs.md at master · firstcontributions/first-contributions</a></p>
<p><a href="https://opensource.guide/zh-hans/how-to-contribute/" target="_blank" rel="noopener">如何为开源做贡献 | Open Source Guides</a><br><a href="https://www.erupt.xyz/demo/#/site/aHR0cHM6Ly93d3cueXVxdWUuY29tL3l1ZXBlbmcvZXJ1cHQ%3D" target="_blank" rel="noopener">第一次贡献 使用文档 - Erupt Framework</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github配置</title>
    <url>/git/github%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>密钥是上传到远程库的凭证，是本地与远程库的桥梁；</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">"lyloou@qq.com"</span><br></code></pre></td></tr></table></figure>

<h3 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h3><p>复制<code>~/.ssh/id_rsa.pub</code>内容到<code>https://github.com/settings/keys</code>的<code>SSH and GPG keys</code></p>
<h3 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure>

<h2 id="big-file"><a href="#big-file" class="headerlink" title="big file"></a>big file</h2><ul>
<li><a href="https://www.cnblogs.com/guxin/p/github-cannot-push-files-larger-than-100mb.html" target="_blank" rel="noopener">GitHub 限制上传单个大于 100M 的大文件 - 霍莉雪特 - 博客园</a></li>
<li><a href="https://blog.csdn.net/tyro_java/article/details/53440666" target="_blank" rel="noopener">突破 github 的 100M 单个大文件上传限制 - Johnny 的专栏 - CSDN 博客</a></li>
</ul>
<h2 id="keyboard-shortcuts"><a href="#keyboard-shortcuts" class="headerlink" title="keyboard shortcuts"></a>keyboard shortcuts</h2><p><a href="https://help.github.com/en/articles/keyboard-shortcuts" target="_blank" rel="noopener">Keyboard shortcuts - GitHub Help</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab</title>
    <url>/git/gitlab/</url>
    <content><![CDATA[<h2 id="CI-amp-CD"><a href="#CI-amp-CD" class="headerlink" title="CI &amp; CD"></a>CI &amp; CD</h2><h3 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h3><ul>
<li><a href="http://gitlab.renrenyoupin.com/help/ci/quick_start/README" target="_blank" rel="noopener">Readme · Quick start · Ci · Help · GitLab</a></li>
<li><a href="http://gitlab.renrenyoupin.com/help/ci/yaml/README.md" target="_blank" rel="noopener">Configuration of your jobs with .gitlab-ci.yml</a></li>
<li><a href="https://segmentfault.com/a/1190000010442764" target="_blank" rel="noopener">Gitlab CI yaml官方配置文件翻译</a></li>
<li><a href="https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/" target="_blank" rel="noopener">用 GitLab CI 进行持续集成 | Scarletsky</a></li>
</ul>
<h3 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h3><ul>
<li><p><a href="https://docs.gitlab.com/runner/install/linux-repository.html" target="_blank" rel="noopener">Install GitLab Runner using the official GitLab repositories | GitLab</a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">curl -L http<span class="hljs-variable">s:</span>//packages.gitlab.<span class="hljs-keyword">com</span>/install/repositories/runner/gitlab-runner/script.<span class="hljs-keyword">deb</span>.<span class="hljs-keyword">sh</span> | sudo bash<br><br>apt-cache madison gitlab-runner<br>sudo apt-<span class="hljs-built_in">get</span> install gitlab-runner=<span class="hljs-number">10.8</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><a href="https://docs.gitlab.com/runner/register/index.html" target="_blank" rel="noopener">Registering Runners | GitLab</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo gitlab-runner register \<br>  --non-interactive \<br>  --url <span class="hljs-string">"http://gitlab.lyloou.com/"</span> \<br>  --registration-token <span class="hljs-string">"xxxxxxxxxxxxx"</span> \<br>  --executor <span class="hljs-string">"shell"</span> \<br>  --description <span class="hljs-string">"shell-runner"</span> \<br>  --tag-list <span class="hljs-string">"shell"</span> \<br>  --run-untagged=<span class="hljs-string">"true"</span> \<br>  --locked=<span class="hljs-string">"false"</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>-<a href="https://segmentfault.com/a/1190000013362589" target="_blank" rel="noopener">【GITLAB】 服务配置可持续集成部署的项目案例 - 安装篇 - 个人文章 - SegmentFault 思否</a></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">sudo gitlab-runner list<br>gitlab-runner unregister <span class="hljs-params">--url</span> http:<span class="hljs-string">//gitlab.example.com/</span> <span class="hljs-params">--token</span> t0k3n<br>gitlab-runner unregister <span class="hljs-params">--name</span> test-runner<br>gitlab-runner unregister <span class="hljs-params">--all-runners</span><br></code></pre></td></tr></table></figure>
<h1 id="ff0000"><a href="#ff0000" class="headerlink" title="!!#ff0000"></a>!!#ff0000</h1><p>Runner的大版本号要和gitlab的在版本号保持一致。<br>如：Runner 10.8.0 ~ gitlab 10.2.4</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git分支管理</title>
    <url>/git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model » nvie.com</a><br><img src="https://nvie.com/img/git-model@2x.png" alt="A successful Git branching model"></p>
</li>
<li><p><a href="https://backlog.com/git-tutorial/cn/stepup/stepup1_5.html" target="_blank" rel="noopener">topic分支和merge分支的运用实例【分支】| 猴子都能懂的GIT入门| 贝格乐（Backlog）</a><br><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup1_5_6.png" alt="topic分支和merge分支的运用实例"></p>
</li>
<li><p><a href="https://backlog.com/git-tutorial/cn/stepup/stepup2_8.html" target="_blank" rel="noopener">用rebase合并【教程1 操作分支】| 猴子都能懂的GIT入门 | 贝格乐（Backlog）</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git服务器搭建（windows平台）</title>
    <url>/git/git%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%88windows%E5%B9%B3%E5%8F%B0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="以GitBlit来讲解"><a href="#以GitBlit来讲解" class="headerlink" title="以GitBlit来讲解"></a>以GitBlit来讲解</h2><ol>
<li>安装Java；</li>
<li>配置Java的环境变量；</li>
<li>下载并安装<a href="http://www.gitblit.com/" target="_blank" rel="noopener">GitBlit</a></li>
<li>配置GitBlit（以1.8.0为例）:<ul>
<li>打开配置文件：<code>C:\Git\gitblit-1.8.0\data\defaults.properties</code></li>
<li>修改资料库路径（也可以使用默认的）：<code>git.repositoriesFolder = C:\\Git\\GitRepository</code></li>
<li>修改http协议端口：<code>server.httpPort = 10108</code></li>
<li>设定服务器http地址：<code>server.httpBindInterface = 192.168.0.30</code></li>
<li>设定服务器https地址：<code>server.httpsBindInterface = localhost</code></li>
<li>保存并关闭文件；</li>
<li>运行服务器，双击打开：<code>gitblit.bat</code></li>
</ul>
</li>
<li>浏览器中打开GitBlit：<code>http://192.168.0.30:10108</code></li>
<li>作为服务自动运行在后台：<ul>
<li>打开<code>installService.bat</code>文件；</li>
<li>根据系统环境配置ARCH：<code>SET ARCH=amd64</code></li>
<li>设置程序目录：<code>C:\\Git\\gitblit-1.8.0</code></li>
<li>设置启动参数：<code>--StartParams=&quot;&quot;</code></li>
<li>关闭bat文件，并以管理员身份运行；</li>
<li>查看服务是否安装成功：Win+R，输入<code>services.msc</code>，找得到gitbit服务；</li>
<li>启动gitbit服务；</li>
</ul>
</li>
<li>再次在浏览器中验证是否安装成功；</li>
<li>登陆：账号密码默认均为<code>admin</code></li>
</ol>
<h2 id="其它-git-服务"><a href="#其它-git-服务" class="headerlink" title="其它 git 服务"></a>其它 git 服务</h2><ul>
<li><a href="https://gitlab.com/" target="_blank" rel="noopener">gitlab</a></li>
<li><a href="https://github.com/gogits/gogs" target="_blank" rel="noopener">gogs</a></li>
</ul>
<hr>
<h2 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h2><ul>
<li><a href="http://www.cnblogs.com/ucos/p/3924720.html" target="_blank" rel="noopener">Windows平台下Git服务器搭建</a></li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git坑</title>
    <url>/git/git%E5%9D%91/</url>
    <content><![CDATA[<h2 id="上传到远程仓库的文件再次改名-大小写-不生效"><a href="#上传到远程仓库的文件再次改名-大小写-不生效" class="headerlink" title="上传到远程仓库的文件再次改名(大小写)不生效"></a>上传到远程仓库的文件再次改名(大小写)不生效</h2><p><a href="https://juejin.im/post/5bbdc1ff6fb9a05d011cfe66" target="_blank" rel="noopener">https://juejin.im/post/5bbdc1ff6fb9a05d011cfe66</a></p>
<p>配置 <code>git config core.ignorecase false --global</code>，大小写默认不敏感</p>
<h2 id="在-gitmodules中找不到路径的子模块映射-缺少-gitmodules文件"><a href="#在-gitmodules中找不到路径的子模块映射-缺少-gitmodules文件" class="headerlink" title="在.gitmodules中找不到路径的子模块映射,缺少.gitmodules文件"></a>在.gitmodules中找不到路径的子模块映射,缺少.gitmodules文件</h2><p><a href="https://codeday.me/bug/20170816/58438.html" target="_blank" rel="noopener">https://codeday.me/bug/20170816/58438.html</a><br><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git - 子模块</a></p>
<p>首先移除模块依赖，<br><code>git rm --cached library/algs4</code><br>其次重新添加模块依赖<br><code>git submodule add https://github.com/lyloou/algs4 library/algs4</code></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置</title>
    <url>/git/git%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h2><figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">"Lou"</span><br>$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">"lyloou6@gmail.com"</span><br><br><span class="hljs-comment">// 查看用户的配置信息</span><br>$ git <span class="hljs-keyword">config</span> user<span class="hljs-variable">.name</span><br>$ git <span class="hljs-keyword">config</span> user<span class="hljs-variable">.email</span><br></code></pre></td></tr></table></figure>

<h2 id="保存-push-时的用户名和密码"><a href="#保存-push-时的用户名和密码" class="headerlink" title="保存 push 时的用户名和密码"></a>保存 push 时的用户名和密码</h2><p>针对 http 协议的也可以不用总是输入用户名密码那么麻烦，如：<code>https://github.com/lyloou/hexo.git</code>，<br>可以通过设置<code>credential.help</code>来保存。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global credential.helper store<br></code></pre></td></tr></table></figure>

<h2 id="同时同步多个远程分支"><a href="#同时同步多个远程分支" class="headerlink" title="同时同步多个远程分支"></a>同时同步多个远程分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git config -–add remote.all.url  http://domain1.com/repo.git<br>git config -–add remote.all.url  http://domain2.com/repo.git<br><br>git push all master<br>git push all develop<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://howto.lintel.in/git-how-to-push-code-to-multiple-remotes-simultaneously/" target="_blank" rel="noopener">GIT - How to push code to multiple remotes simultaneously - Lintel Technologies Blog</a></li>
</ul>
<h2 id="网络配置："><a href="#网络配置：" class="headerlink" title="网络配置："></a>网络配置：</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global http.proxy <span class="hljs-string">'socks5://127.0.0.1:1080'</span><br>git<span class="hljs-built_in"> config </span>--global https.proxy <span class="hljs-string">'socks5://127.0.0.1:1080'</span><br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://gist.github.com/laispace/666dd7b27e9116faece6" target="_blank" rel="noopener">git 设置和取消代理</a></li>
</ul>
<p>或：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> http<span class="hljs-variable">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:8118</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> https<span class="hljs-variable">.proxy</span> https:<span class="hljs-comment">//127.0.0.1:8118</span><br></code></pre></td></tr></table></figure>

<p><a href="https://tzrgaga.github.io/2017/04/12/forward-socks-by-privoxy/" target="_blank" rel="noopener">Windows 下使用 Privoxy 转换 socks5 代理为 Http 代理 | 小田的 blog</a></p>
<h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 显示漂亮的分支日志：git lg</span><br>git config --global alias.lg <span class="hljs-string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span><br></code></pre></td></tr></table></figure>

<h2 id="解除上传文件大小限制"><a href="#解除上传文件大小限制" class="headerlink" title="解除上传文件大小限制"></a>解除上传文件大小限制</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">git config http.postBuffer <span class="hljs-number">524288000</span><br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/zhiyuan_x/article/details/72954729" target="_blank" rel="noopener">https://blog.csdn.net/zhiyuan_x/article/details/72954729</a></p>
<h2 id="行尾结束符自动转换问题"><a href="#行尾结束符自动转换问题" class="headerlink" title="行尾结束符自动转换问题"></a>行尾结束符自动转换问题</h2><p><code>warning: LF will be replaced by CRLF in xx.txt</code><br>如果项目的文件是依照文件的 md5 来作为标识，那么提交代码到远程仓库，文件的行尾结束符会自动发生改变，那么之前的 md5 标识就发挥不到作用<br>（这样的 bug 很难找），这时候就需要取消 git 的行尾结束符自动转换功能；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">$ git config --global core.autocrlf <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git#格式化与空白" target="_blank" rel="noopener">Git - 配置 Git</a></li>
<li><a href="https://stackoverflow.com/questions/5834014/lf-will-be-replaced-by-crlf-in-git-what-is-that-and-is-it-important" target="_blank" rel="noopener">https://stackoverflow.com/questions/5834014/lf-will-be-replaced-by-crlf-in-git-what-is-that-and-is-it-important</a></li>
</ul>
<h2 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h2><h3 id="package-json和-package-json两种表示方式的区别"><a href="#package-json和-package-json两种表示方式的区别" class="headerlink" title="package.json和/package.json两种表示方式的区别"></a><code>package.json</code>和<code>/package.json</code>两种表示方式的区别</h3><ul>
<li>前者是所有目录中的 <code>package.json</code>文件都被忽略；</li>
<li>后者是只有当前目录的 <code>package.json</code>文件被忽略；</li>
</ul>
<h2 id="Prevent-commits-in-master-or-develop-branch"><a href="#Prevent-commits-in-master-or-develop-branch" class="headerlink" title="Prevent commits in master or develop branch"></a><a href="https://stackoverflow.com/questions/40462111/git-prevent-commits-in-master-branch" target="_blank" rel="noopener">Prevent commits in master or develop branch</a></h2><ol>
<li>Go to your repository.</li>
<li>Create file .git/hooks/pre-commit with following content:</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br>branch=<span class="hljs-string">"<span class="hljs-variable">$(git rev-parse --abbrev-ref HEAD)</span>"</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$branch</span>"</span> = <span class="hljs-string">"develop"</span> -o <span class="hljs-string">"<span class="hljs-variable">$branch</span>"</span> = <span class="hljs-string">"master"</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">"You can't commit directly to master or develop branch"</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>

<ol start="3">
<li>Make it executable (not required on Windows):</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">$ chmod +x .git<span class="hljs-regexp">/hooks/</span>pre-commit<br></code></pre></td></tr></table></figure>

<p>To disable fast-forwad merges you must also add following option to your .git/config file:</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">[branch <span class="hljs-string">"master"</span>]<br>    mergeoptions = <span class="hljs-comment">--no-ff</span><br></code></pre></td></tr></table></figure>

<p>If you want also protect master branch on your remote, check this answer: <a href="https://stackoverflow.com/questions/38864405/how-to-restrict-access-to-master-branch-on-git" target="_blank" rel="noopener">How to restrict access to master branch on git</a></p>
<h2 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h2><ul>
<li>配置 Git 的时候，加上–global 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</li>
<li>可以通过配置<code>~/.gitconfig</code>文件来删除和修改配置</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000002645623" target="_blank" rel="noopener">git-ssh 配置和使用</a></li>
<li><a href="https://help.github.com/articles/which-remote-url-should-i-use/" target="_blank" rel="noopener">Which remote URL should I use?</a></li>
<li><a href="gitignore.io">gitignore.io</a></li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令</title>
    <url>/git/git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul>
<li>添加到版本控制: <code>git add filename.md</code></li>
<li>添加描述并提交： <code>git commit -m &quot;first init&quot;</code></li>
</ul>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><ul>
<li>查看图形 log：<code>git log --graph</code></li>
<li>查看单行 log：<code>git log --pretty=oneline</code></li>
<li>查看分支合并情况：<code>git log --graph --pretty=oneline --abbrev-commit</code></li>
<li>查看工作区和版本库最新版本的区别： <code>git diff HEAD -- test.xml</code></li>
<li><a href="#shortlog">列出每个人的最近 commit 记录：<code>git shortlog</code></a></li>
<li>列出每个人的 commit 次数：<code>git shortlog -sne</code></li>
</ul>
<h3 id="U"><a href="#U" class="headerlink" title="U"></a>U</h3><ul>
<li>修改提交信息：<code>git commit --amend</code></li>
<li>取消添加（git add .）的命令：<code>git reset HEAD test.xml</code></li>
</ul>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><ul>
<li>移除工作空间的文件： <code>git rm test.xml</code></li>
<li>丢弃工作区的修改： <code>git checkout -- test.xml</code>，其中<code>--</code>很重要，没有这个<code>--</code>，就变成了“切换到另一个分支”。</li>
</ul>
<h3 id="RESET"><a href="#RESET" class="headerlink" title="RESET"></a>RESET</h3><ul>
<li><p>将 HEAD 指向到某个版本： <code>git reset --hard commit_id</code></p>
</li>
<li><p>重返未来，用<code>git reflog</code>查看命令历史，以便回到未来的那个版本。</p>
</li>
<li><p>git reset 后丢弃远程的提交</p>
<blockquote>
<p><a href="https://segmentfault.com/q/1010000002898735" target="_blank" rel="noopener">github - git 怎样删除远程仓库的某次错误提交？ - SegmentFault</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 获取log的某次提交commit id</span><br>git reset --hard 0301382 <span class="hljs-comment"># 回退到0301382</span><br>git push --force <span class="hljs-comment"># 强制推送到服务器端</span><br></code></pre></td></tr></table></figure></li>
<li><p>Git 撤销 git commit 但是未 git push 的修改<br><code>git reset commit_id</code></p>
<blockquote>
<p><a href="https://blog.csdn.net/winceos/article/details/22797437" target="_blank" rel="noopener">Git 撤销 git commit 但是未 git push 的修改</a></p>
</blockquote>
</li>
<li><p><a href="https://blog.csdn.net/a478555/article/details/50970930" target="_blank" rel="noopener">撤销一次分支的合并 Merge</a></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD~</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>How can I undo those commits from the local repository?<br><a href="https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git" target="_blank" rel="noopener">https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git reset HEAD~<br></code></pre></td></tr></table></figure>

<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ul>
<li><p>移除远程仓库： <code>git remote remove origin</code></p>
</li>
<li><p>添加远程仓库： <code>git remote add origin git@github.com:lyloou/lou.git</code></p>
</li>
<li><p><a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/25.md#註冊遠端儲存庫" target="_blank" rel="noopener">添加多个远程仓库： <code>git remote add jquery https://github.com/jquery/jquery.git</code></a></p>
</li>
<li><p>远程主机改名： <code>git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</code></p>
</li>
<li><p>删除远程主机： <code>git remote rm &lt;主机名&gt;</code></p>
</li>
<li><p>显示远程主机详细信息： <code>git remote show &lt;主机名&gt;</code></p>
</li>
<li><p>提交到远程仓库： <code>git push -u origin master</code></p>
<blockquote>
<p>由于远程库是空的，我们第一次推送 master 分支时，加上了-u 参数，Git 不但会把本地的 master 分支内容推送的远程新的<br>master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令<br>（<code>git push origin master</code>）。<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000" target="_blank" rel="noopener">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000</a></p>
</blockquote>
</li>
<li><p><a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/24.md#直接將現有的本地-git-儲存庫上傳到指定的-github-專案" target="_blank" rel="noopener">拉取并且合并远程分支：<code>git pull origin master --allow-unrelated-histories</code></a></p>
</li>
<li><p>删除远程文件夹或文件，但是本地还保留着： <code>git rm -r --cached dir2</code> (<code>-r</code>参数，表示递归删除文件夹的内容)</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore" target="_blank" rel="noopener">https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore</a></p>
</blockquote>
</li>
<li><p>删除远程文件夹或文件，但是本地还保留着（展示要删除的文件，不是真的删除）： <code>git rm -r -n --cached dir2</code></p>
</li>
<li><p><code>pull = fetch + merge</code></p>
<blockquote>
<p><a href="https://ruby-china.org/topics/15729" target="_blank" rel="noopener">git pull 和 git fetch 有什么区别？</a> &gt; <a href="http://blog.kainaodong.com/?p=12" target="_blank" rel="noopener">git 查看远程版本库和本地库的差异 | 星辰</a></p>
</blockquote>
</li>
<li><p>直接修改远程仓库 url</p>
<blockquote>
<p><code>git remote set-url origin git:new.url.here</code><br>See this question: <a href="http://stackoverflow.com/questions/16330404/how-to-remove-remote-origin-from-git-repo/16330439" target="_blank" rel="noopener">Change the URI (URL) for a remote Git repository - Stack Overflow</a></p>
</blockquote>
</li>
<li><p>clone repo with its submodule (use the –recursive argument)</p>
<blockquote>
<p>git clone –recursive <a href="mailto:git@github.com">git@github.com</a>:rbind/yihui.git<br><a href="https://yihui.name/cn/2017/03/git-submodule/" target="_blank" rel="noopener">https://yihui.name/cn/2017/03/git-submodule/</a></p>
</blockquote>
<ul>
<li>如果克隆库的时候要初始化子模块，请加上 –recursive 参数，如：<br>git clone –recursive <a href="mailto:git@github.com">git@github.com</a>:rbind/yihui.git</li>
<li>如果已经克隆了主库但没初始化子模块，则用：<br>git submodule update –init –recursive</li>
<li>如果已经克隆并初始化子模块，而需要从子模块的源更新这个子模块，则：<br>git submodule update –recursive –remote</li>
<li>如果要向一个库中添加一个新的子模块，可以用 git submodule add<br>git submodule add <a href="https://github.com/yihui/hugo-lithium-theme.git" target="_blank" rel="noopener">https://github.com/yihui/hugo-lithium-theme.git</a> themes/hugo-lithium-theme</li>
</ul>
</li>
</ul>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="创建空白分支"><a href="#创建空白分支" class="headerlink" title="创建空白分支"></a><a href="https://blog.csdn.net/playboyanta123/article/details/48975175" target="_blank" rel="noopener">创建空白分支</a></h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git checkout --orphan gh-pages<br></code></pre></td></tr></table></figure>

<h3 id="delete-a-git-branch-both-locally-and-remotely"><a href="#delete-a-git-branch-both-locally-and-remotely" class="headerlink" title="delete a git branch both locally and remotely."></a>delete a git branch both locally and remotely.</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">$ git push --delete &lt;remote_name&gt; &lt;branch_name&gt;<br>$ git branch -d &lt;branch_name&gt;<br><span class="hljs-comment"># (https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely)</span><br></code></pre></td></tr></table></figure>

<h3 id="本地分支"><a href="#本地分支" class="headerlink" title="本地分支"></a>本地分支</h3><ul>
<li>删除本地分支：<code>git branch -d {the_local_branch}</code></li>
</ul>
<h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><ul>
<li><p>添加本地分支到远程分支，并关联：<code>git push -u origin develop</code></p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/2765421/how-do-i-push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too" target="_blank" rel="noopener">https://stackoverflow.com/questions/2765421/how-do-i-push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too</a></p>
</blockquote>
</li>
<li><p>创建远程 origin 的 dev 分支到本地：<code>git checkout -b dev origin/dev</code></p>
</li>
<li><p>指定本地 dev 分支与远程 origin/dev 分支的链接：<code>git branch --set-upstream dev origin/dev</code></p>
</li>
<li><p><code>git clone</code>默认会把远程仓库整个克隆下来，但只会创建<code>master</code>分支，如果远程还有其他分支，可以通过下面的方式 clone 分支。</p>
<ul>
<li>将远程分支获取至本地仓库：git checkout -b python_mail.skin origin/python_mail.skin</li>
<li>使用-t 参数，它默认会在本地建立一个和远程分支名字一样的分支：git checkout -t origin/python_mail.skin</li>
<li><a href="http://blog.csdn.net/xqs83/article/details/7382074" target="_blank" rel="noopener">git clone 远程分支 - xqs83 的专栏 - 博客频道 - CSDN.NET</a></li>
</ul>
</li>
<li><p>在<code>git pull</code>之前，本地分支关联远程分支：<code>git branch --set-upstream feature-A origin/feature-A</code></p>
<ul>
<li><a href="http://blog.csdn.net/xqs83/article/details/17361201" target="_blank" rel="noopener">git 新建本地分支自动与远程分支关联 - xqs83 的专栏 - 博客频道 - CSDN.NET</a></li>
</ul>
</li>
<li><p>提交分支：<code>git push origin feature-A:feature-A</code></p>
</li>
<li><p>删除远程分支：<code>git push origin :feature-A</code></p>
</li>
<li><p>删除远程分支：<code>git push --delete {the_remote_branch}</code></p>
</li>
<li><p>克隆指定分支：<code>git clone -b rryp https://github.com/bmfe/eros-nexus.git &quot;nexus&quot; --depth=1</code></p>
</li>
</ul>
<h3 id="合并-merge-amp-rebase"><a href="#合并-merge-amp-rebase" class="headerlink" title="合并 merge &amp; rebase"></a>合并 merge &amp; rebase</h3><ul>
<li><p><a href="https://git-scm.com/docs/git-merge" target="_blank" rel="noopener">Git - git-merge Documentation</a></p>
<blockquote>
<p>If there were uncommitted worktree changes present when the merge started,<br><code>git merge --abort</code> will in some cases be unable to reconstruct these changes<br>It is therefore recommended to always commit or stash your changes before running git merge.</p>
</blockquote>
</li>
<li><p><a href="http://lemonup.logdown.com/posts/166352-git-merge-fast-forward-difference" target="_blank" rel="noopener">Git merge 時使用 fast-forward 的差別</a></p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 我要新增一個功能，所以在master上開一個branch叫feature1。</span><br><span class="hljs-comment"># 我在新增功能時，加了3個commit在feature1中。</span><br><span class="hljs-comment"># 當功能開發完成時，checkout回master，要將 feature1合併回master，這時可以有兩個選擇：</span><br><br><span class="hljs-comment"># 选择1：master會將feature1上的3個commit全視為master的commit，並將HEAD移到跟feature1的HEAD相同的commit上。</span><br>git merge --ff feature1<br><br><span class="hljs-comment"># 选择2：master會新增一個commit，內容為feature1上的改變，並將HEAD移到新的commit上。</span><br>git merge --no-ff feature1<br><br><span class="hljs-comment"># 至於該使用哪種方式，就要看個人需求了，如果是新增功能的branch，個人認為使用non-fast-forward的方式比較好。</span><br><span class="hljs-comment"># 這樣可以很清楚的看出哪些是新增功能用的commit，哪些是原本master的commit。master才不會有太多不相干的commit交錯在一起。</span><br><span class="hljs-comment"># 而且master要移除功能時，也只要處理一個commit就可以了。</span><br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://backlog.com/git-tutorial/cn/stepup/stepup1_4.html" target="_blank" rel="noopener">分支的合并【分支】| 猴子都能懂的 GIT 入门 | 贝格乐（Backlog）</a></li>
</ul>
<h2 id="remove-untracked-files"><a href="#remove-untracked-files" class="headerlink" title="remove untracked files"></a>remove untracked files</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git clean -d -f<br>$ git clean --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree" target="_blank" rel="noopener">branch - How to remove local (untracked) files from the current Git working tree? - Stack Overflow</a></p>
</blockquote>
<h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><ul>
<li><p>Git 还提供了一个 stash 功能，可以把当前工作状态“储藏”起来，等以后恢复现场后继续工作。</p>
</li>
<li><p>查看 stash 的列表：<code>git stash list</code></p>
</li>
<li><p>恢复：<code>git stash pop</code> 或者 <code>git stash apply</code></p>
<blockquote>
<p>一是用 git stash apply 恢复，但是恢复后，stash 内容并不删除，你需要用 git stash drop 来删除；<br>另一种方式是用 git stash pop，恢复的同时把 stash 内容也删了：</p>
</blockquote>
</li>
<li><p>参考资料：<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000" target="_blank" rel="noopener">Bug 分支</a></p>
</li>
</ul>
<h2 id="添加注释的技巧"><a href="#添加注释的技巧" class="headerlink" title="添加注释的技巧"></a>添加注释的技巧</h2><p>参考<code>golang.org/x/net</code>的提交日志：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">* 92b859f - ipv6: update icmp parameters (4 days ago) &lt;Mikio Hara&gt;<br>* 344b2e3 - ipv4: update icmp parameters (4 days ago) &lt;Mikio Hara&gt;<br>* 08b7f81 - internal/iana: add address family number constants (4 days ago) &lt;Mikio Hara&gt;<br>* a4c73ec - icmp: use subtests (4 days ago) &lt;Mikio Hara&gt;<br>* 24dd378 - dns/dnsmessage: reject compressed SRV resource records (6 days ago) &lt;Ian Gudger&gt;<br>* e0c57d8 - CONTRIBUTING.md: remove note about not accepting Pull Requests (9 days ago) &lt;Andrew Bonventre&gt;<br>* 892bf7b - dns/dnsmessage: correctly handle multiple and &gt;255 byte TXT records (10 days ago) &lt;Ian Gudger&gt;<br>* 803fdb9 - ipv4, ipv6, icmp, internal/socket: fix build on netbsd/arm (10 days ago) &lt;Mikio Hara&gt;<br>* ae89d30 - route: avoid unnecessary <span class="hljs-built_in">type</span> conversions (12 days ago) &lt;namusyaka&gt;<br>* d0aafc7 - trace: fix races on concurrent Trace method calls (2 weeks ago) &lt;David Howden&gt;<br></code></pre></td></tr></table></figure>

<p>名称最好简洁、准确，<br>可以总结：<code>模块: 动词 + 名词；</code><br>动词：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>add<br><span class="hljs-bullet">- </span>update<br><span class="hljs-bullet">- </span>fix<br><span class="hljs-bullet">- </span>remove<br><span class="hljs-bullet">- </span>simply<br><span class="hljs-bullet">- </span>enable<br><span class="hljs-bullet">- </span>disable<br><span class="hljs-bullet">- </span>rename<br></code></pre></td></tr></table></figure>

<h2 id="delete-all-tags"><a href="#delete-all-tags" class="headerlink" title="delete all tags"></a><a href="https://stackoverflow.com/questions/19542301/delete-all-tags-from-a-git-repository" target="_blank" rel="noopener">delete all tags</a></h2><p>To delete remote tags (before deleting local tags) simply do:</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">-l</span> | grep v2 -v | xargs -n <span class="hljs-number">1</span> git push --delete origin<br></code></pre></td></tr></table></figure>

<p>and then delete the local copies:</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">-l</span> | grep v2 -v | xargs git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span><br></code></pre></td></tr></table></figure>

<h2 id="How-do-you-rename-a-Git-tag"><a href="#How-do-you-rename-a-Git-tag" class="headerlink" title="How do you rename a Git tag?"></a><a href="https://stackoverflow.com/questions/1028649/how-do-you-rename-a-git-tag" target="_blank" rel="noopener">How do you rename a Git tag?</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git tag new old<br>git tag -d old<br>git push origin :refs/tags/old<br>git push --tags<br><br>git pull --prune --tags <span class="hljs-comment"># Finally, make sure that the other users remove the deleted tag. Please tell them (co-workers) to run the following command</span><br></code></pre></td></tr></table></figure>

<h2 id="Remove-a-file-from-a-Git-repository-without-deleting-it-from-the-local-filesystem"><a href="#Remove-a-file-from-a-Git-repository-without-deleting-it-from-the-local-filesystem" class="headerlink" title="Remove a file from a Git repository without deleting it from the local filesystem"></a><a href="https://stackoverflow.com/questions/1143796/remove-a-file-from-a-git-repository-without-deleting-it-from-the-local-filesyste" target="_blank" rel="noopener">Remove a file from a Git repository without deleting it from the local filesystem</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># For single file:</span><br>git rm --cached mylogfile.log<br><br><span class="hljs-comment"># For single directory:</span><br>git rm --cached -r mydirectory<br></code></pre></td></tr></table></figure>

<h2 id="git-delete-remotes-remote-refs-do-not-exist-Stack-Overflow"><a href="#git-delete-remotes-remote-refs-do-not-exist-Stack-Overflow" class="headerlink" title="git delete remotes: remote refs do not exist - Stack Overflow"></a><a href="https://stackoverflow.com/questions/32147093/git-delete-remotes-remote-refs-do-not-exist" target="_blank" rel="noopener">git delete remotes: remote refs do not exist - Stack Overflow</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># You may need to prune your local "cache" of remote branches first. Try running:</span><br>git fetch -p origin<br><span class="hljs-comment"># or</span><br>git fetch --prune origin<br></code></pre></td></tr></table></figure>

<h2 id="How-to-revert-multiple-git-commits-Stack-Overflow"><a href="#How-to-revert-multiple-git-commits-Stack-Overflow" class="headerlink" title="How to revert multiple git commits? - Stack Overflow"></a><a href="https://stackoverflow.com/questions/1463340/how-to-revert-multiple-git-commits" target="_blank" rel="noopener">How to revert multiple git commits? - Stack Overflow</a></h2><p><em>Expanding what I wrote in a comment</em></p>
<p>The general rule is that you should not rewrite (change) history that you have published, because somebody might have based their work on it. If you rewrite (change) history, you would make problems with merging their changes and with updating for them.</p>
<p>So the solution is to create a <em>new commit</em> which <strong>reverts changes</strong> that you want to get rid of. You can do this using <a href="http://www.kernel.org/pub/software/scm/git/docs/git-revert.html" target="_blank" rel="noopener">git revert</a> command.</p>
<p>You have the following situation:</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">A</span> &lt;-- <span class="hljs-comment">B</span>  &lt;-- <span class="hljs-comment">C</span> &lt;-- <span class="hljs-comment">D</span>                                  &lt;-- <span class="hljs-comment">master</span> &lt;-- <span class="hljs-comment">HEAD</span><br></code></pre></td></tr></table></figure>

<p>(arrows here refers to the direction of the pointer: the “parent” reference in the case of commits, the top commit in the case of branch head (branch ref), and the name of branch in the case of HEAD reference).</p>
<p>What you need to create is the following:</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">A</span> &lt;-- <span class="hljs-comment">B</span>  &lt;-- <span class="hljs-comment">C</span> &lt;-- <span class="hljs-comment">D</span> &lt;-- <span class="hljs-title">[</span><span class="hljs-comment">(BCD)</span><span class="hljs-literal">-</span><span class="hljs-comment">1</span><span class="hljs-title">]</span>                   &lt;-- <span class="hljs-comment">master</span> &lt;-- <span class="hljs-comment">HEAD</span><br></code></pre></td></tr></table></figure>

<p>where <code>[(BCD)^-1]</code> means the commit that reverts changes in commits B, C, D. Mathematics tells us that (BCD)-1 = D-1 C-1 B-1, so you can get the required situation using the following commands:</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git revert --<span class="hljs-keyword">no</span>-commit D<br><span class="hljs-symbol">$</span> git revert --<span class="hljs-keyword">no</span>-commit C<br><span class="hljs-symbol">$</span> git revert --<span class="hljs-keyword">no</span>-commit B<br><span class="hljs-symbol">$</span> git commit -m <span class="hljs-string">"the commit message for all of them"</span><br></code></pre></td></tr></table></figure>

<p>Works for everything except merge commits.</p>
<hr>
<p>Alternate solution would be to <a href="http://git-scm.com/docs/git-checkout" target="_blank" rel="noopener">checkout</a> <em>contents</em> of commit A, and commit this state. Also works with merge commits. Added files will not be deleted, however. If you have any local changes <code>git stash</code> them first:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>git checkout -f A -- . <span class="hljs-comment"># checkout that revision over the top of local files</span><br><span class="hljs-variable">$ </span>git commit -a<br></code></pre></td></tr></table></figure>

<p>Then you would have the following situation:</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">A</span> &lt;-- <span class="hljs-comment">B</span>  &lt;-- <span class="hljs-comment">C</span> &lt;-- <span class="hljs-comment">D</span> &lt;-- <span class="hljs-comment">A'</span>                       &lt;-- <span class="hljs-comment">master</span> &lt;-- <span class="hljs-comment">HEAD</span><br></code></pre></td></tr></table></figure>

<p>The commit A’ has the same contents as commit A, but is a different commit (commit message, parents, commit date).</p>
<hr>
<p>Alternate <a href="https://stackoverflow.com/questions/1463340/revert-multiple-git-commits/1463390#comment1312779_1463390" target="_blank" rel="noopener">solution by Jeff Ferland, modified by Charles Bailey</a> builds upon the same idea, but uses <a href="https://www.kernel.org/pub/software/scm/git/docs/git-reset.html" target="_blank" rel="noopener">git reset</a>. Here it is slightly modified, this way WORKS FOR EVERYTHING:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard A</span><br>$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--soft D # (or ORIG_HEAD or @&#123;1&#125; [previous location of HEAD]), all of which are D</span><br>$ git <span class="hljs-keyword">commit</span><br></code></pre></td></tr></table></figure>

<h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><p>统计 tag1 和 tag2 之间的行数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> tag1..tag2 --pretty=tformat: --numstat | gawk <span class="hljs-string">'&#123; add += $1 ; subs += $2 ; loc += $1 + $2 &#125; END &#123; printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc &#125;'</span><br><br><span class="hljs-comment"># 或者</span><br>git <span class="hljs-built_in">log</span> tag1..tag2 --pretty=tformat: --numstat | awk <span class="hljs-string">'&#123; add += $1 ; subs += $2 ; loc += $1 + $2 &#125; END &#123; printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc &#125;'</span><br></code></pre></td></tr></table></figure>

<p>统计某个人修改的代码行数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 当前作者</span><br>git <span class="hljs-built_in">log</span> --author=<span class="hljs-string">"<span class="hljs-variable">$(git config --get user.name)</span>"</span> --pretty=tformat: --numstat | gawk <span class="hljs-string">'&#123; add += $1 ; subs += $2 ; loc += $1 + $2 &#125; END &#123; printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc &#125;'</span><br><br><span class="hljs-comment"># 或者修改 username 为此人名字</span><br>git <span class="hljs-built_in">log</span> --author=<span class="hljs-string">"username"</span> --pretty=tformat: --numstat | awk <span class="hljs-string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -<br></code></pre></td></tr></table></figure>

<p>按个人分别统计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --format=<span class="hljs-string">'%aN'</span> | sort -u | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> name; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> -en <span class="hljs-string">"<span class="hljs-variable">$name</span>\t"</span>; git <span class="hljs-built_in">log</span> --author=<span class="hljs-string">"<span class="hljs-variable">$name</span>"</span> --pretty=tformat: --numstat | awk <span class="hljs-string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>

<p>统计总行数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span>  --pretty=tformat: --numstat | awk <span class="hljs-string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -<br></code></pre></td></tr></table></figure>

<p>按时间范围统计个人行数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --since=<span class="hljs-string">"2020-01-08"</span> --before=<span class="hljs-string">"2021-11-14"</span> --author=<span class="hljs-string">"lilou"</span> \<br>--pretty=tformat: --numstat | awk <span class="hljs-string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "新增行数: %s, 移除行数: %s, 总行数: %s\n", add, subs, loc &#125;'</span><br></code></pre></td></tr></table></figure>

<p>仓库提交排名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --pretty=<span class="hljs-string">'%aN'</span> | sort | uniq -c | sort -k1 -n -r | head -n 5<br></code></pre></td></tr></table></figure>

<p>贡献者统计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --pretty=<span class="hljs-string">'%aN'</span> | sort -u | wc -l<br></code></pre></td></tr></table></figure>
<p>提交数统计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline | wc -l<br></code></pre></td></tr></table></figure>
<ul>
<li><a href="https://blog.csdn.net/JiangJsf/article/details/83686749" target="_blank" rel="noopener">git 统计两个不同版本代码修改行数_JiangJsf 的博客-CSDN 博客</a></li>
<li><a href="https://blog.csdn.net/qinchao_mei/article/details/112172432" target="_blank" rel="noopener">GIT 统计代码量及 IDEA Statistic 统计解析_超人不会飞-CSDN 博客</a></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p>《GitHub 入门与实践》</p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzA4MjU5NTY0NA==&mid=401074259&idx=1&sn=6e69ce5338eb5d9212953068165c1cd0&mpshare=1&scene=23&srcid=1122laeBDuW58x2VncUQ44xs" target="_blank" rel="noopener">10 组最常用 Git 命令</a></p>
</li>
<li><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git 教程-廖雪峰</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">Git 远程操作详解</a></p>
</li>
<li><p><a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/30.md" target="_blank" rel="noopener">第 30 天：分享工作中幾個好用的 Git 操作技巧</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/hutaoer/archive/2013/05/14/3078191.html" target="_blank" rel="noopener">^和~的区别</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">- `^`代表父提交,当一个提交有多个父提交时，可以通过在`^`后面跟上一个数字，表示第几个父提交，`^`相当于`^1`<br>- `~`&lt;n&gt;相当于连续的&lt;n&gt;个`^`.<br>- checkout只会移动HEAD指针，reset会改变HEAD的引用值<br></code></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle学习</title>
    <url>/gradle/Gradle%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Gradle 是以 Groovy 语言为基础，面向 Java 应用为主，基于 DSL 语法的自动化构建工具。</p>
<h1 id="如何自动化打包（含签名的）"><a href="#如何自动化打包（含签名的）" class="headerlink" title="如何自动化打包（含签名的）"></a>如何自动化打包（含签名的）</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1、将准备好的<code>keystore</code>签名文件放在根目录下；（目的是待会儿配置 build.gradle 文件时，可以直接通过指定路径引用）<br>2、在 module 级别的 build.gradle 中添加如下配置代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">android &#123;<br>    <span class="hljs-comment">// ...</span><br>    signingConfigs &#123;<br>        myConfig &#123;<br>            storeFile file(<span class="hljs-string">"lyloou.keystore"</span>)<br>            storePassword <span class="hljs-string">"lyloou"</span><br>            keyAlias <span class="hljs-string">"lyloou"</span><br>            keyPassword <span class="hljs-string">"lyloou"</span><br>        &#125;<br>    &#125;<br><br>    buildTypes &#123;<br>        release &#123;<br>            signingConfig signingConfigs.myConfig<br>            minifyEnabled <span class="hljs-literal">false</span><br>            proguardFiles getDefaultProguardFile(<span class="hljs-string">'proguard-android.txt'</span>), <span class="hljs-string">'proguard-rules.pro'</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>3、执行<code>gradle clean</code>清理之前的自动生成文件；<br>4、执行<code>gradle build</code>开始生成文件；<br>5、在<code>build/outputs/apk/</code>文件夹中可以看到生成成功的 apk 文件；</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>通过执行<code>gradle build</code>自动生成的文件包含：</p>
<ul>
<li>[项目名]-debug-unaligned.apk：指的是调试模式，没有优化的 apk（可直接安装）</li>
<li>[项目名]-release-unsigned.apk：指的是没有签名的 apk（不可直接安装）</li>
<li>[项目名]-debug.apk：指的是已经签名过的调试版 apk；</li>
<li>[项目名]-release.apk：指的是已经签名过的发布版 apk；</li>
</ul>
<h2 id="扩展技巧"><a href="#扩展技巧" class="headerlink" title="扩展技巧"></a>扩展技巧</h2><ul>
<li>敏感信息保存到<code>gradle.properties</code>文件中，具体参考 <a href="https://www.kancloud.cn/thinkphp/android-best-practices/42169" target="_blank" rel="noopener">Gradle 配置</a></li>
<li>自动化命名并输出 apk，具体参考<a href="https://github.com/lyloou/hexo/blob/master/source/_posts/tech/build.gradle%E9%85%8D%E7%BD%AE.md" target="_blank" rel="noopener">build.gradle 配置</a></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://stormzhang.com/android/2014/02/28/android-gradle/" target="_blank" rel="noopener">ANDROID GRADLE</a></li>
</ul>
<h1 id="如何根据环境自动选择-key-或其他配置信息"><a href="#如何根据环境自动选择-key-或其他配置信息" class="headerlink" title="如何根据环境自动选择 key 或其他配置信息"></a>如何根据环境自动选择 key 或其他配置信息</h1><h2 id="动态替换AndroidManifest-xml中的-key-信息"><a href="#动态替换AndroidManifest-xml中的-key-信息" class="headerlink" title="动态替换AndroidManifest.xml中的 key 信息"></a>动态替换<code>AndroidManifest.xml</code>中的 key 信息</h2><ol>
<li>在<code>AndroidManifest</code>中添加占位符</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">"$&#123;WECHATAPPID&#125;"</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<ol start="2">
<li>在<code>build.gradle</code>中的<code>defaultConfig</code>标签或者<code>buildTypes</code>的 debug 和 release 标签下定义具体 value</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">defaultConfig &#123;<br>    manifestPlaceholders = [WECHATAPPID: <span class="hljs-string">"wxea2xxxxxxxxxxxxxxx"</span>]<br>&#125;<br></code></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">debug &#123;<br>    manifestPlaceholders = [WECHATAPPID: <span class="hljs-string">"wxea2xxxxxxxxxxxxxxx1"</span>]<br>&#125;<br><br>release &#123;<br>    manifestPlaceholders = [WECHATAPPID: <span class="hljs-string">"wxea2xxxxxxxxxxxxxxx2"</span>]<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="通过BuildConfig定义值"><a href="#通过BuildConfig定义值" class="headerlink" title="通过BuildConfig定义值"></a>通过<code>BuildConfig</code>定义值</h2><p>在不同的环境中设置不同的值，这样在打包（测试环境或正式环境）的时候就会有不同的值。注意定义完成后，要重新编译下环境，这样才能在 BuildConfig.java 中生效；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">debug &#123;<br>    buildConfigField <span class="hljs-string">"boolean"</span>, <span class="hljs-string">"TEST_ENV"</span>, <span class="hljs-string">"true"</span><br>&#125;<br><br>release &#123;<br>    buildConfigField <span class="hljs-string">"boolean"</span>, <span class="hljs-string">"TEST_ENV"</span>, <span class="hljs-string">"false"</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>在代码中引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> TEST_ENV = BuildConfig.TEST_ENV;<br></code></pre></td></tr></table></figure>

<h2 id="在编译之前执行脚本"><a href="#在编译之前执行脚本" class="headerlink" title="在编译之前执行脚本"></a>在编译之前执行脚本</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 在 settings.gradle 最上方添加</span><br><span class="hljs-keyword">def</span> updateDependencies()&#123;<br>    <span class="hljs-keyword">def</span> command = <span class="hljs-string">"sh install.sh"</span><br>    exec &#123;<br>        executable <span class="hljs-string">"bash"</span><br>        args <span class="hljs-string">"-c"</span>, command<br>    &#125;<br>&#125;<br><br>updateDependencies()<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo集成travis自动部署</title>
    <url>/hexo/hexo%E9%9B%86%E6%88%90travis/</url>
    <content><![CDATA[<h2 id="自动化前-VS-后"><a href="#自动化前-VS-后" class="headerlink" title="自动化前 VS 后"></a>自动化前 VS 后</h2><h3 id="没有-travis-的流程"><a href="#没有-travis-的流程" class="headerlink" title="没有 travis 的流程"></a>没有 travis 的流程</h3><p>每次写完文章后，要手动运行以下命令部署</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">hexo clean --config <span class="hljs-built_in">source</span>/_data/next.yml &amp;&amp;<br>hexo g --config <span class="hljs-built_in">source</span>/_data/next.yml &amp;&amp;<br>hexo d --config <span class="hljs-built_in">source</span>/_data/next.yml<br></code></pre></td></tr></table></figure>

<h3 id="基于-travis-的自动部署流程"><a href="#基于-travis-的自动部署流程" class="headerlink" title="基于 travis 的自动部署流程"></a>基于 travis 的自动部署流程</h3><p>有了 travis，写好文章后，只需推送代码到 GitHub 仓库。其他的部署操作都由 travis 自动完成：</p>
<ol>
<li>提交并推送代码到 GitHub；</li>
<li>Travis Ci 监听到 GitHub 仓库发生变化，开始依据 <code>.travis.yml</code> 脚本构建项目；</li>
<li>Travis Ci 构建完成后将生成的最终文件推送到 GitHub；</li>
</ol>
<h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><h3 id="Permission-denied"><a href="#Permission-denied" class="headerlink" title="Permission denied"></a>Permission denied</h3><p>原因：脚本没有运行权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">$ ./run_d.sh<br>/home/travis/.travis/job_stages: line 104: ./run_d.sh: Permission denied<br>The <span class="hljs-built_in">command</span> <span class="hljs-string">"./run_d.sh"</span> exited with 126.<br></code></pre></td></tr></table></figure>

<p>在 <code>.travis.yml</code>的 <code>before_install:</code>阶段添加<code>x</code>权限：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-string">chmod</span> <span class="hljs-string">+x</span> <span class="hljs-string">./run_d.sh</span><br></code></pre></td></tr></table></figure>

<h3 id="Permission-denied-publickey"><a href="#Permission-denied-publickey" class="headerlink" title="Permission denied (publickey)"></a>Permission denied (publickey)</h3><p>Q:</p>
<blockquote>
<p>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights</p>
</blockquote>
<p>A:</p>
<blockquote>
<p>If you want to push via ssh then travis needs to have access to the private part of the ssh key you generated. What you want to do is use the travis cli gem to encrypt the private key, add it to your repo and during the deploy stage decrypt it again and use it. Here’s a <a href="https://github.com/lyloou/learn-travis/blob/master/encrypted-ssh-keys-deployment.md" target="_blank" rel="noopener">step-by-step</a></p>
</blockquote>
<p>为了能将 travis 构建后的文件推送到 github，需要：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 以下操作匀在客户端</span><br>sudo apt install ruby<br>sudo apt install ruby​​-dev<br>sudo gem install tr​​avis<br><br><span class="hljs-comment"># 1. 生成ssh密钥</span><br>ssh-keygen -C <span class="hljs-string">"lyloou@qq.com"</span> -t rsa -b 2048 -f ~/.ssh/hexo<br><span class="hljs-comment"># 2. 将公钥内容贴到Github上项目的 「Settings -&gt; Deploy keys -&gt; Add deploy key」</span><br><span class="hljs-comment"># 3. 登录travis（会自动生成 ~/.travis/config.yml 文件）</span><br>travis login --auto<br><span class="hljs-comment"># 4. 在你的项目中运行以下命令，加密刚才生成的私钥，生成 hexo.enc 文件。 （注意提示内容，不要把密钥给提交到仓库了）</span><br>travis encrypt-file ~/.ssh/hexo --add<br></code></pre></td></tr></table></figure>

<p>上面的第 4 步，做了这几件事：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">- 加密ssh私钥, 生成一个hexo.enc。这个文档需要放到项目里，上面的输出已经提示了，千万别把原始的私钥放进去了~~<br>- 相应的解密k/v值以环境变量方式存在Travis CI上, 见Travis CI上项目的「More options -&gt; Settings -&gt; Environment Variables」<br>- 将解密命令自动写入到本地项目的 .travis.yml 里<br></code></pre></td></tr></table></figure>

<p>加密之后的<code>hexo.enc</code>文件，只有 travis 能解密使用。<br>因为在 login 的时候，将解密的密钥存放到<code>Environment Variables</code>中了，拿不到这个就无法解密还原了。</p>
<p>接着通过 ssh_agent 的方式配置<code>ssh client</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">before_install:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">openssl</span> <span class="hljs-string">aes-256-cbc</span> <span class="hljs-string">-K</span> <span class="hljs-string">$encrypted_f9a8a4d68f34_key</span> <span class="hljs-string">-iv</span> <span class="hljs-string">$encrypted_f9a8a4d68f34_iv</span><br>    <span class="hljs-string">-in</span> <span class="hljs-string">wiki.enc</span> <span class="hljs-string">-out</span> <span class="hljs-string">~/.ssh/id_rsa</span> <span class="hljs-string">-d</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">eval</span> <span class="hljs-string">$(ssh-agent)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ssh-add</span> <span class="hljs-string">~/.ssh/id_rsa</span><br></code></pre></td></tr></table></figure>

<h2 id="最终配置"><a href="#最终配置" class="headerlink" title="最终配置"></a>最终配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">language:</span> <span class="hljs-string">node_js</span><br><span class="hljs-attr">node_js:</span> <span class="hljs-string">stable</span><br><span class="hljs-attr">branches:</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source</span><br><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">apt:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">yarn:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">directories:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">node_modules</span><br><span class="hljs-attr">before_install:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">openssl</span> <span class="hljs-string">aes-256-cbc</span> <span class="hljs-string">-K</span> <span class="hljs-string">$encrypted_a685f241ac15_key</span> <span class="hljs-string">-iv</span> <span class="hljs-string">$encrypted_a685f241ac15_iv</span><br>    <span class="hljs-string">-in</span> <span class="hljs-string">hexo.enc</span> <span class="hljs-string">-out</span> <span class="hljs-string">~/.ssh/id_rsa</span> <span class="hljs-string">-d</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">eval</span> <span class="hljs-string">$(ssh-agent)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ssh-add</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">export</span> <span class="hljs-string">TZ='Asia/Shanghai'</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.name</span> <span class="hljs-string">"$USER_NAME"</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.email</span> <span class="hljs-string">"$USER_EMAIL"</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">curl</span> <span class="hljs-string">-o-</span> <span class="hljs-string">-L</span> <span class="hljs-string">https://yarnpkg.com/install.sh</span> <span class="hljs-string">|</span> <span class="hljs-string">bash</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">export</span> <span class="hljs-string">PATH=$HOME/.yarn/bin:$PATH</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">-g</span> <span class="hljs-string">hexo-cli</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">chmod</span> <span class="hljs-string">+x</span> <span class="hljs-string">./run_d.sh</span><br><span class="hljs-attr">install:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">yarn</span><br><span class="hljs-attr">script:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">./run_d.sh</span><br><span class="hljs-attr">after_success:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">"oked!"</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">global:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">USER_NAME:</span> <span class="hljs-string">lyloou</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">USER_EMAIL:</span> <span class="hljs-string">lyloou@qq.com</span><br></code></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在 GitHub 的<code>Readme.md</code>中显示构建结果</p>
<figure class="highlight md"><table><tr><td class="code"><pre><code class="hljs md">[<span class="hljs-string">build-info</span>](<span class="hljs-link">https://travis-ci.org/userName/repoName.svg</span>)<br></code></pre></td></tr></table></figure>

<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p>Q: travis-ci node-sass: Command failed.<br>A: <a href="https://github.com/travis-ci/travis-ci/issues/9561" target="_blank" rel="noopener">https://github.com/travis-ci/travis-ci/issues/9561</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://segmentfault.com/a/1190000009054888" target="_blank" rel="noopener">使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器 - 我的儿子叫酸奶 - SegmentFault 思否</a></li>
<li><a href="https://hk.saowen.com/a/8edd77efe1c7f306f67e7c71e764ad76184d9ff3675d6dcfc9913d913be24cbd" target="_blank" rel="noopener">Simiki 基于 Github Pages 配合 Travis CI 做持续集成 - 扫文资讯</a></li>
<li><a href="https://segmentfault.com/a/1190000004667156" target="_blank" rel="noopener">用 Travis CI 自动部署 hexo - ac 黄博客精选 - SegmentFault 思否</a></li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Gradle编译时的版本冲突</title>
    <url>/gradle/%E8%A7%A3%E5%86%B3gradle%E7%BC%96%E8%AF%91%E6%97%B6%E7%9A%84%E7%89%88%E6%9C%AC%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<h2 id="方法-1：排除冲突的依赖"><a href="#方法-1：排除冲突的依赖" class="headerlink" title="方法 1：排除冲突的依赖"></a>方法 1：排除冲突的依赖</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看 app 模块所依赖的项目（通过 grep 来过滤冲突的模块名称）</span><br>./gradlew -q app:dependencies | grep commons-codec<br></code></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 针对某个冲突模块排除</span><br>api(<span class="hljs-string">"com.afollestad.material-dialogs:core:0.9.5.0"</span>) &#123;<br>    exclude group: <span class="hljs-string">'com.android.support'</span>, module: <span class="hljs-string">'support-v13'</span><br>    exclude group: <span class="hljs-string">'com.android.support'</span>, module: <span class="hljs-string">'support-vector-drawable'</span><br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 重置所有相同模块的版本号</span><br>configurations.all &#123;<br>    resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;<br>        def requested = details.requested<br>        <span class="hljs-keyword">if</span> (requested.group == <span class="hljs-string">'com.android.support'</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!requested.name.startsWith(<span class="hljs-string">"multidex"</span>)) &#123;<br>                details.useVersion <span class="hljs-string">'28.0.0'</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="方法-2：使用-androidx"><a href="#方法-2：使用-androidx" class="headerlink" title="方法 2：使用 androidx"></a>方法 2：使用 androidx</h2><p>如果是 <code>com.android.support</code> 库冲突可以使用 androidx 来解决。</p>
<p>具体查看 <a href="https://developer.android.google.cn/jetpack/androidx/migrate" target="_blank" rel="noopener">迁移到 AndroidX  |  Android 开发者  |  Android Developers</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.csdn.net/yuzhiqiang_1993/article/details/78214812" target="_blank" rel="noopener">com.android.support 版本冲突的解决办法<em>移动开发</em>喻志强的博客-CSDN 博客</a></li>
<li><a href="https://blog.csdn.net/yuzhiqiang_1993/article/details/78366985" target="_blank" rel="noopener">implementation、api、compileOnly 区别详解<em>移动开发</em>喻志强的博客-CSDN 博客</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP笔记</title>
    <url>/http/HTTP%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><a href="http://www.cnblogs.com/TankXiao/archive/2012/02/06/2337728.html" target="_blank" rel="noopener">Fiddler 教程 - 小坦克 - 博客园</a></li>
</ul>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><ul>
<li><a href="http://www.cnblogs.com/TankXiao/archive/2012/02/13/2342672.html" target="_blank" rel="noopener">HTTP协议详解 - 小坦克 - 博客园</a></li>
<li><a href="http://www.cnblogs.com/TankXiao/archive/2012/12/12/2794160.html" target="_blank" rel="noopener">HTTP协议 (五) 代理 - 小坦克 - 博客园</a></li>
</ul>
<h2 id="post-amp-get"><a href="#post-amp-get" class="headerlink" title="post &amp; get"></a>post &amp; get</h2><ul>
<li><a href="https://www.xuyimin.club/article/15" target="_blank" rel="noopener">Post与Get请求</a></li>
<li><a href="http://uule.iteye.com/blog/2302713" target="_blank" rel="noopener">关于 HTTP GET/POST 请求参数长度最大值的一个理解误区</a></li>
</ul>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ul>
<li><a href="http://www.cnblogs.com/fish-li/archive/2011/07/03/2096903.html" target="_blank" rel="noopener">细说Cookie</a></li>
<li><a href="http://www.cnblogs.com/TankXiao/archive/2013/04/15/2848906.html" target="_blank" rel="noopener">HTTP协议 (七) Cookie - 小坦克 - 博客园</a></li>
</ul>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/25484889" target="_blank" rel="noopener">程序猿必读-防范CSRF跨站请求伪造</a></li>
</ul>
<h2 id="Oauth2-0"><a href="#Oauth2-0" class="headerlink" title="Oauth2.0"></a>Oauth2.0</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">理解OAuth 2.0 - 阮一峰的网络日志</a></li>
</ul>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>用GitHub Page和Hexo搭建个人博客</title>
    <url>/hexo/%E7%94%A8GitHub%20Page%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li>
<li>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git </a></li>
<li>安装Hexo（所有操作均在Windows自带的cmd命令行中运行：<code>npm install -g hexo</code>）</li>
<li>切换到博客目录并初始化：<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs js"># cd d:/w/hexo<br># hexo init<br></code></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">hexo generate  == hexo g<br>hexo server    == hexo s<br>hexo deploy    == hexo d<br>hexo <span class="hljs-keyword">new</span>       == hexo n<br></code></pre></td></tr></table></figure>

<h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><p>配置_config.yml</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">deploy:<br>  type: git<br>  repo: git@github.com:lyloou/lyloou.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure>

<p>安装部署</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">npm install hexo-deployer-git --save<br>hexo d<br></code></pre></td></tr></table></figure>

<h2 id="绑定独立域名"><a href="#绑定独立域名" class="headerlink" title="绑定独立域名"></a>绑定独立域名</h2><ul>
<li>在Hexo项目的Source中新建文件CNAME</li>
<li>添加<code>lyloou.com</code></li>
<li>然后<code>hexo d -g</code>上传即可</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul>
<li>执行了 <code>hexo d -g</code>后，未能成功部署到网站：请先clean一下，<code>hexo clean</code></li>
</ul>
<hr>
<h2 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h2><ul>
<li><a href="http://wenjunoy.com/2016/hexo-github-blog/" target="_blank" rel="noopener">在Github上搭建一个Hexo博客系统</a></li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Jcenter的一些总结</title>
    <url>/gradle/%E5%85%B3%E4%BA%8Ejcenter%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>本文介绍了将自己的库发布到jcenter相关的一些总结。</p>
<p>之所以有这篇文章，起源于这样一种原因：</p>
<blockquote>
<p>在AS中使用开源库很简单，只需要在<code>build.gradle</code>文件中添加一句命令即可。<br>如果我想要把自己积累的常用代码库也通过这种方式，那么我就可以在多个项目中使用，也可以开源给其他程序员使用。</p>
</blockquote>
<h2 id="初次配置（具体参考外部链接）"><a href="#初次配置（具体参考外部链接）" class="headerlink" title="初次配置（具体参考外部链接）"></a>初次配置（具体参考外部链接）</h2><ul>
<li>配置project的build.gradle文件；</li>
<li>配置lib的build.gradle文件；</li>
<li>在终端执行gradlew相关命令上传到jcenter；</li>
</ul>
<h2 id="更新版本库"><a href="#更新版本库" class="headerlink" title="更新版本库"></a>更新版本库</h2><ul>
<li><p>修改版本号；</p>
</li>
<li><p>完成清单<code>tool/Checklist.md</code>；</p>
</li>
<li><p>在命令行窗口执行下面命令（当发生错误时，参照错误提示进行修改）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">gradlew clean build bintrayUpload<br>  -PbintrayUser=「Your Name」<br>  -PbintrayKey=「API KEY」<br>  -PdryRun=<span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure>

<h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="https://github.com/hehonghui/android-tech-frontier/blob/master/issue-17/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Android-Studio%E6%8A%8A%E8%87%AA%E5%B7%B1%E7%9A%84Android-library%E5%88%86%E5%8F%91%E5%88%B0jCenter%E5%92%8CMaven-Central.md" target="_blank" rel="noopener">如何使用Android Studio把自己的Android library分发到jCenter和Maven Central</a></li>
<li><a href="http://wuxiaolong.me/2016/05/06/jcenter2/" target="_blank" rel="noopener">Android library分享到jcenter</a></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket编程</title>
    <url>/http/socket/</url>
    <content><![CDATA[<blockquote>
<p>Socket:<br>The unique combination of IP address and Port number together are termed as Socket.<br>REF: <a href="https://www.geeksforgeeks.org/basics-computer-networking/" target="_blank" rel="noopener">Basics of Computer Networking - GeeksforGeeks</a></p>
</blockquote>
<blockquote>
<p>socket 是一种操作系统提供的进程间通信机制。<br>REF: <a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E6%8F%92%E5%BA%A7" target="_blank" rel="noopener">网络套接字 - 维基百科，自由的百科全书</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcp-Ip</title>
    <url>/http/tcp-ip%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="为什么要分层？"><a href="#为什么要分层？" class="headerlink" title="为什么要分层？"></a>为什么要分层？</h2><ul>
<li>各层互相独立。<br>各层之间通过接口通信，接口不变，内部可以随意调整。降低了整个问题的复杂度。</li>
<li>灵活。<br>只要保证接口不变，技术革新不会引起其他层的变化。排除问题也需要只关注当前层。</li>
<li>结构上可分开。各层都可以采用最合适的技术来实现。<br>避免木桶效应，因为某一方面的技术不完善而影响 整体工作效率。</li>
<li>易于实现和维护。<br>将整个系统拆分成若干个相对独立的子系统。进行调试和维护时，可以对每一层单独调试，<br>易于排查和解决问题。</li>
<li>促进标准化工作。<br>精确定位各层的功能和服务。标准化后，可以随意替换某几层，对于使用和科研十分方便。</li>
</ul>
<hr>
<p>参考：</p>
<ul>
<li><a href="https://www.applysquare.com/topic-cn/V9UHWe49W/" target="_blank" rel="noopener">为什么计算机网络协议都是分层的？有什么好处？ - 申请方</a></li>
<li><a href="http://www.tech-faq.com/osi-model.html" target="_blank" rel="noopener">The OSI Model – What It Is; Why It Matters; Why It Doesn’t Matter.</a></li>
</ul>
<h2 id="分了哪几层？"><a href="#分了哪几层？" class="headerlink" title="分了哪几层？"></a>分了哪几层？</h2><p><img src="http://img.hb.aicdn.com/13cfad969ef263cbd2dbe10df1d7086630d909e298d1-ncE989_fw658" alt><br><img src="http://img.hb.aicdn.com/a5173f12197048ac74fc34c3cc44eb1ca0b9aa526c02-GQ8FwZ_fw658" alt></p>
<p>那 TCP/IP 是如何运作的呢？我们就拿妳常常连上的 Yahoo 入口网站来做个说明好了，整个联机的状态可以这样看：</p>
<p>应用程序阶段：妳打开浏览器，在浏览器上面输入网址列，按下 [Enter]。此时网址列与相关数据会被浏览器包成一个数据， 并向下传给 TCP/IP 的应用层；<br>应用层：由应用层提供的 HTTP 通讯协议，将来自浏览器的数据报起来，并给予一个应用层表头，再向传送层丢去；<br>传送层：由于 HTTP 为可靠联机，因此将该数据丢入 TCP 封包内，并给予一个 TCP 封包的表头，向网络层丢去；<br>网络层：将 TCP 包裹包进 IP 封包内，再给予一个 IP 表头 (主要就是来源与目标的 IP 啰)，向链结层丢去；<br>链结层：如果使用以太网络时，此时 IP 会依据 CSMA/CD 的标准，包裹到 MAC 讯框中，并给予 MAC 表头，再转成位串后， 利用传输媒体传送到远程主机上。<br>等到 Yahoo 收到你的包裹后，在依据相反方向拆解开来，然后交给对应的层级进行分析，最后就让 Yahoo 的 WWW 服务器软件得到你所想要的数据，该服务器软件再根据你的要求，取得正确的资料后，又依循上述的流程，一层一层的包装起来， 最后传送到你的手上！就是这样啰！</p>
<p>来源： <a href="http://cn.linux.vbird.org/linux_server/0110network_basic_1.php#ps4" target="_blank" rel="noopener">http://cn.linux.vbird.org/linux_server/0110network_basic_1.php#ps4</a></p>
<h2 id="TCP协议三次握手过程分析-一江水-博客园"><a href="#TCP协议三次握手过程分析-一江水-博客园" class="headerlink" title="TCP协议三次握手过程分析 - 一江水 - 博客园"></a><a href="https://www.cnblogs.com/rootq/articles/1377355.html" target="_blank" rel="noopener">TCP协议三次握手过程分析 - 一江水 - 博客园</a></h2><p>TCP(Transmission Control Protocol)传输控制协议<br>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>
<p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p>
<p>第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</p>
<p>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；<br>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</p>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用和配置</title>
    <url>/hexo/Hexo%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>主要内容：<br>本文介绍我在搭建本博客平台时用到的工具、插件，以及遇到的问题；</p>
<h2 id="文档管理工具"><a href="#文档管理工具" class="headerlink" title="文档管理工具"></a>文档管理工具</h2><p>Android Studio | IDEA</p>
<h3 id="通过-template-方便创建文档"><a href="#通过-template-方便创建文档" class="headerlink" title="通过 template 方便创建文档"></a>通过 template 方便创建文档</h3><p><code>File -&gt; Setting -&gt; Editor -&gt; File and Code Templates</code><br><code>--- title: ${NAME} date: ${DATE} ${TIME} toc: true comments: true tags: - ${Tag} ---</code></p>
<h2 id="教程、文档、API"><a href="#教程、文档、API" class="headerlink" title="教程、文档、API"></a>教程、文档、API</h2><p>网址：<code>https://hexo.io</code><br>安装 hexo 教程：<code>https://hexo.io/zh-cn/docs/</code></p>
<h2 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h2><p>网址：<code>https://hexo.io/themes/</code></p>
<h2 id="插入多媒体"><a href="#插入多媒体" class="headerlink" title="插入多媒体"></a>插入多媒体</h2><h4 id="插入图片："><a href="#插入图片：" class="headerlink" title="插入图片："></a>插入图片：</h4><pre><code><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 方式1，加入本地图片：</span><br><span class="hljs-comment">// 首先需要在source中加入文件夹images，并放入图片smile01.gif;</span><br>!<span class="hljs-selector-attr">[]</span>(/images/smile01.gif)<br><br><span class="hljs-comment">// 方式2，加入图床中的图片地址：</span><br>!<span class="hljs-selector-attr">[]</span>(图片地址)<br><br><span class="hljs-comment">// 方式3，获取到github的raw图片网址；</span><br></code></pre></td></tr></table></figure></code></pre><h4 id="插入音乐："><a href="#插入音乐：" class="headerlink" title="插入音乐："></a>插入音乐：</h4><pre><code><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"no"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">330</span> <span class="hljs-attr">height</span>=<span class="hljs-string">86</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">"http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre><h4 id="插入视频："><a href="#插入视频：" class="headerlink" title="插入视频："></a>插入视频：</h4><pre><code><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"no"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">330</span> <span class="hljs-attr">height</span>=<span class="hljs-string">86</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">"http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre><p>外部链接：</p>
<ul>
<li><a href="http://blog.wleyuan.me/2015/07/18/Hexo-AddSoundPicMovie/" target="_blank" rel="noopener">Hexo 博客添加图片、音乐、视频</a></li>
</ul>
<h2 id="自动更新目录结构"><a href="#自动更新目录结构" class="headerlink" title="自动更新目录结构"></a>自动更新目录结构</h2><p>对于需要手动管理的目录，可以通过自动生成脚本来实现目录链接<br>参考：<code>https://lyloou.com/life/create_md_link.sh</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">""</span><span class="hljs-string">"</span><br><span class="hljs-string">自动更新目录文件：</span><br><span class="hljs-string">获取当前目录。</span><br><span class="hljs-string"></span><br><span class="hljs-string">获取所有文件，排序：目录、文件，</span><br><span class="hljs-string">1. 如果是目录：生成【目录名/index.html链接】</span><br><span class="hljs-string">2. 如果是文件：生成【文件名.html链接】</span><br><span class="hljs-string"></span><br><span class="hljs-string">将1、2拼接后，放入本目录的index.html中。</span><br><span class="hljs-string">如果是目录，递归操作。</span><br><span class="hljs-string">"</span><span class="hljs-string">""</span><br><span class="hljs-function"><span class="hljs-title">create_md_link</span></span>() &#123;<br>    path=$(<span class="hljs-built_in">pwd</span>)<br><br>    files=$(ls <span class="hljs-variable">$path</span>)<br><br>    <span class="hljs-comment"># 当前文件</span><br>    title=<span class="hljs-string">"#### <span class="hljs-variable">$&#123;path##*/&#125;</span>\n"</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-variable">$title</span> &gt;index.md<br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">'\n###### 文件列表\n'</span> &gt;&gt;index.md<br><br>    <span class="hljs-comment"># 输出文件</span><br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> <span class="hljs-variable">$files</span>; <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span> [[ -f <span class="hljs-string">"<span class="hljs-variable">$filename</span>"</span> &amp;&amp; <span class="hljs-variable">$filename</span> =~ .*md$ ]]; <span class="hljs-keyword">then</span><br>            md_link=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$filename</span> | sed <span class="hljs-string">'s/\.[^.]*$//'</span>)<br>            md_link=<span class="hljs-string">"- [<span class="hljs-variable">$md_link</span>](<span class="hljs-variable">$md_link</span>.html)"</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-variable">$md_link</span> &gt;&gt;index.md<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">'\n###### 子目录列表\n'</span> &gt;&gt;index.md<br><br>    <span class="hljs-comment"># 输出目录</span><br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> <span class="hljs-variable">$files</span>; <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span> [ -d <span class="hljs-string">"<span class="hljs-variable">$filename</span>"</span> ]; <span class="hljs-keyword">then</span><br>            md_link=<span class="hljs-string">"- [<span class="hljs-variable">$filename</span>](./<span class="hljs-variable">$filename</span>/index.html)"</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-variable">$md_link</span> &gt;&gt;index.md<br>            <span class="hljs-built_in">cd</span> <span class="hljs-variable">$filename</span><br>            create_md_link<br>            <span class="hljs-built_in">cd</span> ..<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">"create md_files link success: <span class="hljs-variable">$path</span>"</span><br>&#125;<br><br>create_md_link<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><h3 id="Error-Local-hexo-not-found"><a href="#Error-Local-hexo-not-found" class="headerlink" title="Error Local hexo not found"></a>Error Local hexo not found</h3><p>具体描述：从 github 上直接克隆下来的源码，执行<code>hexo s</code>会出现错误：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error </span>Local hexo not found in /XXX<br><span class="hljs-keyword">Error </span>Try running: 'npm install hexo --save'<br></code></pre></td></tr></table></figure>

<p>原因分析：<br><code>.gitignore</code>文件中忽略了<code>node_modules</code>文件夹，所以从 github 上的克隆的源码中不存在此文件夹；</p>
<p>解决方案：<br>重新执行<code>npm install</code>命令即可；（用自带 CMD）<br>执行 <code>npm install</code>可能会出现失败的警告，有可能是 npm 版本问题：<br>执行下面命令来降低 npm 的版本：<br><code>npm install -g npm@3.3.12</code></p>
<p>外部连接：</p>
<ul>
<li><a href="http://blog.csdn.net/burststar/article/details/45115905" target="_blank" rel="noopener">用 Hexo 写博客 - ERROR Local hexo not found in xxx</a></li>
<li><a href="https://github.com/foreverjs/forever/issues/788" target="_blank" rel="noopener">npm WARN optional dep failed, continuing fsevents@1.0.6</a></li>
</ul>
<h3 id="add-Read-More"><a href="#add-Read-More" class="headerlink" title="add Read More"></a>add Read More</h3><p>方法：在需要截断的地方插入<code>&lt;!--more--&gt;</code>即可。<br>外部连接：<a href="http://twiceyuan.com/2014/05/25/hexo%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0readmore%E6%A0%87%E8%AE%B0/" target="_blank" rel="noopener">Hexo 自动添加 ReadMore 标记</a></p>
<blockquote>
<p>（解决问题的方法：将错误日志中的关键部分择取关键字交给 Google；）</p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>网络名词解释</title>
    <url>/http/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<p><a href="https://www.geeksforgeeks.org/basics-computer-networking/" target="_blank" rel="noopener">Basics of Computer Networking - GeeksforGeeks</a></p>
<h2 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h2><h3 id="幂等-百度百科"><a href="#幂等-百度百科" class="headerlink" title="幂等_百度百科"></a><a href="https://baike.baidu.com/item/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener">幂等_百度百科</a></h3><p>在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。</p>
<h3 id="理解HTTP幂等性-Todd-Wei-博客园"><a href="#理解HTTP幂等性-Todd-Wei-博客园" class="headerlink" title="理解HTTP幂等性 - Todd Wei - 博客园"></a><a href="https://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html" target="_blank" rel="noopener">理解HTTP幂等性 - Todd Wei - 博客园</a></h3><p>另一种更轻量级的解决方案是幂等设计。我们可以通过一些技巧把withdraw变成幂等的，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">create_ticket</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">bool <span class="hljs-title">idempotent_withdraw</span><span class="hljs-params">(ticket_id, account_id, amount)</span></span><br></code></pre></td></tr></table></figure>

<p>create_ticket的语义是获取一个服务器端生成的唯一的处理号ticket_id，它将用于标识后续的操作。idempotent_withdraw和withdraw的区别在于关联了一个ticket_id，一个ticket_id表示的操作至多只会被处理一次，每次调用都将返回第一次调用时的处理结果。这样，idempotent_withdraw就符合幂等性了，客户端就可以放心地多次调用。</p>
<p>基于幂等性的解决方案中一个完整的取钱流程被分解成了两个步骤：1.调用create_ticket()获取ticket_id；2.调用idempotent_withdraw(ticket_id, account_id, amount)。虽然create_ticket不是幂等的，但在这种设计下，它对系统状态的影响可以忽略，加上idempotent_withdraw是幂等的，所以任何一步由于网络等原因失败或超时，客户端都可以重试，直到获得结果。<br><img src="https://images.cnblogs.com/cnblogs_com/weidagang2046/201106/201106042051069339.png" alt></p>
<h3 id="POST-和-PUT-在幂等性方面有所不同"><a href="#POST-和-PUT-在幂等性方面有所不同" class="headerlink" title="POST 和 PUT 在幂等性方面有所不同"></a>POST 和 PUT 在幂等性方面有所不同</h3><blockquote>
<p>The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line …… If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header.<br>The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.<br>POST所对应的URI并非创建的资源本身，而是资源的接收者。<br>比如：POST <code>http://www.forum.com/articles</code>的语义是在<code>http://www.forum.com/articles</code>下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。而PUT所对应的URI是要创建或更新的资源本身。比如：PUT <code>http://www.forum/articles/4231</code>的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。  </p>
</blockquote>
<p><a href="https://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html" target="_blank" rel="noopener">https://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html</a></p>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>网络</title>
    <url>/http/%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p><img src="https://github.com/lyloou/img/raw/develop/network/sevenlayer.png" alt></p>
<ul>
<li><p><a href="http://blog.jobbole.com/97270/" target="_blank" rel="noopener">Linux TCP/IP 网络工具对比：net-tools 和 iproute2 - 文章 - 伯乐在线</a></p>
</li>
<li><p><a href="https://time.geekbang.org/column/article/7772" target="_blank" rel="noopener">第3讲 | ifconfig：最熟悉又陌生的命令行</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/21134017" target="_blank" rel="noopener">如何做到一个VPS一个公网IP的？</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>网络学习资料</title>
    <url>/http/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.geeksforgeeks.org/computer-network-tutorials/" target="_blank" rel="noopener">Computer Network Tutorials - GeeksforGeeks</a></li>
</ul>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>三次握手</title>
    <url>/http/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
    <content><![CDATA[<h2 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a>简单理解</h2><p>三资握手的目的是：确认自己的接收能力和发送能力OK，还要确认对方的接收能力和发送能力OK；</p>
<ol>
<li>A发送给B，B收到了； B知道自己的接收能力OK，对方的发送能力OK；</li>
<li>B回复给A，A收到了； A知道自己的接收能力OK，自己的发送能力OK，对方的接收能力OK，对方的发送能力OK；（但是B还不知道自己的发送能力和A的接收能力是否OK，所以需要第三次握手）</li>
<li>A发送给B，B收到了； B知道自己的发送能力OK；A的接收能力OK；</li>
</ol>
<h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h2><p><img src="https://github.com/lyloou/img/raw/develop/z/20190124151245.jpg" alt></p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><h3 id="为什么建链接要三次？"><a href="#为什么建链接要三次？" class="headerlink" title="为什么建链接要三次？"></a>为什么建链接要三次？</h3><p>保证能成功通知对方自己的ISN（Initial Sequence Number，这个ISN是作为自己以后数据通信的序号）。</p>
<blockquote>
<p>主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。</p>
</blockquote>
<h3 id="如何保证数据到达"><a href="#如何保证数据到达" class="headerlink" title="如何保证数据到达"></a>如何保证数据到达</h3><p>数据重传机制</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>客户端：C （192.168.103.34）<br>服务端：S （14.18.201.48）</p>
<p>第一次握手：<br>首先C发起连接请求 <code>[syn] Seq=2070720725</code>，<br>C进入SYN_SEND状态；<br><img src="https://github.com/lyloou/img/raw/develop/z/20190124145542.png" alt> </p>
<p>第二次握手：<br>接着S收到请求后，返回 <code>[syn ack] Seq=3747916590 Ack=2070720726</code><br>S进入SYN_RECV状态；<br><img src="https://github.com/lyloou/img/raw/develop/z/20190124145609.png" alt></p>
<p>第三次握手：<br>C收到S返回的信息，验证成功后返回确认信息 <code>[ack] Seq=2070720726 Ack=3747916590</code><br>C进入ESTABLISH状态。S收到后也进入ESTABLISH状态。<br><img src="https://github.com/lyloou/img/raw/develop/z/20190124145626.png" alt></p>
<p>注意：wireshark默认显示的sequence number是相对的数字 ，可以通过如下图的方式取消<br><img src="https://github.com/lyloou/img/raw/develop/z/20190124145823.png" alt></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="noopener">TCP 的那些事儿（上） | | 酷 壳 - CoolShell</a></li>
</ul>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】通过 Getter 方法引用，来比较两个对象是否相等</title>
    <url>/java/Equable/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>编写代码时，会经常需要编写两个对象是否相等的逻辑，一般会有如下做法</p>
<ol>
<li>直接写在业务代码中；</li>
<li>单独写个方法，业务代码中调用；</li>
<li>重写 equals 方法；</li>
</ol>
<p>上面这些做法，都比较复杂，如果属性太多或复杂点（如果是 list 和 map 就更复杂了），就需要编写更多的判断逻辑代码了。</p>
<h4 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h4><p>如果能只需要提供比较的方法引用列表，有个地方能自动方法引用取值，并比较就好了。</p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h4><ol>
<li>在 java8 中可以使用方法引用，如：People::getName；</li>
<li>可以将所有要比较的 Getter 保存到列表中；</li>
<li>在 比较的时候，根据 方法引用获取具体的值进行比较；</li>
<li>全部比较都相等了，就认为是相等的。</li>
</ol>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h4><ol>
<li>思路 1 适用于需要比较的字段少时，有一种情况是，需要比较的字段多，只想排除掉少量字段</li>
<li>通过注解来忽略指定的字段</li>
<li>获取全部字段，过滤掉忽略的字段，通过反射比较字段对应的值。</li>
</ol>
<h4 id="举个例子-1-改造前"><a href="#举个例子-1-改造前" class="headerlink" title="举个例子 1(改造前)"></a>举个例子 1(改造前)</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EqualDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Equable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-keyword">private</span> List&lt;EqualDemo&gt; list;<br>    <span class="hljs-keyword">private</span> Map&lt;String, EqualDemo&gt; map;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> EqualDemo) &#123;<br>            <span class="hljs-keyword">if</span> (!Objects.equals(((EqualDemo) obj).getId(), <span class="hljs-keyword">this</span>.getId())) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!Objects.equals(((EqualDemo) obj).getAge(), <span class="hljs-keyword">this</span>.getAge())) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!Objects.equals(((EqualDemo) obj).getUsername(), <span class="hljs-keyword">this</span>.getUsername())) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">final</span> List&lt;EqualDemo&gt; list1 = ((EqualDemo) obj).getList();<br>            <span class="hljs-keyword">final</span> List&lt;EqualDemo&gt; list2 = <span class="hljs-keyword">this</span>.getList();<br>            <span class="hljs-comment">// todo 比较 list1 和 list2</span><br><br>            <span class="hljs-keyword">final</span> Map&lt;String, EqualDemo&gt; map1 = ((EqualDemo) obj).getMap();<br>            <span class="hljs-keyword">final</span> Map&lt;String, EqualDemo&gt; map2 = <span class="hljs-keyword">this</span>.getMap();<br>            <span class="hljs-comment">// todo 比较 map1 和 map2</span><br><br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Objects.equals(<span class="hljs-keyword">this</span>, obj);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EqualDemoTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSimpleTrue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> EqualDemo s1 = <span class="hljs-keyword">new</span> EqualDemo();<br>        s1.setId(<span class="hljs-number">1</span>);<br>        s1.setUsername(<span class="hljs-string">"bob"</span>);<br><br>        <span class="hljs-keyword">final</span> EqualDemo s2 = <span class="hljs-keyword">new</span> EqualDemo();<br>        s2.setId(<span class="hljs-number">1</span>);<br>        s2.setUsername(<span class="hljs-string">"bob"</span>);<br><br>        <span class="hljs-comment">// // s1 和 s2 相等</span><br>        <span class="hljs-keyword">assert</span> s1.equals(s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="举个例子-2-改造后-指定需要比较的字段的-Getter-方法引用"><a href="#举个例子-2-改造后-指定需要比较的字段的-Getter-方法引用" class="headerlink" title="举个例子 2(改造后-指定需要比较的字段的 Getter 方法引用)"></a>举个例子 2(改造后-指定需要比较的字段的 Getter 方法引用)</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OnlyEqualDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Equable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-keyword">private</span> List&lt;OnlyEqualDemo&gt; list;<br>    <span class="hljs-keyword">private</span> Map&lt;String, OnlyEqualDemo&gt; map;<br><br><br>    <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;EqualGetter&lt;OnlyEqualDemo&gt;&gt; listOnlyEqualsToGetter() &#123;<br>        <span class="hljs-keyword">final</span> EqualGetter&lt;OnlyEqualDemo&gt; getId = OnlyEqualDemo::getId;<br>        <span class="hljs-keyword">return</span> Arrays.asList(<br>                getId,<br>                OnlyEqualDemo::getAge,<br>                OnlyEqualDemo::getUsername,<br>                OnlyEqualDemo::getList,<br>                OnlyEqualDemo::getMap<br>        );<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OnlyEqualDemoTest</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSimpleTrue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> OnlyEqualDemo s1 = <span class="hljs-keyword">new</span> OnlyEqualDemo();<br>        s1.setId(<span class="hljs-number">1</span>);<br>        s1.setUsername(<span class="hljs-string">"bob"</span>);<br><br>        <span class="hljs-keyword">final</span> OnlyEqualDemo s2 = <span class="hljs-keyword">new</span> OnlyEqualDemo();<br>        s2.setId(<span class="hljs-number">1</span>);<br>        s2.setUsername(<span class="hljs-string">"bob"</span>);<br><br>        <span class="hljs-comment">// // s1 和 s2 相等</span><br>        <span class="hljs-keyword">assert</span> s1.onlyEqualsTo(s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="举个例子-3-改造后-排除少量字段"><a href="#举个例子-3-改造后-排除少量字段" class="headerlink" title="举个例子 3(改造后-排除少量字段)"></a>举个例子 3(改造后-排除少量字段)</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IgnoreEqualDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Equable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@EqualIgnored</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@EqualIgnored</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-meta">@EqualIgnored</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-keyword">private</span> List&lt;IgnoreEqualDemo&gt; list;<br>    <span class="hljs-keyword">private</span> Map&lt;String, IgnoreEqualDemo&gt; map;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IgnoreEqualDemoTest</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSimpleTrue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> IgnoreEqualDemo s1 = <span class="hljs-keyword">new</span> IgnoreEqualDemo();<br>        s1.setId(<span class="hljs-number">1</span>);<br>        s1.setUsername(<span class="hljs-string">"bob"</span>);<br>        s1.setCreateTime(<span class="hljs-keyword">new</span> Date());<br><br>        <span class="hljs-keyword">final</span> IgnoreEqualDemo s2 = <span class="hljs-keyword">new</span> IgnoreEqualDemo();<br>        s2.setId(<span class="hljs-number">1</span>);<br>        s2.setUsername(<span class="hljs-string">"bob"</span>);<br><br>        <span class="hljs-comment">// // s1 和 s2 相等</span><br>        <span class="hljs-keyword">assert</span> s1.ignoreEqualsTo(s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这样就简洁很多了，由于 ignoreEqualsTo 和 onlyEqualsTo 方法是 Equable 接口中的默认方法，具体逻辑全封装起来了（包括 object, collection 和 map 的处理），不需要重写就可以直接使用，具体实现看下面的源码。</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><br><span class="hljs-keyword">import</span> java.beans.PropertyDescriptor;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.function.BiFunction;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比较两个对象是否相等</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/4/9 9:30</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> Equable#onlyEqualsTo(Equable) 方法1：通过 Getter方法引用 来指定需要比较的字段（场景：字段总量多，但是只需要比较少量字段时）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> Equable#ignoreEqualsTo(Equable) 方法2：通过忽略注解(&#123;<span class="hljs-doctag">@code</span> EqualIgnored&#125;)来指定忽略比较的字段，未标识的字段会全部参与比较（场景：字段总量多，但是只需要排除少量字段时）</span><br><span class="hljs-comment"> * 注意：onlyEqualsTo 和 ignoreEqualsTo 不要混用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Equable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用方法引用来比较，只比较指定的 Getter 方法引用。</span><br><span class="hljs-comment">     * 使用此方法：重写 listOnlyEqualsToGetter 方法，指定需要比较的字段的Getter方法引用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> other 另一个 model</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onlyEqualsTo</span><span class="hljs-params">(Equable other)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> List&lt;EqualGetter&lt;Equable&gt;&gt; getterList = listOnlyEqualsToGetter();<br><br>        <span class="hljs-comment">// getter方法引用列表中没有需要比较的 getter，直接比较对象</span><br>        <span class="hljs-keyword">if</span> (getterList == <span class="hljs-keyword">null</span> || getterList.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> Objects.equals(other, <span class="hljs-keyword">this</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 列表有值，计算两个对象在列表中 getter 值，并比较是否相等</span><br>        <span class="hljs-keyword">for</span> (EqualGetter&lt;Equable&gt; equalGetter : getterList) &#123;<br>            Object o1 = equalGetter.apply(<span class="hljs-keyword">this</span>);<br>            Object o2 = equalGetter.apply(other);<br><br>            <span class="hljs-comment">// 对于属性中也有实现了 Equable 接口的，递归调用</span><br>            <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> Equable &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Equable) <span class="hljs-keyword">return</span> ((Equable) o1).onlyEqualsTo((Equable) o2);<br><br>            <span class="hljs-comment">// equalTo collection</span><br>            <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> Collection &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>                <span class="hljs-comment">// 判断不相等</span><br>                <span class="hljs-keyword">if</span> (notEqualsCollection((Collection&lt;?&gt;) o1, (Collection&lt;?&gt;) o2, Equable::onlyEqualsTo)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>                <span class="hljs-comment">// 列表已经判断完了，开始下一个属性</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// equalTo map</span><br>            <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> Map &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Map) &#123;<br>                <span class="hljs-keyword">if</span> (notEqualsMap((Map&lt;?, ?&gt;) o1, (Map&lt;?, ?&gt;) o2, Equable::onlyEqualsTo)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                <span class="hljs-comment">// 列表已经判断完了，开始下一个属性</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!Objects.equals(o1, o2)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">notEqualsMap</span><span class="hljs-params">(Map&lt;?, ?&gt; o1, Map&lt;?, ?&gt; o2, BiFunction&lt;Equable, Equable, Boolean&gt; biFunc)</span> </span>&#123;<br>        <span class="hljs-comment">// 比较 key</span><br>        <span class="hljs-keyword">final</span> Collection&lt;?&gt; set1 = o1.keySet();<br>        <span class="hljs-keyword">final</span> Collection&lt;?&gt; set2 = o2.keySet();<br>        <span class="hljs-keyword">if</span> (notEqualsCollection(set1, set2, biFunc)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-comment">// 比较 value</span><br>        <span class="hljs-keyword">final</span> Collection&lt;?&gt; values1 = o1.values();<br>        <span class="hljs-keyword">final</span> Collection&lt;?&gt; values2 = o2.values();<br>        <span class="hljs-keyword">return</span> notEqualsCollection(values1, values2, biFunc);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断 collection 是否不相等</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o1 第一个 collection</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o2 第二个 collection</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否不相等</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">notEqualsCollection</span><span class="hljs-params">(Collection&lt;?&gt; o1, Collection&lt;?&gt; o2, BiFunction&lt;Equable, Equable, Boolean&gt; biFunc)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (Objects.isNull(o1) &amp;&amp; Objects.isNull(o2)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (Objects.isNull(o1) || Objects.isNull(o2)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (o1.isEmpty() &amp;&amp; o2.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (o1.size() != o2.size()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 根据 hashCode 来排序</span><br>        o1 = o1.stream().sorted(Comparator.comparingInt(Object::hashCode)).collect(Collectors.toList());<br>        o2 = o2.stream().sorted(Comparator.comparingInt(Object::hashCode)).collect(Collectors.toList());<br><br><br>        <span class="hljs-comment">// 逐个比较</span><br>        <span class="hljs-keyword">final</span> Iterator&lt;?&gt; iterator1 = o1.iterator();<br>        <span class="hljs-keyword">final</span> Iterator&lt;?&gt; iterator2 = o2.iterator();<br>        <span class="hljs-keyword">while</span> (iterator1.hasNext() &amp;&amp; iterator2.hasNext()) &#123;<br>            <span class="hljs-keyword">final</span> Object next1 = iterator1.next();<br>            <span class="hljs-keyword">final</span> Object next2 = iterator2.next();<br>            <span class="hljs-keyword">if</span> (next1 <span class="hljs-keyword">instanceof</span> Equable &amp;&amp; next2 <span class="hljs-keyword">instanceof</span> Equable) &#123;<br>                <span class="hljs-keyword">if</span> (!biFunc.apply((Equable) next1, (Equable) next2)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> !Objects.equals(next1, next2);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 需重写</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 需要比较的 Getter 方法列表（原理是通过Getter 的 apply 方法得到实际的值，再进行比较）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> getter 方法列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">default</span> &lt;T extends Equable&gt; List&lt;EqualGetter&lt;T&gt;&gt; listOnlyEqualsToGetter() &#123;<br>        <span class="hljs-keyword">return</span> Collections.emptyList();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * getter方法接口定义</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@FunctionalInterface</span><br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EqualGetter</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Equable</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>        <span class="hljs-function">Object <span class="hljs-title">apply</span><span class="hljs-params">(T source)</span></span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * IgnoreEqual 注解+反射来实现 equal 逻辑</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> other 另一个 model</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">ignoreEqualsTo</span><span class="hljs-params">(Equable other)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (Objects.equals(<span class="hljs-keyword">this</span>, other)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> Class&lt;? extends Equable&gt; aClass1 = <span class="hljs-keyword">this</span>.getClass();<br>        <span class="hljs-keyword">final</span> Class&lt;? extends Equable&gt; aClass2 = other.getClass();<br>        <span class="hljs-keyword">if</span> (!Objects.equals(aClass1, aClass2)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> Field[] declaredFields = aClass1.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br><br>            <span class="hljs-comment">// 字段是否被标记忽略</span><br>            <span class="hljs-keyword">final</span> EqualIgnored isIgnored = declaredField.getAnnotation(EqualIgnored<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>            <span class="hljs-keyword">if</span> (Objects.nonNull(isIgnored)) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">final</span> PropertyDescriptor propertyDescriptor = <span class="hljs-keyword">new</span> PropertyDescriptor(declaredField.getName(), aClass1);<br>            <span class="hljs-keyword">final</span> Method readMethod = propertyDescriptor.getReadMethod();<br><br>            <span class="hljs-keyword">final</span> Object o1 = readMethod.invoke(<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">final</span> Object o2 = readMethod.invoke(other);<br><br>            <span class="hljs-comment">// 对于属性中也有实现了 Equable 接口的，递归调用</span><br>            <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> Equable &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Equable) <span class="hljs-keyword">return</span> ((Equable) o1).ignoreEqualsTo((Equable) o2);<br><br>            <span class="hljs-comment">// equalTo collection</span><br>            <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> Collection &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>                <span class="hljs-comment">// 判断不相等</span><br>                <span class="hljs-keyword">if</span> (notEqualsCollection((Collection&lt;?&gt;) o1, (Collection&lt;?&gt;) o2, Equable::ignoreEqualsTo)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>                <span class="hljs-comment">// 列表已经判断完了，开始下一个属性</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// equalTo map</span><br>            <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> Map &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Map) &#123;<br><br>                <span class="hljs-keyword">if</span> (notEqualsMap((Map&lt;?, ?&gt;) o1, (Map&lt;?, ?&gt;) o2, Equable::ignoreEqualsTo)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>                <span class="hljs-comment">// 列表已经判断完了，开始下一个属性</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!Objects.equals(o1, o2)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-meta">@Target</span>(&#123;ElementType.FIELD&#125;)<br><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EqualIgnored &#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p><strong>方法 1：</strong></p>
<p><a href="https://github.com/lyloou/component/blob/master/component-dto/src/test/java/com/lyloou/component/dto/OnlyEqualDemoTest.java" target="_blank" rel="noopener">https://github.com/lyloou/component/blob/master/component-dto/src/test/java/com/lyloou/component/dto/OnlyEqualDemoTest.java</a><br><img src="https://raw.githubusercontent.com/lyloou/img/develop/Equable_20220410103323_2022-04-10-10-33-24.png" alt="Equable_20220410103323_2022-04-10-10-33-24"></p>
<p><strong>方法 2：</strong></p>
<p><a href="https://github.com/lyloou/component/blob/master/component-dto/src/test/java/com/lyloou/component/dto/IgnoreEqualDemoTest.java" target="_blank" rel="noopener">https://github.com/lyloou/component/blob/master/component-dto/src/test/java/com/lyloou/component/dto/IgnoreEqualDemoTest.java</a><br><img src="https://raw.githubusercontent.com/lyloou/img/develop/Equable_20220410103408_2022-04-10-10-34-09.png" alt="Equable_20220410103408_2022-04-10-10-34-09"></p>
<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul>
<li><a href="https://github.com/lyloou/component/blob/master/component-dto/src/main/java/com/lyloou/component/dto/Equable.java" target="_blank" rel="noopener">https://github.com/lyloou/component/blob/master/component-dto/src/main/java/com/lyloou/component/dto/Equable.java</a></li>
<li><a href="https://github.com/lyloou/component/blob/master/component-dto/src/main/java/com/lyloou/component/dto/field/FieldUtil.java" target="_blank" rel="noopener">https://github.com/lyloou/component/blob/master/component-dto/src/main/java/com/lyloou/component/dto/field/FieldUtil.java</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/java/JVM/</url>
    <content><![CDATA[<h2 id="查看堆栈信息"><a href="#查看堆栈信息" class="headerlink" title="查看堆栈信息"></a>查看堆栈信息</h2><h3 id="查看当前机器上运行的-java-进程"><a href="#查看当前机器上运行的-java-进程" class="headerlink" title="查看当前机器上运行的 java 进程"></a>查看当前机器上运行的 java 进程</h3><p><a href="https://blog.csdn.net/u013891584/article/details/80983494" target="_blank" rel="noopener">JVM–查看堆栈信息<em>u013891584 的博客-CSDN 博客</em>如何查看堆栈信息</a></p>
<p><code>jps -lvm</code><br>命令格式 jps [options][hostid]<br>注：如果不指定 hostid 就默认为当前主机或服务器。<br>命令行参数选项说明如下：<br>-q 不输出类名、Jar 名和传入 main 方法的参数<br>-m 输出传入 main 方法的参数<br>-l 输出 main 类或 Jar 的全限名<br>-v 输出传入 JVM 的参数</p>
<p><code>jstat -gc 21275</code><br>-gc 垃圾回收堆的行为统计，常用命令<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/20210702091905.png" alt="JVM_2020-08-11-15-37-17"><br>C 即 Capacity 总容量，U 即 Used 已使用的容量<br>S0C : survivor0 区的总容量<br>S1C : survivor1 区的总容量<br>S0U : survivor0 区已使用的容量<br>S1C : survivor1 区已使用的容量<br>EC : Eden 区的总容量<br>EU : Eden 区已使用的容量<br>OC : Old 区的总容量<br>OU : Old 区已使用的容量<br>MC：方法区大小<br>MU：方法区使用大小<br>CCSC:压缩类空间大小<br>CCSU:压缩类空间使用大小<br>YGC : 新生代垃圾回收次数<br>YGCT : 新生代垃圾回收时间<br>FGC : 老年代垃圾回收次数<br>FGCT : 老年代垃圾回收时间<br>GCT : 垃圾回收总消耗时间</p>
<p><code>jstat -gc 1262 2000 20</code><br>这个命令意思就是每隔 2000ms 输出 1262 的 gc 情况，一共输出 20 次</p>
<p><a href="https://blog.csdn.net/Daybreak1209/article/details/80540360" target="_blank" rel="noopener">JVM 堆、栈信息监测<em>Think In JAVA—Max-CSDN 博客</em>查看 jvm 堆栈信息</a><br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/20210702091918.png" alt="JVM_2020-08-11-15-45-17"></p>
<h2 id="Class-文件字节码结构示意图"><a href="#Class-文件字节码结构示意图" class="headerlink" title="Class 文件字节码结构示意图"></a>Class 文件字节码结构示意图</h2><p><img src="https://github.com/lyloou/img/raw/develop/z/20191023193030.png" alt="this is an image"></p>
<h2 id="visualvm-plugin"><a href="#visualvm-plugin" class="headerlink" title="visualvm plugin"></a>visualvm plugin</h2><p><a href="https://visualvm.github.io/pluginscenters.html" target="_blank" rel="noopener">https://visualvm.github.io/pluginscenters.html</a><br>(注意如果是用 jvisualvm，要选择<code>Java VisualVM</code>的地址))</p>
<ul>
<li><a href="https://howtodoinjava.com/java/basics/jdk-jre-jvm/" target="_blank" rel="noopener">What is Java JDK, JRE and JVM - In-depth Analysis - HowToDoInJava</a></li>
<li><a href="https://www.ibm.com/support/knowledgecenter/en/SSYKE2_8.0.0/com.ibm.java.vm.80.doc/docs/jit_optimize.html" target="_blank" rel="noopener">How the JIT compiler optimizes code</a></li>
</ul>
<h2 id="JVM-相关问题"><a href="#JVM-相关问题" class="headerlink" title="JVM 相关问题"></a>JVM 相关问题</h2><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; vi /etc/supervisord.conf</span><br><span class="hljs-section">[program:xxl-job-admin-7005]</span><br><span class="hljs-attr">command</span>=java -XX:-UseGCOverheadLimit -jar /data/www/xxl-job-admin/xxl-job-admin-<span class="hljs-number">7005</span>.jar --server.port=<span class="hljs-number">7005</span><br><span class="hljs-attr">autostart</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">autorestart</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">user</span> = omadmin<br><span class="hljs-attr">redirect_stderr</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">stdout_logfile_maxbytes</span>=<span class="hljs-number">100</span>MB<br><span class="hljs-attr">stdout_logfile</span> = /data/log/xxl-job-admin/xxl-job-admin.log<br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/casablancaagnes_3sdf/article/details/52299100" target="_blank" rel="noopener">-XX:-UseGCOverheadLimit 参数 java.lang.OutOfMemoryError：GC overhead limit exceeded 填坑心得_cas3$#%nca%6nes_3sdf 的博客-CSDN 博客_usegcoverheadlimit 有什么作用</a></p>
<h2 id="JVM-垃圾回收-之-强引用、弱引用、软引用、虚引用-cyt-CSDN-博客"><a href="#JVM-垃圾回收-之-强引用、弱引用、软引用、虚引用-cyt-CSDN-博客" class="headerlink" title="JVM 垃圾回收 之 强引用、弱引用、软引用、虚引用_cyt-CSDN 博客"></a><a href="https://blog.csdn.net/qq_41291945/article/details/108549120" target="_blank" rel="noopener">JVM 垃圾回收 之 强引用、弱引用、软引用、虚引用_cyt-CSDN 博客</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Strong</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 强引用 是最常见的引用， 首先用 new 关键字创建对象的时候</span><br><span class="hljs-comment">     * 这个对象就是一个强引用也就是默认的引用类型。 只要强引用的对象</span><br><span class="hljs-comment">     * 是可触及的， 那么他就不会被回收！如果强引用对象超过了他的作用范围</span><br><span class="hljs-comment">     * 或者被设置为 null  那就可以被回收了。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 只要有强引用在， 当内存不足的时候jvm就算抛出OOM也不会回收掉它！</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String test_strong_reference = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"test strong reference"</span>);<br>        String test = test_strong_reference;<br>        test_strong_reference = <span class="hljs-keyword">null</span>;<br>        System.gc();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">"test_strong_reference - &gt; "</span>+ test_strong_reference);<br>        System.out.println(<span class="hljs-string">"test - &gt; "</span>+test);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Soft</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 软引用， 用来描述那些还有用， 但是不是必须用的对象， 只被软引用关联着的对象</span><br><span class="hljs-comment">     * 在系统内存溢出之前，会把这些对象列进入回收范围之内进行二次回收， 如果回收之后</span><br><span class="hljs-comment">     * 内存还不够的话， 就抛出内存溢出的异常.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 可以在一些内存敏感的地方 进行使用, 高速缓存之类的</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 内存够用的时候就保留软引用的可达对象</span><br><span class="hljs-comment">     * 内存不够的时候就回收可达对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        User cuiyt = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">"cuiyt"</span>);<br>        SoftReference&lt;User&gt; reference = <span class="hljs-keyword">new</span> SoftReference&lt;User&gt;(cuiyt);<br>        cuiyt = <span class="hljs-keyword">null</span>;<br><br>        System.out.println(reference.get().toString());<br>        System.gc();<br>        System.out.println(<span class="hljs-string">"after - &gt; "</span> + reference.get().toString());<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">7</span>];<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(reference.get());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weak</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 弱引用， 发送GC就会被回收掉！ 不管内存够不够</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        WeakReference&lt;User&gt; test = <span class="hljs-keyword">new</span> WeakReference&lt;User&gt;(<span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">"@cuiyut"</span>));<br>        System.out.println(test.get());<br>        System.gc();<br>        System.out.println(test.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Empty</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Empty empty;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PhantomReference&lt;Empty&gt; reference;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ReferenceQueue&lt;Empty&gt; queue;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-keyword">super</span>.finalize();<br>        System.out.println(<span class="hljs-string">"调用 finalize"</span>);<br>        empty = <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Check</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-keyword">super</span>.run();<br>                <span class="hljs-keyword">if</span> (reference != <span class="hljs-keyword">null</span>) &#123;<br>                    PhantomReference&lt;Empty&gt; test = <span class="hljs-keyword">null</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        test = (PhantomReference&lt;Empty&gt;) queue.remove();<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (test != <span class="hljs-keyword">null</span>) &#123;<br>                        System.out.println(<span class="hljs-string">"跟踪垃圾回收过程， Empty 被GC"</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 形同虚设的一个引用类型， 当试图从虚引用中获得对象的时候</span><br><span class="hljs-comment">     * 它总是空的 ！ 为一个对象设置虚引用关联的唯一目的是跟踪垃圾回收的过程</span><br><span class="hljs-comment">     * 比如: 能在这个对象被回收的时候发出一个通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Check check = <span class="hljs-keyword">new</span> Check();<br>        check.setDaemon(<span class="hljs-keyword">true</span>);<br>        check.start();<br><br>        queue = <span class="hljs-keyword">new</span> ReferenceQueue&lt;&gt;();<br>        empty = <span class="hljs-keyword">new</span> Empty();<br>        reference = <span class="hljs-keyword">new</span> PhantomReference&lt;&gt;(empty, queue);<br>        <span class="hljs-comment">// 取消强引用</span><br>        empty = <span class="hljs-keyword">null</span>;<br>        System.out.println(reference.get());<br><br>        System.out.println(<span class="hljs-string">"第一次GC"</span>);<br>        <span class="hljs-comment">// 把回收的对象， 放到引用队列中</span><br>        System.gc();<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">"after 第一次GC"</span>);<br>        <span class="hljs-keyword">if</span> (empty != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">"empty 可用"</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">"empty 不可用"</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">"第二次GC"</span>);<br><br>        <span class="hljs-comment">// 取消强引用</span><br>        empty = <span class="hljs-keyword">null</span>;<br>        System.gc();<br><br>        System.out.println(<span class="hljs-string">"after 第二次GC"</span>);<br>        <span class="hljs-keyword">if</span> (empty != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">"empty 可用"</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">"empty 不可用"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM参数列表</title>
    <url>/java/JVM%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="How-to-Set-JVM-Proxy-Setting-Without-Touching-the-Code"><a href="#How-to-Set-JVM-Proxy-Setting-Without-Touching-the-Code" class="headerlink" title="How to Set JVM Proxy Setting Without Touching the Code"></a><a href="http://www.glomelurus.com/2009/09/how-to-set-jvm-proxy-setting-without.html" target="_blank" rel="noopener">How to Set JVM Proxy Setting Without Touching the Code</a></h2><h2 id="X-参数"><a href="#X-参数" class="headerlink" title="-X 参数"></a><code>-X</code> 参数</h2><p>On the basis of how we specify JVM option it can be divided into two parts, JVM Options which starts with –X and those which starts with -XX:</p>
<blockquote>
<ol>
<li>JVM Options that begin with -X are non-standard (thy are not guaranteed to be supported on all JVM implementations), and are subject to change without notice in subsequent releases of the JDK.</li>
<li>JVM Options or parameters which are specified with -XX are not stable and are not recommended for casual use. These options are subject to change without notice also.</li>
</ol>
</blockquote>
<p><a href="https://javarevisited.blogspot.com/2011/11/hotspot-jvm-options-java-examples.html#axzz5dIpc21eU" target="_blank" rel="noopener">10 Examples of HotSpot JVM Options in Java</a></p>
<p>【推荐】给 JVM 环境参数设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场<br>景时输出 dump 信息。<br>说明：OOM 的发生是有概率的，甚至相隔数月才出现一例，出错时的堆内信息对解决问题非常<br>有帮助。<br>// 《阿里巴巴 Java 开发手册 1.4.0pdf - p34》</p>
<h2 id="D参数"><a href="#D参数" class="headerlink" title="-D参数"></a><code>-D</code>参数</h2><p>参数 <code>-D</code> 是 Java 自带的，其功能是通过命令行设置一个 Java 系统属性。</p>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p>-Xms2G<br>-Xmx2G<br>-XX:NewRatio=4<br>-XX:SurvivorRatio=8<br>-XX:UseParNewGC<br>-XX:UseParallelOldGC<br>-XX:UseConcMarkSweepGC<br>-XX:+PrintGC<br>-XX:+PrintGCDetails</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中instanceof-isInstanceOf-isAssignableFrom的区别</title>
    <url>/java/instanceof/</url>
    <content><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>主要内容：<br>本文介绍了如何判断一个对象是否是一个类的实例。</p>
<blockquote>
</blockquote>
<p>instanceof运算符 只被用于对象引用变量，检查左边的被测试对象 是不是 右边类或接口的 实例化。如果被测对象是null值，则测试结果总是false。<br>形象地：自身实例或子类实例 instanceof 自身类   返回true<br>例： String s=new String(“javaisland”);<br>     System.out.println(s instanceof String); //true</p>
<blockquote>
</blockquote>
<p>Class类的isInstance(Object obj)方法，obj是被测试的对象，如果obj是调用这个方法的class或接口 的实例，则返回true。这个方法是instanceof运算符的动态等价。<br>形象地：自身类.class.isInstance(自身实例或子类实例)  返回true<br>例：String s=new String(“javaisland”);<br>    System.out.println(String.class.isInstance(s)); //true</p>
<blockquote>
</blockquote>
<p>Class类的isAssignableFrom(Class cls)方法，如果调用这个方法的class或接口 与 参数cls表示的类或接口相同，或者是参数cls表示的类或接口的父类，则返回true。<br>形象地：自身类.class.isAssignableFrom(自身类或子类.class)  返回true<br>例：System.out.println(ArrayList.class.isAssignableFrom(Object.class));  //false<br>    System.out.println(Object.class.isAssignableFrom(ArrayList.class));  //true</p>
<h2 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h2><ul>
<li><a href="http://bbs.csdn.net/topics/300208631" target="_blank" rel="noopener">instanceof运算符、Class的isInstance( )与isAssignableFrom</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson和fastjson区别</title>
    <url>/java/jackson%E5%92%8Cfastjson%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.annotation.JSONField;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span> </span>&#123;<br>    <span class="hljs-meta">@JSONField</span>(name = <span class="hljs-string">"fastjson_name"</span>) <span class="hljs-comment">// fastjson 改名</span><br>    <span class="hljs-meta">@JsonProperty</span>(<span class="hljs-string">"jackson_name"</span>) <span class="hljs-comment">// jackson 改名</span><br>    <span class="hljs-keyword">private</span> String name = <span class="hljs-string">"name"</span>;<br><br>    <span class="hljs-meta">@JSONField</span>(name = <span class="hljs-string">"fastjson_time"</span>, format = <span class="hljs-string">"yyyy-MM-dd hh:mm"</span>) <span class="hljs-comment">// fastson 修改日期格式</span><br>    <span class="hljs-meta">@JsonProperty</span>(<span class="hljs-string">"jackson_time"</span>)<br>    <span class="hljs-meta">@JsonFormat</span>(pattern = <span class="hljs-string">"yyyy/MM/dd hh:mm:ss"</span>) <span class="hljs-comment">// jackson 修改日期格式</span><br>    <span class="hljs-keyword">private</span> Date time;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> time;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(Date time)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.time = time;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/jackson"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Model <span class="hljs-title">jackson</span><span class="hljs-params">()</span> </span>&#123;<br>        Model model = <span class="hljs-keyword">new</span> Model();<br>        model.setTime(<span class="hljs-keyword">new</span> Date());<br>        <span class="hljs-keyword">return</span> model;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/fastjson"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">fastjson</span><span class="hljs-params">()</span> </span>&#123;<br>        Model model = <span class="hljs-keyword">new</span> Model();<br>        model.setTime(<span class="hljs-keyword">new</span> Date());<br>        <span class="hljs-comment">// 这里也可以再次指定dateFormat，会覆盖之前的</span><br>        <span class="hljs-keyword">return</span> JSON.toJSONStringWithDateFormat(model, <span class="hljs-keyword">null</span>, SerializerFeature.DisableCircularReferenceDetect);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// http://localhost:8080/jackson</span><br>&#123;<br>  <span class="hljs-attr">"jackson_name"</span>: <span class="hljs-string">"name"</span>,<br>  <span class="hljs-attr">"jackson_time"</span>: <span class="hljs-string">"2020/11/02 02:52:03"</span><br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// http://localhost:8080/fastjson</span><br>&#123;<br>  <span class="hljs-attr">"fastjson_name"</span>: <span class="hljs-string">"name"</span>,<br>  <span class="hljs-attr">"fastjson_time"</span>: <span class="hljs-string">"2020-11-02 10:51"</span><br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8</title>
    <url>/java/Java8/</url>
    <content><![CDATA[<ul>
<li><a href="https://github.com/winterbe/java8-tutorial" target="_blank" rel="noopener">https://github.com/winterbe/java8-tutorial</a></li>
<li><a href="http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/" target="_blank" rel="noopener">http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/</a></li>
</ul>
<p>Optional<br>需要返回值时<br>Optional.orElse<br>Optional.orElseThrow</p>
<p>不需要返回值时<br>Optional.ifPresent</p>
<h2 id="LocalDate-to-TimeStamp"><a href="#LocalDate-to-TimeStamp" class="headerlink" title="LocalDate to TimeStamp"></a><a href="https://stackoverflow.com/questions/8992282/convert-localdate-to-localdatetime-or-java-sql-timestamp" target="_blank" rel="noopener">LocalDate to TimeStamp</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ZoneId zoneId = ZoneId.of(<span class="hljs-string">"Asia/Shanghai"</span>);<br>LocalDate date = LocalDate.parse(time, DateTimeFormatter.ofPattern(<span class="hljs-string">"yyyy-MM-dd"</span>).withZone(zoneId));<br>Timestamp.valueOf(date.atStartOfDay());<br></code></pre></td></tr></table></figure>

<h2 id="String-to-TimeStamp"><a href="#String-to-TimeStamp" class="headerlink" title="String to TimeStamp"></a>String to TimeStamp</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String time = <span class="hljs-string">"2018-12-12"</span><br>Timestamp.valueOf(time + <span class="hljs-string">" 00:00:00"</span>)<br></code></pre></td></tr></table></figure>

<h2 id="list-to-map"><a href="#list-to-map" class="headerlink" title="list to map"></a>list to map</h2><p><a href="https://blog.csdn.net/hern_16/article/details/105118006" target="_blank" rel="noopener">Java8 中 List 转 Map(Collectors.toMap) 使用技巧_Hern_16 的博客-CSDN 博客</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 简单对象</span><br><span class="hljs-meta">@Accessors</span>(chain = <span class="hljs-keyword">true</span>) <span class="hljs-comment">// 链式方法</span><br><span class="hljs-meta">@lombok</span>.Data<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br><span class="hljs-comment">// 列表</span><br>List&lt;User&gt; userList = Lists.newArrayList(<br>        <span class="hljs-keyword">new</span> User().setId(<span class="hljs-string">"A"</span>).setName(<span class="hljs-string">"张三"</span>),<br>        <span class="hljs-keyword">new</span> User().setId(<span class="hljs-string">"B"</span>).setName(<span class="hljs-string">"李四"</span>),<br>        <span class="hljs-keyword">new</span> User().setId(<span class="hljs-string">"C"</span>).setName(<span class="hljs-string">"王五"</span>)<br>);<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">/*希望转换成</span><br><span class="hljs-comment">A-&gt; 张三</span><br><span class="hljs-comment">B-&gt; 李四</span><br><span class="hljs-comment">C-&gt; 王五</span><br><span class="hljs-comment">*/</span><br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-keyword">for</span> (User user : userList) &#123;<br>    map.put(user.getId(), user.getName());<br>&#125;<br><br><span class="hljs-comment">// java8之前的做法</span><br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-keyword">for</span> (User user : userList) &#123;<br>    map.put(user.getId(), user.getName());<br>&#125;<br><br><span class="hljs-comment">// java8的做法</span><br>userList.stream().collect(Collectors.toMap(User::getId, User::getName));<br><br><span class="hljs-comment">// 如果希望得到 Map 的 value 为对象本身时</span><br>userList.stream().collect(Collectors.toMap(User::getId, t -&gt; t));<br><span class="hljs-comment">// 或者</span><br>userList.stream().collect(Collectors.toMap(User::getId, Function.identity()));<br><br><span class="hljs-comment">// 注意如果Id有重复的话 Collectors.toMap 会抛出异常，需要手动处理，使用 toMap 的重载方法</span><br>toMap(Function&lt;? <span class="hljs-keyword">super</span> T, ? extends K&gt; keyMapper, Function&lt;? <span class="hljs-keyword">super</span> T, ? extends U&gt; valueMapper);<br>toMap(Function&lt;? <span class="hljs-keyword">super</span> T, ? extends K&gt; keyMapper, Function&lt;? <span class="hljs-keyword">super</span> T, ? extends U&gt; valueMapper,<br>        BinaryOperator&lt;U&gt; mergeFunction);<br>toMap(Function&lt;? <span class="hljs-keyword">super</span> T, ? extends K&gt; keyMapper, Function&lt;? <span class="hljs-keyword">super</span> T, ? extends U&gt; valueMapper,<br>        BinaryOperator&lt;U&gt; mergeFunction, Supplier&lt;M&gt; mapSupplier);<br><span class="hljs-comment">// 具体做法是</span><br>userList.stream().collect(Collectors.toMap(User::getId, User::getName, (n1, n2) -&gt; n1 + n2)); <span class="hljs-comment">// 合并字符串</span><br>userList.stream().collect(Collectors.toMap(User::getId, User::getName, (n1, n2) -&gt; n1)); <span class="hljs-comment">// 取第一个</span><br><span class="hljs-comment">// mapSupplier可以用来自定义map类型，如依据 key 排序</span><br>userList.stream().collect(<br>    Collectors.toMap(User::getId, User::getName, (n1, n2) -&gt; n1, TreeMap::<span class="hljs-keyword">new</span>)<br>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">A-&gt; 李四</span><br><span class="hljs-comment">B-&gt; 张三</span><br><span class="hljs-comment">C-&gt; 王五</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<p><a href="https://juejin.cn/post/6844903918586052616" target="_blank" rel="noopener">聊聊 Java8 以后各个版本的新特性 - 掘金</a><br><a href="https://advancedweb.hu/a-categorized-list-of-all-java-and-jvm-features-since-jdk-8-to-17/" target="_blank" rel="noopener">A categorized list of all Java and JVM features since JDK 8 to 17 - Advanced Web Machinery</a><br><a href="https://nanova.me/java-lang-jvm-updates/" target="_blank" rel="noopener">Java 9 到 16 的语言和 JVM 特性更新分类清单 | NanoNova’s cyberspace</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP the Definitive Guide 读书笔记</title>
    <url>/http/HTTP%20The%20Definitive%20Guide/</url>
    <content><![CDATA[<h1 id="HTTP-The-Definitive-Guide-读书笔记"><a href="#HTTP-The-Definitive-Guide-读书笔记" class="headerlink" title="HTTP The Definitive Guide 读书笔记"></a>HTTP The Definitive Guide 读书笔记</h1><blockquote>
<p>逆序记录 </p>
</blockquote>
<p>| Status  –p59</p>
<ul>
<li>100-199: Informational Status Codes</li>
<li>200-299: Success Status Codes</li>
<li>300-399:Redirection Status Codes</li>
</ul>
<p>| The TRACE method is used primarily for diagnostics;<br>It’s also a good tool for seeing the effects of proxies and other applications<br>on your requests. –p56</p>
<p>| The TRACE method allows clients to see how its request looks when it finally<br>makes it to the server. –p55</p>
<p>| PUT:<br>Because PUT allows you to change content, many web servers require you to log in<br>with a password before you can perform a PUT. –p55</p>
<p>| HEAD METHOD:<br>The HEAD method behaves exactly like the GET method, but the server returns<br>only the headers in the response. No entity body is ever returned.<br>Using HEAD, you can:</p>
<ul>
<li>Find out about a resource without getting it.</li>
<li>See if an object exists, by looking at the status code of the response.</li>
<li>Test if the resource has been modified, by looking at the headers.</li>
<li>-p54</li>
</ul>
<p>| The GET and HEAD methods are said to be safe, meaning that no action should<br>occur as a result of an HTTP request that uses either the GET or HEAD method.<br>–p53</p>
<p>| HTTP mesages can carry many kinds of digital data:  –p52</p>
<ul>
<li>images;</li>
<li>video;</li>
<li>HTML documents;</li>
<li>software applications;</li>
<li>credit card transactions;</li>
<li>electronic mail;</li>
<li>…</li>
</ul>
<p>| HTTP headers are classified into:  –p51</p>
<ul>
<li>General headers;</li>
<li>Request headers;</li>
<li>Response headers;</li>
<li>Entity headers;</li>
<li>Extension headers;</li>
</ul>
<p>| Version:<br>Note that version numbers are not treated as fractional numbers.<br>Each number in the version is treated as a separate number.<br>HTTP/2.22 &gt; HTTP/2.3, because 22 &gt; 3</p>
<p>| The numeric code makes error processing easy for programs, while the reason<br>phrase is easily understood by humans.(这样的存在总是有意义的)<br><img src="./http_status_code.png" alt="status_code"></p>
<p>| The method begins the start line of requests, telling the server what to do.<br>–p48</p>
<ul>
<li>GET</li>
<li>POST</li>
<li>PUSH</li>
<li>DELETE</li>
<li>HEAD</li>
<li>TRACE</li>
<li>OPTIONS<br><img src="./http_methods.png" alt="HTTP method"></li>
</ul>
<p>| The headders are terminated by a blank line (CRLF), marking the<br>end of the list of headers and the beginning of the entity body.<br>–p47</p>
<p>| messages –p46<br>request message:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">request-URL</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">headers</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">entity-body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>response message:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">status</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">reason-phrase</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">headers</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">entity-body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>| Both request and response messages have the same basic message structure.<br>(start line; headers; body) –pp45</p>
<p>| The Parts of a Message: –p44</p>
<ul>
<li>a start line describing the message;(Start line)</li>
<li>a block of headers containing attributes; (Headers)</li>
<li>an optional body containing data. (Body)</li>
</ul>
<p>| HTTP messages flow like rivers. All messages flow downstream,regardless of<br>whether they are request messages or response messages.(所有的消息流都downstream)<br>The sender of any message is upstream of the receiver.<br>在图3-2中，代理1是代理3请求的上流，回应的下流。 –p44</p>
<p>| Messages travel inbound to the origin server, and when their work is done,<br>they travel outbound back to the user agent. –p43</p>
<p>| Describe message direction: –p43</p>
<ul>
<li>inbound</li>
<li>outbound</li>
<li>upstream</li>
<li>downstream</li>
</ul>
<p>| HTTP messages are the blocks of data sent between HTTP applications (clients,<br>  servers, and proxies). These blocks of data begin with some text <code>meta-information</code><br>  describing the message contents and meaning, followed by optional data. –p43</p>
<p>| The chapter 3 aim to: –p43</p>
<ul>
<li>how to create them;</li>
<li>how to understand them;</li>
</ul>
<p>If HTTP is the Internet’s courier, HTTP messages are the packages it uses<br>to move things around. –p43</p>
<h2 id="CHAPTER-3-HTTP-Messages"><a href="#CHAPTER-3-HTTP-Messages" class="headerlink" title="CHAPTER 3: HTTP Messages"></a>CHAPTER 3: HTTP Messages</h2><p>| https: The https scheme is a twin to the http scheme. The only difference is<br>  that the https scheme uses Netscape’s Secure Sockets Layer (SSL), which provides<br>  end-to-end encryption of HTTP connnections. Its syntax is idential to that of<br>  HTTP, with a default port of 443. –p38</p>
<p>| In general, applications interpreting URLs must decode the URLs before<br>  processing them. –p37</p>
<p>| 字符限制(Character Restrictions)：有些字符是保留的，是有特殊意义的，<br>  不允许直接在URL中使用。（例如：% / . # ? ; : % + @ &amp; = { } [ ] ~ &lt; &gt;）–p36</p>
<p>| Encoding Mechanisms –p36</p>
<ul>
<li><code>%7E == ~</code></li>
<li><code>%20 == [space]</code></li>
<li><code>%25 == %</code></li>
<li><code>%40 == -</code></li>
</ul>
<p>| Shady Characters<br>nonprinting characters also are prohibited in URLs, even though these characters<br>may pass through mailers and otherwise be portable. –p35</p>
<p>| Expandomatic URLs –p34<br>two flavors:</p>
<ul>
<li>Hostname expansion.(eg. if you type “yahoo” in the address, your browser<br>can automatically insert “www.” and “.com” onto the hostname)</li>
<li>History expansion.(eg. if you were typing in the start of a URL that<br>you had visited previously, such as <code>http://www.joes-</code> your browser<br>could suggest <code>http://www.joes-hardware.com</code>)<br>Note: Be aware that URL auto-expansion may behave differently when used with proxies.</li>
</ul>
<p>| Using this URL as a base, we can infer the missing information. –p32</p>
<p>| Fragments (<frag>): To allow referencing of parts or fragments of a resource,<br> URLs support a frag component to identify pieces within a resource. –p30<br>(精确定位到文档具体位置，这个过程在 client 端进行，而不是 server 端。<br>  the server sends the entire object and the agent applies the fragment<br>  identifier to the resource)</frag></p>
<p>| Query component: There is no requirement for the format of the query component, except that some<br>characters are illegal.(查询组件对格式没有要求，但必须是合法的字符) –p29<br>跟在 <code>?</code> 后面的名值对，多个查询条件用 <code>&amp;</code> 分割：<code>?item=12731&amp;color=blue</code></p>
<p>| Auery Strings:<br>Some resources, such as database services, can be asked questions or queries to<br>narrow down the type of resource being requested. –p29</p>
<p>| If an application is using a URL scheme that requires a username and password,<br>such as FTP, it generally will insert a default username and password if<br>they aren’t supplied. –p27</p>
<p>| Scheme names are case-insensitive –p27<br>(Scheme的名字不区分大小写：例如<code>http://</code>和<code>HTTP://</code>是等效的)</p>
<p>| The scheme is really the main identifier of how to access a given resource.<br>–p27</p>
<p>| Most URL schemes base their URL syntax on this nine-part general format: –p26</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">-------------------------------------------------------------------------<br>&lt;scheme&gt;<span class="hljs-symbol">://&lt;user&gt;</span><span class="hljs-symbol">:&lt;password&gt;</span>@&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/&lt;path&gt;</span>;&lt;params&gt;<span class="hljs-string">?&lt;</span>query&gt;#&lt;frag&gt;<br>-------------------------------------------------------------------------<br>eg. <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/www.joes-hardware.com:80/index</span>.html<br></code></pre></td></tr></table></figure>

<p>| Urls give you and your browser all you need to find a piece of<br>information. They define the particular resource you want,<br>where it is located, and how to get it.</p>
<p>| <img src="/.io//url_component.png" alt="URL Component"></p>
<h2 id="CHAPTER-2-URLs-and-Resources"><a href="#CHAPTER-2-URLs-and-Resources" class="headerlink" title="CHAPTER 2: URLs and Resources"></a>CHAPTER 2: URLs and Resources</h2><p>| Agents<br>User agents (or just agents) are client programs that make HTTP requests on the<br>user’s behalf. (用来发出HTTP请求的客户端程序，例如：web浏览器) –p19</p>
<p>| Tunnels<br>HTTP tunnels are often used to transport non-HTTP data over one or more HTTP<br>connections, without looking at the data. –p19</p>
<p>| Gateways</p>
<p>| Caches</p>
<p>| Proxies<br>A proxy sits between a client and a server.<br>Proxies are often used for security, acting as trusted intermediaries<br>through which all web traffic flows. –p18</p>
<h2 id="Architectrual-Components-of-the-Web"><a href="#Architectrual-Components-of-the-Web" class="headerlink" title="Architectrual Components of the Web"></a>Architectrual Components of the Web</h2><p>| Protocol Versions –p16<br>HTTP/0.9 supports only the GET method.<br>1.0 was the first version of HTTP that was widely deployed.</p>
<p>| An HTTP transaction using telnet:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">[root@localhost ~]<span class="hljs-comment"># telnet www.lyloou.com 80</span><br>Trying 151.101.192.133...<br>Connected to www.lyloou.com.<br>Escape character is <span class="hljs-string">'^]'</span>.<br>GET /index.html HTTP/1.1  <span class="hljs-comment"># input this</span><br>Host: www.lyloou.com      <span class="hljs-comment"># input this</span><br>                          <span class="hljs-comment"># input this</span><br><br>HTTP/1.1 301 Moved Permanently<br>Server: GitHub.com<br>Content-Type: text/html<br>Location: http://lyloou.com/index.html<br>X-GitHub-Request-Id: 26A4:06EC:8E05E6C:B479C11:58CB8810<br>Content-Length: 178<br>Accept-Ranges: bytes<br>Date: Fri, 17 Mar 2017 06:54:08 GMT<br>Via: 1.1 varnish<br>Age: 0<br>Connection: keep-alive<br>X-Served-By: cache-lax8651-LAX<br>X-Cache: MISS<br>X-Cache-Hits: 0<br>X-Timer: S1489733648.903540,VS0,VE68<br>Vary: Accept-Encoding<br>X-Fastly-Request-ID: b8d3f5bbb2343450fd125b92f1dde483c5109377<br><br>&lt;html&gt;<br>&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;<br>&lt;body bgcolor=<span class="hljs-string">"white"</span>&gt;<br>&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;<br>&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>

<p>| Telnet is commonly used for remote terminal sessions, but it can<br>generally connect to any TCP server, including HTTP servers.</p>
<p>| Establish a TCP/IP connection between the client and server:</p>
<ul>
<li>Internet protocol (IP) addresses</li>
<li>Port numbers</li>
</ul>
<p>| TCP/IP<br>Once a TCP connections is established, messages exchanged between the client and<br>server computers will never be lost, damaged, or received out of order. –p12</p>
<p>| HTTP messages consist of three parts: –p11</p>
<ol>
<li>Start line; (indicating what to do for a request and what happened for a<br>response)</li>
<li>Header fields; (Note: The headers end with a blank line)</li>
<li>Body; (can contain arbitray binary data. eg., images, videos, audio tracks,<br>software applications.)</li>
</ol>
<p>| Messages</p>
<ul>
<li>request messages: sent from web clients to web servers.</li>
<li>response messages: messages from servers to clients.<br>they are very similar.</li>
</ul>
<p>| Status Codes<br>Every HTTP response message comes back with a status code. –p9</p>
<p>| Methods<br>The method tells the server what action to perform (e.g. fetch a web page,<br>  delete a file, etc.) –p8</p>
<ul>
<li>GET</li>
<li>POST</li>
<li>DELETE</li>
<li>PUT</li>
<li>HEAD</li>
</ul>
<p>| Transactions<br>An HTTP transaction consists of: –p8</p>
<ul>
<li>a request command (sent from client to server).</li>
<li>a response result (sent from the server back to the client)</li>
</ul>
<p>| URNs<br>A URNs serves as a unique name for a particular piece of content,<br>independent of where the resource currently resides.<br>URNs are still experimental and not yet widely adopted. –p7</p>
<p>| URLs<br>URLs describe the specific location of a resource on a particular server.<br>contains three main parts: –p7</p>
<ul>
<li>scheme: (e.g., http://)</li>
<li>server Internet address (e.g., <a href="http://www.lyloou.com" target="_blank" rel="noopener">www.lyloou.com</a>)</li>
<li>names a resource on the web server (e.g., hello.gif)</li>
</ul>
<p>| URIs<br>URIs come in two flavors: URLs and URNs.</p>
<p>| Media Types<br>MIME was originally designed to solve problems encountered in moving messages<br>between different electronic mail systems.<br>MIME worked so well for email that HTTP adopted it to describe and label its<br>own multimedia content. –p5<br>eg.</p>
<ul>
<li>text/HTML</li>
<li>text/plain</li>
<li>image/jpeg</li>
<li>image/gif</li>
<li>video/quicktime</li>
<li>application/vnd.ms-powerpoint<br><a href="https://zh.wikipedia.org/wiki/多用途互聯網郵件擴展" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/多用途互聯網郵件擴展</a></li>
</ul>
<p>| Resources</p>
<ul>
<li>static file: text files, HTML files, Word files, JPEG files, AVI…</li>
<li>dynamic content: generate content based on your identity, on what<br>information you’ve requested, or on the time of day.(eg. show live image<br>  from a camera, trade stocks, search databases, buy gifts from online<br>  stores)</li>
</ul>
<p>| Because HTTP uses reliable data-transmission protocols, it guarantees that<br>your data will not be damaged or scrambled in transit, even when it comes from<br>the other side of the globe. –p3</p>
<p>| Throughout the book, we are careful to explain the “why” of HTTP, not just the<br>“how”.</p>
<p>| There are many books that  explain how to use Web,<br>but this is the book that explains how the Web works.</p>
<p>| The Definitive Guide is in understanding how the Web works<br>and how to apply that knowledge to web programming and administration.</p>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】jfinal</title>
    <url>/java/jfinal/</url>
    <content><![CDATA[<h2 id="数据库数据保存后，随即用id作其他更新操作，导致无法更新成功问题"><a href="#数据库数据保存后，随即用id作其他更新操作，导致无法更新成功问题" class="headerlink" title="数据库数据保存后，随即用id作其他更新操作，导致无法更新成功问题"></a>数据库数据保存后，随即用id作其他更新操作，导致无法更新成功问题</h2><p>原因：因为是刚保存的，如果没有取回id，其id肯定还是默认的0；<br>解决办法：回传ID</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Record record = RecordUtils.toRecord(ps);<br>record.set(<span class="hljs-string">"id"</span>, <span class="hljs-keyword">null</span>);<br><br>ps.setCreated(Timestamp.from(Instant.now()));<br><span class="hljs-keyword">boolean</span> ret = Db.save(TABLE.PROXY_STOCKS, <span class="hljs-string">"id"</span>, record);<br><span class="hljs-comment">// 回传ID</span><br>ps.setId(record.getNumber(<span class="hljs-string">"id"</span>).longValue());<br></code></pre></td></tr></table></figure>

<p><a href="https://www.yeetrack.com/?p=1151" target="_blank" rel="noopener">Jfinal quartz动态的增、删、暂停、恢复job | 易踪网</a></p>
<p><a href="https://www.jfinal.com/share/1618" target="_blank" rel="noopener">jfinal使用QuartzPlugin（定时任务插件）(上)</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jar包相关</title>
    <url>/java/jar%E5%8C%85%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="基于-Java-的打包-jar、war、ear-包的作用与区别详解"><a href="#基于-Java-的打包-jar、war、ear-包的作用与区别详解" class="headerlink" title="基于 Java 的打包 jar、war、ear 包的作用与区别详解"></a><a href="https://blog.csdn.net/liangrui1988/article/details/49964711" target="_blank" rel="noopener">基于 Java 的打包 jar、war、ear 包的作用与区别详解</a></h2><table>
<thead>
<tr>
<th></th>
<th>JAR</th>
<th>WAR</th>
<th>EAR</th>
</tr>
</thead>
<tbody><tr>
<td><strong>英文</strong></td>
<td>Java Archive file</td>
<td>Web Archive file</td>
<td>Enterprise Archive file</td>
</tr>
<tr>
<td><strong>包含内容</strong></td>
<td>class、properties 文件，是文件封装的最小单元；包含 Java 类的普通库、资源（resources）、辅助文件（auxiliary files）等</td>
<td>Servlet、JSP 页面、JSP 标记库、JAR 库文件、HTML/XML 文档和其他公用资源文件，如图片、音频文件等</td>
<td>除了包含 JAR、WAR 以外，还包括 EJB 组件</td>
</tr>
<tr>
<td><strong>部署文件</strong></td>
<td>application-client.xml</td>
<td>web.xml</td>
<td>application.xml</td>
</tr>
<tr>
<td><strong>容器</strong></td>
<td>应用服务器（application servers）</td>
<td>小型服务程序容器（servlet containers）</td>
<td>EJB 容器（EJB containers）</td>
</tr>
<tr>
<td><strong>级别</strong></td>
<td>小</td>
<td>中</td>
<td>大</td>
</tr>
</tbody></table>
<h2 id="运行-jar-包"><a href="#运行-jar-包" class="headerlink" title="运行 jar 包"></a>运行 jar 包</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">java -Dlogging.level.root=debug -D<span class="hljs-string">'file.encoding=utf-8'</span> -jar -Dspring.profiles.active=master admin.jar<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8_如何以并发方式在同一个流上执行多种操作</title>
    <url>/java/java8_%E5%A6%82%E4%BD%95%E4%BB%A5%E5%B9%B6%E5%8F%91%E6%96%B9%E5%BC%8F%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E6%B5%81%E4%B8%8A%E6%89%A7%E8%A1%8C%E5%A4%9A%E7%A7%8D%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>java8 中，stream 流多次使用会抛出异常：java.lang.IllegalStateException: stream has already been operated upon or closed</p>
<p>所以如何解决呢——如何以并发方式在同一个流上执行多种操作</p>
<p>可以 借助 Spliterator，尤其是它的延迟绑定能力，结合 BlockingQueues 和 Futures 来实现这一大有裨益的特性</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.CompletableFuture;<br><span class="hljs-keyword">import</span> java.util.concurrent.Future;<br><span class="hljs-keyword">import</span> java.util.concurrent.LinkedBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><span class="hljs-keyword">import</span> java.util.stream.StreamSupport;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如何以并发方式在同一个流上执行多种操作</span><br><span class="hljs-comment"> * 参考：java8_in_action 附录C</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2021/5/7</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamForker</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Stream&lt;T&gt; stream;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Object, Function&lt;Stream&lt;T&gt;, ?&gt;&gt; forks = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StreamForker</span><span class="hljs-params">(Stream&lt;T&gt; stream)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.stream = stream;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> StreamForker&lt;T&gt; <span class="hljs-title">fork</span><span class="hljs-params">(Object key, Function&lt;Stream&lt;T&gt;, ?&gt; f)</span> </span>&#123;<br>        forks.put(key, f);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Results <span class="hljs-title">getResults</span><span class="hljs-params">()</span> </span>&#123;<br>        ForkingStreamConsumer&lt;T&gt; consumer = build();<br>        <span class="hljs-keyword">try</span> &#123;<br>            stream.sequential().forEach(consumer);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            consumer.finish();<br>        &#125;<br>        <span class="hljs-keyword">return</span> consumer;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ForkingStreamConsumer&lt;T&gt; <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;BlockingQueue&lt;T&gt;&gt; queues = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Map&lt;Object, Future&lt;?&gt;&gt; actions = forks.entrySet()<br>                .stream()<br>                .reduce(<br>                        <span class="hljs-keyword">new</span> HashMap&lt;Object, Future&lt;?&gt;&gt;(),<br>                        (map, e) -&gt; &#123;<br>                            map.put(e.getKey(), getOperationResult(queues, e.getValue()));<br>                            <span class="hljs-keyword">return</span> map;<br>                        &#125;,<br>                        (m1, m2) -&gt; &#123;<br>                            m1.putAll(m2);<br>                            <span class="hljs-keyword">return</span> m1;<br>                        &#125;<br>                );<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ForkingStreamConsumer&lt;&gt;(queues, actions);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Future&lt;?&gt; getOperationResult(List&lt;BlockingQueue&lt;T&gt;&gt; queues, Function&lt;Stream&lt;T&gt;, ?&gt; f) &#123;<br>        BlockingQueue&lt;T&gt; queue = <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;();<br>        queues.add(queue);<br>        <span class="hljs-keyword">final</span> Spliterator&lt;T&gt; spliterator = <span class="hljs-keyword">new</span> BlockingQueueSpliterator&lt;&gt;(queue);<br>        <span class="hljs-keyword">final</span> Stream&lt;T&gt; source = StreamSupport.stream(spliterator, <span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">return</span> CompletableFuture.supplyAsync(() -&gt; f.apply(source));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Results</span> </span>&#123;<br><br>        <span class="hljs-keyword">public</span> &lt;R&gt; <span class="hljs-function">R <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span></span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForkingStreamConsumer</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Consumer</span>&lt;<span class="hljs-title">T</span>&gt;, <span class="hljs-title">Results</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object END_OF_STREAM = <span class="hljs-keyword">new</span> Object();<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;BlockingQueue&lt;T&gt;&gt; queues;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Object, Future&lt;?&gt;&gt; actions;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ForkingStreamConsumer</span><span class="hljs-params">(List&lt;BlockingQueue&lt;T&gt;&gt; queues, Map&lt;Object, Future&lt;?&gt;&gt; actions)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.queues = queues;<br>            <span class="hljs-keyword">this</span>.actions = actions;<br>        &#125;<br><br>        <span class="hljs-meta">@SuppressWarnings</span>(&#123;<span class="hljs-string">"unchecked"</span>, <span class="hljs-string">"SSBasedInspection"</span>&#125;)<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;R&gt; <span class="hljs-function">R <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> ((Future&lt;R&gt;) actions.get(key)).get();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(T t)</span> </span>&#123;<br>            queues.forEach(q -&gt; q.add(t));<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finish</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-comment">//noinspection unchecked</span><br>            accept((T) END_OF_STREAM);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlockingQueueSpliterator</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Spliterator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;T&gt; q;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BlockingQueueSpliterator</span><span class="hljs-params">(BlockingQueue&lt;T&gt; q)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.q = q;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAdvance</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-keyword">super</span> T&gt; action)</span> </span>&#123;<br>            T t;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-comment">//noinspection SSBasedInspection</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    t = q.take();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (t != ForkingStreamConsumer.END_OF_STREAM) &#123;<br>                action.accept(t);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Spliterator&lt;T&gt; <span class="hljs-title">trySplit</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">estimateSize</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">characteristics</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2021/5/7</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamForkerTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        Arrays.fill(a, <span class="hljs-number">1</span>);<br>        Arrays.parallelPrefix(a, Integer::sum);<br><br>        <span class="hljs-keyword">final</span> Stream&lt;Integer&gt; integerStream = Arrays.stream(a).boxed();<br>        <span class="hljs-keyword">final</span> StreamForker.Results results = <span class="hljs-keyword">new</span> StreamForker&lt;&gt;(integerStream)<br>                .fork(<span class="hljs-string">"平均值"</span>, StreamForkerTest::average)<br>                .fork(<span class="hljs-string">"求和"</span>, StreamForkerTest::sum)<br>                .fork(<span class="hljs-string">"拼接"</span>, StreamForkerTest::concat)<br>                .getResults();<br><br>        String average = results.get(<span class="hljs-string">"平均值"</span>);<br>        String sum = results.get(<span class="hljs-string">"求和"</span>);<br>        String concat = results.get(<span class="hljs-string">"拼接"</span>);<br><br>        System.out.println(<span class="hljs-string">"平均值:"</span> + average);<br>        System.out.println(<span class="hljs-string">"求和:"</span> + sum);<br>        System.out.println(<span class="hljs-string">"拼接:"</span> + concat);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">concat</span><span class="hljs-params">(Stream&lt;Integer&gt; stream)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stream.map(String::valueOf).collect(Collectors.joining(<span class="hljs-string">","</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">sum</span><span class="hljs-params">(Stream&lt;Integer&gt; stream)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stream.reduce(Integer::sum).map(String::valueOf).orElse(<span class="hljs-string">""</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">average</span><span class="hljs-params">(Stream&lt;Integer&gt; stream)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stream.mapToInt(Integer::intValue).summaryStatistics().getAverage() + <span class="hljs-string">""</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">平均值:<span class="hljs-number">50.5</span><br>求和:<span class="hljs-number">5050</span><br>拼接:<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">27</span>,<span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">32</span>,<span class="hljs-number">33</span>,<span class="hljs-number">34</span>,<span class="hljs-number">35</span>,<span class="hljs-number">36</span>,<span class="hljs-number">37</span>,<span class="hljs-number">38</span>,<span class="hljs-number">39</span>,<span class="hljs-number">40</span>,<span class="hljs-number">41</span>,<span class="hljs-number">42</span>,<span class="hljs-number">43</span>,<span class="hljs-number">44</span>,<span class="hljs-number">45</span>,<span class="hljs-number">46</span>,<span class="hljs-number">47</span>,<span class="hljs-number">48</span>,<span class="hljs-number">49</span>,<span class="hljs-number">50</span>,<span class="hljs-number">51</span>,<span class="hljs-number">52</span>,<span class="hljs-number">53</span>,<span class="hljs-number">54</span>,<span class="hljs-number">55</span>,<span class="hljs-number">56</span>,<span class="hljs-number">57</span>,<span class="hljs-number">58</span>,<span class="hljs-number">59</span>,<span class="hljs-number">60</span>,<span class="hljs-number">61</span>,<span class="hljs-number">62</span>,<span class="hljs-number">63</span>,<span class="hljs-number">64</span>,<span class="hljs-number">65</span>,<span class="hljs-number">66</span>,<span class="hljs-number">67</span>,<span class="hljs-number">68</span>,<span class="hljs-number">69</span>,<span class="hljs-number">70</span>,<span class="hljs-number">71</span>,<span class="hljs-number">72</span>,<span class="hljs-number">73</span>,<span class="hljs-number">74</span>,<span class="hljs-number">75</span>,<span class="hljs-number">76</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">79</span>,<span class="hljs-number">80</span>,<span class="hljs-number">81</span>,<span class="hljs-number">82</span>,<span class="hljs-number">83</span>,<span class="hljs-number">84</span>,<span class="hljs-number">85</span>,<span class="hljs-number">86</span>,<span class="hljs-number">87</span>,<span class="hljs-number">88</span>,<span class="hljs-number">89</span>,<span class="hljs-number">90</span>,<span class="hljs-number">91</span>,<span class="hljs-number">92</span>,<span class="hljs-number">93</span>,<span class="hljs-number">94</span>,<span class="hljs-number">95</span>,<span class="hljs-number">96</span>,<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】日志</title>
    <url>/java/logger/</url>
    <content><![CDATA[<h2 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h2><p><a href="https://juejin.im/post/6844903822687485965" target="_blank" rel="noopener">SpringBoot 日志处理之 Logback - 掘金</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>logback-spring-demo-dev<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pattern"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg %n"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pattern-color"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"%yellow(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) [%thread] %highlight(%-5level) %green(%logger&#123;50&#125;) - %highlight(%msg) %n"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"LOG_HOME"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"logs"</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CONSOLE"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 控制台输出-带颜色 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CONSOLE-WITH-COLOR"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern-color&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 文件输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"FILE"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/all.%d.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"INFO"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"CONSOLE-WITH-COLOR"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"FILE"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.example.logbackdemo.IndexAction"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"info"</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">"false"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"CONSOLE"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ul>
<li><a href="https://www.cnblogs.com/ywlaker/p/6124067.html" target="_blank" rel="noopener">java ???? log4j ?????? slf4j ?????? - ywlaker - ???</a></li>
<li><a href="https://howtodoinjava.com/log4j/slf4j-vs-log4j-which-one-is-better/" target="_blank" rel="noopener">SLF4j Vs Log4j - Which one is better? - HowToDoInJava</a></li>
<li><a href="https://www.hollischuang.com/archives/3000" target="_blank" rel="noopener">https://www.hollischuang.com/archives/3000</a></li>
<li><a href="https://javarevisited.blogspot.com/2011/05/top-10-tips-on-logging-in-java.html#axzz5dIpc21eU" target="_blank" rel="noopener">Top 10 Tips on Logging in Java - Tutorial</a></li>
</ul>
<ul>
<li><a href="http://3rdaftergod.blogspot.com/2017/01/intellij-idea-live-template-for-slf4j.html" target="_blank" rel="noopener">Intellij IDEA live template for SLF4J logger | chhh, quiet plxplx…</a></li>
</ul>
<p>How to define a live template</p>
<pre><code>Go to File-&gt;Settings-&gt;Editor-&gt;Live Templates.
In the right panel tree select category other.
Click the plus (+) sign on the top right, select Live Template.
Set
    Abbreviation: log
    Description: Inserts private static Logger for slf4j
    Template text: private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger($CLASS_NAME$.class);$END$
Now click the Edit Variables button, we will tell the IDE what $CLASS_NAME$ means here. $END$ means where to place the cursor after template expansion.
    Name: CLASS_NAME
    Expression: className()
    Default value: leave empty
    Skip if defined: true (check the checkbox)
At the very bottom look for text Applicable in with a link Change next to it, click it. Select Java-&gt;declaration.</code></pre><p>Congratulations, you’re done! Just type log and press Tab anywhere in the class declaration.</p>
<h2 id="有颜色的-log4j"><a href="#有颜色的-log4j" class="headerlink" title="有颜色的 log4j"></a>有颜色的 log4j</h2><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">log4j.debug</span>=<span class="hljs-literal">false</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Default level is INFO</span><br><span class="hljs-attr">log4j.rootLogger</span>=DEBUG,StdoutErrorFatal,StdoutWarn,StdoutInfo,StdoutDebug,StdoutTrace<br><span class="hljs-comment">#</span><br><span class="hljs-comment"># and for com.some.package.* log everything</span><br><span class="hljs-attr">log4j.logger.com.some.package</span>=TRACE<br><span class="hljs-comment">#</span><br><span class="hljs-attr">log4j.appender.StdoutErrorFatal</span>=org.apache.log4j.ConsoleAppender<br><span class="hljs-attr">log4j.appender.StdoutErrorFatal.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.StdoutErrorFatal.layout.conversionPattern</span>=\u001b[<span class="hljs-number">31</span><span class="hljs-comment">;1m%d&#123;HH:mm:ss,SSS&#125; %-5p - %-26c - [user:%X&#123;username&#125;] %m\n</span><br>log4j.appender.StdoutErrorFatal.threshold=ERROR<br><span class="hljs-comment">#</span><br>log4j.appender.StdoutWarn=org.apache.log4j.ConsoleAppender<br>log4j.appender.StdoutWarn.layout=org.apache.log4j.PatternLayout<br>log4j.appender.StdoutWarn.layout.conversionPattern=\u001b[<span class="hljs-number">33</span><span class="hljs-comment">;1m%d&#123;HH:mm:ss,SSS&#125; %-5p - %-26c - [user:%X&#123;username&#125;] %m\n</span><br>log4j.appender.StdoutWarn.threshold=WARN<br>log4j.appender.StdoutWarn.filter.filter1=org.apache.log4j.varia.LevelRangeFilter<br>log4j.appender.StdoutWarn.filter.filter1.levelMin=WARN<br>log4j.appender.StdoutWarn.filter.filter1.levelMax=WARN<br><span class="hljs-comment">#</span><br>log4j.appender.StdoutInfo=org.apache.log4j.ConsoleAppender<br>log4j.appender.StdoutInfo.layout=org.apache.log4j.PatternLayout<br>log4j.appender.StdoutInfo.layout.conversionPattern=\u001b[<span class="hljs-number">0</span>m%d&#123;HH:mm:ss,SSS&#125; %-<span class="hljs-number">5</span>p - %-<span class="hljs-number">26</span>c - [user:%X&#123;username&#125;] %m\n<br>log4j.appender.StdoutInfo.threshold=INFO<br>log4j.appender.StdoutInfo.filter.filter1=org.apache.log4j.varia.LevelRangeFilter<br>log4j.appender.StdoutInfo.filter.filter1.levelMin=INFO<br>log4j.appender.StdoutInfo.filter.filter1.levelMax=INFO<br><span class="hljs-comment">#</span><br>log4j.appender.StdoutDebug=org.apache.log4j.ConsoleAppender<br>log4j.appender.StdoutDebug.layout=org.apache.log4j.PatternLayout<br>log4j.appender.StdoutDebug.layout.conversionPattern=\u001b[<span class="hljs-number">0</span><span class="hljs-comment">;36m%d&#123;HH:mm:ss,SSS&#125; %-5p - %-26c - [user:%X&#123;username&#125;] %m\n</span><br>log4j.appender.StdoutDebug.threshold=DEBUG<br>log4j.appender.StdoutDebug.filter.filter1=org.apache.log4j.varia.LevelRangeFilter<br>log4j.appender.StdoutDebug.filter.filter1.levelMin=DEBUG<br>log4j.appender.StdoutDebug.filter.filter1.levelMax=DEBUG<br><span class="hljs-comment">#</span><br>log4j.appender.StdoutTrace=org.apache.log4j.ConsoleAppender<br>log4j.appender.StdoutTrace.layout=org.apache.log4j.PatternLayout<br>log4j.appender.StdoutTrace.layout.conversionPattern=\u001b[<span class="hljs-number">0</span><span class="hljs-comment">;30;1m%d&#123;HH:mm:ss,SSS&#125; %-5p - %-26c - [user:%X&#123;username&#125;] %m\n</span><br>log4j.appender.StdoutTrace.threshold=TRACE<br>log4j.appender.StdoutTrace.filter.filter1=org.apache.log4j.varia.LevelRangeFilter<br>log4j.appender.StdoutTrace.filter.filter1.levelMin=TRACE<br>log4j.appender.StdoutTrace.filter.filter1.levelMax=TRACE<br></code></pre></td></tr></table></figure>

<p>完整配置: <a href="http://javapub.iteye.com/blog/866664" target="_blank" rel="noopener">http://javapub.iteye.com/blog/866664</a></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">log4j.rootLogger</span>=CONSOLE,FILE<br><span class="hljs-attr">log4j.addivity.org.apache</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 应用于控制台</span><br><span class="hljs-attr">log4j.appender.CONSOLE</span>=org.apache.log4j.ConsoleAppender<br><span class="hljs-attr">log4j.appender.CONSOLE.Threshold</span>=INFO<br><span class="hljs-attr">log4j.appender.CONSOLE.Target</span>=System.out<br><span class="hljs-attr">log4j.appender.CONSOLE.Encoding</span>=GBK<br><span class="hljs-attr">log4j.appender.CONSOLE.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.CONSOLE.layout.ConversionPattern</span>=[framework] %d - %c -%-<span class="hljs-number">4</span>r [%t] %-<span class="hljs-number">5</span>p %c %x - %m%n<br><br><span class="hljs-comment"># 每天新建日志</span><br><span class="hljs-attr">log4j.appender.A1</span>=org.apache.log4j.DailyRollingFileAppender<br><span class="hljs-attr">log4j.appender.A1.File</span>=C:/log4j/log<br><span class="hljs-attr">log4j.appender.A1.Encoding</span>=GBK<br><span class="hljs-attr">log4j.appender.A1.Threshold</span>=DEBUG<br><span class="hljs-attr">log4j.appender.A1.DatePattern</span>=<span class="hljs-string">'.'</span>yyyy-MM-dd<br><span class="hljs-attr">log4j.appender.A1.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.A1.layout.ConversionPattern</span>=%d&#123;ABSOLUTE&#125; %<span class="hljs-number">5</span>p %c&#123;<span class="hljs-number">1</span>&#125;:%L : %m%n<br><br><span class="hljs-comment">#应用于文件</span><br><span class="hljs-attr">log4j.appender.FILE</span>=org.apache.log4j.FileAppender<br><span class="hljs-attr">log4j.appender.FILE.File</span>=C:/log4j/file.log<br><span class="hljs-attr">log4j.appender.FILE.Append</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">log4j.appender.FILE.Encoding</span>=GBK<br><span class="hljs-attr">log4j.appender.FILE.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.FILE.layout.ConversionPattern</span>=[framework] %d - %c -%-<span class="hljs-number">4</span>r [%t] %-<span class="hljs-number">5</span>p %c %x - %m%n<br><br><span class="hljs-comment"># 应用于文件回滚</span><br><span class="hljs-attr">log4j.appender.ROLLING_FILE</span>=org.apache.log4j.RollingFileAppender<br><span class="hljs-attr">log4j.appender.ROLLING_FILE.Threshold</span>=ERROR<br><span class="hljs-attr">log4j.appender.ROLLING_FILE.File</span>=rolling.log<br><span class="hljs-attr">log4j.appender.ROLLING_FILE.Append</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">log4j.appender.CONSOLE_FILE.Encoding</span>=GBK<br><span class="hljs-attr">log4j.appender.ROLLING_FILE.MaxFileSize</span>=<span class="hljs-number">10</span>KB<br><span class="hljs-attr">log4j.appender.ROLLING_FILE.MaxBackupIndex</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">log4j.appender.ROLLING_FILE.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.ROLLING_FILE.layout.ConversionPattern</span>=[framework] %d - %c -%-<span class="hljs-number">4</span>r [%t] %-<span class="hljs-number">5</span>p %c %x - %m%n<br><br><span class="hljs-comment">#自定义Appender</span><br><span class="hljs-attr">log4j.appender.im</span> = net.cybercorlin.util.logger.appender.IMAppender<br><span class="hljs-attr">log4j.appender.im.host</span> = mail.cybercorlin.net<br><span class="hljs-attr">log4j.appender.im.username</span> = username<br><span class="hljs-attr">log4j.appender.im.password</span> = password<br><span class="hljs-attr">log4j.appender.im.recipient</span> = yyflyons@<span class="hljs-number">163</span>.com<br><span class="hljs-attr">log4j.appender.im.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.im.layout.ConversionPattern</span> =[framework] %d - %c -%-<span class="hljs-number">4</span>r [%t] %-<span class="hljs-number">5</span>p %c %x - %m%n<br><br><span class="hljs-comment">#应用于socket</span><br><span class="hljs-attr">log4j.appender.SOCKET</span>=org.apache.log4j.RollingFileAppender<br><span class="hljs-attr">log4j.appender.SOCKET.RemoteHost</span>=localhost<br><span class="hljs-attr">log4j.appender.SOCKET.Port</span>=<span class="hljs-number">5001</span><br><span class="hljs-attr">log4j.appender.SOCKET.LocationInfo</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment"># Set up for Log Facter 5</span><br><span class="hljs-attr">log4j.appender.SOCKET.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.SOCET.layout.ConversionPattern</span>=[start]%d&#123;DATE&#125;[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n<br><span class="hljs-comment"># Log Factor 5 Appender</span><br><span class="hljs-attr">log4j.appender.LF5_APPENDER</span>=org.apache.log4j.lf5.LF5Appender<br><span class="hljs-attr">log4j.appender.LF5_APPENDER.MaxNumberOfRecords</span>=<span class="hljs-number">2000</span><br><br><span class="hljs-comment"># 发送日志给邮件</span><br><span class="hljs-attr">log4j.appender.MAIL</span>=org.apache.log4j.net.SMTPAppender<br><span class="hljs-attr">log4j.appender.MAIL.Threshold</span>=FATAL<br><span class="hljs-attr">log4j.appender.MAIL.BufferSize</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">log4j.appender.MAIL.From</span>=yyflyons@<span class="hljs-number">163</span>.com<br><span class="hljs-attr">log4j.appender.MAIL.SMTPHost</span>=www.wusetu.com<br><span class="hljs-attr">log4j.appender.MAIL.Subject</span>=Log4J Message<br><span class="hljs-attr">log4j.appender.MAIL.To</span>=yyflyons@<span class="hljs-number">126</span>.com<br><span class="hljs-attr">log4j.appender.MAIL.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.MAIL.layout.ConversionPattern</span>=[framework] %d - %c -%-<span class="hljs-number">4</span>r [%t] %-<span class="hljs-number">5</span>p %c %x - %m%n<br></code></pre></td></tr></table></figure>

<h2 id="Spring-MVC-Log4j-example"><a href="#Spring-MVC-Log4j-example" class="headerlink" title="Spring MVC + Log4j example"></a><a href="https://www.mkyong.com/spring-mvc/spring-mvc-log4j-integration-example/" target="_blank" rel="noopener">Spring MVC + Log4j example</a></h2>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务Job</title>
    <url>/java/job/</url>
    <content><![CDATA[<h2 id="在线-Cron-表达式生成器"><a href="#在线-Cron-表达式生成器" class="headerlink" title="在线 Cron 表达式生成器"></a>在线 Cron 表达式生成器</h2><ul>
<li><a href="https://www.stylefeng.cn/contents/roses_kernel/detail/15_timer.html#%E5%9C%A8%E7%BA%BF%E5%88%9B%E5%BB%BA%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6" target="_blank" rel="noopener">定时任务 | Guns 快速开发平台</a></li>
<li><a href="https://cron.qqe2.com/" target="_blank" rel="noopener">https://cron.qqe2.com/</a></li>
<li><a href="https://qqe2.com/cron" target="_blank" rel="noopener">https://qqe2.com/cron</a></li>
</ul>
<h2 id="QuartZ-Cron-表达式-sunjie-博客园"><a href="#QuartZ-Cron-表达式-sunjie-博客园" class="headerlink" title="QuartZ Cron 表达式 - sunjie - 博客园"></a><a href="https://www.cnblogs.com/sunjie9606/archive/2012/03/15/2397626.html" target="_blank" rel="noopener">QuartZ Cron 表达式 - sunjie - 博客园</a></h2><p>CronTrigger</p>
<p>CronTriggers 往往比 SimpleTrigger 更有用，如果您需要基于日历的概念，而非 SimpleTrigger 完全指定的时间间隔，复发的发射工作的时间表。<br>CronTrigger，你可以指定触发的时间表如“每星期五中午”，或“每个工作日 9:30 时”，甚至“每 5 分钟一班 9:00 和 10:00 逢星期一上午，星期三星期五“。<br>即便如此，SimpleTrigger 一样，CronTrigger 拥有的 startTime 指定的时间表时生效，指定的时间表时，应停止（可选）结束时间。<br>Cron Expressions</p>
<p>cron 的表达式被用来配置 CronTrigger 实例。 cron 的表达式是字符串，实际上是由七子表达式，描述个别细节的时间表。这些子表达式是分开的空白，代表：</p>
<pre><code>1.        Seconds
2.        Minutes
3.        Hours
4.        Day-of-Month
5.        Month
6.        Day-of-Week
7.        Year (可选字段)</code></pre><p>例 “0 0 12 ? * WED” 在每星期三下午 12:00 执行,</p>
<p>个别子表达式可以包含范围, 例如，在前面的例子里(“WED”)可以替换成 “MON-FRI”, “MON, WED, FRI”甚至”MON-WED,SAT”.</p>
<p>“*” 代表整个时间段.</p>
<p>每一个字段都有一套可以指定有效值，如</p>
<pre><code>Seconds (秒)         ：可以用数字0－59 表示，

Minutes(分)          ：可以用数字0－59 表示，

Hours(时)             ：可以用数字0-23表示,

Day-of-Month(天) ：可以用数字1-31 中的任一一个值，但要注意一些特别的月份

Month(月)            ：可以用0-11 或用字符串  “JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV and DEC” 表示

Day-of-Week(每周)：可以用数字1-7表示（1 ＝ 星期日）或用字符口串“SUN, MON, TUE, WED, THU, FRI and SAT”表示

“/”：为特别单位，表示为“每”如“0/15”表示每隔15分钟执行一次,“0”表示为从“0”分开始, “3/20”表示表示每隔20分钟执行一次，“3”表示从第3分钟开始执行

“?”：表示每月的某一天，或第周的某一天

“L”：用于每月，或每周，表示为每月的最后一天，或每个月的最后星期几如“6L”表示“每月的最后一个星期五”

“W”：表示为最近工作日，如“15W”放在每月（day-of-month）字段上表示为“到本月15日最近的工作日”

““#”：是用来指定“的”每月第n个工作日,例 在每周（day-of-week）这个字段中内容为&quot;6#3&quot; or &quot;FRI#3&quot; 则表示“每月第三个星期五”</code></pre><p>1）Cron 表达式的格式：秒 分 时 日 月 周 年(可选)。</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>允许的值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>分</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时</td>
<td>0-23</td>
<td>, - * /</td>
</tr>
<tr>
<td>日</td>
<td>1-31</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月</td>
<td>1-12 or JAN-DEC</td>
<td>, - * /</td>
</tr>
<tr>
<td>周几</td>
<td>1-7 or SUN-SAT</td>
<td>, - * ? / L C #</td>
</tr>
<tr>
<td>年 (可选字段)</td>
<td>empty, 1970-2099</td>
<td>, - * /</td>
</tr>
</tbody></table>
<pre><code>“?”字符：表示不确定的值

“,”字符：指定数个值

“-”字符：指定一个值的范围

“/”字符：指定一个值的增加幅度。n/m表示从n开始，每次增加m

“L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X

“W”字符：指定离给定日期最近的工作日(周一到周五)

“#”字符：表示该月第几个周X。6#3表示该月第3个周五</code></pre><p>2）Cron 表达式范例：</p>
<pre><code>每隔5秒执行一次：*/5 * * * * ?

每隔1分钟执行一次：0 */1 * * * ?

每天23点执行一次：0 0 23 * * ?

每天凌晨1点执行一次：0 0 1 * * ?

每月1号凌晨1点执行一次：0 0 1 1 * ?

每月最后一天23点执行一次：0 0 23 L * ?

每周星期天凌晨1点实行一次：0 0 1 ? * L

在26分、29分、33分执行一次：0 26,29,33 * * * ?

每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</code></pre><p>注： <code>*/X</code> 或 <code>M-N/X</code>，表示匹配范围内能被 X 整除的值，如 <code>1-10/3</code> 就等同于 <code>3, 6, 9</code></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>跑定时任务时要注意： 整点的情况要考虑周全。<br>例如：活动的开始时间是 12:00 ，再结合数据库查询的时候， start_at &gt;= 12:00 时，不要漏了“=”号。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java代码片段</title>
    <url>/java/java%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 《Android进阶之光》p214</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">convertStreamToString</span><span class="hljs-params">(InputStream stream)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(stream));<br>        StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>            sb.append(line).append(<span class="hljs-string">"\n"</span>);<br>        &#125;<br>        String response = sb.toString();<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br>    <span class="hljs-comment">// https://stackoverflow.com/questions/43157/easy-way-to-write-contents-of-a-java-inputstream-to-an-outputstream</span><br>    <span class="hljs-comment">// http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html</span><br>    <span class="hljs-comment">// http://commons.apache.org/proper/commons-io/download_io.cgi</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">convertStreamToFile</span><span class="hljs-params">(InputStream in, File out)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream outStream = <span class="hljs-keyword">new</span> FileOutputStream(out);<br>        IOUtils.copy(in, outStream);<br>        in.close();<br>        outStream.close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 网络图片</span><br>        InputStream stream = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">"https://www.cnblogs.com/images/logo_small.gif"</span>).openStream();<br><br>        convertStreamToFile(stream, <span class="hljs-keyword">new</span> File(<span class="hljs-string">"./java/cnblog_logo.png"</span>));<br><br>        <span class="hljs-comment">// 网页</span><br>        InputStream stream2 = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">"https://www.cnblogs.com/"</span>).openStream();<br><br>        convertStreamToFile(stream2, <span class="hljs-keyword">new</span> File(<span class="hljs-string">"./java/cnblog.html"</span>));<br><br>        <span class="hljs-comment">// 本地文件</span><br>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"./java/hi.txt"</span>);<br><br>        convertStreamToFile(fileInputStream, <span class="hljs-keyword">new</span> File(<span class="hljs-string">"./java/hi2.txt"</span>));<br><br>        <span class="hljs-comment">// 获取字符串</span><br>        FileInputStream fileInputStream2 = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"./java/hi.txt"</span>);<br>        String str = convertStreamToString(fileInputStream2);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="定时功能"><a href="#定时功能" class="headerlink" title="定时功能"></a>定时功能</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="hljs-number">1</span>);<br>service.schedule(<span class="hljs-keyword">new</span> Runnable() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Yeah, I'm late."</span>);<br>        service.shutdown();<br>    &#125;<br>&#125;, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br></code></pre></td></tr></table></figure>

<h2 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h2><p>一次只打一个断点。</p>
<h2 id="获取服务器时间"><a href="#获取服务器时间" class="headerlink" title="获取服务器时间"></a>获取服务器时间</h2><p>原理：通过获取链接的 Header 信息来获取时间。<br>注意：网络请求需要在多线程中执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">"http://lyloou.com"</span>);<br>URLConnection uc = url.openConnection();<span class="hljs-comment">// 获取连接对象</span><br>uc.connect();<span class="hljs-comment">// 连接</span><br><span class="hljs-keyword">long</span> webTimeMillis = uc.getDate();<br>SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>, Locale.CHINA);<br>String formatWebTime = simpleDateFormat.format(<span class="hljs-keyword">new</span> Date(webTimeMillis));<br>System.out.println(formatWebTime);<br></code></pre></td></tr></table></figure>

<h2 id="添加顺序的注释"><a href="#添加顺序的注释" class="headerlink" title="添加顺序的注释"></a>添加顺序的注释</h2><blockquote>
<p>参考资料:深入探索 Android 热修复技术原理 7.3Q.pdf p107</p>
</blockquote>
<p>// %% Part 1. 创建了新对象；<br>// %% Part 2. 找到旧对象的引用；<br>// %% Part 3. 用新对象赋值给旧对象的引用；</p>
<h2 id="对象转换成字符串"><a href="#对象转换成字符串" class="headerlink" title="对象转换成字符串"></a>对象转换成字符串</h2><p>在不确定对象是否为空时，通过<code>String.valueOf(object)</code>的方法，<br>而不是直接调用：<code>object.toString();</code>方法</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><code>当类似的代码多次出现的时候，就可以考虑将其封装起来。</code></p>
<h2 id="日期、时间格式的转换"><a href="#日期、时间格式的转换" class="headerlink" title="日期、时间格式的转换"></a>日期、时间格式的转换</h2><blockquote>
</blockquote>
<ul>
<li><a href="https://github.com/lyloou/RxJavaSamples/blob/master/app/src/main/java/com/rengwuxian/rxjavasamples/util/GankBeautyResultToItemsMapper.java" target="_blank" rel="noopener">GankBeautyResultToItemsMapper.java</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String strDate = <span class="hljs-string">"2017-05-09T14:28:32.974Z"</span>;<br>SimpleDateFormat inputFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd'T'HH:mm:ss.SS'Z'"</span>);<br>SimpleDateFormat outputFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yy/MM/dd HH:mm:ss"</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    Date inputDate = inputFormat.parse(strDate);<br>    String outputDate = outputFormat.format(inputDate);<br>    System.out.println(outputDate);<br>&#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="打印出好看的list"><a href="#打印出好看的list" class="headerlink" title="打印出好看的list"></a>打印出好看的<code>list</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println(Arrays.toString(list.toArray()));<br></code></pre></td></tr></table></figure>

<h2 id="HashMap-用来缓存对象"><a href="#HashMap-用来缓存对象" class="headerlink" title="HashMap 用来缓存对象"></a>HashMap 用来缓存对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; objectsCache = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br><span class="hljs-comment">// put in</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putIn</span><span class="hljs-params">(String key, Object obj)</span> </span>&#123;<br>  objectsCache.put(key, obj);<br>&#125;<br><br><span class="hljs-comment">// get out</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getOut</span><span class="hljs-params">(String key, Object <span class="hljs-keyword">default</span>)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span>(objectsCache.containsKey(key)) &#123;<br>    Object obj = objectsCache.get(key);<br>    <span class="hljs-keyword">if</span>(obj == <span class="hljs-keyword">null</span>) &#123;<br>      objectsCache.put(key, <span class="hljs-keyword">default</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    objectsCache.put(key, <span class="hljs-keyword">default</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">default</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="根据-class-将-object-对象转换成-class-的对象"><a href="#根据-class-将-object-对象转换成-class-的对象" class="headerlink" title="根据 class 将 object 对象转换成 class 的对象"></a>根据 class 将 object 对象转换成 class 的对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">MyClass mobj = MyClass<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">cast</span>(<span class="hljs-title">obj</span>)</span>;<br><span class="hljs-comment">// or</span><br>Object newObj = Class.forName(classname).cast(obj);<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok</title>
    <url>/java/lombok/</url>
    <content><![CDATA[<h2 id="常用的-lombok-注解"><a href="#常用的-lombok-注解" class="headerlink" title="常用的 lombok 注解"></a><a href="https://blog.csdn.net/mccand1234/article/details/53456411" target="_blank" rel="noopener">常用的 lombok 注解</a></h2><ul>
<li><code>@EqualsAndHashCode</code> ：实现 equals()方法和 hashCode()方法 @ToString：实现` toString()方法</li>
<li><code>@Data</code> ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了 equals、canEqual、hashCode、toString 方法</li>
<li><code>@Setter</code> ：注解在属性上；为属性提供 setting 方法</li>
<li><code>@Getter</code> ：注解在属性上；为属性提供 getting 方法</li>
<li><code>@Log4j</code> ：注解在类上；为类提供一个 属性名为 log 的 log4j 日志对象</li>
<li><code>@NoArgsConstructor</code> ：注解在类上；为类提供一个无参的构造方法</li>
<li><code>@AllArgsConstructor</code> ：注解在类上；为类提供一个全参的构造方法</li>
<li><code>@Cleanup</code> ：关闭流 @Synchronized：对象同步 @SneakyThrows：抛出异常</li>
</ul>
<h2 id="转换数据库数据到实体对象出错"><a href="#转换数据库数据到实体对象出错" class="headerlink" title="转换数据库数据到实体对象出错"></a>转换数据库数据到实体对象出错</h2><blockquote>
<p>org.springframework.dao.DataIntegrityViolationException: Error attempting to get column ‘content’ from result set. Cause: java.sql.SQLDataException: Cannot convert string ‘2202’ to java.sql.Timestamp value</p>
</blockquote>
<p>实际上是因为没有空构造函数引起的错误，参考 <a href="https://github.com/baomidou/mybatis-plus/issues/1074" target="_blank" rel="noopener">改变实体类成员变量的顺序,导致报错 · Issue #1074 · baomidou/mybatis-plus</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span> <span class="hljs-comment">// 添加这个</span><br><span class="hljs-meta">@AllArgsConstructor</span> <span class="hljs-comment">// 也加上这个</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> Date gmtCreate;<br><br>    <span class="hljs-keyword">private</span> Date gmtModified;<br><br>    <span class="hljs-keyword">private</span> String day;<br><br>    <span class="hljs-keyword">private</span> String content;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Lombok-IDEA-异常"><a href="#Lombok-IDEA-异常" class="headerlink" title="Lombok IDEA 异常"></a>Lombok IDEA 异常</h2><p><a href="https://stackoverflow.com/questions/65128763/java-you-arent-using-a-compiler-supported-by-lombok-so-lombok-will-not-work-a" target="_blank" rel="noopener">intellij idea - java: You aren’t using a compiler supported by lombok, so lombok will not work and has been disabled - Stack Overflow</a></p>
<blockquote>
<p><code>-Djps.track.ap.dependencies=false</code><br>Build, Execution, Deployment -&gt; Compiler -&gt; Shared build process VM options</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven命令</title>
    <url>/java/maven-command/</url>
    <content><![CDATA[<h2 id="maven-修改版本号命令"><a href="#maven-修改版本号命令" class="headerlink" title="maven 修改版本号命令"></a>maven 修改版本号命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 更新根模块及所有子模块的版本号，同时会生成 pom.xml.versionsBackup 文件</span><br>mvn versions:<span class="hljs-built_in">set</span> -DnewVersion=x.x.x-SNAPSHOT<br><br><span class="hljs-comment"># 提交版本修改 同时会删除 pom.xml.versionsBackup 文件。</span><br>mvn versions:commit<br></code></pre></td></tr></table></figure>

<p>ref:</p>
<blockquote>
<ul>
<li><a href="https://www.liujiajia.me/2018/11/29/maven-set-modules-version" target="_blank" rel="noopener">【Maven】修改模块版本号 | 佳佳的博客</a></li>
<li><a href="https://github.com/alibaba/jetcache/wiki/DevNote_CN" target="_blank" rel="noopener">DevNote_CN · alibaba/jetcache Wiki</a></li>
<li><a href="https://blog.csdn.net/ggbomb2/article/details/78316068" target="_blank" rel="noopener">Versions maven plugin 修改版本_GGBomb2 的博客-CSDN 博客</a></li>
</ul>
</blockquote>
<h2 id="多个-maven-模块的项目，只打包某个模块和其关联的模块"><a href="#多个-maven-模块的项目，只打包某个模块和其关联的模块" class="headerlink" title="多个 maven 模块的项目，只打包某个模块和其关联的模块"></a>多个 maven 模块的项目，只打包某个模块和其关联的模块</h2><p>参考：<a href="https://blog.csdn.net/fqwgc8/article/details/50517821" target="_blank" rel="noopener">Maven 多个 mudule 只编译、打包指定 module_fqwgc8 的博客-CSDN 博客_maven 编译指定 module</a></p>
<p>例如 A,B,P 的继承关系为<br>P<br>|<br>—– A<br>|<br>—– B</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">-pl, <span class="hljs-comment">--projects</span><br>        Build specified reactor projects <span class="hljs-keyword">instead of</span> all projects<br>-am, <span class="hljs-comment">--also-make</span><br>        If project <span class="hljs-built_in">list</span> <span class="hljs-keyword">is</span> specified, also build projects required <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">list</span><br></code></pre></td></tr></table></figure>

<p>打包 A</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入目录 P</span><br>mvn install -pl A -am<br><span class="hljs-comment"># 添加prod参数</span><br>mvn install -pl A -am -Pprod<br>mvn package -pl A -am -Pprod<br></code></pre></td></tr></table></figure>

<h2 id="maven-多模块"><a href="#maven-多模块" class="headerlink" title="maven 多模块"></a>maven 多模块</h2><ul>
<li><a href="https://juejin.im/post/5cd15ed2e51d453b5854b881" target="_blank" rel="noopener">三分钟把 spring boot 打成 war 包部署到 tomcat 中 - 掘金</a></li>
<li>打包共享 lib ，分离配置文件</li>
</ul>
<h2 id="模块太多，编译指定模块"><a href="#模块太多，编译指定模块" class="headerlink" title="模块太多，编译指定模块"></a>模块太多，编译指定模块</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 编译指定module</span><br><span class="hljs-comment"># [continuous integration - Skip a submodule during a Maven build - Stack Overflow](https://stackoverflow.com/questions/8304110/skip-a-submodule-during-a-maven-build)</span><br><br>mvn -pl \<br>:marketing-api-tv-topic-pk,\<br>:marketing-api-phone-topic-pk\<br>  clean install -Dmaven.skip.test=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<h2 id="查看包依赖情况，从什么时候引入的"><a href="#查看包依赖情况，从什么时候引入的" class="headerlink" title="查看包依赖情况，从什么时候引入的"></a>查看包依赖情况，从什么时候引入的</h2><p><a href="https://www.cnblogs.com/wormday/p/8186109.html" target="_blank" rel="noopener">通过 IntelliJ IDEA 和 Maven 命令查看某个 jar 包是怎么引入的 - 小墨的童鞋 - 博客园</a></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">mvn <span class="hljs-string">dependency:</span>tree -Dverbose -Dincludes=org.<span class="hljs-string">yaml:</span>snakeyaml<br></code></pre></td></tr></table></figure>

<h2 id="打包时跳过测试"><a href="#打包时跳过测试" class="headerlink" title="打包时跳过测试"></a>打包时跳过测试</h2><p>注意用的是 package 命令 而不是 war 命令</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">mvn clean package -<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dmaven</span>.</span></span>test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中的 Exception 和 Error</title>
    <url>/java/exception%E5%92%8Cerror/</url>
    <content><![CDATA[<h3 id="java-What’s-the-difference-between-StackOverflowError-and-OutOfMemoryError-Stack-Overflow"><a href="#java-What’s-the-difference-between-StackOverflowError-and-OutOfMemoryError-Stack-Overflow" class="headerlink" title="java - What’s the difference between StackOverflowError and OutOfMemoryError - Stack Overflow"></a><a href="https://stackoverflow.com/questions/11435613/whats-the-difference-between-stackoverflowerror-and-outofmemoryerror" target="_blank" rel="noopener">java - What’s the difference between StackOverflowError and OutOfMemoryError - Stack Overflow</a></h3><p>Short answer:</p>
<ul>
<li>OutOfMemoryError is related to Heap.</li>
<li>StackOverflowError is related to stack</li>
</ul>
<p>Long answer:</p>
<p>When you start JVM you define how much RAM it can use for processing. JVM divides this into certain memory locations for its processing purpose, two of those are Stack &amp; Heap</p>
<p>If you have large objects (or) referenced objects in memory, then you will see OutofMemoryError. If you have strong references to objects, then GC can’t clean the memory space allocated for that object. When JVM tries to allocate memory for new object and not enough space available it throws OutofMemoryError because it can’t allocate the required amount of memory.</p>
<p>How to avoid: Make sure un-necessary objects are available for GC</p>
<p>All your local variables and methods calls related data will be on the stack. For every method call, one stack frame will be created and local as well as method call related data will be placed inside the stack frame. Once method execution is completed, the stack frame will be removed. ONE WAY to reproduce this is, have an infinite loop for method call, you will see stackoverflow error, because stack frame will be populated with method data for every call but it won’t be freed (removed).</p>
<p>How to avoid: Make sure method calls are ending (not in an infinite loop)</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Thrift</title>
    <url>/java/thrift/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/index.html" target="_blank" rel="noopener">Apache Thrift - 可伸缩的跨语言服务开发框架</a></p>
</li>
<li><p><a href="https://blog.csdn.net/zw19910924/article/details/78178539" target="_blank" rel="noopener">跨语言RPC框架Thrift详解 - zw19910924的专栏 - CSDN博客</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/Thrift" target="_blank" rel="noopener">Thrift - 维基百科，自由的百科全书</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/java/maven/</url>
    <content><![CDATA[<h2 id="Run-Your-Maven-Build-Anywhere-with-the-Maven-Wrapper"><a href="#Run-Your-Maven-Build-Anywhere-with-the-Maven-Wrapper" class="headerlink" title="Run Your Maven Build Anywhere with the Maven Wrapper"></a><a href="https://reflectoring.io/maven-wrapper/" target="_blank" rel="noopener">Run Your Maven Build Anywhere with the Maven Wrapper</a></h2><blockquote>
<p>mvn -N io.takari:maven:wrapper -Dmaven=3.6.3</p>
</blockquote>
<h2 id="Guide-to-installing-3rd-party-JARs"><a href="#Guide-to-installing-3rd-party-JARs" class="headerlink" title="Guide to installing 3rd party JARs"></a>Guide to installing 3rd party JARs</h2><p><a href="http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html" target="_blank" rel="noopener">http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html</a></p>
<h2 id="pom-xml-文件-中-dependency-标记的-scope-属性解释："><a href="#pom-xml-文件-中-dependency-标记的-scope-属性解释：" class="headerlink" title="pom.xml 文件 中 dependency 标记的 scope 属性解释："></a>pom.xml 文件 中 dependency 标记的 scope 属性解释：</h2><p>compile，缺省值，适用于所有阶段，会随着项目一起发布。<br>provided，类似 compile，期望 JDK、容器或使用者会提供这个依赖。如 servlet.jar。<br>runtime，只在运行时使用，如 JDBC 驱动，适用运行和测试阶段。<br>test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。<br>system，类似 provided，需要显式提供包含依赖的 jar，Maven 不会在 Repository 中查找它。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 如：system --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aqmd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aqmd-netty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/aqmd-netty-2.0.1.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="一键生成"><a href="#一键生成" class="headerlink" title="一键生成"></a>一键生成</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mvn archetype:generate -DgroupId=com.lyloou.app -DartifactId=algs4 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<h2 id="多模块开发"><a href="#多模块开发" class="headerlink" title="多模块开发"></a>多模块开发</h2><ul>
<li><a href="https://www.cnblogs.com/luxh/p/3506750.html" target="_blank" rel="noopener">Maven 构建简单的多模块项目 - CN.programmer.Luxh - 博客园</a></li>
<li><a href="https://my.oschina.net/guoenzhou/blog/395851" target="_blank" rel="noopener">基于 Maven 分模块开发实践 - 郭恩洲的个人页面 - OSCHINA</a></li>
<li><a href="https://juvenshun.iteye.com/blog/305865" target="_blank" rel="noopener">Maven 最佳实践：划分模块 - Maven 中文 - ITeye 博客</a></li>
</ul>
<h2 id="nexus-安装"><a href="#nexus-安装" class="headerlink" title="nexus 安装"></a>nexus 安装</h2><h3 id="nexus2"><a href="#nexus2" class="headerlink" title="nexus2"></a>nexus2</h3><p><a href="https://www.cnblogs.com/dreamroute/p/5440419.html" target="_blank" rel="noopener">【原创】Nexus 搭建 Maven 私服</a><br><a href="https://help.sonatype.com/repomanager2/installing-and-running/running" target="_blank" rel="noopener">https://help.sonatype.com/repomanager2/installing-and-running/running</a></p>
<p>注意访问网址是： <a href="http://localhost:8081/nexus/" target="_blank" rel="noopener">http://localhost:8081/nexus/</a></p>
<p>学习建议：mvn 这个东西，就是难者不会，会者不难。基本上按照这样一个路线就问题不大，基本使用 =&gt; 了解继承/聚合 =&gt; 了解 jar 包冲突机制，并解决冲突 =&gt;了解 mvn 的 3 个默认声明周期 ，生命周期的各个阶段 phase ，各个阶段的目标 goal =&gt; mvn 的插件开发 =&gt; Nexus 私服搭建及其使用。大致这样一个过程下来，就能非常熟悉 mvn，如果在稍微看看 mvn 的源码，大致看一看，基本上可以说是精通 mvn 了。</p>
<h3 id="nexus3"><a href="#nexus3" class="headerlink" title="nexus3"></a>nexus3</h3><p><a href="https://help.sonatype.com/repomanager3/download/download-archives---repository-manager-3" target="_blank" rel="noopener">https://help.sonatype.com/repomanager3/download/download-archives---repository-manager-3</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">docker volume create --name nexus-data<br>docker run -d -p 8081:8081 --name nexus3 -v nexus-data:/nexus-data sonatype/nexus3<br><br>docker volume inspect nexus-data<br><span class="hljs-comment"># see admin password in nexus-data/admin.password</span><br></code></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/EasonJim/p/6858333.html" target="_blank" rel="noopener">https://www.cnblogs.com/EasonJim/p/6858333.html</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">nexus.exe /install &lt;optional-service-name&gt; <span class="hljs-comment">#安装</span><br>nexus.exe /start &lt;optional-service-name&gt; <span class="hljs-comment">#开始</span><br>nexus.exe /stop &lt;optional-service-name&gt; <span class="hljs-comment">#结束</span><br>nexus.exe /uninstall &lt;optional-service-name&gt; <span class="hljs-comment">#卸载</span><br><span class="hljs-comment">#其中&lt;optional-service-name&gt;为服务的名称，可自定义</span><br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://segmentfault.com/a/1190000003044418" target="_blank" rel="noopener">使用 Maven 管理 Java 项目 - 大梦初晓 - SegmentFault 思否</a></li>
<li><a href="http://www.huangbowen.net/blog/2016/01/29/understand-official-version-and-snapshot-version-in-maven/" target="_blank" rel="noopener">理解 Maven 中的 SNAPSHOT 版本和正式版本 - 黄博文的地盘</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/maven/snapshots.html" target="_blank" rel="noopener">Maven - 快照 - Maven 教程 - 极客学院 Wiki</a><br>快照 vs 版本<br>对于版本，Maven 一旦下载了指定的版本（例如 data-service:1.0），它将不会尝试从仓库里再次下载一个新的 1.0 版本。想要下载新的代码，数据服务版本需要被升级到 1.1。<br>对于快照，每次用户接口团队构建他们的项目时，Maven 将自动获取最新的快照（data-service:1.0-SNAPSHOT）。</li>
</ul>
<h2 id="设置-deploy-的地址"><a href="#设置-deploy-的地址" class="headerlink" title="设置 deploy 的地址"></a>设置 deploy 的地址</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- pom.xml中加入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>remote-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <span class="hljs-comment">&lt;!-- 注意id要和.m2文件夹中的setting.xml server标签下的id一样 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Releases<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/maven-releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>remote-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- .m2/setting.xml --&gt;</span><br><span class="hljs-comment">&lt;!-- [maven设置-setting.xml文件学习](https://blog.csdn.net/tomato__/article/details/13025187) --&gt;</span><br><span class="hljs-comment">&lt;!-- [Maven – Settings Reference](https://maven.apache.org/settings.html) --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>local-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>remote-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="有一些与-Maven-生命周期相关的重要概念需要说明"><a href="#有一些与-Maven-生命周期相关的重要概念需要说明" class="headerlink" title="有一些与 Maven 生命周期相关的重要概念需要说明"></a><a href="http://wiki.jikexueyuan.com/project/maven/build-life-cycle.html" target="_blank" rel="noopener">有一些与 Maven 生命周期相关的重要概念需要说明</a></h2><p>当一个阶段通过 Maven 命令调用时，例如 mvn compile，只有该阶段之前以及包括该阶段在内的所有阶段会被执行。</p>
<p>不同的 maven 目标将根据打包的类型（JAR / WAR / EAR），被绑定到不同的 Maven 生命周期阶段。</p>
<h2 id="maven-dependency-中-scope-compile-和-provided-区别"><a href="#maven-dependency-中-scope-compile-和-provided-区别" class="headerlink" title="maven dependency 中 scope=compile 和 provided 区别"></a><a href="https://blog.csdn.net/mccand1234/article/details/60962283" target="_blank" rel="noopener">maven dependency 中 scope=compile 和 provided 区别</a></h2><p>maven 中三种 classpath<br>编译，测试，运行<br>1.compile：默认范围，编译测试运行都有效<br>2.provided：在编译和测试时有效<br>3.runtime：在测试和运行时有效<br>4.test:只在测试时有效<br>5.system:在编译和测试时有效，与本机系统关联，可移植性差</p>
<h2 id="multiple-conflict"><a href="#multiple-conflict" class="headerlink" title="multiple conflict"></a>multiple conflict</h2><p><a href="https://stackoverflow.com/questions/14024756/slf4j-class-path-contains-multiple-slf4j-bindings" target="_blank" rel="noopener">maven 2 - SLF4J: Class path contains multiple SLF4J bindings - Stack Overflow</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="Generate-source-code-jar-for-Maven-based-project-–-Mkyong-com"><a href="#Generate-source-code-jar-for-Maven-based-project-–-Mkyong-com" class="headerlink" title="Generate source code jar for Maven based project – Mkyong.com"></a><a href="https://www.mkyong.com/maven/generate-source-code-jar-for-maven-based-project/" target="_blank" rel="noopener">Generate source code jar for Maven based project – Mkyong.com</a></h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-sources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看 goal 和 phase 的默认绑定</span><br>mvn <span class="hljs-built_in">help</span>:describe -Dplugin=org.apache.maven.plugins:maven-source-plugin:2.1.1 -Ddetail<br></code></pre></td></tr></table></figure>

<h2 id="打包的时候，resource-中的文件没有打包进去"><a href="#打包的时候，resource-中的文件没有打包进去" class="headerlink" title="打包的时候，resource 中的文件没有打包进去"></a>打包的时候，resource 中的文件没有打包进去</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mvn resources:resources<br></code></pre></td></tr></table></figure>

<p><a href="https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html" target="_blank" rel="noopener">Apache Maven Resources Plugin – Filtering</a></p>
<h2 id="其他镜像"><a href="#其他镜像" class="headerlink" title="其他镜像"></a>其他镜像</h2><ul>
<li><a href="https://yq.aliyun.com/articles/78124" target="_blank" rel="noopener">最快的 maven repository–阿里镜像仓库-云栖社区-阿里云</a></li>
<li><a href="https://help.aliyun.com/document_detail/102512.html?spm=a2c4e.11153940.0.0.213c7bdebk30HM" target="_blank" rel="noopener">阿里云帮助中心-阿里云，领先的云计算服务提供商</a></li>
</ul>
<h2 id="maven-加速"><a href="#maven-加速" class="headerlink" title="maven 加速"></a>maven 加速</h2><p><a href="https://zhuanlan.zhihu.com/p/71998219" target="_blank" rel="noopener">将 maven 源改为国内阿里云镜像 - 知乎</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/SETTINGS/1.0.0</span></span><br><span class="hljs-tag"><span class="hljs-string">                      http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">interactiveMode</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">usePluginRegistry</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">offline</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginGroups</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servers</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repo1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>central repo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>apache snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云阿帕奇仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">activeProfiles</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>MavenCentral<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmavenApache<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="idea-中调用-compile-package-时跳过测试"><a href="#idea-中调用-compile-package-时跳过测试" class="headerlink" title="idea 中调用 compile, package 时跳过测试"></a>idea 中调用 compile, package 时跳过测试</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">org.mapstruct.version</span>&gt;</span>1.4.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">org.mapstruct.version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- maven时跳过测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.test.skip</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">maven.test.skip</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="Maven-如何为不同的环境打包-——-开发、测试和产品环境-作业部落-Cmd-Markdown-编辑阅读器"><a href="#Maven-如何为不同的环境打包-——-开发、测试和产品环境-作业部落-Cmd-Markdown-编辑阅读器" class="headerlink" title="Maven 如何为不同的环境打包 —— 开发、测试和产品环境 - 作业部落 Cmd Markdown 编辑阅读器"></a><a href="https://www.zybuluo.com/haokuixi/note/25985" target="_blank" rel="noopener">Maven 如何为不同的环境打包 —— 开发、测试和产品环境 - 作业部落 Cmd Markdown 编辑阅读器</a></h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">runtime.env</span>&gt;</span>src/main/env/dev<span class="hljs-tag">&lt;/<span class="hljs-name">runtime.env</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">final.name</span>&gt;</span>webapp<span class="hljs-tag">&lt;/<span class="hljs-name">final.name</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.eightqiu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>CodeCmns<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>qa<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">runtime.env</span>&gt;</span>src/main/env/qa<span class="hljs-tag">&lt;/<span class="hljs-name">runtime.env</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">final.name</span>&gt;</span>webapp_$&#123;buildNumber&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">final.name</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.mojo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>buildnumber-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>validate<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>create<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">format</span>&gt;</span>&#123;0,date,yyyyMMdd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">format</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">items</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>timestamp<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">items</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.eightqiu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>CodeCmns<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>prod<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">runtime.env</span>&gt;</span>src/main/env/prod<span class="hljs-tag">&lt;/<span class="hljs-name">runtime.env</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">final.name</span>&gt;</span>webapp<span class="hljs-tag">&lt;/<span class="hljs-name">final.name</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.eightqiu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>CodeCmns<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="上传到-公网-maven-repository"><a href="#上传到-公网-maven-repository" class="headerlink" title="上传到 公网 maven repository"></a>上传到 公网 maven repository</h2><p><a href="https://maven.apache.org/repository/guide-central-repository-upload.html" target="_blank" rel="noopener">https://maven.apache.org/repository/guide-central-repository-upload.html</a><br><a href="https://central.sonatype.org/pages/ossrh-guide.html" target="_blank" rel="noopener">https://central.sonatype.org/pages/ossrh-guide.html</a><br><a href="https://central.sonatype.org/pages/apache-maven.html" target="_blank" rel="noopener">https://central.sonatype.org/pages/apache-maven.html</a><br><a href="https://central.sonatype.org/publish/requirements/gpg" target="_blank" rel="noopener">https://central.sonatype.org/publish/requirements/gpg</a></p>
<p><a href="https://my.oschina.net/vFfYcnn42VKa/blog/1524409" target="_blank" rel="noopener">发布构件到 Maven 中央仓库 - 在风中的个人空间 - OSCHINA - 中文开源技术交流社区</a></p>
<blockquote>
<p>mvn clean deploy -P release -Dgpg.passphrase=密码<br>mvn clean deploy -Pdeploy</p>
</blockquote>
<p><a href="https://stackoverflow.com/questions/7446599/how-to-deploy-only-the-sub-modules-using-maven-deploy" target="_blank" rel="noopener">How to Deploy only the sub-modules using maven deploy? - Stack Overflow</a></p>
<blockquote>
<p>mvn deploy -pl SubModuleB</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper</title>
    <url>/java/zookeeper/</url>
    <content><![CDATA[<ol>
<li>按照 <a href="https://my.oschina.net/yafeiok/blog/618835" target="_blank" rel="noopener">zookeeper入门与实战 - yafeiok1的个人空间 - 开源中国</a> 在linux上跑通。</li>
<li>看完后重新看一遍上面的文章。</li>
</ol>
<p><a href="https://blog.csdn.net/liu857279611/article/details/70495413" target="_blank" rel="noopener">zookeeper之监听事件总结 - 航天飞哥的博客 - CSDN博客</a></p>
<p><a href="https://www.open-open.com/lib/view/open1456154723823.html" target="_blank" rel="noopener">zookeeper入门与实战 - 分布式/云计算/大数据 - 服务器软件 - 深度开源</a></p>
<p><a href="https://www.cnblogs.com/hujiapeng/p/9019103.html" target="_blank" rel="noopener">Zookeeper安装使用及JavaAPI使用 - jiapeng - 博客园</a></p>
<p><a href="https://m.w3cschool.cn/zookeeper/zookeeper_overview.html" target="_blank" rel="noopener">Zookeeper 概述_Zookeeper教程_w3cschool</a></p>
<p><a href="https://www.cnblogs.com/felixzh/p/5869212.html" target="_blank" rel="noopener">Zookeeper的功能以及工作原理 - 微信-大数据从业者 - 博客园</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java验证只有一个时间戳</title>
    <url>/java/%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%97%B6%E9%97%B4%E6%88%B3%20/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>每个不同的地区都有对应有不同时间戳吗？</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//: 通过程序证明来时间戳只有一个；</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Calendar now = <span class="hljs-keyword">new</span> GregorianCalendar();<br>        System.out.println(TimeZone.getDefault());<br>        System.out.println(now.getTime());<br>        System.out.println(now.getTime().getTime());<br>        System.out.println();<br><br>        TimeZone.setDefault(TimeZone.getTimeZone(<span class="hljs-string">"GMT+8"</span>));<br>        System.out.println(TimeZone.getDefault());<br>        System.out.println(now.getTime());<br>        System.out.println(now.getTime().getTime());<br>        System.out.println();<br><br>        TimeZone.setDefault(TimeZone.getTimeZone(<span class="hljs-string">"GMT+0"</span>));<br>        System.out.println(TimeZone.getDefault());<br>        System.out.println(now.getTime());<br>        System.out.println(now.getTime().getTime());<br>        System.out.println();<br><br>        TimeZone.setDefault(TimeZone.getTimeZone(<span class="hljs-string">"GMT+12"</span>));<br>        System.out.println(TimeZone.getDefault());<br>        System.out.println(now.getTime());<br>        System.out.println(now.getTime().getTime());<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">sun.util.calendar.ZoneInfo[id="Asia/Shanghai",offset=28800000,dstSavings=0,useDaylight=false,transitions=19,lastRule=null]</span><br><span class="hljs-comment">Thu Aug 10 09:39:22 CST 2017</span><br><span class="hljs-comment">1502329162745</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">sun.util.calendar.ZoneInfo[id="GMT+08:00",offset=28800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]</span><br><span class="hljs-comment">Thu Aug 10 09:39:22 GMT+08:00 2017</span><br><span class="hljs-comment">1502329162745</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">sun.util.calendar.ZoneInfo[id="GMT+00:00",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]</span><br><span class="hljs-comment">Thu Aug 10 01:39:22 GMT+00:00 2017</span><br><span class="hljs-comment">1502329162745</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">sun.util.calendar.ZoneInfo[id="GMT+12:00",offset=43200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]</span><br><span class="hljs-comment">Thu Aug 10 13:39:22 GMT+12:00 2017</span><br><span class="hljs-comment">1502329162745</span><br><span class="hljs-comment">*/</span><span class="hljs-comment">//~</span><br></code></pre></td></tr></table></figure>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>只有一个时间戳；<br><strong>时间戳在所有地方都是一样的，只不过是该时间戳对应不同的地区有不同的当地时间表示（而不是有每个地区都有一个不同的时间戳）。</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java名词解释</title>
    <url>/java/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><blockquote>
<p>在计算机软件中，数据访问对象（data access object，DAO）是为某种类型的数据库或其他持久性机制提供一个抽象接口的对象。通过映射应用程序对持久层的调用，DAO 提供一些特定的数据操作，而无需暴露数据库细节。这种隔离支持单一功能原则。它分离了应用程序需要访问哪些数据，就域特定对象和数据类型（DAO 的公共接口），而言，这些需求可以用数据库管理系统（DBMS）、数据库模式等满足（DAO 的实现）。</p>
</blockquote>
<ul>
<li><a href="https://zh.wikipedia.org/zh-cn/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-cn/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1</a></li>
</ul>
<h2 id="POJO-amp-JavaBean"><a href="#POJO-amp-JavaBean" class="headerlink" title="POJO &amp; JavaBean"></a>POJO &amp; JavaBean</h2><p><strong>POJO</strong><br>使用 POJO 名称是为了避免和 EJB 混淆起来, 而且简称比较直接. 其中有一些属性及其 getter setter 方法的类,没有业务逻辑，有时可以作为 VO(value -object)或 dto(Data Transform Object)来使用.<br>当然,如果你有一个简单的运算属性也是可以的,但不允许有业务方法,也不能携带有 connection 之类的方法。</p>
<p>下面是摘自 Martin Fowler 个人网站的一句话：<br>“We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it’s caught on very nicely.”－－Martin Fowler<br>我们疑惑为什么人们不喜欢在他们的系统中使用普通的对象，我们得到的结论是——普通的对象缺少一个响亮的名字，因此我们给它们起了一个，并且取得了很好的效果。——Martin Fowler</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">分层领域模型规约<br>- DO（Data Object）：此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。<br>- DTO（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。<br>- BO（Business Object）：业务对象，由 Service 层输出的封装业务逻辑的对象。<br>- AO（Application Object）：应用对象，在 Web 层与 Service 层之间抽象的复用对象模型，极为贴近展示层，复用度不高。<br>- VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。<br>- Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。<br>// 阿里巴巴Java开发手册1.4.0.pdf<br></code></pre></td></tr></table></figure>

<p><strong>JavaBean</strong><br>JavaBeans 是 Java 中一种特殊的类，可以将多个对象封装到一个对象（bean）中。特点是可序列化，提供无参构造器，提供 getter 方法和 setter 方法访问对象的属性。名称中的“Bean”是用于 Java 的可重用软件组件的惯用叫法。</p>
<p>Java Bean 是可复用的组件，对 Java Bean 并没有严格的规范，理论上讲，任何一个 Java 类都可以是一个 Bean 。<br>但通常情况下，由于 Java Bean 是被容器所创建（如 Tomcat) 的，所以 Java Bean 应具有一个无参的构造器，另外，通常 Java Bean 还要实现 Serializable 接口用于实现 Bean 的持久性。 Java Bean 是不能被跨进程访问的。JavaBean 是一种组件技术，就好像你做了一个扳子，而这个扳子会在很多地方被拿去用，这个扳子也提供多种功能(你可以拿这个扳子扳、锤、撬等等)，而这个扳子就是一个组件。</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/JavaBeans" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/JavaBeans</a></li>
<li><a href="https://blog.csdn.net/qq_27093465/article/details/52527270" target="_blank" rel="noopener">POJO 是什么，javabean 是什么，以及 POJO 与 javabean 的区别 - CSDN 博客</a></li>
<li><a href="https://blog.csdn.net/chenchunlin526/article/details/69939337" target="_blank" rel="noopener">什么是 JavaBean、bean? 什么是 POJO、PO、DTO、VO、BO ? 什么是 EJB、EntityBean？ - chunlynn 的小屋 | 头条号：有范管理美学 - CSDN 博客</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】基于方法引用的构建器模式运用</title>
    <url>/java/%E5%9F%BA%E4%BA%8E%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%9A%84%E6%9E%84%E5%BB%BA%E5%99%A8%E6%A8%A1%E5%BC%8F%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>封装一个 set 对象构建器，利用类的 set 引用方法（不局限 set 开头的方法）来设值，便于点式调用。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> cn.hutool.core.bean.BeanUtil;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-keyword">private</span> String other;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">appendOther</span><span class="hljs-params">(String other)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.other = other;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 方法1，普通语法（推荐）</span><br>        User user1 = <span class="hljs-keyword">new</span> User();<br>        user1.setName(<span class="hljs-string">"Jojo"</span>);<br>        user1.setAge(<span class="hljs-number">18</span>);<br>        user1.setSex(<span class="hljs-string">"女"</span>);<br>        user1.setEmail(<span class="hljs-string">"JoJo@example.com"</span>);<br>        user1.appendOther(<span class="hljs-string">"其他数据"</span>);<br>        System.out.println(user1);<br><br>        <span class="hljs-comment">// 方法2，双括号语法（本质是匿名函数。不推荐使用，可能引起内层泄露）</span><br>        User user2 = <span class="hljs-keyword">new</span> User() &#123;&#123;<br>            setName(<span class="hljs-string">"Jojo"</span>);<br>            setAge(<span class="hljs-number">18</span>);<br>            setSex(<span class="hljs-string">"女"</span>);<br>            setEmail(<span class="hljs-string">"JoJo@example.com"</span>);<br>            appendOther(<span class="hljs-string">"其他数据"</span>);<br>        &#125;&#125;;<br>        System.out.println(user2);<br><br>        <span class="hljs-comment">// 方法3：set 构建器（推荐）</span><br>        <span class="hljs-keyword">final</span> User user3 = SetBuilder.of(<span class="hljs-keyword">new</span> User())<br>                .set(User::setName, <span class="hljs-string">"JoJo"</span>)<br>                .set(User::setAge, <span class="hljs-number">18</span>)<br>                .set(User::setSex, <span class="hljs-string">"女"</span>)<br>                .set(User::setEmail, <span class="hljs-string">"JoJo@example.com"</span>)<br>                .set(User::appendOther, <span class="hljs-string">"其他数据"</span>)<br>                .build();<br>        System.out.println(user3);<br><br>        <span class="hljs-comment">// 方法4：反射设值</span><br>        <span class="hljs-keyword">final</span> User user4 = <span class="hljs-keyword">new</span> User();<br>        BeanUtil.setFieldValue(user4, <span class="hljs-string">"name"</span>, <span class="hljs-string">"JoJo"</span>);<br>        BeanUtil.setFieldValue(user4, <span class="hljs-string">"age"</span>, <span class="hljs-number">18</span>);<br>        BeanUtil.setFieldValue(user4, <span class="hljs-string">"sex"</span>, <span class="hljs-string">"女"</span>);<br>        BeanUtil.setFieldValue(user4, <span class="hljs-string">"email"</span>, <span class="hljs-string">"JoJo@example.com"</span>);<br>        BeanUtil.setFieldValue(user4, <span class="hljs-string">"other"</span>, <span class="hljs-string">"其他数据"</span>);<br>        System.out.println(user4);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打印：</span><br><span class="hljs-comment">     User(name=Jojo, age=18, sex=女, email=JoJo@example.com, other=其他数据)</span><br><span class="hljs-comment">     User(name=Jojo, age=18, sex=女, email=JoJo@example.com, other=其他数据)</span><br><span class="hljs-comment">     User(name=JoJo, age=18, sex=女, email=JoJo@example.com, other=其他数据)</span><br><span class="hljs-comment">     User(name=JoJo, age=18, sex=女, email=JoJo@example.com, other=其他数据)</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 封装一个set构建器，基于对象的 set 引用方法来设值</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; 指定对象泛型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetBuilder</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> T object;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">SetBuilder&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(T object)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SetBuilder&lt;&gt;(object);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object 对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SetBuilder</span><span class="hljs-params">(T object)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.object = object;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 链式调用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setter set引用方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value  要设置的属性值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt;    对象泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> builder，可链式调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;V&gt; <span class="hljs-function">SetBuilder&lt;T&gt; <span class="hljs-title">set</span><span class="hljs-params">(Setter&lt;T, V&gt; setter, V value)</span> </span>&#123;<br>        setter.set(object, value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 构建后对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br><br>    <span class="hljs-meta">@FunctionalInterface</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Setter</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">V</span>&gt; </span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 调用set方法</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> t     实体对象</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> value 实体对象属性值</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T t, V value)</span></span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习资料</title>
    <url>/java/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<h2 id="学习途径"><a href="#学习途径" class="headerlink" title="学习途径"></a>学习途径</h2><ul>
<li>GitHub</li>
<li>Stackoverflow</li>
<li>Twitter</li>
<li>牛人关注的牛人</li>
</ul>
<h2 id="java-tutorial-搜索"><a href="#java-tutorial-搜索" class="headerlink" title="java tutorial 搜索"></a>java tutorial 搜索</h2><p><a href="https://docs.oracle.com/javase/tutorial/search.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/search.html</a></p>
<h2 id="发展趋势"><a href="#发展趋势" class="headerlink" title="发展趋势"></a>发展趋势</h2><p><a href="https://github.com/trending/java" target="_blank" rel="noopener">https://github.com/trending/java</a></p>
<ul>
<li><p><a href="https://blog.csdn.net/wisgood/article/details/52503052" target="_blank" rel="noopener">使用 Java 8 Optional 的正确姿势 - CSDN博客</a></p>
</li>
<li><p><a href="http://www.huangbowen.net/blog/2017/02/23/alibaba-java-code-style/" target="_blank" rel="noopener">阿里巴巴Java开发手册评述</a></p>
</li>
<li><p><a href="https://yq.aliyun.com/articles/69327" target="_blank" rel="noopener">《阿里巴巴Java开发手册v1.4.0（详尽版）》更新，新增16条设计规约-博客-云栖社区-阿里云</a></p>
</li>
<li><p><a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="noopener">Google Java Style Guide</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】那些踩过的坑</title>
    <url>/java/%E5%9D%91/</url>
    <content><![CDATA[<h2 id="BigDecimal-相等问题"><a href="#BigDecimal-相等问题" class="headerlink" title="BigDecimal 相等问题"></a>BigDecimal 相等问题</h2><p>切记，不能根据字面来判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigDecimalTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String num1 = <span class="hljs-string">"0"</span>;<br>        String num2 = <span class="hljs-string">"0.00"</span>;<br>        BigDecimal bd1 = <span class="hljs-keyword">new</span> BigDecimal(num1);<br>        BigDecimal bd2 = <span class="hljs-keyword">new</span> BigDecimal(num2);<br>        <span class="hljs-keyword">boolean</span> result1 = bd1.equals(bd2);<br>        <span class="hljs-keyword">boolean</span> result2 = bd1.compareTo(bd2) == <span class="hljs-number">0</span>;<br>        System.out.println(<span class="hljs-string">"result1:"</span> + result1);<br>        System.out.println(<span class="hljs-string">"result2:"</span> + result2);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * result1:false</span><br><span class="hljs-comment"> * result2:true</span><br><span class="hljs-comment"> */</span><span class="hljs-comment">//~</span><br></code></pre></td></tr></table></figure>

<h2 id="gson-不能正确解析双花括号语法"><a href="#gson-不能正确解析双花括号语法" class="headerlink" title="gson 不能正确解析双花括号语法"></a>gson 不能正确解析双花括号语法</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cronTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> count;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        ArrayList&lt;Item&gt; items = getItemsWithDoubleBrackets();<br>        System.out.println(<span class="hljs-string">"getItemsWithDoubleBrackets:"</span>);<br>        System.out.println(items);<br>        System.out.println(<span class="hljs-keyword">new</span> Gson().toJson(items));<br><br>        System.out.println();<br><br>        System.out.println(<span class="hljs-string">"getItemsNormalWay:"</span>);<br>        items = getItemsNormalWay();<br>        System.out.println(items);<br>        System.out.println(<span class="hljs-keyword">new</span> Gson().toJson(items));<br>    &#125;<br><br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ArrayList&lt;Item&gt; <span class="hljs-title">getItemsWithDoubleBrackets</span><span class="hljs-params">()</span> </span>&#123;<br>        count = <span class="hljs-number">0</span>;<br>        ArrayList&lt;Item&gt; items = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            items.add(<span class="hljs-keyword">new</span> Item() &#123;&#123; <span class="hljs-comment">// double brackets</span><br>                setContent(<span class="hljs-string">"美好的一天"</span> + count++);<br>            &#125;&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> items;<br>    &#125;<br><br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ArrayList&lt;Item&gt; <span class="hljs-title">getItemsNormalWay</span><span class="hljs-params">()</span> </span>&#123;<br>        count = <span class="hljs-number">0</span>;<br>        ArrayList&lt;Item&gt; items = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            Item item = <span class="hljs-keyword">new</span> Item();<br>            item.setContent(<span class="hljs-string">"美好的一天"</span> + count++);<br>            items.add(item);<br>        &#125;<br>        <span class="hljs-keyword">return</span> items;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span> </span>&#123;<br><br>        <span class="hljs-keyword">private</span> String content;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(String content)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.content = content;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"&#123;"</span> +<br>                    <span class="hljs-string">"content='"</span> + content + <span class="hljs-string">'\''</span> +<br>                    <span class="hljs-string">'&#125;'</span>;<br>        &#125;<br>    &#125;<br>&#125; <span class="hljs-comment">/*</span><br><span class="hljs-comment">getItemsWithDoubleBrackets:</span><br><span class="hljs-comment">[&#123;content='美好的一天0'&#125;, &#123;content='美好的一天1'&#125;, &#123;content='美好的一天2'&#125;]</span><br><span class="hljs-comment">[null,null,null]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">getItemsNormalWay:</span><br><span class="hljs-comment">[&#123;content='美好的一天0'&#125;, &#123;content='美好的一天1'&#125;, &#123;content='美好的一天2'&#125;]</span><br><span class="hljs-comment">[&#123;"content":"美好的一天0"&#125;,&#123;"content":"美好的一天1"&#125;,&#123;"content":"美好的一天2"&#125;]</span><br><span class="hljs-comment">*/</span><span class="hljs-comment">//~</span><br></code></pre></td></tr></table></figure>

<p>原因是：添加的时候是匿名内部类，此匿名内部类不符合 gson 序列化规则，所以会是 <code>null</code>。</p>
<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/20210809152418.png" alt="image-20210809152411331" style="zoom: 80%;"><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/20210809153711.png" alt="image-20210809153711267" style="zoom:80%;"></p>
<h2 id="Gson-doesn’t-deserialise-Long-numbers-correctly"><a href="#Gson-doesn’t-deserialise-Long-numbers-correctly" class="headerlink" title="Gson doesn’t deserialise Long numbers correctly"></a>Gson doesn’t deserialise Long numbers correctly</h2><p>RecordUtils.toRecord(proxyStocksOrders)，让 flow_id 变成了重复的了，解决办法是用 Record 来逐个写；<br>如，<code>ProxyDaoImpl.lock()</code>方法里的 <code>save()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecordUtils</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实体类转record</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Record <span class="hljs-title">toRecord</span><span class="hljs-params">(Object data)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)<br>        Map&lt;String, Object&gt; json = <span class="hljs-keyword">new</span> Gson().fromJson(<br>                <span class="hljs-keyword">new</span> GsonBuilder()<br>                        .setFieldNamingStrategy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)<br>                        .setDateFormat(CONST.FORMAT)<br>                        .create().toJson(data, data.getClass()),<br>                HashMap<span class="hljs-class">.<span class="hljs-keyword">class</span></span><br><span class="hljs-class">        )</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Record().setColumns(json);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Record&gt; records = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        List&lt;Order&gt; orders = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Order order = <span class="hljs-keyword">new</span> Order();<br>            <span class="hljs-keyword">long</span> flowId = Long.parseLong(Common.getPsoFlowId());<br>            order.setFlowId(flowId);<br>            order.setName(String.valueOf(flowId));<br><br>            orders.add(order);<br>            records.add(RecordUtils.toRecord(order));<br>        &#125;<br>        System.out.println(<span class="hljs-string">"----------"</span>);<br>        records.forEach(System.out::println);<br>        System.out.println(<span class="hljs-string">"----------"</span>);<br>        orders.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>原因是，gson 将 long 类型的数据做了转换（如：把<code>20200426163033383</code>转换成了<code>2.0200426163033384E16</code>，把<code>20200426163034384</code> 也转换成了 <code>2.0200426163034384E16</code>。<br>有一种解决办法是，对于这种 flow_id 这种类型的字段，用 <code>string</code> 类型，而不是 <code>long</code> 类型。</p>
<p>还有一种办法，添加：LongSerializationPolicy</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// https://github.com/google/gson/issues/1084</span><br><span class="hljs-keyword">new</span> <span class="hljs-constructor">GsonBuilder()</span><br>        .set<span class="hljs-constructor">FieldNamingStrategy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)</span><br>        .set<span class="hljs-constructor">DateFormat(CONST.FORMAT)</span><br>        .set<span class="hljs-constructor">LongSerializationPolicy(LongSerializationPolicy.STRING)</span> <span class="hljs-comment">// add this line</span><br>        .create<span class="hljs-literal">()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">data</span>, <span class="hljs-params">data</span>.<span class="hljs-params">getClass</span>()</span>),<br></code></pre></td></tr></table></figure>

<h2 id="mybatis-语句拼接问题"><a href="#mybatis-语句拼接问题" class="headerlink" title="mybatis 语句拼接问题"></a>mybatis 语句拼接问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 从 provider_marketable_goods 表中删除数据</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> providerIds 拼接的 providerId</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Update</span>(<span class="hljs-string">"&lt;script&gt;"</span> +<br>        <span class="hljs-string">"delete from goods where provider_id in (#&#123;providerIds&#125;)"</span> +<br>        <span class="hljs-string">"&lt;/script&gt;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeGoodsByProviderId</span><span class="hljs-params">(@Param(<span class="hljs-string">"providerIds"</span>)</span> String providerIds)</span>;<br></code></pre></td></tr></table></figure>

<p>实际的运行 sql 语句是： delete from goods where provider_id in (‘23,432,4432,4432’)</p>
<p>下面这个才是你想要的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 从 provider_marketable_goods 表中删除数据</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> providerIds 拼接的 providerId</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Update</span>(<span class="hljs-string">"&lt;script&gt;"</span> +<br>        <span class="hljs-string">"delete from goods where provider_id in ("</span> +<br>        <span class="hljs-string">"&lt;foreach collection='providerIds' item='providerId' separator=','&gt;"</span> +<br>        <span class="hljs-string">"#&#123;providerId&#125;"</span> +<br>        <span class="hljs-string">"&lt;/foreach&gt;"</span> +<br>        <span class="hljs-string">")"</span> +<br>        <span class="hljs-string">"&lt;/script&gt;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeGoodsByProviderId</span><span class="hljs-params">(@Param(<span class="hljs-string">"providerIds"</span>)</span> Set&lt;Long&gt; providerIds)</span>;<br></code></pre></td></tr></table></figure>

<p>实际的运行 sql 语句是： delete from goods where provider_id in (23,432,4432,4432)</p>
<h2 id="作用域问题"><a href="#作用域问题" class="headerlink" title="作用域问题"></a>作用域问题</h2><p>搞错作用域，会导致获取的数据莫名其妙。<br>例如下面，本该放在循环内的，结果放在了循环之内（这种 bug 比较难找，要小心才是）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">divideToHandleProviderIdToGoodsIdListMap</span><span class="hljs-params">(Consumer&lt;Map&lt;Long, List&lt;Integer&gt;&gt;&gt; consumer)</span> </span>&#123;<br><br>    Map&lt;Long, List&lt;Integer&gt;&gt; map = Maps.newHashMap(); <span class="hljs-comment">// outside the loop</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    List&lt;ProviderGoods&gt; list;<br>    <span class="hljs-keyword">do</span> &#123;<br>        list = providerMarketableDao.getProviderGoodsFromGoods(count * number, number);<br>        list.stream().collect(Collectors.groupingBy(ProviderGoods::getProviderId))<br>                .forEach((providerId, providerGoodsList) -&gt; &#123;<br>                    map.put(providerId, providerGoodsList.stream()<br>                            .map(ProviderGoods::getGoodsId)<br>                            .collect(Collectors.toList()));<br>                &#125;);<br>        consumer.accept(map);<br>        count++;<br>    &#125; <span class="hljs-keyword">while</span> (isNotEmptyList(list));<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">divideToHandleProviderIdToGoodsIdListMap</span><span class="hljs-params">(Consumer&lt;Map&lt;Long, List&lt;Integer&gt;&gt;&gt; consumer)</span> </span>&#123;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    List&lt;ProviderGoods&gt; list;<br>    <span class="hljs-keyword">do</span> &#123;<br>        Map&lt;Long, List&lt;Integer&gt;&gt; map = Maps.newHashMap(); <span class="hljs-comment">// within the loop</span><br>        list = providerMarketableDao.getProviderGoodsFromGoods(count * number, number);<br>        list.stream().collect(Collectors.groupingBy(ProviderGoods::getProviderId))<br>                .forEach((providerId, providerGoodsList) -&gt; &#123;<br>                    map.put(providerId, providerGoodsList.stream()<br>                            .map(ProviderGoods::getGoodsId)<br>                            .collect(Collectors.toList()));<br>                &#125;);<br>        consumer.accept(map);<br>        count++;<br>    &#125; <span class="hljs-keyword">while</span> (isNotEmptyList(list));<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的存储单位</title>
    <url>/java/%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D/</url>
    <content><![CDATA[<blockquote>
<p>一直觉得自己的Java基础还可以，真的在面试的时候才发现，还是太肤浅了（我根本没法表达清楚）。</p>
</blockquote>
<h1 id="存储单位"><a href="#存储单位" class="headerlink" title="存储单位"></a>存储单位</h1><ul>
<li>位（bit），计算机存储信息的最小单位，二进制的一个“0”或者“1”表示一位。</li>
<li>字节（Byte），计算机存储容量基本单位是字节，8个二进制位表示一个字节。</li>
<li>（字符，是一种标记符号（像<code>a</code>,<code>b</code>,<code>A</code>），同以上的存储单位不是一回事。）<blockquote>
<p>计算机内存和硬盘等存储空间的管理都是以字节为基本单位，每个字节都有自己的编号，而“字符-Char”是<br> 人们用作标记的符号，如’A’, ‘-‘等，每个字符都有约定的抽象含义。</p>
</blockquote>
</li>
</ul>
<h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><p>在Java中有8种基本数据类型 —— 4种整型，2种浮点类型，1种表示Unicode编码的字符单元的字符类型，<br>1种表示真值的boolean类型。（一个字节8位）</p>
<ol>
<li><p>整型</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">类型          存储需求            bit数            取值范围            备注<br><span class="hljs-built_in">int</span>           <span class="hljs-number">4</span>字节               <span class="hljs-number">4</span>*<span class="hljs-number">8</span><br>short         <span class="hljs-number">2</span>字节               <span class="hljs-number">2</span>*<span class="hljs-number">8</span>             <span class="hljs-number">-32768</span>~<span class="hljs-number">32767</span><br>long          <span class="hljs-number">8</span>字节               <span class="hljs-number">8</span>*<span class="hljs-number">8</span><br>byte          <span class="hljs-number">1</span>字节               <span class="hljs-number">1</span>*<span class="hljs-number">8</span>             <span class="hljs-number">-128</span>~<span class="hljs-number">127</span><br></code></pre></td></tr></table></figure></li>
<li><p>浮点型</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">类型          存储需求            bit数            取值范围            备注<br><span class="hljs-built_in">float</span>         <span class="hljs-number">4</span>字节               <span class="hljs-number">4</span>*<span class="hljs-number">8</span>                             （区别于<span class="hljs-built_in">double</span>，有后缀`F`）<br><span class="hljs-built_in">double</span>        <span class="hljs-number">8</span>字节               <span class="hljs-number">8</span>*<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>char类型</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">类型          存储需求            bit数            取值范围            备注<br>char          <span class="hljs-number">2</span>字节               <span class="hljs-number">2</span>*<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>boolean类型</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">类型          存储需求            bit数            取值范围            备注<br><span class="hljs-built_in">bool</span>ean       <span class="hljs-number">1</span>字节               <span class="hljs-number">1</span>*<span class="hljs-number">8</span>            <span class="hljs-literal">false</span>/<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

</li>
</ol>
<p>（对于范围很大的数，用<code>BigDecimal</code>, <code>BigInteger</code>来表示。）</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://jrunner.blog.51cto.com/1015356/490317" target="_blank" rel="noopener">位、字符、字节、有什么区别</a></li>
<li><a href="http://m.blog.csdn.net/article/details?id=12029917" target="_blank" rel="noopener">java中基本类型占用字节数</a></li>
<li><a href="http://www.baike.com/wiki/Java%E5%AD%97%E7%AC%A6" target="_blank" rel="noopener">Java字符——互动百科</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>UML图</title>
    <url>/java/uml/</url>
    <content><![CDATA[<h4 id="UML-类图符号-各种关系说明以及举例"><a href="#UML-类图符号-各种关系说明以及举例" class="headerlink" title="UML 类图符号 各种关系说明以及举例"></a><a href="https://www.cnblogs.com/duanxz/archive/2012/06/13/2547801.html" target="_blank" rel="noopener">UML 类图符号 各种关系说明以及举例</a></h4><ul>
<li>依赖（Dependency）:虚线箭头表示</li>
<li>关联（Association）：实线箭头表示</li>
<li>聚合（Aggregation）：带空心菱形头表示<blockquote>
<p>特征：属于是关联的特殊情况，体现部分-整体关系，是一种弱拥有关系；整体和部分可以有不一样的生命周期；是一种弱关联；</p>
</blockquote>
</li>
<li>组合（Composition）：带实心菱形头的实线表示<blockquote>
<p>特征：属于是关联的特殊情况，也体现了体现部分-整体关系，是一种强“拥有关系”；整体与部分有相同的生命周期，是一种强关联；</p>
</blockquote>
</li>
<li>泛化（Generalization）：带空心箭头的实线线表示 // 类继承类</li>
<li>实现（Realization）：空心箭头和虚线表示 // 类实现接口</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务</title>
    <url>/java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="Quartz-在某一天的某一秒执行一个任务"><a href="#Quartz-在某一天的某一秒执行一个任务" class="headerlink" title="Quartz 在某一天的某一秒执行一个任务"></a>Quartz 在某一天的某一秒执行一个任务</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- pom.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.quartz-scheduler<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; job.properties</span><br><span class="hljs-attr">a.job</span>=com.lyloou.FeeJob<br><span class="hljs-attr">a.cron</span>=<span class="hljs-number">0</span> <span class="hljs-number">0</span>/<span class="hljs-number">1</span> * * * ?<br><span class="hljs-attr">a.enable</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>更多 cron 配置，看 <a href="./job.html">链接</a></p>
</blockquote>
<h3 id="Quartz-在某一天的某一秒执行一个任务-1"><a href="#Quartz-在某一天的某一秒执行一个任务-1" class="headerlink" title="Quartz 在某一天的某一秒执行一个任务"></a>Quartz 在某一天的某一秒执行一个任务</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TimeUtils.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeUtils</span> </span>&#123;<br>    <span class="hljs-comment">// 1月中的15号，0点整</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Timestamp <span class="hljs-title">getMonthDay15</span><span class="hljs-params">(Date date)</span> </span>&#123;<br>        Calendar calendar = Calendar.getInstance();<br>        calendar.setTime(date);<br>        calendar.set(Calendar.DAY_OF_MONTH, <span class="hljs-number">15</span>);<br>        calendar.set(Calendar.HOUR_OF_DAY, <span class="hljs-number">0</span>);<br>        calendar.set(Calendar.MINUTE, <span class="hljs-number">0</span>);<br>        calendar.set(Calendar.SECOND, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Timestamp(calendar.getTimeInMillis());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// FeeJob.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 入账任务</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lyloou</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeeJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Job</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Log logger = Logger.get(FeeJob<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(JobExecutionContext jec)</span> </span>&#123;<br>        <span class="hljs-comment">// 1分钟执行一次</span><br>        Date date = <span class="hljs-keyword">new</span> Date();<br>        <span class="hljs-keyword">if</span> (TimeUtils.getMonthDay15(date).getTime() != date.getTime()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> t1 = System.currentTimeMillis();<br>        <span class="hljs-comment">// do your job here</span><br>        <span class="hljs-keyword">long</span> spend = System.currentTimeMillis() - t1;<br>        logger.info(String.format(<span class="hljs-string">"%s|执行xxx任务，耗时%s："</span>, getClass().getName(), spend));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 数值</title>
    <url>/java/%E6%95%B0%E5%80%BC/</url>
    <content><![CDATA[<h2 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 向上取整（天花板）</span><br>Math.ceil();<br><span class="hljs-comment">// 向下取整（地板）</span><br>Math.floor();<br></code></pre></td></tr></table></figure>

<h2 id="判断两个金额是否相等"><a href="#判断两个金额是否相等" class="headerlink" title="判断两个金额是否相等"></a>判断两个金额是否相等</h2><blockquote>
<p>注意不能直接使用<code>equal</code> 或 <code>==</code> ， 例如： <code>0.01</code> 和 <code>0.010</code> 实际上是一样的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 比较两个数值是否相等</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEqual</span><span class="hljs-params">(Object x, Object y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> compareTo(x, y) == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 比较数字大小，x &gt; y返回-1，x = y返回0，x &lt; y返回1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object x, Object y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BigDecimal(x + <span class="hljs-string">""</span>).compareTo(<span class="hljs-keyword">new</span> BigDecimal(y + <span class="hljs-string">""</span>));<br>&#125;<br></code></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        BigDecimal a = divide(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, RoundingMode.HALF_EVEN);<br>        BigDecimal b = divide(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, RoundingMode.HALF_EVEN);<br>        System.out.println(a);<br>        System.out.println(b);<br>        System.out.println(CalcUtils.add(a, b));<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BigDecimal <span class="hljs-title">divide</span><span class="hljs-params">(Object x, Object y, <span class="hljs-keyword">int</span> bit, RoundingMode mode)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BigDecimal(x + <span class="hljs-string">""</span>).divide(<span class="hljs-keyword">new</span> BigDecimal(y + <span class="hljs-string">""</span>), bit, mode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>服务端统一返回格式</title>
    <url>/java/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="返回的-json-信息"><a href="#返回的-json-信息" class="headerlink" title="返回的 json 信息"></a>返回的 json 信息</h2><ul>
<li>错误情况</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"err_code"</span>: <span class="hljs-number">1003</span>,<br>  <span class="hljs-attr">"err_msg"</span>: <span class="hljs-string">"参数错误，超出最大数量限制"</span><br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>正常情况</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"err_code"</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">"err_msg"</span>: <span class="hljs-string">"ok"</span>,<br>  <span class="hljs-attr">"data"</span>: &#123;<br>    <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"lyloou"</span>,<br>    <span class="hljs-attr">"email"</span>: <span class="hljs-string">"lyloou@qq.com"</span>,<br>    <span class="hljs-attr">"personal_signature"</span>: <span class="hljs-string">"多么美好的太阳"</span>,<br>    <span class="hljs-attr">"gmt_create"</span>: <span class="hljs-string">"2020-01-16T09:38:18.000+0000"</span>,<br>    <span class="hljs-attr">"gmt_modified"</span>: <span class="hljs-string">"2020-03-14T11:27:58.000+0000"</span>,<br>    <span class="hljs-attr">"is_disabled"</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Result</span> </span>&#123;<br><br>    <span class="hljs-meta">@JsonProperty</span>(<span class="hljs-string">"err_code"</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> status;<br><br>    <span class="hljs-meta">@JsonProperty</span>(<span class="hljs-string">"err_msg"</span>)<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-meta">@JsonProperty</span>(<span class="hljs-string">"data"</span>)<br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Result</span><span class="hljs-params">(<span class="hljs-keyword">int</span> status, String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.status = status;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">data</span><span class="hljs-params">(Object data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">msg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">appendMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> appendMsg(msg, <span class="hljs-string">", "</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">appendMsg</span><span class="hljs-params">(String msg, String sep)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!Strings.isNullOrEmpty(msg)) &#123;<br>            <span class="hljs-keyword">this</span>.msg = Joiner.on(sep).join(<span class="hljs-keyword">this</span>.msg, msg);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.msg = msg;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理 Result 的接口，具体实现看 ResultHandlerImpl</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ResultHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 只需要返回 code 和 msg</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Result <span class="hljs-title">msgResult</span><span class="hljs-params">(StatusCode code)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 正常返回时，才使用这个；</span><br><span class="hljs-comment">     * 错误的时候，尽量不要用这个，除非前端有作处理。填写不当的 data，有可能会导致解析不对；</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 错误码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 返回给调用者的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Result <span class="hljs-title">dataResult</span><span class="hljs-params">(StatusCode code, Object data)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ResultHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">msgResult</span><span class="hljs-params">(StatusCode code)</span> </span>&#123;<br>        StatusCodeDict status = code.get();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(status.code(), status.msg());<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">dataResult</span><span class="hljs-params">(StatusCode code, Object data)</span> </span>&#123;<br>        StatusCodeDict status = code.get();<br>        Result result = <span class="hljs-keyword">new</span> Result(status.code(), status.msg());<br>        result.data(data);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ResultHandle 用此类作为参数。</span><br><span class="hljs-comment"> * 通过此接口，可以通过 lambda 的方式来获取 StatusCodeDict 里的信息</span><br><span class="hljs-comment"> * (&lt;code&gt;resultHandler.msgResult(() -&gt; PARAM_LOGIN_ERROR);&lt;/code&gt;)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StatusCode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Supplier</span>&lt;<span class="hljs-title">StatusCodeDict</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">StatusCodeDict <span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 错误码字典</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> StatusCodeDict &#123;<br><br><br>    <span class="hljs-comment">// 通用码</span><br>    COMMON_OK(<span class="hljs-number">0</span>, <span class="hljs-string">"ok"</span>),<br>    COMMON_UNKNOWN(<span class="hljs-number">9999</span>, <span class="hljs-string">"未知的异常"</span>),<br>    COMMON_INVALID_REQUEST(<span class="hljs-number">9998</span>, <span class="hljs-string">"无效的请求"</span>),<br><br>    <span class="hljs-comment">// 系统</span><br>    SYSTEM_404(<span class="hljs-number">404</span>, <span class="hljs-string">"404你懂的"</span>),<br>    SYSTEM_502(<span class="hljs-number">502</span>, <span class="hljs-string">"服务器打洋了"</span>),<br>    SYSTEM_500(<span class="hljs-number">500</span>, <span class="hljs-string">"哎哟，这里有个锅"</span>),<br><br>    PARAM(<span class="hljs-number">1001</span>, <span class="hljs-string">"参数错误"</span>),<br>    PARAM_BEYOND_QUANTITY_NUMBER(<span class="hljs-number">1003</span>, <span class="hljs-string">"参数错误，超出最大数量限制"</span>),<br><br>    <span class="hljs-comment">// 登录</span><br>    PARAM_LOGIN_ERROR(<span class="hljs-number">1102</span>, <span class="hljs-string">"用户名不存在或密码错误"</span>),<br><br>    <span class="hljs-comment">// 商品</span><br>    GOODS_IS_NOT_EXISTED(<span class="hljs-number">1301</span>, <span class="hljs-string">"商品不存在"</span>),<br>    GOODS_IS_NOT_MARKETABLE(<span class="hljs-number">1302</span>, <span class="hljs-string">"商品已经下架"</span>),<br><br>    DB(<span class="hljs-number">1401</span>, <span class="hljs-string">"数据库异常"</span>),<br><br>    UNDEFINED(<span class="hljs-number">1999</span>, <span class="hljs-string">"未定义的业务异常"</span>),<br>    ;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Integer, StatusCodeDict&gt; dict = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        Arrays.stream(StatusCodeDict.values())<br>                .forEach(p -&gt; dict.put(p.code, p));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StatusCodeDict <span class="hljs-title">of</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Optional.of(dict.get(code)).orElse(COMMON_UNKNOWN);<br>    &#125;<br><br>    StatusCodeDict(<span class="hljs-keyword">int</span> code, String msg) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">code</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">msg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(path = <span class="hljs-string">"$&#123;apiVersion&#125;/user"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ResultHandler resultHandler;<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserMapper userMapper;<br><br>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"login"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            @RequestParam(<span class="hljs-string">"name"</span>)</span> String name,</span><br><span class="hljs-function">            @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"password"</span>)</span> String password</span><br><span class="hljs-function">    ) </span>&#123;<br>        UserPassword userPassword = userMapper.getUserPasswordByNamePassword(name, password);<br>        <span class="hljs-keyword">if</span> (userPassword == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> resultHandler.msgResult(() -&gt; PARAM_LOGIN_ERROR);<br>        &#125;<br>        User user = userMapper.getUser(userPassword.getUserId());<br>        <span class="hljs-keyword">return</span> resultHandler.dataResult(() -&gt; COMMON_OK, user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java方法的按值调用</title>
    <url>/java/%E6%8C%89%E5%80%BC%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>java程序设计<code>总是</code>采用<code>按值调用</code>。</p>
<p>方法参数有两种类型：</p>
<ul>
<li>基本数据类型（数字、布尔值）</li>
<li>对象引用</li>
</ul>
<p>在传递对象的时候，实际上传递的是对象的引用拷贝。<br>对象引用和引用拷贝指向的是同一个对象，<br>可以通过对象自身的方法修改自己。</p>
<p>java中方法参数的使用情况</p>
<ul>
<li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）</li>
<li>一个方法可以改变一个对象参数的状态。</li>
<li>一个方法不能让对象参数引用一个新的对象。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>《java核心技术卷1》第10版，p118</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>正则</title>
    <url>/java/%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/ggjucheng/p/3423731.html" target="_blank" rel="noopener">JAVA 正则表达式：Pattern 类与 Matcher 类详解(转) - ggjucheng - 博客园</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Pattern p=Pattern.compile(<span class="hljs-string">"\\d+"</span>);<br>Matcher m=p.matcher(<span class="hljs-string">"我的QQ是:456456 我的电话是:0532214 我的邮箱是:aaa123@aaa.com"</span>);<br><span class="hljs-keyword">while</span>(m.find()) &#123;<br>     System.out.println(m.group());<br>     System.out.print(<span class="hljs-string">"start:"</span>+m.start());<br>     System.out.println(<span class="hljs-string">" end:"</span>+m.end());<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>现在大家应该知道,每次执行匹配操作后 start(),end(),group()三个方法的值都会改变,改变成匹配到的子字符串的信息,以及它们的重载方法,也会改变成相应的信息.<br>注意:只有当匹配操作成功,才可以使用 start(),end(),group()三个方法,否则会抛出 java.lang.IllegalStateException,也就是当 matches(),lookingAt(),find()其中任意一个方法返回 true 时,才可以使用.</p>
</blockquote>
<p><strong>Pattern 类：</strong><br>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p>
<p><strong>Matcher 类：</strong><br>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与 Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p>
<p><strong>PatternSyntaxException：</strong><br>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p>
<ul>
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html" target="_blank" rel="noopener">Pattern (Java Platform SE 7 )</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java测试</title>
    <url>/java/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="Junit5-and-AssertJ"><a href="#Junit5-and-AssertJ" class="headerlink" title="Junit5 and AssertJ"></a>Junit5 and AssertJ</h2><p><a href="https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-writing-assertions-with-assertj/" target="_blank" rel="noopener">JUnit 5 Tutorial: Writing Assertions With AssertJ</a><br><a href="https://juejin.cn/post/7067402739134758948" target="_blank" rel="noopener">SpringBoot+Junit5+Assertj+Mockito的单元测试 - 掘金</a></p>
<h2 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h2><p><a href="https://www.baeldung.com/java-microbenchmark-harness" target="_blank" rel="noopener">https://www.baeldung.com/java-microbenchmark-harness</a><br><a href="https://github.com/eugenp/tutorials/tree/master/jmh" target="_blank" rel="noopener">https://github.com/eugenp/tutorials/tree/master/jmh</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java缓存</title>
    <url>/java/%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p><a href="https://www.google.com/search?client=firefox-b-ab&amp;q=%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85+%E7%BC%93%E5%AD%98%E5%A4%9A%E4%B9%85+redis" target="_blank" rel="noopener">https://www.google.com/search?client=firefox-b-ab&amp;q=%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85+%E7%BC%93%E5%AD%98%E5%A4%9A%E4%B9%85+redis</a></p>
<p><a href="https://tech.meituan.com/cache_about.html" target="_blank" rel="noopener">https://tech.meituan.com/cache_about.html</a></p>
<p><a href="https://juejin.im/post/59638d5e51882568b463054e" target="_blank" rel="noopener">https://juejin.im/post/59638d5e51882568b463054e</a></p>
<p><a href="https://blog.csdn.net/qfikh/article/details/52943068" target="_blank" rel="noopener">https://blog.csdn.net/qfikh/article/details/52943068</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】获取属性名工具</title>
    <url>/java/%E8%8E%B7%E5%8F%96%E5%B1%9E%E6%80%A7%E5%90%8D%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在编码时经常会用到同名的属性名字符串，比如</p>
<ol>
<li>用相同的属性名做为 map 中的键；</li>
<li>在 mybatis 中，根据属性名的下划线字符串来拼接 sql 查询条件。</li>
</ol>
<p>需要修改属性名时，如果是用字符串硬编码的，引用的地方越多，修改越困难</p>
<p>但是如果用的是 java8 中的属性引用，操作起来就很方便了，修改一处即可修改全部相关引用。</p>
<h2 id="属性工具类测试"><a href="#属性工具类测试" class="headerlink" title="属性工具类测试"></a>属性工具类测试</h2><p>参考下面测试类，怎样使用；</p>
<p>如果想要修改 <code>articleName</code> 为 <code>articleTitle</code>，</p>
<blockquote>
<p>在 IDEA 中，修改类的属性名很方便，选中属性名 articleName，按下快捷键 &lt;Shift + F6&gt;，键入新的属性名称 articleTitle，确认即可替换所有关联的属性名称</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 属性工具类测试</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FieldUtilTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Setter</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Article</span> </span>&#123;<br>        String articleName;<br>        String articleContent;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// test getter</span><br>        System.out.println(FieldUtil.noPrefix(Article::getArticleName));<br>        System.out.println(FieldUtil.underline(Article::getArticleName));<br>        System.out.println(FieldUtil.underlineUpper(Article::getArticleContent));<br>        System.out.println(FieldUtil.toSymbolCase(Article::getArticleName, <span class="hljs-string">'$'</span>));<br><br><br>        <span class="hljs-comment">// test setter</span><br>        System.out.println(FieldUtil.noPrefix(Article::setArticleName));<br>        System.out.println(FieldUtil.underline(Article::setArticleName));<br>        System.out.println(FieldUtil.underlineUpper(Article::setArticleContent));<br>        System.out.println(FieldUtil.toSymbolCase(Article::setArticleName, <span class="hljs-string">'$'</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="属性工具类代码"><a href="#属性工具类代码" class="headerlink" title="属性工具类代码"></a>属性工具类代码</h2><p>关键逻辑是利用了 java8 中的 SerializedLambda 的 getImplMethodName 方法来获取属性名。</p>
<p>源码中引用了 hutool 第三方工具类的 <code>StrUtil</code>工具，方便操作字符串，当然也可自行开发。</p>
<p>参考资料：<a href="https://segmentfault.com/a/1190000019389160" target="_blank" rel="noopener">利用 Lambda 实现通过 getter/setter 方法引用拿到属性名 - SegmentFault 思否</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.invoke.SerializedLambda;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 属性工具类，用来获取 Getter 和 Setter 属性的名称。支持首字母小写样式，下划线的样式和自定义样式</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 参考：[利用Lambda实现通过getter/setter方法引用拿到属性名 - SegmentFault 思否](https://segmentfault.com/a/1190000019389160)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FieldUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * ===========&gt; getter 方法引用 &lt;===========</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下划线样式，小写</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">String <span class="hljs-title">underline</span><span class="hljs-params">(IGetter&lt;T&gt; fn)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> toSymbolCase(fn, <span class="hljs-string">'_'</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下划线样式，大写</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">String <span class="hljs-title">underlineUpper</span><span class="hljs-params">(IGetter&lt;T&gt; fn)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> underline(fn).toUpperCase();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 依据符号转换样式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">String <span class="hljs-title">toSymbolCase</span><span class="hljs-params">(IGetter&lt;T&gt; fn, <span class="hljs-keyword">char</span> symbol)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> StrUtil.toSymbolCase(noPrefix(fn), symbol);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 转换getter方法引用为属性名，首字母小写</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">String <span class="hljs-title">noPrefix</span><span class="hljs-params">(IGetter&lt;T&gt; fn)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getGeneralField(fn);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * ===========&gt; setter 方法引用 &lt;===========</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下划线样式，小写</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, R&gt; <span class="hljs-function">String <span class="hljs-title">underline</span><span class="hljs-params">(ISetter&lt;T, R&gt; fn)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> toSymbolCase(fn, <span class="hljs-string">'_'</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下划线样式，大写</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, R&gt; <span class="hljs-function">String <span class="hljs-title">underlineUpper</span><span class="hljs-params">(ISetter&lt;T, R&gt; fn)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> underline(fn).toUpperCase();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 依据符号转换样式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, R&gt; <span class="hljs-function">String <span class="hljs-title">toSymbolCase</span><span class="hljs-params">(ISetter&lt;T, R&gt; fn, <span class="hljs-keyword">char</span> symbol)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> StrUtil.toSymbolCase(noPrefix(fn), symbol);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换setter方法引用为属性名，首字母小写</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, R&gt; <span class="hljs-function">String <span class="hljs-title">noPrefix</span><span class="hljs-params">(ISetter&lt;T, R&gt; fn)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getGeneralField(fn);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * ===========&gt; 复用功能 &lt;===========</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得set或get或is方法对应的标准属性名，其它前缀的方法名使用原名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getGeneralField</span><span class="hljs-params">(Serializable fn)</span> </span>&#123;<br>        SerializedLambda lambda = getSerializedLambda(fn);<br>        String getOrSetMethodName = lambda.getImplMethodName();<br>        <span class="hljs-keyword">final</span> String generalField = StrUtil.getGeneralField(getOrSetMethodName);<br>        <span class="hljs-keyword">return</span> StrUtil.isEmpty(generalField) ? getOrSetMethodName : generalField;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取类对应的Lambda</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SerializedLambda <span class="hljs-title">getSerializedLambda</span><span class="hljs-params">(Serializable fn)</span> </span>&#123;<br>        <span class="hljs-comment">//先检查缓存中是否已存在</span><br>        SerializedLambda lambda;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">//提取SerializedLambda并缓存</span><br>            Method method = fn.getClass().getDeclaredMethod(<span class="hljs-string">"writeReplace"</span>);<br>            method.setAccessible(Boolean.TRUE);<br>            lambda = (SerializedLambda) method.invoke(fn);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"获取SerializedLambda异常, class="</span> + fn.getClass().getSimpleName(), e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> lambda;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * getter方法接口定义</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@FunctionalInterface</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IGetter</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>        <span class="hljs-function">Object <span class="hljs-title">apply</span><span class="hljs-params">(T source)</span></span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * setter方法接口定义</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@FunctionalInterface</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ISetter</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">U</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(T t, U u)</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】获取有效的异常调用堆栈信息</title>
    <url>/java/%E8%8E%B7%E5%8F%96%E6%9C%89%E6%95%88%E7%9A%84%E5%BC%82%E5%B8%B8%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>项目中，可能会遇到虽然知道发生了异常，但是不知道异常是什么，由于调用栈信息不全，从日志上看不出具体问题；主要原因是异常调用栈太深，导致异常信息被截断。</p>
<p>下面这个方法可以获取根异常，将中间的非主要异常过滤掉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 获取根异常，防止调用链太长，导致有效信息被截断 </span><br><span class="hljs-comment"> */</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Throwable <span class="hljs-title">getRootThrowable</span><span class="hljs-params">(Throwable e)</span> </span>&#123;  <br>    <span class="hljs-keyword">if</span> (Objects.isNull(e)) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;  <br>    &#125;  <br>  <br>    Throwable lastCause = e;  <br>    Throwable currentCause = e.getCause();  <br>    <span class="hljs-keyword">while</span> (Objects.nonNull(currentCause)) &#123;  <br>        lastCause = currentCause;  <br>        currentCause = currentCause.getCause();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">return</span> lastCause;  <br>&#125;<br></code></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf</span>4j  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThrowableTestDemo</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br>        test();  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-keyword">try</span> &#123;  <br>                    <span class="hljs-keyword">try</span> &#123;  <br>                        <span class="hljs-keyword">try</span> &#123;  <br>                            <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;  <br>                        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);  <br>                        &#125;  <br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);  <br>                    &#125;  <br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);  <br>                &#125;  <br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>            log.warn(<span class="hljs-string">"处理前："</span>, e);  <br>            System.out.println(<span class="hljs-string">"=======&gt;"</span>);  <br>            log.warn(<span class="hljs-string">"处理后："</span>, getRootThrowable(e));  <br>        &#125;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">10</span>:<span class="hljs-number">38</span>:<span class="hljs-number">13.122</span> [main] WARN com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span> - 处理前：<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ArithmeticException</span>: / by zero<br>	at com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span>.test(ThrowableTestDemo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">36</span>)<br>	at com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span>.main(ThrowableTestDemo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">15</span>)<br>Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ArithmeticException</span>: / by zero<br>	at com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span>.test(ThrowableTestDemo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">33</span>)<br>	... <span class="hljs-number">1</span> common frames omitted<br>Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ArithmeticException</span>: / by zero<br>	at com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span>.test(ThrowableTestDemo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">30</span>)<br>	... <span class="hljs-number">1</span> common frames omitted<br>Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ArithmeticException</span>: / by zero<br>	at com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span>.test(ThrowableTestDemo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">27</span>)<br>	... <span class="hljs-number">1</span> common frames omitted<br>Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ArithmeticException</span>: / by zero<br>	at com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span>.test(ThrowableTestDemo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">25</span>)<br>	... <span class="hljs-number">1</span> common frames omitted<br>	<br>=======&gt;<br><span class="hljs-number">10</span>:<span class="hljs-number">38</span>:<span class="hljs-number">13.124</span> [main] WARN com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span> - 处理后：<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ArithmeticException</span>: / by zero<br>	at com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span>.test(ThrowableTestDemo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">25</span>)<br>	at com<span class="hljs-selector-class">.coocaa</span><span class="hljs-selector-class">.media</span><span class="hljs-selector-class">.sync</span><span class="hljs-selector-class">.ThrowableTestDemo</span>.main(ThrowableTestDemo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">15</span>)<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java获取网络时间</title>
    <url>/java/%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h1 id="通过网页-Head-来获取"><a href="#通过网页-Head-来获取" class="headerlink" title="通过网页 Head 来获取"></a>通过网页 Head 来获取</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getWebsiteDatetime</span><span class="hljs-params">(String webUrl)</span></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        URL url = <span class="hljs-keyword">new</span> URL(webUrl);<span class="hljs-comment">// 取得资源对象</span><br>        URLConnection uc = url.openConnection();<span class="hljs-comment">// 生成连接对象</span><br>        uc.connect();<span class="hljs-comment">// 发出连接</span><br>        <span class="hljs-keyword">long</span> ld = uc.getDate();<span class="hljs-comment">// 读取网站日期时间</span><br>        Date date = <span class="hljs-keyword">new</span> Date(ld);<span class="hljs-comment">// 转换为标准时间对象</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>, Locale.CHINA);<span class="hljs-comment">// 输出北京时间</span><br>        <span class="hljs-keyword">return</span> sdf.format(date);<br>    &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="获取网页时间戳"><a href="#获取网页时间戳" class="headerlink" title="获取网页时间戳"></a>获取网页时间戳</h1><p>（如果本地和网页时间相差不多，以后都以本地为主）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String URL_CHECK_TIME = <span class="hljs-string">"http://www.taobao.com"</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> useLocal;<span class="hljs-comment">// 是否使用本地时间</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> deltaTime; <span class="hljs-comment">// 本机时间-网络时间；</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resetTimeStamp</span><span class="hljs-params">()</span> </span>&#123;<br>    useLocal = <span class="hljs-keyword">false</span>;<br>    deltaTime = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取时间戳（首次从网上获取时间，和本地比较，如果相差在一定的范围内，以后的调用就直接使用本地的，如果相差很大，以后都以网页时间为准）</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回的是以秒为单位的时间字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getTimeStamp</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> phoneTime = System.currentTimeMillis() / <span class="hljs-number">1000</span>;<br><br>    String result = String.valueOf(phoneTime);<br>    <span class="hljs-keyword">if</span> (!useLocal) &#123;<br>        <span class="hljs-comment">// 之所以使用线程，是因为在Android中不允许在主线程中开启网络请求（NetworkOnMainThreadException）</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    URLConnection uc = <span class="hljs-keyword">new</span> URL(URL_CHECK_TIME).openConnection();<span class="hljs-comment">// 生成连接对象</span><br>                    uc.connect();<span class="hljs-comment">// 发出连接</span><br>                    <span class="hljs-keyword">long</span> webSiteTime = uc.getDate() / <span class="hljs-number">1000</span>;<span class="hljs-comment">// 读取网站日期时间</span><br><br>                    <span class="hljs-comment">// 获取到了网站时间，就进行比较</span><br>                    <span class="hljs-comment">// 如果在范围内，下一次直接使用本地手机时间；</span><br>                    <span class="hljs-keyword">long</span> currentTime = System.currentTimeMillis() / <span class="hljs-number">1000</span>;<br>                    useLocal = Math.abs(currentTime - webSiteTime) &lt; <span class="hljs-number">5</span> * <span class="hljs-number">60</span>;<br>                    deltaTime = currentTime - webSiteTime;<br><br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    Log.e(TAG, <span class="hljs-string">"getTimeStamp: "</span>, e);<br>                    resetTimeStamp();<br>                &#125;<br><br>            &#125;<br>        &#125;).start();<br><br>        result = String.valueOf(phoneTime - deltaTime);<br>    &#125;<br><br>    Log.i(TAG, <span class="hljs-string">"getTimeStamp: 本次使用了本机时间？"</span> + useLocal);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="监听时间和日期变化"><a href="#监听时间和日期变化" class="headerlink" title="监听时间和日期变化"></a>监听时间和日期变化</h1><p><code>onCreate</code>中添加注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 监听用户对时间和日期的修改；</span><br>IntentFilter filter = <span class="hljs-keyword">new</span> IntentFilter();<br>filter.addAction(Intent.ACTION_TIME_CHANGED);<br>filter.addAction(Intent.ACTION_DATE_CHANGED);<br>registerReceiver(mReceiver, filter);<br></code></pre></td></tr></table></figure>

<p><code>onDestroy</code>中取消注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">unregisterReceiver(mReceiver);<br></code></pre></td></tr></table></figure>

<p><code>mReceiver</code>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">BroadcastReceiver mReceiver = <span class="hljs-keyword">new</span> BroadcastReceiver() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span> (intent.getAction()) &#123;<br>            <span class="hljs-comment">// 时间发生变化后，重新设置时间戳</span><br>            <span class="hljs-keyword">case</span> Intent.ACTION_TIME_CHANGED:<br>            <span class="hljs-keyword">case</span> Intent.ACTION_DATE_CHANGED:<br>                Log.i(TAG, <span class="hljs-string">"onReceive: Time or Date changed"</span>);<br>                Utime.resetTimeStamp();<br>                Utime.getTimeStamp();<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<h1 id="直接获取"><a href="#直接获取" class="headerlink" title="直接获取"></a>直接获取</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Utime</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String URL_BASE = <span class="hljs-string">"https://sj.qq.com/"</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据url这个网址来获取时间戳（如果获取此网络时间失败，使用本地时间）</span><br><span class="hljs-comment">     * 返回的是以秒为单位的时间字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url url</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getTimeStamp</span><span class="hljs-params">(String url)</span> </span>&#123;<br><br>        <span class="hljs-keyword">final</span> String urlRrBase = getBaseUrl(url);<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> currentTimeMillis = System.currentTimeMillis() / <span class="hljs-number">1000</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            URLConnection uc = <span class="hljs-keyword">new</span> URL(urlRrBase).openConnection();<span class="hljs-comment">// 生成连接对象</span><br>            uc.connect();<span class="hljs-comment">// 发出连接</span><br>            <span class="hljs-keyword">long</span> webTimeMillis = uc.getDate();<br>            <span class="hljs-keyword">long</span> webTime = webTimeMillis / <span class="hljs-number">1000</span>;<span class="hljs-comment">// 读取网站日期时间</span><br>            <span class="hljs-keyword">return</span> String.valueOf(webTime);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> String.valueOf(currentTimeMillis);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getBaseUrl</span><span class="hljs-params">(String url)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (TextUtils.isEmpty(url)) &#123;<br>            <span class="hljs-keyword">return</span> URL_BASE;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            URI uri = <span class="hljs-keyword">new</span> URI(url);<br>            <span class="hljs-keyword">return</span> uri.getScheme() + <span class="hljs-string">"://"</span> + uri.getHost();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> URL_BASE;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/catoop/article/details/50076879" target="_blank" rel="noopener">获取网络时间（国家标准时间）</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>解析数据</title>
    <url>/java/%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="Jsoup-解析-html-标签"><a href="#Jsoup-解析-html-标签" class="headerlink" title="Jsoup 解析 html 标签"></a>Jsoup 解析 html 标签</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.jsoup.Jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Document;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-comment">// http://www.runoob.com/java/java-regular-expressions.html</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRegex</span><span class="hljs-params">()</span> </span>&#123;<br>        String input = <span class="hljs-string">"【丝路亚心】250gX4&lt;font color=\"red\"&gt;核桃仁&lt;/font&gt; 原味生&lt;font color=\"red\"&gt;核桃核桃仁&lt;/font&gt; 新疆特产, &lt;font color=\"red\"&gt;123445&lt;/font&gt;bcdef"</span>;<br>        String regex = <span class="hljs-string">"&lt;font[^&gt;]+?&gt;(.*?)&lt;\\\\/font&gt;"</span>;<br>        Pattern compile = Pattern.compile(regex);<br>        Matcher matcher = compile.matcher(input);<br>        List&lt;String&gt; output = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">"--"</span> + count);<br>            output.add(matcher.group(count));<br>            count++;<br>        &#125;<br><br>        System.out.println(output);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHtml</span><span class="hljs-params">()</span> </span>&#123;<br><br>        String html = <span class="hljs-string">"&lt;span style=\"color:red;border-radius:10px;background-color:blue;\"&gt;抢购&lt;/span&gt; 我是标题我是标题我是标题&lt;font color=\"red\"&gt;高亮&lt;/font&gt;我是标题我是标题我是标题我是标题&lt;font color=\"red\"&gt;高亮&lt;/font&gt;我是标题"</span>;<br><br>        Document doc = Jsoup.parse(html);<br>        System.out.println(doc); <span class="hljs-comment">// 输出带标签的html文档</span><br>        System.out.println(<span class="hljs-string">"\n----&gt;"</span> + doc.text()); <span class="hljs-comment">// 输出内容</span><br>        System.out.println(<span class="hljs-string">"\n----&gt;"</span> + doc.getElementsByTag(<span class="hljs-string">"span"</span>).get(<span class="hljs-number">0</span>).html());<br>        System.out.println(<span class="hljs-string">"\n----&gt;"</span> + doc.getElementsByTag(<span class="hljs-string">"font"</span>).get(<span class="hljs-number">0</span>).html());<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testStyle</span><span class="hljs-params">()</span> </span>&#123;<br>        String style = <span class="hljs-string">"position: absolute; width: 500px; height: 552px; color: red; background-color: blue;"</span>;<br>        String width = <span class="hljs-string">"width"</span>;<br>        String color = <span class="hljs-string">"color"</span>;<br>        String backgroundColor = <span class="hljs-string">"background-color"</span>;<br>        System.out.println(getFloat(style, width));<br>        System.out.println(getString(style, color));<br>        System.out.println(getString(style, backgroundColor));<br>    &#125;<br><br>    <span class="hljs-comment">// https://www.cnblogs.com/qlqwjy/p/7531579.html</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getFloat</span><span class="hljs-params">(String value, String property)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (value.contains(property)) &#123;<br>                value = value.substring(value.indexOf(property));<br>                value = value.substring(<span class="hljs-number">0</span>, value.contains(<span class="hljs-string">";"</span>) ? value.indexOf(<span class="hljs-string">";"</span>) : value.length());<br>                String attr = value.substring(value.indexOf(<span class="hljs-string">":"</span>) + <span class="hljs-number">1</span>).trim();<br>                <span class="hljs-keyword">return</span> Double.parseDouble(attr.substring(<span class="hljs-number">0</span>, attr.indexOf(<span class="hljs-string">"px"</span>)));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// ignore all exception</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getString</span><span class="hljs-params">(String value, String property)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (value.contains(property)) &#123;<br>                System.out.println(value);<br>                value = value.substring(value.indexOf(property));<br>                value = value.substring(<span class="hljs-number">0</span>, value.contains(<span class="hljs-string">";"</span>) ? value.indexOf(<span class="hljs-string">";"</span>) : value.length());<br>                <span class="hljs-keyword">return</span> value.substring(value.indexOf(<span class="hljs-string">":"</span>) + <span class="hljs-number">1</span>).trim();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// ignore all exception</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java资源回收</title>
    <url>/java/%E8%B5%84%E6%BA%90%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<h2 id="资源回收的时机"><a href="#资源回收的时机" class="headerlink" title="资源回收的时机"></a>资源回收的时机</h2><ul>
<li><a href="https://blog.csdn.net/ungoneless/article/details/53191719" target="_blank" rel="noopener">程序kill -9与kill -15的区别，以及回调函数的作用 - ungoneless的博客 - CSDN博客</a><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShutdownHookTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shutdownCallback</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Shutdown callback is invoked."</span>);<br>        <span class="hljs-comment">// 在这回收资源</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Runtime.getRuntime().addShutdownHook(<span class="hljs-keyword">new</span> Thread(ShutdownHookTest::shutdownCallback));<br>        Thread.sleep(<span class="hljs-number">20000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">java ShutdownHookTest<br><br>ps -aux | grep ShutdownHookTest<br><br><span class="hljs-built_in">kill</span> -15 6483<br></code></pre></td></tr></table></figure>
<p><img src="https://github.com/lyloou/img/raw/develop/z/20190705140222.png" alt="ShutdownHookTest"></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java时间</title>
    <url>/java/%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="时间工具"><a href="#时间工具" class="headerlink" title="时间工具"></a>时间工具</h2><p>joda-time</p>
<h2 id="判断当前时间是否处在某个区间（用字符串表示的两个时间点）"><a href="#判断当前时间是否处在某个区间（用字符串表示的两个时间点）" class="headerlink" title="判断当前时间是否处在某个区间（用字符串表示的两个时间点）"></a>判断当前时间是否处在某个区间（用字符串表示的两个时间点）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 判断当前时间是否处在某个区间（用字符串表示的两个时间点）</span><br><span class="hljs-comment">  * https://www.programcreek.com/java-api-examples/?class=org.apache.commons.lang.time.DateUtils&amp;method=parseDate</span><br><span class="hljs-comment">  * org.apache.commons.lang.time.DateUtils.parseDate</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isNowSuitable</span><span class="hljs-params">()</span> </span>&#123;<br>    String startTime = <span class="hljs-string">"2019-01-12"</span>;<br>    String endTime = <span class="hljs-string">"2019-08-12"</span>;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(startTime) || StringUtils.isEmpty(endTime)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        String[] parsePatterns = &#123;<span class="hljs-string">"yyyy-MM-dd"</span>&#125;; <span class="hljs-comment">// "yyyy-MM-dd HH:mm:ss"</span><br>        Date startDate = DateUtils.parseDate(startTime, parsePatterns);<br>        Date endDate = DateUtils.parseDate(endTime, parsePatterns);<br>        <span class="hljs-keyword">long</span> now = Calendar.getInstance().getTimeInMillis();<br>        <span class="hljs-keyword">if</span> (now &gt;= startDate.getTime() &amp;&amp; now &lt;= endDate.getTime()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="iso-时间转换"><a href="#iso-时间转换" class="headerlink" title="iso 时间转换"></a>iso 时间转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.annotation.JSONField;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.TimeZone;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;类的详细说明&lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lyloou</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 其他作者姓名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.00 2020/10/30 , 星期五 lyloou 创建</span><br><span class="hljs-comment"> * &lt;p&gt;1.01 YYYY/MM/DD 修改者姓名 修改内容说明&lt;/p&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">new</span> A().test();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toISO8601UTC</span><span class="hljs-params">(Date date)</span> </span>&#123;<br>        TimeZone tz = TimeZone.getTimeZone(<span class="hljs-string">"UTC"</span>);<br>        DateFormat df = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"</span>);<br>        df.setTimeZone(tz);<br>        <span class="hljs-keyword">return</span> df.format(date);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title">fromISO8601UTC</span><span class="hljs-params">(String dateStr)</span> </span>&#123;<br>        TimeZone tz = TimeZone.getTimeZone(<span class="hljs-string">"UTC"</span>);<br>        DateFormat df = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"</span>);<br>        df.setTimeZone(tz);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> df.parse(dateStr);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        String input = <span class="hljs-string">"2020-11-05T16:00:00.000Z"</span>; <span class="hljs-comment">// 对应的日期时间是：Fri Nov 06 00:00:00 CST 2020</span><br>        Date date = fromISO8601UTC(input);<br>        System.out.println(date);<br>        DateFormat df1 = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd"</span>);<br>        System.out.println(df1.format(date));<br><br>        Model model = <span class="hljs-keyword">new</span> Model();<br>        model.startTime = date;<br>        String data = com.alibaba.fastjson.JSON.toJSONStringWithDateFormat(model, <span class="hljs-string">"yyyy-MM-dd"</span>, SerializerFeature.DisableCircularReferenceDetect);<br>        System.out.println(data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span> </span>&#123;<br>        <span class="hljs-meta">@JSONField</span>(format = <span class="hljs-string">"yyyy-MM-dd hh:mm"</span>)<br>        <span class="hljs-keyword">public</span> Date startTime;<br><br>        <span class="hljs-meta">@JSONField</span>(format = <span class="hljs-string">"yyyy-MM-dd"</span>)<br>        <span class="hljs-keyword">public</span> Date endTime;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"Model&#123;"</span> +<br>                    <span class="hljs-string">"startTime="</span> + startTime +<br>                    <span class="hljs-string">", endTime="</span> + endTime +<br>                    <span class="hljs-string">'&#125;'</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java环境部署</title>
    <url>/java/%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>服务器部署用到的JRE是server JRE，如下图的JAVA 8 JRE</p>
<p><img src="https://github.com/lyloou/img/raw/develop/z/20190401154854.png" alt></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java配置文件读取</title>
    <url>/java/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># config/test.properties</span><br><span class="hljs-attr">key1</span>=<span class="hljs-number">2018</span><br><span class="hljs-attr">key2</span>=<span class="hljs-number">2019</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TestProperties.java</span><br><span class="hljs-keyword">import</span> com.google.common.collect.ImmutableList;<br><span class="hljs-keyword">import</span> com.google.common.collect.ImmutableMap;<br><span class="hljs-keyword">import</span> com.google.common.collect.Maps;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Properties prop = <span class="hljs-keyword">new</span> Properties();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            prop.load(<span class="hljs-keyword">new</span> java.io.FileInputStream(System.getProperty(<span class="hljs-string">"user.dir"</span>).concat(<span class="hljs-string">"/config/test.properties"</span>)));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">TestProperties</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br><br>        <span class="hljs-comment">// value</span><br>        System.out.println(getValue(<span class="hljs-string">"key1"</span>));<br>        System.out.println(getValue(<span class="hljs-string">"key2"</span>));<br><br>        <span class="hljs-comment">// array</span><br>        System.out.println(Arrays<br>                .stream(getValues(ImmutableList.of(<br>                        <span class="hljs-string">"key1"</span>,<br>                        <span class="hljs-string">"key2"</span><br>                ).toArray()))<br>                .collect(Collectors.toList()));<br><br>        <span class="hljs-comment">// map</span><br>        ImmutableMap&lt;String, String&gt; map = Maps.fromProperties(prop);<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getValue</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> prop.getProperty(key).trim();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object[] getValues(Object[] key) &#123;<br>        <span class="hljs-keyword">int</span> length = key.length;<br>        Object[] objects = <span class="hljs-keyword">new</span> Object[length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            objects[i] = prop.getProperty(key[i].toString()).trim();<br>        &#125;<br>        <span class="hljs-keyword">return</span> objects;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java隐藏特性</title>
    <url>/java/%E9%9A%90%E8%97%8F%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="双花括号初始化语法（DoubleBraceInitialization）"><a href="#双花括号初始化语法（DoubleBraceInitialization）" class="headerlink" title="双花括号初始化语法（DoubleBraceInitialization）"></a>双花括号初始化语法（DoubleBraceInitialization）</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里解释下这两个括号：</span><br><span class="hljs-comment">// 第一个括号创建了一个新的匿名内部类，相信这个大家都知道；</span><br><span class="hljs-comment">// 第二个括号声明了匿名内部类实例化时运行的实例初始化块。</span><br>removeProductsWithCodeIn(<span class="hljs-keyword">new</span> HashSet&lt;String&gt;() &#123;&#123;<br>    add(<span class="hljs-string">"XZ13s"</span>);<br>    add(<span class="hljs-string">"AB21/X"</span>);<br>    add(<span class="hljs-string">"YYLEX"</span>);<br>    add(<span class="hljs-string">"AR5E"</span>);<br> &#125;&#125;);<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="http://www.cnblogs.com/lanxuezaipiao/p/3460373.html" target="_blank" rel="noopener">Java 你不知道的那些事儿—Java 隐藏特性（上） - Alexia(minmin) - 博客园</a></li>
</ul>
<h3 id="注意：此特性可能存在的问题；"><a href="#注意：此特性可能存在的问题；" class="headerlink" title="注意：此特性可能存在的问题；"></a><strong>注意</strong>：此特性可能存在的问题；</h3><ol>
<li>gson 不能正确解析双花括号语法(<a href="http://lyloou.com/java/%E5%9D%91/" target="_blank" rel="noopener">【Java】那些踩过的坑 | 比特楼</a>)</li>
<li><a href="https://segmentfault.com/a/1190000022717457" target="_blank" rel="noopener">永远不要使用双花括号初始化实例，否则就会 OOM！ - SegmentFault 思否</a><br>（匿名内部类，可能会导致 OOM）</li>
<li>Caused by: com.esotericsoftware.kryo.KryoException: Class cannot be created (missing no-arg constructor): com.lyloou.jetcache.UserServiceImpl$1<br>This is an anonymous class, which is not serializable by default in Kryo. Possible solutions: 1. Remove uses of anonymous classes, including double brace initialization, from the containing class. This is the safest solution, as anonymous classes don’t have predictable names for serialization.</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习</title>
    <url>/java-concurrent/readme/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.cnblogs.com/dolphin0520/category/602384.html" target="_blank" rel="noopener">Java 并发编程 - 随笔分类 - 海 子 - 博客园</a></li>
<li><a href="https://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="noopener">Java 并发编程：volatile 关键字解析 - 海 子 - 博客园</a></li>
</ul>
<h2 id="completableFuture"><a href="#completableFuture" class="headerlink" title="completableFuture"></a>completableFuture</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/readme-2021-07-14-17-10-12.png" alt="readme-2021-07-14-17-10-12"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> List&lt;CompletableFuture&lt;Void&gt;&gt; futureList = nameToContent.keySet().stream()<br>        .map(name -&gt; CompletableFuture.runAsync(() -&gt; doUploadFile(map, name, nameToContent), executor))<br>        .collect(Collectors.toList());<br><br><span class="hljs-comment">//noinspection ResultOfMethodCallIgnored</span><br>futureList.stream().map(CompletableFuture::join).collect(Collectors.toList());<br><br><span class="hljs-comment">// 注意：如果使用 count() 不会阻塞</span><br><span class="hljs-comment">// futureList.stream().map(CompletableFuture::join).count()</span><br></code></pre></td></tr></table></figure>

<h2 id="线程池如何合理配置"><a href="#线程池如何合理配置" class="headerlink" title="线程池如何合理配置"></a>线程池如何合理配置</h2><p><a href="https://cloud.tencent.com/developer/article/1806245" target="_blank" rel="noopener">CPU 密集型 和 IO 密集型 的区别，如何确定线程池大小？ - 云+社区 - 腾讯云</a><br>配置线程池可以从以下几个方面来考虑。</p>
<ul>
<li>任务是 CPU 密集型、IO 密集型或者混合型；</li>
<li>任务优先级，高中低；</li>
<li>任务时间执行长短；</li>
<li>任务依赖性：是否依赖其他系统资源。</li>
</ul>
<hr>
<ul>
<li>CPU 密集型可以配置可能小的线程，比如：N+1 线程。</li>
<li>IO 密集型（网络、磁盘 IO）可以配置较多的线程，如 2n 个线程。</li>
<li>混合型可以拆成 IO 密集型任务和 CPU 密集型任务，计算如下：<blockquote>
<p>最佳线程数目 = （线程等待时间与线程 CPU 时间之比 + 1）* CPU 数目</p>
</blockquote>
</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">示例：<br><br>假如一个程序平均每个线程CPU运行时间为<span class="hljs-number">0.5</span>s，而线程等待时间（非CPU运行时间，比如IO）为<span class="hljs-number">1.5</span>s，CPU核心数为<span class="hljs-number">8</span>，那么最佳的线程数应该是？<br>     根据上面这个公式估算得到最佳的线程数：((<span class="hljs-number">0.5</span>+<span class="hljs-number">1.5</span>)/<span class="hljs-number">0.5</span>)*<span class="hljs-number">8</span>=<span class="hljs-number">32</span>。<br></code></pre></td></tr></table></figure>

<p>通过<code>Runtime.getRuntime().avaiableProcessors()</code>来获取 cpu 个数。</p>
<h2 id="窃取线程池"><a href="#窃取线程池" class="headerlink" title="窃取线程池"></a>窃取线程池</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> cn.hutool.core.thread.ThreadUtil;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExecutorOfWorkStealingPoolTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> ExecutorService executorService = Executors.newWorkStealingPool();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;<br>            System.out.println(i);<br>            <span class="hljs-keyword">int</span> finalI = i;<br>            executorService.submit(() -&gt; &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" - "</span> + finalI);<br>                ThreadUtil.sleep(<span class="hljs-number">1000</span>);<br>            &#125;);<br>        &#125;<br>        ThreadUtil.sleep(<span class="hljs-number">1000000</span>);<br>        executorService.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML易混淆概念.md</title>
    <url>/js/HTML%E6%98%93%E6%B7%B7%E6%B7%86%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="HTML中易混淆概念"><a href="#HTML中易混淆概念" class="headerlink" title="HTML中易混淆概念"></a>HTML中易混淆概念</h2><h3 id="不要胡乱嵌套标签"><a href="#不要胡乱嵌套标签" class="headerlink" title="不要胡乱嵌套标签"></a>不要胡乱嵌套标签</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">- <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>里面不可以嵌套<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>~<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>等<br>- a元素里不可以嵌套交互式元素(<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span>等)<br></code></pre></td></tr></table></figure>
<p><a href="http://www.w3cschool.cn/html/html-cui11xk2.html" target="_blank" rel="noopener">HTML元素嵌套嵌套错误可能引起的问题</a></p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>订单号生成器</title>
    <url>/java/%E8%AE%A2%E5%8D%95%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote>
<p>订单号 = 前缀 + 日期 + (一个 1000-9999 之间的四位数字)</p>
</blockquote>
<p>后面的四位数字，可以通过 <code>jedis.incrBy()</code> 来实现。</p>
<p>效能：最多可以在 <code>1</code> 秒钟创建 <code>9000</code> 个不重复单号</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ID 生成器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IdGenerator</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成器类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Type &#123;<br>        NORMAL(<span class="hljs-string">""</span>),<br>        ORDER(<span class="hljs-string">"OR"</span>),<br>        RETURN(<span class="hljs-string">"RT"</span>),<br>        REFUND(<span class="hljs-string">"RF"</span>);<br><br>        <span class="hljs-keyword">private</span> String prefix;<br><br>        Type(String prefix) &#123;<br>            <span class="hljs-keyword">this</span>.prefix = prefix;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String GENERATOR = <span class="hljs-string">"GENERATOR"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String FORMAT = <span class="hljs-string">"yyyyMMddHHmmss"</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">generate</span><span class="hljs-params">(Type type)</span> </span>&#123;<br>        String now = DateFormatUtils.format(<span class="hljs-keyword">new</span> Date(), FORMAT);<br>        String key = GENERATOR + <span class="hljs-string">":"</span> + type.name();<br>        <span class="hljs-keyword">int</span> counter = getCounter(key);<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">"%s%s%s"</span>, type.prefix, now, counter);<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    Jedis jedis;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过 redis 来获取累加器</span><br><span class="hljs-comment">     * 根据 key 类型来获取累加数字</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 累加的数字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCounter</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num;<br>        String serial = jedis.get(key);<br>        num = <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">if</span> (serial != <span class="hljs-keyword">null</span> &amp;&amp; Integer.parseInt(serial) &lt; <span class="hljs-number">9999</span>) &#123;<br>            num = jedis.incrBy(key, <span class="hljs-number">1</span>).intValue();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            jedis.set(key, String.valueOf(num));<br>        &#125;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith</span>(SpringRunner<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><br><span class="hljs-class">@<span class="hljs-title">ComponentScan</span>(<span class="hljs-title">basePackages</span> </span>= &#123;<span class="hljs-string">"com.lyloou.order"</span>&#125;)<br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlowApplicationTests</span> </span>&#123;<br>  <span class="hljs-meta">@Autowired</span><br>  IdGenerator idGenerator;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGenerator</span><span class="hljs-params">()</span> </span>&#123;<br>      List&lt;String&gt; ids = Lists.newArrayList();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>          <span class="hljs-keyword">double</span> delay = Math.random() * <span class="hljs-number">1000</span>;<br>          Thread.sleep((<span class="hljs-keyword">long</span>) delay);<br>          ids.add(idGenerator.generate(IdGenerator.Type.ORDER));<br>      &#125;<br>      System.out.println(Joiner.on(<span class="hljs-string">",\n"</span>).join(ids));<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/** 运行结果：</span><br><span class="hljs-comment">OR202003261127151030,</span><br><span class="hljs-comment">OR202003261127161031,</span><br><span class="hljs-comment">OR202003261127171032,</span><br><span class="hljs-comment">OR202003261127181033,</span><br><span class="hljs-comment">OR202003261127181034,</span><br><span class="hljs-comment">OR202003261127191035,</span><br><span class="hljs-comment">OR202003261127191036,</span><br><span class="hljs-comment">OR202003261127191037,</span><br><span class="hljs-comment">OR202003261127201038,</span><br><span class="hljs-comment">OR202003261127211039</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】基于线程池的独立任务并发执行器</title>
    <url>/java-concurrent/%E5%9F%BA%E4%BA%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%8B%AC%E7%AB%8B%E4%BB%BB%E5%8A%A1%E5%B9%B6%E5%8F%91%E6%89%A7%E8%A1%8C%E5%99%A8/</url>
    <content><![CDATA[<h4 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h4><p>对于多个独立的任务，可以以并发的方式执行任务，以提高 CPU 利用率，提高处理效率。</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>在一个线程池中，开启指定数量的线程，每个线程从任务队列中获取任务执行。</p>
<p>执行的过程中，判断当前线程是否在执行任务的状态，如果没有执行任务，取一条任务执行，如果正在执行，则跳过，下轮再判断。</p>
<p>在所有任务执行完后，关闭线程池。</p>
<p>需要注意的是数据结构的选择，须选择并发类的数据结构，不然可能出现阻塞，死锁等情况。</p>
<p>（具体逻辑参考源码）</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 并发执行器示例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcurrentExecutorTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            test();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, String&gt; paramMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            paramMap.put(<span class="hljs-string">"key:"</span> + i, <span class="hljs-string">"value:"</span> + i);<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> ConcurrentExecutor&lt;String, String, Integer&gt; executor = <span class="hljs-keyword">new</span> ConcurrentExecutor&lt;&gt;(<span class="hljs-number">5</span>, paramMap,<br>                (k, v) -&gt; &#123;<br>                    ThreadUtil.sleep(<span class="hljs-number">10</span>);<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"-"</span> + v);<br>                    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> abs = Math.abs(Objects.hash(v));<br>                    <span class="hljs-keyword">if</span> (abs % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> abs;<br>                &#125;);<br>        executor.execute();<br>        System.out.println(<span class="hljs-string">"success result: "</span> + executor.getSuccessResultMap());<br>        System.out.println(<span class="hljs-string">"error result: "</span> + executor.getErrorResultMap());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">pool-1-thread-1-value:0<br>pool-1-thread-2-value:1<br>pool-1-thread-4-value:3<br>pool-1-thread-3-value:2<br>pool-1-thread-3-value:8<br>pool-1-thread-1-value:5<br>pool-1-thread-5-value:4<br>pool-1-thread-2-value:6<br>pool-1-thread-4-value:7<br>pool-1-thread-3-value:9<br>success result: &#123;key:2=231604360, key:0=231604358, key:6=231604364, key:5=231604363, key:3=231604361, key:9=231604367, key:8=231604366&#125;<br>error result: &#123;key:1=java.lang.ArithmeticException: / by zero, key:4=java.lang.ArithmeticException: / by zero, key:7=java.lang.ArithmeticException: / by zero&#125;<br></code></pre></td></tr></table></figure>

<h4 id="源码（方案-1）"><a href="#源码（方案-1）" class="headerlink" title="源码（方案 1）"></a>源码（方案 1）</h4><p>基于自定义的 queue 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> cn.hutool.core.collection.CollUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.collection.ConcurrentHashSet;<br><span class="hljs-keyword">import</span> cn.hutool.core.lang.Assert;<br><span class="hljs-keyword">import</span> cn.hutool.core.thread.ThreadUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.util.BooleanUtil;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.function.BiFunction;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 并发执行器</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 适用场景：每个任务是独立的，不耦合的</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022/6/9 9:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcurrentExecutor</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>, <span class="hljs-title">R</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务参数映射（K：key的类型，V：值的类型）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, V&gt; paramMap;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功的任务结果映射（R：结果类型）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, R&gt; successResultMap;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败的任务结果映射</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, Throwable&gt; errorResultMap;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前运行中的key集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;K&gt; runningKeySet;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 候选任务key队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Queue&lt;K&gt; candidateKeyQueue;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 同时运行的最大线程数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> maxThreadNum;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ExecutorService executorService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 具体任务策略</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BiFunction&lt;K, V, R&gt; biFunction;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前index线程的运行状态，可依据此状态，判断是否立刻从任务参数中获取任务执行</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Integer, Boolean&gt; currentIndexThreadRunningStatusMap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcurrentExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxThreadNum, Map&lt;K, V&gt; paramMap, BiFunction&lt;K, V, R&gt; biFunction)</span> </span>&#123;<br>        Assert.notNull(paramMap, <span class="hljs-string">"paramMap不可为空"</span>);<br>        Assert.isTrue(maxThreadNum &gt; <span class="hljs-number">0</span>, <span class="hljs-string">"maxThreadNum不可小于1"</span>);<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> paramSize = paramMap.size();<br>        <span class="hljs-keyword">this</span>.maxThreadNum = Math.min(maxThreadNum, paramSize);<br>        <span class="hljs-comment">// tips: 须转换成同步类的map数据结构，如果错误地使用 this.paramMap = paramMap; 且外部使用了HashMap 或 LinkedHashMap，多测试几遍会发现，偶尔会陷入了阻塞</span><br>        <span class="hljs-keyword">this</span>.paramMap = Collections.synchronizedMap(paramMap);<br>        <span class="hljs-keyword">this</span>.candidateKeyQueue = <span class="hljs-keyword">new</span> ConcurrentLinkedQueue&lt;&gt;(paramMap.keySet());<br>        <span class="hljs-keyword">this</span>.runningKeySet = <span class="hljs-keyword">new</span> ConcurrentHashSet&lt;&gt;(paramSize);<br>        <span class="hljs-keyword">this</span>.biFunction = biFunction;<br>        <span class="hljs-keyword">this</span>.executorService = ThreadUtil.newExecutor(<span class="hljs-keyword">this</span>.maxThreadNum, <span class="hljs-keyword">this</span>.maxThreadNum, Integer.MAX_VALUE);<br>        <span class="hljs-keyword">this</span>.currentIndexThreadRunningStatusMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-keyword">this</span>.maxThreadNum);<br>        <span class="hljs-keyword">this</span>.successResultMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-keyword">this</span>.paramMap.size());<br>        <span class="hljs-keyword">this</span>.errorResultMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (CollUtil.isNotEmpty(paramMap)) &#123;<br><br>            <span class="hljs-comment">// 最多同时有 maxRunningThreadNumber 同时消费 taskMap 中的数据</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.maxThreadNum; i++) &#123;<br>                <span class="hljs-keyword">int</span> currentIndex = i;<br><br>                <span class="hljs-comment">// 当前线程上次还未执行完，暂时跳过</span><br>                <span class="hljs-keyword">final</span> Boolean isRunning = currentIndexThreadRunningStatusMap.getOrDefault(currentIndex, <span class="hljs-keyword">false</span>);<br>                <span class="hljs-keyword">if</span> (BooleanUtil.isTrue(isRunning)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 选择一个候选key</span><br>                <span class="hljs-keyword">final</span> K candidateKey = pickCandidateKey();<br>                <span class="hljs-comment">// 当前没有对应key的任务</span><br>                <span class="hljs-keyword">if</span> (Objects.isNull(candidateKey)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 在线程池中运行任务</span><br>                executorService.submit(() -&gt; &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        currentIndexThreadRunningStatusMap.put(currentIndex, <span class="hljs-keyword">true</span>);<br>                        <span class="hljs-keyword">final</span> V data = paramMap.get(candidateKey);<br><br>                        <span class="hljs-comment">// 开始执行任务</span><br>                        <span class="hljs-keyword">final</span> R result = biFunction.apply(candidateKey, data);<br><br>                        <span class="hljs-comment">// 存入正常结果</span><br>                        successResultMap.put(candidateKey, result);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        <span class="hljs-comment">// 存入异常结果</span><br>                        errorResultMap.put(candidateKey, e);<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        paramMap.remove(candidateKey);<br>                        candidateKeyQueue.remove(candidateKey);<br>                        currentIndexThreadRunningStatusMap.remove(currentIndex);<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;<br>        executorService.shutdown();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从候选任务key队列中选择一个任务key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> K <span class="hljs-title">pickCandidateKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (K candidateKey : candidateKeyQueue) &#123;<br>            <span class="hljs-keyword">if</span> (!runningKeySet.contains(candidateKey)) &#123;<br>                runningKeySet.add(candidateKey);<br>                <span class="hljs-keyword">return</span> candidateKey;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;K, R&gt; <span class="hljs-title">getSuccessResultMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> successResultMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;K, Throwable&gt; <span class="hljs-title">getErrorResultMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> errorResultMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="源码（方案-2）"><a href="#源码（方案-2）" class="headerlink" title="源码（方案 2）"></a>源码（方案 2）</h2><p>基于 executorService.invokeAll</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyloou.component.util.concurrent;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.collection.CollUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.date.DateUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.date.TimeInterval;<br><span class="hljs-keyword">import</span> cn.hutool.core.lang.Assert;<br><span class="hljs-keyword">import</span> cn.hutool.core.thread.ThreadUtil;<br><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.function.BiFunction;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 并发执行器</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 适用场景：每个任务是独立的，不耦合的</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022/6/9 9:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcurrentExecutor2</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>, <span class="hljs-title">R</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务参数映射（K：key的类型，V：值的类型）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, V&gt; paramMap;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功的任务结果映射</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, R&gt; successResultMap;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败的任务结果映射</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, Throwable&gt; errorResultMap;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ExecutorService executorService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 具体任务策略</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BiFunction&lt;K, V, R&gt; biFunction;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcurrentExecutor2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxThreadNum, Map&lt;K, V&gt; paramMap, BiFunction&lt;K, V, R&gt; biFunction)</span> </span>&#123;<br>        Assert.notNull(paramMap, <span class="hljs-string">"paramMap不可为空"</span>);<br>        Assert.isTrue(maxThreadNum &gt; <span class="hljs-number">0</span>, <span class="hljs-string">"maxThreadNum不可小于1"</span>);<br><br>        <span class="hljs-comment">// 同时运行的最大线程数量</span><br>        <span class="hljs-keyword">int</span> maxThreadNum1 = Math.min(maxThreadNum, paramMap.size());<br>        <span class="hljs-comment">// tips: 如果错误地使用 this.paramMap = paramMap; 多测试几遍会发现，偶尔会陷入了阻塞</span><br>        <span class="hljs-keyword">this</span>.paramMap = Collections.synchronizedMap(paramMap);<br>        <span class="hljs-keyword">this</span>.biFunction = biFunction;<br>        <span class="hljs-keyword">this</span>.executorService = ThreadUtil.newExecutor(maxThreadNum1, maxThreadNum1, Integer.MAX_VALUE);<br>        <span class="hljs-keyword">this</span>.successResultMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-keyword">this</span>.paramMap.size());<br>        <span class="hljs-keyword">this</span>.errorResultMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">while</span> (CollUtil.isNotEmpty(paramMap)) &#123;<br>            List&lt;Callable&lt;R&gt;&gt; callableList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            paramMap.forEach((k, v) -&gt; callableList.add(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">final</span> R result = biFunction.apply(k, v);<br>                    successResultMap.put(k, result);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    errorResultMap.put(k, e);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    paramMap.remove(k);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;));<br>            <span class="hljs-comment">// 在线程池中运行任务</span><br>            executorService.invokeAll(callableList);<br>            executorService.shutdown();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;K, R&gt; <span class="hljs-title">getSuccessResultMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> successResultMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;K, Throwable&gt; <span class="hljs-title">getErrorResultMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> errorResultMap;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">final</span> TimeInterval timer = DateUtil.timer();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            test();<br>        &#125;<br>        System.out.println(timer.intervalMs());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Map&lt;String, String&gt; paramMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            paramMap.put(<span class="hljs-string">"key:"</span> + i, <span class="hljs-string">"value:"</span> + i);<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> ConcurrentExecutor2&lt;String, String, Integer&gt; executor = <span class="hljs-keyword">new</span> ConcurrentExecutor2&lt;&gt;(<span class="hljs-number">5</span>, paramMap,<br>                (k, v) -&gt; &#123;<br>                    ThreadUtil.sleep(<span class="hljs-number">10</span>);<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"-"</span> + v);<br>                    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> abs = Math.abs(Objects.hash(v));<br>                    <span class="hljs-keyword">if</span> (abs % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> abs;<br>                &#125;);<br>        executor.execute();<br>        System.out.println(<span class="hljs-string">"success result: "</span> + executor.getSuccessResultMap());<br>        System.out.println(<span class="hljs-string">"error result: "</span> + executor.getErrorResultMap());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中易混淆概念</title>
    <url>/js/css%E4%B8%AD%E6%98%93%E6%B7%B7%E6%B7%86%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="轮廓（outline）的宽度是否影响元素尺寸？"><a href="#轮廓（outline）的宽度是否影响元素尺寸？" class="headerlink" title="轮廓（outline）的宽度是否影响元素尺寸？"></a>轮廓（outline）的宽度是否影响元素尺寸？</h3><p>在盒子模型里，元素的尺寸依赖于：边距，边框，填充，内容。</p>
<blockquote>
</blockquote>
<p>outline 属性与 border 属性不同：outline不是元素尺寸的一部分，元素的总宽度和高度不受轮廓宽度的影响。<br>轮廓不被视为页面的一部分，因此在应用它们时不会导致页面布局被调整。<br><a href="http://www.w3cschool.cn/css/html-css-outline.html" target="_blank" rel="noopener">http://www.w3cschool.cn/css/html-css-outline.html</a></p>
<p>ps:当宽度很宽时，outline直接覆盖到其他元素了。<br>通过颜色透明度来观察会更清晰：<code>outline:52px solid #80aaaaaa;</code><br>（可以在<code>http://www.w3cschool.cn/tryrun/showhtml/trycss3_outline-offset</code>这个实验里修改更大的宽度和颜色看看。）</p>
<h3 id="浮动和清除浮动"><a href="#浮动和清除浮动" class="headerlink" title="浮动和清除浮动"></a>浮动和清除浮动</h3><p>clear属性指定元素两侧不能出现浮动元素。<br><a href="http://www.w3cschool.cn/css/css-float.html" target="_blank" rel="noopener">CSS Float（浮动）</a></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><code class="hljs dns">- 假如某个div元素<span class="hljs-keyword">A</span>是浮动的，如果<span class="hljs-keyword">A</span>元素上一个元素也是浮动的，那么<span class="hljs-keyword">A</span>元素会跟随在上一个元素的后边<br>  (如果一行放不下这两个元素，那么<span class="hljs-keyword">A</span>元素会被挤到下一行)；如果<span class="hljs-keyword">A</span>元素上一个元素是标准流中的元素，那么<span class="hljs-keyword">A</span>的相对垂直位置不会改变，也就是说<span class="hljs-keyword">A</span>的顶部总是和上一个元素的底部对齐。<br>- clear属性只对当前被作用的标签有效，不能影响其他元素；<br></code></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/iyangyuan/archive/2013/03/27/2983813.html" target="_blank" rel="noopener">经验分享：CSS浮动(float,clear)通俗讲解</a></p>
<h3 id="常见的块级元素和内联元素"><a href="#常见的块级元素和内联元素" class="headerlink" title="常见的块级元素和内联元素"></a>常见的块级元素和内联元素</h3><p>块级元素：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">- div<br>- p<br>- <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">h3</span>, ..., h6<br>- ul<br>- table<br></code></pre></td></tr></table></figure>
<p>内联元素：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>span<br><span class="hljs-bullet">- </span>b<br><span class="hljs-bullet">- </span>td<br><span class="hljs-bullet">- </span>a<br><span class="hljs-bullet">- </span>img<br></code></pre></td></tr></table></figure>

<h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><p><a href="http://www.w3cschool.cn/css/xohvqfmc.html" target="_blank" rel="noopener">http://www.w3cschool.cn/css/xohvqfmc.html</a></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS布局</title>
    <url>/js/css%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<blockquote>
<p>从局部到全面。一小块，一小块。<br>从全面到局部。逐级增大。</p>
</blockquote>
<h2 id="Flex-布局教程"><a href="#Flex-布局教程" class="headerlink" title="Flex 布局教程"></a>Flex 布局教程</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇 - 阮一峰的网络日志</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">Flex 布局教程：实例篇 - 阮一峰的网络日志</a></p>
<h2 id="圆角图片"><a href="#圆角图片" class="headerlink" title="圆角图片"></a>圆角图片</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.icon</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">50%</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="横向滚动"><a href="#横向滚动" class="headerlink" title="横向滚动"></a>横向滚动</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.items</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: row;<br>    <span class="hljs-attribute">overflow-x</span>: scroll;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">218px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: column;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>攻克目标</title>
    <url>/java/%E6%94%BB%E5%85%8B%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="Java技术"><a href="#Java技术" class="headerlink" title="Java技术"></a>Java技术</h2><h2 id="主流开发框架"><a href="#主流开发框架" class="headerlink" title="主流开发框架"></a>主流开发框架</h2><p>Spring</p>
<p>Dubbo</p>
<p>Kafka</p>
<p>Redis</p>
<p>Canal</p>
<p>ElasticSearch</p>
<h2 id="相关能力"><a href="#相关能力" class="headerlink" title="相关能力"></a>相关能力</h2><p>分布式、高并发、高可用大型系统架构设计能力和相关经验；<br>极强的产品思维和业务理解能力，熟练掌握软件设计原则；<br>熟悉各类算法、分布式、中间件、服务化框架、负载均衡，相关高性能、高可用系统架构设计成功实践；<br>熟悉流程引擎、规则引擎相关技术的应用，有过多业务场景下的协同系统的开发实践经验；<br>有良好的沟通能力和自我驱动力，具备一定的项目管理能力，能规划中长期架构方向者。</p>
<h1 id="层面："><a href="#层面：" class="headerlink" title="层面："></a>层面：</h1><h2 id="学习阶段"><a href="#学习阶段" class="headerlink" title="学习阶段"></a>学习阶段</h2><ol>
<li>这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题？</li>
<li>这个技术的优势和劣势分别是什么？</li>
<li>这个技术的适用场景？</li>
<li>技术的组成部分和关键实现？</li>
<li>已有的实现和它之间的对比？</li>
</ol>
<h2 id="实战阶段"><a href="#实战阶段" class="headerlink" title="实战阶段"></a>实战阶段</h2><ol>
<li>基本使用demo</li>
<li>练手项目</li>
<li>真项目</li>
</ol>
<p>高质量的信息和第一手的知识<br>知识连成地图（通过问题来学习，有的放矢）<br>不断反思，与不同年龄的人讨论<br>举一反三，并实践，知识转换成技能。</p>
<p>学习是为了改变自己。<br>坚持是一件反人性的事，所以，它才难能可贵，也更有价值。<br>人不怕笨，怕的是懒，怕的是找到各种理由放弃。<br>坚持也不是要苦苦的坚持，有循环有成就感的坚持才是真正可以持续的。<br>所以一方面：要把你的坚持形成成果晒出来，让别人来给你点赞。<br>另一方面：还要把坚持变成一种习惯，就像吃饭喝水一样，你感觉不到太多的成本付出。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery学习笔记.md</title>
    <url>/js/JQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>重难点：<br><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000#0" target="_blank" rel="noopener">Promise</a></p>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="组合查找"><a href="#组合查找" class="headerlink" title="组合查找"></a>组合查找</h2><h3 id="tag和属性"><a href="#tag和属性" class="headerlink" title="tag和属性"></a>tag和属性</h3><p>$(‘input[name=”email”]’); // 找到input下的name=”email”的标签；</p>
<h3 id="tag和class"><a href="#tag和class" class="headerlink" title="tag和class"></a>tag和class</h3><p>$(‘tr.red’); // 找出<tr class="red ...">…</tr></p>
<h2 id="多项选择器"><a href="#多项选择器" class="headerlink" title="多项选择器"></a>多项选择器</h2><p>用符号”,”隔开<br>$(‘p,div’); // 把</p><p>、<div>都选择出来。<br>注意选择出来的元素按照在HTML中的顺序排列的，不会有重复的元素。</div></p>
<h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><p>如果两个DOM元素据有层级关系，就用<code>$(&#39;parent child&#39;)</code>来选择，层级之间用空格隔开。<br>其中，parent和child可以是父子关系，也可以是祖孙关系。</p>
<p>好处：缩小了选择的范围，因为首先要定位父节点，才能选择相应的子节点。</p>
<h2 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h2><p>$(‘parent&gt;child’)<br>其中，parent和child必须是父子关系（直属父子关系）；</p>
<h2 id="查找和过滤"><a href="#查找和过滤" class="headerlink" title="查找和过滤"></a>查找和过滤</h2><p>向下层查找： 使用<code>find()</code>函数，其中的参数表示同上面的选择器所需要的一样；<br>向上层查找： 使用<code>parent()</code>函数。<br>同层查找： 使用<code>next()</code>或者<code>prev()</code>方法。可以包含参数，也可以不要参数。</p>
<h2 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h2><p>$(‘#id’).text() 获取节点文本<br>$(‘#id’).html() 获取原始HTML</p>
<h3 id="传入参数直接修改内容"><a href="#传入参数直接修改内容" class="headerlink" title="传入参数直接修改内容"></a>传入参数直接修改内容</h3><p>$(‘#id’).text(‘new’);<br>$(‘#id’).html(‘<span>new</span>‘);</p>
<h3 id="获取class"><a href="#获取class" class="headerlink" title="获取class"></a>获取class</h3><p>$(‘#id’).css(‘color’);</p>
<h3 id="设置class"><a href="#设置class" class="headerlink" title="设置class"></a>设置class</h3><p>$(‘#id’).css(‘color’, ‘red’);<br>$(‘#id’).css(‘backgroundColor’, ‘red’);<br>$(‘#id’).css(‘background-color’, ‘red’);</p>
<p>$(‘#id’).hasClass(‘hightlight’);<br>$(‘#id’).addClass(‘hightlight’);<br>$(‘#id’).removeClass(‘hightlight’);</p>
<h3 id="显示和隐藏DOM"><a href="#显示和隐藏DOM" class="headerlink" title="显示和隐藏DOM"></a>显示和隐藏DOM</h3><p>$(‘#id’).hide(); // 隐藏<br>$(‘#id’).show(); // 显示</p>
<h3 id="获取DOM信息"><a href="#获取DOM信息" class="headerlink" title="获取DOM信息"></a>获取DOM信息</h3><p>$(‘#id’).width();<br>$(‘#id’).height();</p>
<h3 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性:"></a>操作属性:</h3><p>$(‘#id’).attr(‘name’); // 获取属性<br>$(‘#id’).attr(‘name’, ‘hello’); // 设置属性<br>$(‘#id’).removeAttr(‘name’); // 移除属性</p>
<p>注意：针对radio 和 selected 要区别处理（例如使用prop），最好使用<code>is(&#39;:selected&#39;)</code>这样的方式；<br><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000" target="_blank" rel="noopener">http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000</a></p>
<h3 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h3><p>获取value: input.val();<br>设置value: input.val(‘newValue’);</p>
<h2 id="修改DOM结构"><a href="#修改DOM结构" class="headerlink" title="修改DOM结构"></a>修改DOM结构</h2><h3 id="添加子节点"><a href="#添加子节点" class="headerlink" title="添加子节点"></a>添加子节点</h3><p>在子节点最后添加：<br>$(‘#div’).append(‘<li>Lua</li>‘);</p>
<p>在子节点前面添加：<br>$(‘#div’).append(‘<li>Lua</li>‘);</p>
<p>在同级节点添加：<br>$(‘#div’).after(‘</p><p>Java</p>‘);<br>$(‘#div’).before(‘<p>Java</p>‘);<p></p>
<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>$(‘#div’).remove(); // 删除了id为div的节点</p>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143564690172894383ccd7ab64669b4971f4b03fa342d000#0" target="_blank" rel="noopener">http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143564690172894383ccd7ab64669b4971f4b03fa342d000#0</a></p>
<ul>
<li>鼠标事件</li>
<li>键盘事件</li>
<li>其他事件（focus, blur, change, submit, ready）<br>在head中的script中设置了DOM的事件监听，却没有生效，原因是：<br>因为JavaScript在此执行的时候，设置的对象尚未载入浏览器，所以获取的DOM为<code>[]</code>，所以事件并没有绑定到任何DOM上。<br>解决办法是：<br>将绑定事件的过程放在document的ready中执行<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">'ready'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        $(<span class="hljs-string">'#testForm'</span>).on(<span class="hljs-string">'submit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            alert(<span class="hljs-string">'Submit'</span>);<br>        &#125;);<br>    &#125;)<br>&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure>
另一种简单处理方式（上面的代码简写）：<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">'#testForm'</span>).on(<span class="hljs-string">'submit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        alert(<span class="hljs-string">'Submit'</span>);<br>    &#125;);<br>&#125;)<br></code></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="事件触发条件"><a href="#事件触发条件" class="headerlink" title="事件触发条件"></a>事件触发条件</h3><p>例如：监听文本框的内容变动</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> input = $(<span class="hljs-string">'#test-input'</span>);<br>input.change(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'changed...'</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>通过js代码改变其值，并不会触发事件，我们可以通过手动调用change()方法来触发；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> input = $(<span class="hljs-string">'#test-input'</span>);<br>input.val(<span class="hljs-string">'change it!'</span>);<br>input.change();<br></code></pre></td></tr></table></figure>
<p><code>input.change()</code>相当于<code>input.trigger(&#39;change&#39;)</code></p>
<h3 id="浏览器安全限制"><a href="#浏览器安全限制" class="headerlink" title="浏览器安全限制"></a>浏览器安全限制</h3><p>只有用户触发才能执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 无法弹出新窗口，将被浏览器屏蔽</span><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">window</span>.open(<span class="hljs-string">'/'</span>);<br>&#125;)<br><br><span class="hljs-comment">// 正常执行</span><br><span class="hljs-keyword">var</span> button1 = $(<span class="hljs-string">'#testPopupButton1'</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">popupTestWindow</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">window</span>.open(<span class="hljs-string">'/'</span>);<br>&#125;<br>button1.click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 正常执行</span><br>    popupTestWindow();<br><br>    <span class="hljs-comment">// 延迟执行的`window.open()`方法会被浏览器限制；</span><br>    setTimeout(popupTestWindow, <span class="hljs-number">100</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>

<h1 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h1><h2 id="常用动画"><a href="#常用动画" class="headerlink" title="常用动画"></a>常用动画</h2><ul>
<li>div.show(300);</li>
<li>div.hide(300);</li>
<li>div.toggle(300);</li>
<li>div.slideDown(300);</li>
<li>div.slideUp(300);</li>
<li>div.slideToggle(300);</li>
<li>div.fadeIn(300);</li>
<li>div.fadeOut(300);</li>
<li>div.fadeToggle(300);</li>
</ul>
<h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">div.animate(&#123;<br>        <span class="hljs-comment">// 最后的状态</span><br>    &#125;, <span class="hljs-number">300</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// 动画结束后的操作</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<h1 id="jQuery扩展"><a href="#jQuery扩展" class="headerlink" title="jQuery扩展"></a>jQuery扩展</h1><p>编写jQuery插件原则：</p>
<ol>
<li>给<code>$.fn</code>绑定函数，实现插件的代码逻辑；</li>
<li>插件函数最后要<code>return this</code>, 以支持链式调用；</li>
<li>插件函数要有默认值，绑定在<code>$.fn.&lt;pluginName&gt;.defaults</code>上；</li>
<li>用户在调用时可传入设定值以便覆盖默认值；</li>
</ol>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>对于 try catch finally结构的处理方式，需要注意：<br>一旦错误发生，就不再向后进行，但是前面已经执行成功的，则保持住了，如下代码；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;<br>    <span class="hljs-keyword">var</span> r1=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> r2=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> r3=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> r4=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>        r1 = <span class="hljs-number">1</span>;<br>        r2.kk;<br>        r3 = <span class="hljs-number">3</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-built_in">console</span>.log(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        r4 = <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'r1='</span> + r1);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'r2='</span> + r2);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'r3='</span> + r3);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'r4='</span> + r4);<br>&lt;<span class="hljs-regexp">/script&gt;&gt;</span><br></code></pre></td></tr></table></figure>
<p>输出结果是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">r1=<span class="hljs-number">1</span> <span class="hljs-comment">// r1已经执行成功了，（注意：不像java中的处理方式，如果出错了所有的都失效）</span><br>r2=<span class="hljs-literal">null</span><br>r3=<span class="hljs-number">0</span><br>r4=<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/js/es6/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a href="http://es6.ruanyifeng.com/#docs/function" target="_blank" rel="noopener">函数</a></h2><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> fn = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">void</span> doesNotReturn();<br></code></pre></td></tr></table></figure>

<blockquote>
<p>箭头函数有几个使用注意点。<br>（1）函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象。<br>（2）不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误。<br>（3）不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。<br>（4）不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。</p>
</blockquote>
<h3 id="定义时所在的作用域-amp-运行时所在的作用域"><a href="#定义时所在的作用域-amp-运行时所在的作用域" class="headerlink" title="定义时所在的作用域 &amp; 运行时所在的作用域"></a><a href="http://es6.ruanyifeng.com/#docs/function#使用注意点" target="_blank" rel="noopener">定义时所在的作用域 &amp; 运行时所在的作用域</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 箭头函数可以让setTimeout里面的this，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Timer</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.s1 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">this</span>.s2 = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 箭头函数</span><br>  setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">this</span>.s1++, <span class="hljs-number">1000</span>);<br>  <span class="hljs-comment">// 普通函数</span><br>  setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.s2++;<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> timer = <span class="hljs-keyword">new</span> Timer();<br><br>setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"s1: "</span>, timer.s1), <span class="hljs-number">3100</span>);<br>setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"s2: "</span>, timer.s2), <span class="hljs-number">3100</span>);<br><span class="hljs-comment">// s1: 3</span><br><span class="hljs-comment">// s2: 0</span><br><br><span class="hljs-comment">// 上面代码中，Timer函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的this绑定定义时所在的作用域（即Timer函数），后者的this指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，timer.s1被更新了 3 次，而timer.s2一次都没更新。</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>箭头函数里面根本没有自己的 this，而是引用外层的 this。<br>除了 this，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：arguments、super、new.target。<br>另外，由于箭头函数没有自己的 this，所以当然也就不能用 call()、apply()、bind()这些方法去改变 this 的指向。</p>
</blockquote>
<h3 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a><a href="http://es6.ruanyifeng.com/#docs/function#尾调用优化" target="_blank" rel="noopener">尾调用</a></h3><p>只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</p>
<h3 id="空位"><a href="#空位" class="headerlink" title="空位"></a>空位</h3><p>for…of 并没有忽略它们；<br>entries()、keys()、values()、find()和 findIndex()会将空位处理成 undefined；<br>由于空位的处理规则非常不统一，所以建议避免出现空位。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><a href="http://es6.ruanyifeng.com/#docs/object" target="_blank" rel="noopener">对象</a></h2><p>Object.assign 拷贝的属性是有限制的，<br>只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</p>
<h3 id="有四个操作会忽略-enumerable-为-false-的属性。"><a href="#有四个操作会忽略-enumerable-为-false-的属性。" class="headerlink" title="有四个操作会忽略 enumerable 为 false 的属性。"></a>有四个操作会忽略 enumerable 为 false 的属性。</h3><ul>
<li>for…in 循环：只遍历对象自身的和继承的可枚举的属性。</li>
<li>Object.keys()：返回对象自身的所有可枚举的属性的键名。</li>
<li>JSON.stringify()：只串行化对象自身的可枚举的属性。</li>
<li>Object.assign()： 忽略 enumerable 为 false 的属性，只拷贝对象自身的可枚举的属性。</li>
</ul>
<p>for…in 会返回继承的属性，可以通过配置<code>enumerable</code>为<code>false</code>来避免<code>toString</code>和<code>length</code>属性被遍历。<br>总的来说，操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量不要用 for…in 循环，而用 Object.keys()代替。</p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise 新建后就会立即执行。<br><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Promise 对象 - ECMAScript 6 入门</a></p>
<p>Promise 对象的报错具有传递性。<br><a href="https://wangdoc.com/javascript/async/promise.html" target="_blank" rel="noopener">Promise 对象 - JavaScript 教程 - 网道</a></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Emoji</title>
    <url>/js/emoji/</url>
    <content><![CDATA[<p>微信使用的是：Softbank的编码<br><a href="http://www.wxeditor.com/emoji" target="_blank" rel="noopener">http://www.wxeditor.com/emoji</a></p>
<p><a href="https://github.com/iamcal/js-emoji" target="_blank" rel="noopener">https://github.com/iamcal/js-emoji</a></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Js代码片段</title>
    <url>/js/js%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
    <content><![CDATA[<h2 id="获取日期字符串"><a href="#获取日期字符串" class="headerlink" title="获取日期字符串"></a>获取日期字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// [javascript Date format(js日期格式化)(转) - 先锋之客 - 博客园](https://www.cnblogs.com/xianfengzhike/p/9656382.html)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span>(<span class="hljs-params">date, format</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> o = &#123;<br>    <span class="hljs-string">"M+"</span>: date.getMonth() + <span class="hljs-number">1</span>, <span class="hljs-comment">// month</span><br>    <span class="hljs-string">"d+"</span>: date.getDate(), <span class="hljs-comment">// day</span><br>    <span class="hljs-string">"h+"</span>: date.getHours(), <span class="hljs-comment">// hour</span><br>    <span class="hljs-string">"m+"</span>: date.getMinutes(), <span class="hljs-comment">// minute</span><br>    <span class="hljs-string">"s+"</span>: date.getSeconds(), <span class="hljs-comment">// second</span><br>    <span class="hljs-string">"q+"</span>: <span class="hljs-built_in">Math</span>.floor((date.getMonth() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>), <span class="hljs-comment">// quarter</span><br>    S: date.getMilliseconds() <span class="hljs-comment">// millisecond</span><br>  &#125;;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/(y+)/</span>.test(format)) &#123;<br>    format = format.replace(<br>      <span class="hljs-built_in">RegExp</span>.$<span class="hljs-number">1</span>,<br>      (date.getFullYear() + <span class="hljs-string">""</span>).substr(<span class="hljs-number">4</span> - <span class="hljs-built_in">RegExp</span>.$<span class="hljs-number">1.</span>length)<br>    );<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> o) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"("</span> + k + <span class="hljs-string">")"</span>).test(format)) &#123;<br>      format = format.replace(<br>        <span class="hljs-built_in">RegExp</span>.$<span class="hljs-number">1</span>,<br>        <span class="hljs-built_in">RegExp</span>.$<span class="hljs-number">1.</span>length == <span class="hljs-number">1</span> ? o[k] : (<span class="hljs-string">"00"</span> + o[k]).substr((<span class="hljs-string">""</span> + o[k]).length)<br>      );<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> format;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getYearMonthDay</span>(<span class="hljs-params">date</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> format(date || <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(), <span class="hljs-string">"yyyyMMdd"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getYearMonth</span>(<span class="hljs-params">date</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> format(date || <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(), <span class="hljs-string">"yyyyMM"</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(getYearMonthDay());<br><span class="hljs-built_in">console</span>.log(getYearMonth());<br><span class="hljs-built_in">console</span>.log(getYearMonthDay(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">1999</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)));<br><span class="hljs-built_in">console</span>.log(getYearMonth(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">1999</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)));<br></code></pre></td></tr></table></figure>

<h2 id="身份证验证"><a href="#身份证验证" class="headerlink" title="身份证验证"></a>身份证验证</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> isIDCard = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-comment">// 验证是否身份证号</span><br>  <span class="hljs-keyword">var</span> city = &#123;<br>    <span class="hljs-number">11</span>: <span class="hljs-string">"北京"</span>,<br>    <span class="hljs-number">12</span>: <span class="hljs-string">"天津"</span>,<br>    <span class="hljs-number">13</span>: <span class="hljs-string">"河北"</span>,<br>    <span class="hljs-number">14</span>: <span class="hljs-string">"山西"</span>,<br>    <span class="hljs-number">15</span>: <span class="hljs-string">"内蒙古"</span>,<br>    <span class="hljs-number">21</span>: <span class="hljs-string">"辽宁"</span>,<br>    <span class="hljs-number">22</span>: <span class="hljs-string">"吉林"</span>,<br>    <span class="hljs-number">23</span>: <span class="hljs-string">"黑龙江 "</span>,<br>    <span class="hljs-number">31</span>: <span class="hljs-string">"上海"</span>,<br>    <span class="hljs-number">32</span>: <span class="hljs-string">"江苏"</span>,<br>    <span class="hljs-number">33</span>: <span class="hljs-string">"浙江"</span>,<br>    <span class="hljs-number">34</span>: <span class="hljs-string">"安徽"</span>,<br>    <span class="hljs-number">35</span>: <span class="hljs-string">"福建"</span>,<br>    <span class="hljs-number">36</span>: <span class="hljs-string">"江西"</span>,<br>    <span class="hljs-number">37</span>: <span class="hljs-string">"山东"</span>,<br>    <span class="hljs-number">41</span>: <span class="hljs-string">"河南"</span>,<br>    <span class="hljs-number">42</span>: <span class="hljs-string">"湖北 "</span>,<br>    <span class="hljs-number">43</span>: <span class="hljs-string">"湖南"</span>,<br>    <span class="hljs-number">44</span>: <span class="hljs-string">"广东"</span>,<br>    <span class="hljs-number">45</span>: <span class="hljs-string">"广西"</span>,<br>    <span class="hljs-number">46</span>: <span class="hljs-string">"海南"</span>,<br>    <span class="hljs-number">50</span>: <span class="hljs-string">"重庆"</span>,<br>    <span class="hljs-number">51</span>: <span class="hljs-string">"四川"</span>,<br>    <span class="hljs-number">52</span>: <span class="hljs-string">"贵州"</span>,<br>    <span class="hljs-number">53</span>: <span class="hljs-string">"云南"</span>,<br>    <span class="hljs-number">54</span>: <span class="hljs-string">"西藏 "</span>,<br>    <span class="hljs-number">61</span>: <span class="hljs-string">"陕西"</span>,<br>    <span class="hljs-number">62</span>: <span class="hljs-string">"甘肃"</span>,<br>    <span class="hljs-number">63</span>: <span class="hljs-string">"青海"</span>,<br>    <span class="hljs-number">64</span>: <span class="hljs-string">"宁夏"</span>,<br>    <span class="hljs-number">65</span>: <span class="hljs-string">"新疆"</span>,<br>    <span class="hljs-number">71</span>: <span class="hljs-string">"台湾"</span>,<br>    <span class="hljs-number">81</span>: <span class="hljs-string">"香港"</span>,<br>    <span class="hljs-number">82</span>: <span class="hljs-string">"澳门"</span>,<br>    <span class="hljs-number">91</span>: <span class="hljs-string">"国外"</span><br>  &#125;;<br><br>  <span class="hljs-comment">// 基础验证，长度验证</span><br>  <span class="hljs-keyword">if</span> (!str || !<span class="hljs-regexp">/^\d&#123;17&#125;(\d|x)$/i</span>.test(str)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 验证地址编码</span><br>  <span class="hljs-keyword">if</span> (!city[<span class="hljs-built_in">parseInt</span>(str.substr(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>))]) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 验证出生日期</span><br>  <span class="hljs-keyword">var</span> birthdayStr =<br>    str.substr(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>) + <span class="hljs-string">"/"</span> + str.substr(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) + <span class="hljs-string">"/"</span> + str.substr(<span class="hljs-number">12</span>, <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">var</span> birthday = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(birthdayStr);<br>  <span class="hljs-keyword">if</span> (!birthday) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">var</span> transBirthdayStr =<br>    birthday.getFullYear() +<br>    <span class="hljs-string">"/"</span> +<br>    (birthday.getMonth() &gt;= <span class="hljs-number">9</span><br>      ? birthday.getMonth() + <span class="hljs-number">1</span><br>      : <span class="hljs-string">"0"</span> + (birthday.getMonth() + <span class="hljs-number">1</span>)) +<br>    <span class="hljs-string">"/"</span> +<br>    (birthday.getDate() &gt;= <span class="hljs-number">10</span> ? birthday.getDate() : <span class="hljs-string">"0"</span> + birthday.getDate());<br>  <span class="hljs-keyword">if</span> (birthdayStr != transBirthdayStr) &#123;<br>    <span class="hljs-comment">// 日期有误</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 验证长度和校验位</span><br>  <span class="hljs-keyword">if</span> (str.length == <span class="hljs-number">18</span>) &#123;<br>    str = str.split(<span class="hljs-string">""</span>);<br>    <span class="hljs-comment">//∑(ai×Wi)(mod 11)</span><br>    <span class="hljs-comment">//加权因子</span><br>    <span class="hljs-keyword">var</span> factor = [<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>];<br>    <span class="hljs-comment">//校验位</span><br>    <span class="hljs-keyword">var</span> parity = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">"X"</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> ai = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> wi = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17</span>; i++) &#123;<br>      ai = str[i];<br>      wi = factor[i];<br>      sum += ai * wi;<br>    &#125;<br>    <span class="hljs-keyword">var</span> last = parity[sum % <span class="hljs-number">11</span>];<br>    <span class="hljs-keyword">if</span> (parity[sum % <span class="hljs-number">11</span>] != str[<span class="hljs-number">17</span>].toUpperCase()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>

<h2 id="设定参数必须传递"><a href="#设定参数必须传递" class="headerlink" title="设定参数必须传递"></a><a href="http://es6.ruanyifeng.com/#docs/function#应用" target="_blank" rel="noopener">设定参数必须传递</a></h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throwIfMissing</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"Missing parameter"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">mustBeProvided = throwIfMissing(</span>)) </span>&#123;<br>  <span class="hljs-keyword">return</span> mustBeProvided;<br>&#125;<br><br>foo();<br><span class="hljs-comment">// Error: Missing parameter</span><br></code></pre></td></tr></table></figure>

<h2 id="为浮点数运算部署一个误差检查函数"><a href="#为浮点数运算部署一个误差检查函数" class="headerlink" title="为浮点数运算部署一个误差检查函数"></a><a href="http://es6.ruanyifeng.com/#docs/number#Number-EPSILON" target="_blank" rel="noopener">为浮点数运算部署一个误差检查函数</a></h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withinErrorMargin</span>(<span class="hljs-params">left, right</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.abs(left - right) &lt; <span class="hljs-built_in">Number</span>.EPSILON * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> === <span class="hljs-number">0.3</span>; <span class="hljs-comment">// false</span><br>withinErrorMargin(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-number">1.1</span> + <span class="hljs-number">1.3</span> === <span class="hljs-number">2.4</span>; <span class="hljs-comment">// false</span><br>withinErrorMargin(<span class="hljs-number">1.1</span> + <span class="hljs-number">1.3</span>, <span class="hljs-number">2.4</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>

<h2 id="正确返回字符串长度的函数（Unicode-字符）"><a href="#正确返回字符串长度的函数（Unicode-字符）" class="headerlink" title="正确返回字符串长度的函数（Unicode 字符）"></a><a href="http://es6.ruanyifeng.com/#docs/regex#u-修饰符" target="_blank" rel="noopener">正确返回字符串长度的函数（Unicode 字符）</a></h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">codePointLength</span>(<span class="hljs-params">text</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> result = text.match(<span class="hljs-regexp">/[\s\S]/gu</span>);<br>  <span class="hljs-keyword">return</span> result ? result.length : <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> s = <span class="hljs-string">"𠮷𠮷"</span>;<br><br>s.length; <span class="hljs-comment">// 4</span><br>codePointLength(s); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure>

<h2 id="apply-amp-call"><a href="#apply-amp-call" class="headerlink" title="apply &amp; call"></a>apply &amp; call</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">var</span> b = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.x);<br>&#125;<br>a.f = f;<br>b.f = f;<br>f.apply(a); <span class="hljs-comment">//1</span><br>f.apply(b); <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure>

<h2 id="返回对象的类"><a href="#返回对象的类" class="headerlink" title="返回对象的类"></a>返回对象的类</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// p214</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">classof</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(o).slice(<span class="hljs-number">8</span>, <span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="输出对象的类：Object-prototype-toString-call"><a href="#输出对象的类：Object-prototype-toString-call" class="headerlink" title="输出对象的类：Object.prototype.toString.call"></a>输出对象的类：Object.prototype.toString.call</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">1</span>);<br>(<span class="hljs-string">"[object Number]"</span>);<br><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;);<br>(<span class="hljs-string">"[object Function]"</span>);<br></code></pre></td></tr></table></figure>

<p>typeof 得到的是类型；</p>
<h2 id="How-to-pass-url-query-params"><a href="#How-to-pass-url-query-params" class="headerlink" title="How to pass url query params"></a><a href="https://github.com/github/fetch/issues/256" target="_blank" rel="noopener">How to pass url query params</a></h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrl</span>(<span class="hljs-params">url, options</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!isEmptyObject(options)) &#123;<br>    url += (url.indexOf(<span class="hljs-string">"?"</span>) === <span class="hljs-number">-1</span> ? <span class="hljs-string">"?"</span> : <span class="hljs-string">"&amp;"</span>) + queryParams(options);<br>  &#125;<br>  <span class="hljs-keyword">return</span> url;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryParams</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(params)<br>    .map(<span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> <span class="hljs-built_in">encodeURIComponent</span>(k) + <span class="hljs-string">"="</span> + <span class="hljs-built_in">encodeURIComponent</span>(params[k]))<br>    .join(<span class="hljs-string">"&amp;"</span>);<br>&#125;<br><br><span class="hljs-comment">// 判断对象是否为空 https://stackoverflow.com/questions/4994201/is-object-empty</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEmptyObject</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span> (obj.length &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (obj.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj != <span class="hljs-string">"object"</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> name <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.hasOwnProperty(name)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> url = getUrl(<span class="hljs-string">"http://lyloou.com"</span>, &#123;&#125;);<br><span class="hljs-built_in">console</span>.log(url);<br></code></pre></td></tr></table></figure>

<h2 id="对象转数组"><a href="#对象转数组" class="headerlink" title="对象转数组"></a>对象转数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">json2array = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  <span class="hljs-keyword">let</span> keys = <span class="hljs-built_in">Object</span>.keys(json);<br>  keys.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;<br>    result.push(json[key]);<br>  &#125;);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br><br>arr2Obj = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">array</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> array == <span class="hljs-string">"object"</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> array) &#123;<br>      <span class="hljs-keyword">var</span> thisEle = convArrToObj(array[i]);<br>      obj[i] = thisEle;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    obj = array;<br>  &#125;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;;<br></code></pre></td></tr></table></figure>

<h2 id="输入银行卡号，4-位自动加上空格分隔"><a href="#输入银行卡号，4-位自动加上空格分隔" class="headerlink" title="输入银行卡号，4 位自动加上空格分隔"></a>输入银行卡号，4 位自动加上空格分隔</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="hljs-meta-string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">      <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"test"</span>).onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="actionscript">          <span class="hljs-keyword">this</span>.value = <span class="hljs-keyword">this</span>.value</span><br><span class="javascript">            .replace(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">""</span>)</span><br><span class="javascript">            .replace(<span class="hljs-regexp">/\D/g</span>, <span class="hljs-string">""</span>)</span><br><span class="javascript">            .replace(<span class="hljs-regexp">/(\d&#123;4&#125;)(?=\d)/g</span>, <span class="hljs-string">"$1 "</span>);</span><br>        &#125;;<br>      &#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>在前台读取数字时自动忽略空格</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这样的话会把a b c d读取为abc</span><br><span class="hljs-built_in">String</span> newStr = <span class="hljs-string">"a b c"</span>.replaceAll(<span class="hljs-string">" "</span>,<span class="hljs-string">""</span>);<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://blog.csdn.net/happy_jijiawei/article/details/22850839" target="_blank" rel="noopener">JS 控制文本框：输入银行卡号，4 位自动加上空格分隔 - 别在熬夜了！ - CSDN 博客</a></li>
</ul>
<h2 id="正则摘取文字"><a href="#正则摘取文字" class="headerlink" title="正则摘取文字"></a>正则摘取文字</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var input = "'Warehouse','Local Release','Local Release DA'";</span><br><span class="hljs-keyword">var</span> input =<br>  <span class="hljs-string">'【丝路亚心】250gX4&lt;font color="red"&gt;核桃仁&lt;/font&gt; 原味生&lt;font color="red"&gt;核桃核桃仁&lt;/font&gt; 新疆特产, &lt;font color="red"&gt;123445&lt;/font&gt;bcdef'</span>;<br><span class="hljs-keyword">var</span> regex = <span class="hljs-regexp">/&lt;font[^&gt;]+?&gt;(.*?)&lt;\/font&gt;/g</span>;<br><br><span class="hljs-keyword">var</span> matches,<br>  output = [];<br><span class="hljs-keyword">while</span> ((matches = regex.exec(input))) &#123;<br>  output.push(matches[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-built_in">console</span>.log(matches);<br><span class="hljs-built_in">console</span>.log(output);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceText</span>(<span class="hljs-params">text</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> text.replace(<span class="hljs-regexp">/&lt;font[^&gt;]*&gt;/g</span>, <span class="hljs-string">""</span>).replace(<span class="hljs-regexp">/&lt;\/font&gt;/g</span>, <span class="hljs-string">""</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> newStr = replaceText(input);<br><span class="hljs-built_in">console</span>.log(newStr);<br><br><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> output) &#123;<br>  <span class="hljs-keyword">let</span> val = output[i];<br>  <span class="hljs-built_in">console</span>.log(val);<br>  <span class="hljs-keyword">let</span> index = newStr.indexOf(val);<br>  arr.push(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">"normal"</span>, <span class="hljs-attr">value</span>: newStr.substring(<span class="hljs-number">0</span>, index) &#125;);<br>  arr.push(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">"highlight"</span>, <span class="hljs-attr">value</span>: val &#125;);<br>  newStr = newStr.substring(index + val.length);<br>&#125;<br><br><span class="hljs-keyword">if</span> (newStr) &#123;<br>  arr.push(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">"normal"</span>, <span class="hljs-attr">value</span>: newStr &#125;);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">// [&#123;"type":"normal","value":"【丝路亚心】250gX4"&#125;,&#123;"type":"highlight","value":"核桃仁"&#125;,&#123;"type":"normal","value":" 原味生"&#125;,&#123;"type":"highlight","value":"核桃核桃仁"&#125;,&#123;"type":"normal","value":" 新疆特产, "&#125;,&#123;"type":"highlight","value":"123445"&#125;,&#123;"type":"normal","value":"bcdef"&#125;]</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Grunt相关</title>
    <url>/js/grunt/</url>
    <content><![CDATA[<p>| How do I uninstall or remove unwanted plugins?</p>
<ul>
<li><code>npm uninstall [GRUNT_PLUGIN] --save-dev</code>, this will remove the plugin from<br>your <code>package.json</code> and from <code>node_module</code></li>
<li>delete the dependencies in <code>package.json</code> mannually and run <code>npm prune</code></li>
</ul>
<p>| 异步任务,需要在task body中调用<code>this.async()</code>来开启。<br><code>var done = this.async()</code><br>Note that passing <code>false</code> to the <code>done()</code> function tells Grunt that the task has<br>failed.</p>
<p>| 获取configuration中的属性值<br><code>grunt.config(&#39;meta.name&#39;)</code><br>or<br><code>grunt.config([&#39;meta&#39;, &#39;name&#39;])</code></p>
<p>| 验证configuration中是否存在property:<br><code>grunt.config.requires(&#39;meta.name&#39;)</code><br>or<br><code>grunt.config.requires([&#39;meta&#39;, &#39;name&#39;])</code></p>
<p>| Tasks can be dependent on the successful execution of other tasks.<br><code>grunt.task.requires(&#39;foo&#39;)</code></p>
<p>| Inside a task, you can run other tasks.<br><code>grunt.task.run(&#39;bar&#39;, &#39;baz&#39;)</code><br>or<br><code>grunt.task.run([&#39;bar&#39;, &#39;baz&#39;])</code></p>
<p>| 一旦一个任务返回了false，就会abort了。通过添加参数<code>--force</code>来强制向后继续执行。</p>
<p>| 执行多个任务用空格分开：<br><code>grunt foo bar</code> 和下面的代码一样</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">grunt foo<br>grunt bar<br></code></pre></td></tr></table></figure>
<ul>
<li><a href="https://gruntjs.com/creating-tasks" target="_blank" rel="noopener">https://gruntjs.com/creating-tasks</a></li>
</ul>
<p>| Creating Tasks</p>
<ul>
<li><p>Alias Task;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">grunt.registerTask(taskName, [description, ], taskList);<br><span class="hljs-comment">// eg.</span><br>grunt.registerTask(<span class="hljs-string">"default"</span>, [<span class="hljs-string">'jshint'</span>, <span class="hljs-string">'qunit'</span>, <span class="hljs-string">'concat:dist'</span>, <span class="hljs-string">'uglify:dist'</span>]);<br></code></pre></td></tr></table></figure></li>
<li><p>Multi Task;<br>When a multi task is run, Grunt looks for a property of the same in the Grunt Configuration.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">grunt.registerMultiTask(taskName, [description, ], taskFunction);<br><br><span class="hljs-comment">// eg.</span><br>grunt.registerMultiTask(<span class="hljs-string">'log'</span>, <span class="hljs-string">'log stuff.'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    grunt.log.write(<span class="hljs-keyword">this</span>.target + <span class="hljs-string">":"</span> + <span class="hljs-keyword">this</span>.data);<br>&#125;);<br></code></pre></td></tr></table></figure>
</li>
<li><p>Basic Task;<br>When a basic task is run, Grunt doesn’t looks at the configuration and environment.<br>通过冒号来传递参数:例如针对下面的声明，通过<code>grunt log:ARG1:ARG2</code>来调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">grunt.registerTask(taskName, [description, ], taskFunction);<br><br><span class="hljs-comment">// eg.</span><br>grunt.registerTask(<span class="hljs-string">'foo'</span>, <span class="hljs-string">'A sample task that logs stuff.'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arg1, arg2</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">arguments</span>.length === <span class="hljs-number">0</span>) &#123;<br>        grunt.log.write(<span class="hljs-keyword">this</span>.name + <span class="hljs-string">", no args."</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        grunt.log.write(<span class="hljs-keyword">this</span>.name + <span class="hljs-string">", arg1="</span> + arg1 + <span class="hljs-string">", arg2="</span> + arg2);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>
</li>
<li><p>Custom Task;</p>
</li>
</ul>
<p>| eg.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">grunt</span>) </span>&#123;<br>    grunt.initConfig(&#123;<br>        pkg: grunt.file.readJSON(<span class="hljs-string">'package.json'</span>),<br>        uglify: &#123;<br>            options: &#123;<br>                banner: <span class="hljs-string">'/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt;*/\n'</span><br>            &#125;,<br>            build: &#123;<br>                src: <span class="hljs-string">'src/&lt;%= pkg.name %&gt;.js'</span>,<br>                dest: <span class="hljs-string">'build/&lt;%= pkg.name %&gt;.min.js'</span><br>            &#125;<br>        &#125;,<br>        concat: &#123;<br>            options: &#123;<br>                separator: <span class="hljs-string">";"</span><br>            &#125;,<br>            dist: &#123;<br>                src: [<span class="hljs-string">'src/**/*.js'</span>],<br>                dest: <span class="hljs-string">'dist/&lt;%= pkg.name %&gt;.js'</span><br>            &#125;<br>        &#125;,<br>        qunit: &#123;<br>            files: [<span class="hljs-string">'test/**/*.html'</span>]<br>        &#125;,<br>        jshint: &#123;<br>            files: [<span class="hljs-string">'Gruntfile.js'</span>, <span class="hljs-string">'src/**/*.js'</span>, <span class="hljs-string">'test/**/*.js'</span>],<br>            options: &#123;<br>                globals: &#123;<br>                    jQuery: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-built_in">console</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-built_in">module</span>: <span class="hljs-literal">true</span><br>                &#125;<br>            &#125;<br>        &#125;,<br>        watch: &#123;<br>            files: [<span class="hljs-string">'&lt;%= jshint.files %&gt;'</span>],<br>            tasks: [<span class="hljs-string">'jshint'</span>, <span class="hljs-string">'qunit'</span>]<br>        &#125;<br><br>    &#125;);<br><br>    <span class="hljs-comment">// grunt.loadNpmTasks('grunt-contrib-uglify');</span><br>    <span class="hljs-comment">// grunt.loadNpmTasks('grunt-contrib-concat');</span><br>    <span class="hljs-comment">// grunt.loadNpmTasks('grunt-contrib-qunit');</span><br>    <span class="hljs-comment">// grunt.loadNpmTasks('grunt-contrib-jshint');</span><br>    <span class="hljs-comment">// grunt.loadNpmTasks('grunt-contrib-watch');</span><br><br>    <span class="hljs-built_in">require</span>(<span class="hljs-string">'matchdep'</span>).filterDev(<span class="hljs-string">'grunt-*'</span>).forEach(grunt.loadNpmTasks);<br><br>    grunt.registerTask(<span class="hljs-string">'test'</span>, [<span class="hljs-string">'jshint'</span>, <span class="hljs-string">'qunit'</span>]);<br>    grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'jshint'</span>, <span class="hljs-string">'qunit'</span>, <span class="hljs-string">'concat'</span>, <span class="hljs-string">'uglify'</span>]);<br><br>    grunt.registerTask(<span class="hljs-string">'log'</span>, <span class="hljs-string">'log some stuff'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        grunt.log.write(<span class="hljs-string">'Logging some stuff ...'</span>).error();<br>    &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>| importing external data</p>
<ul>
<li><code>grunt.file.readJSON()</code></li>
<li><code>grunt.file.readYAML()</code></li>
</ul>
<p>| Template</p>
<ul>
<li><code>&lt;%= prop.subprop %&gt;</code> Expand to the value of <code>prop.subprop</code> in the config,<br>regardless of type. Templates like this can be used to reference not only<br>String values, but also arrays and other objects.</li>
<li><code>&lt;% %&gt;</code> Execute arbitrary inline JavaScript code. This is useful with control<br>flow or looping.<br><a href="https://gruntjs.com/configuring-tasks#templates" target="_blank" rel="noopener">https://gruntjs.com/configuring-tasks#templates</a></li>
</ul>
<p>| Global Patterns.<br>All most people need to know is that <code>foo/*.js</code> will match all files<br>ending with <code>.js</code> in the <code>foo/</code> subdirectory, but <code>foo/**/*.js</code> will match<br>all files ending with <code>.js</code> in the <code>foo/</code> subdirectory and all of its<br>subdirectories.</p>
<p>| Specifying both a task and target like <code>grunt concat:foo</code> or <code>grunt concat:bar</code><br>will process just the specified target’s configuration, while run <code>grunt concat</code><br>will iterate over all targets, processing each in turn.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">grunt.initConfig(&#123;<br>  concat: &#123;<br>    foo: &#123;<br>    &#125;,<br>    bar: &#123;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>| Define a configuration for each of the tasks we mentioned.<br>  Note: The configuration object for a plugins lives as a property on the<br>  configuration object, that offen shares the same name as its plugin.<br>  eg. <code>grunt-contrib-concat</code> =&gt; <code>concat</code></p>
<p>| 5个插件</p>
<ul>
<li>grunt-contrib-watch: check the code at every change you perform；</li>
<li>grunt-contrib-jshint: ensure best practices, or check the code behaviors；</li>
<li>grunt-contrib-uglify: 创建一个minified的version；</li>
<li>grunt-contrib-qunit: 测试你的project；</li>
<li>grunt-contrib-concat: 多个文件合并成一个文件；</li>
</ul>
<p>| The typical folder structure features the following folders: src, dist, and test.</p>
<ul>
<li>The src folder (sometimes called app) contains the source code of the library as you author it.</li>
<li>The dist folder (sometimes called build) contains the distribution, a minified version of the source code.</li>
<li>the test folder contains the code to test the project.<br><a href="https://gruntjs.com/sample-gruntfile" target="_blank" rel="noopener">https://gruntjs.com/sample-gruntfile</a></li>
</ul>
<p>| Grunt and Grunt plugins should be defined as devDependencies in your project’s<br><code>package.json</code>.<br>please use: <code>npm install $package --save-dev</code><br><a href="https://gruntjs.com/installing-grunt" target="_blank" rel="noopener">https://gruntjs.com/installing-grunt</a></p>
<p>| load all grunt tasks</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// load all grunt tasks</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">'matchdep'</span>).filterDev(<span class="hljs-string">'grunt-*'</span>).forEach(grunt.loadNpmTasks);<br><br><span class="hljs-comment">// 上面的一句话就替代了很多次的类似下面的调用</span><br>grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-jshint'</span>);<br>grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-watch'</span>);<br></code></pre></td></tr></table></figure>
<p>注意：<code>matchdep</code>需要在<code>package.json</code>中的<code>devDependencies</code>中添加：<br><code>&quot;matchdep&quot;: &quot;latest&quot;</code></p>
<p>| A GruntFile is comprised of the following parts:</p>
<ul>
<li>The <code>wrapper</code> function</li>
<li>Project and task configuration</li>
<li>Loading Grunt plugins and tasks</li>
<li>Custom tasks</li>
</ul>
<p>| Because <code>&lt;% %&gt;</code> template strings may reference any config properties,<br>configuration data like filepaths and file lists may be specified this way<br>to reduce repetition.</p>
<ul>
<li><a href="https://gruntjs.com/getting-started" target="_blank" rel="noopener">https://gruntjs.com/getting-started</a></li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Js坑</title>
    <url>/js/js%E5%9D%91/</url>
    <content><![CDATA[<h2 id="使用for-in-循环Object会有个问题，会loop来自prototype的属性，使用的时候要小心；"><a href="#使用for-in-循环Object会有个问题，会loop来自prototype的属性，使用的时候要小心；" class="headerlink" title="使用for in 循环Object会有个问题，会loop来自prototype的属性，使用的时候要小心；"></a>使用for in 循环Object会有个问题，会loop来自prototype的属性，使用的时候要小心；</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> validation_messages) &#123;<br>    <span class="hljs-comment">// skip loop if the property is from prototype</span><br>    <span class="hljs-keyword">if</span> (!validation_messages.hasOwnProperty(key)) <span class="hljs-keyword">continue</span>;<br><br>    <span class="hljs-keyword">var</span> obj = validation_messages[key];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-comment">// skip loop if the property is from prototype</span><br>        <span class="hljs-keyword">if</span>(!obj.hasOwnProperty(prop)) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-comment">// your code</span><br>        alert(prop + <span class="hljs-string">" = "</span> + obj[prop]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">var</span> obj = &#123;<br>  first: <span class="hljs-string">"John"</span>,<br>  last: <span class="hljs-string">"Doe"</span><br>&#125;;<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//	Visit non-inherited enumerable keys</span><br><span class="hljs-comment">//</span><br><span class="hljs-built_in">Object</span>.keys(obj).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;<br><br>  <span class="hljs-built_in">console</span>.log(key, obj[key]);<br><br>&#125;);<br></code></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/921789/how-to-loop-through-a-plain-javascript-object-with-the-objects-as-members" target="_blank" rel="noopener">https://stackoverflow.com/questions/921789/how-to-loop-through-a-plain-javascript-object-with-the-objects-as-members</a></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript的全选、全不选、反选逻辑实现</title>
    <url>/js/javascript%E7%9A%84%E5%85%A8%E9%80%89%E3%80%81%E5%85%A8%E4%B8%8D%E9%80%89%E3%80%81%E5%8F%8D%E9%80%89%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">当用户勾上“全选”时，自动选中所有语言，并把“全选”变成“全不选”；<br><br>当用户去掉“全不选”时，自动不选中所有语言；<br><br>当用户点击“反选”时，自动把所有语言状态反转（选中的变为未选，未选的变为选中）；<br><br>当用户把所有语言都手动勾上时，“全选”被自动勾上，并变为“全不选”；<br><br>当用户手动去掉选中至少一种语言时，“全不选”自动被去掉选中，并变为“全选”。<br></code></pre></td></tr></table></figure>

<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://code.jquery.com/jquery-3.1.1.js"</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript"><span class="hljs-meta">        'use strict'</span>;</span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="actionscript">            <span class="hljs-keyword">var</span></span><br><span class="javascript">                form = $(<span class="hljs-string">'#test-form'</span>),</span><br><span class="actionscript">                langs = form.find(<span class="hljs-string">'[name=lang]'</span>),</span><br><span class="actionscript">                selectAll = form.find(<span class="hljs-string">'label.selectAll :checkbox'</span>),</span><br><span class="actionscript">                selectAllLabel = form.find(<span class="hljs-string">'label.selectAll span.selectAll'</span>),</span><br><span class="actionscript">                deselectAllLabel = form.find(<span class="hljs-string">'label.selectAll span.deselectAll'</span>),</span><br><span class="actionscript">                invertSelect = form.find(<span class="hljs-string">'a.invertSelect'</span>);</span><br><br><span class="actionscript">            <span class="hljs-comment">// 重置初始化状态:</span></span><br><span class="actionscript">            form.find(<span class="hljs-string">'*'</span>).show().off();</span><br><span class="actionscript">            form.find(<span class="hljs-string">':checkbox'</span>).prop(<span class="hljs-string">'checked'</span>, <span class="hljs-literal">false</span>).off();</span><br>            deselectAllLabel.hide();<br><span class="actionscript">            <span class="hljs-comment">// 拦截form提交事件:</span></span><br><span class="actionscript">            form.off().submit(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(e)</span> </span>&#123;</span><br>                e.preventDefault();<br>                alert(form.serialize());<br>            &#125;);<br><br><span class="actionscript">            selectAll.on(<span class="hljs-string">'change'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span></span>&#123;</span><br><br><span class="javascript">                langs.get().map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;$(x).prop(<span class="hljs-string">'checked'</span>, <span class="hljs-keyword">this</span>.checked);&#125;);</span><br><br><span class="actionscript">                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.checked)&#123;</span><br>                    selectAllLabel.hide();<br>                    deselectAllLabel.show();<br><span class="actionscript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br>                    selectAllLabel.show();<br>                    deselectAllLabel.hide();<br>                &#125;<br>            &#125;);<br><br><span class="actionscript">            <span class="hljs-comment">// 校验所有的 input</span></span><br><span class="actionscript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkAll</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="actionscript">              <span class="hljs-comment">// 获取所有input的checked个数</span></span><br><span class="actionscript">              <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;</span><br><span class="actionscript">              langs.get().map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span></span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>($(x).prop(<span class="hljs-string">'checked'</span>))&#123;</span><br>                  count = count+1;<br>                &#125;<br>              &#125;);<br>              if(count === 0) &#123;<br><span class="actionscript">              &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count === inputs.length)&#123;</span><br><span class="actionscript">                <span class="hljs-comment">// 当用户把所有语言都手动勾上时，“全选”被自动勾上，并变为“全不选”；</span></span><br><span class="actionscript">                selectAll.prop(<span class="hljs-string">'checked'</span>, <span class="hljs-literal">true</span>);</span><br><br>                selectAllLabel.hide();<br>                deselectAllLabel.show();<br><span class="actionscript">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="actionscript">                <span class="hljs-comment">// 当用户手动去掉选中至少一种语言时，“全不选”自动被去掉选中，并变为“全选”。</span></span><br><span class="actionscript">                selectAll.prop(<span class="hljs-string">'checked'</span>, <span class="hljs-literal">false</span>);</span><br><br>                selectAllLabel.show();<br>                deselectAllLabel.hide();<br>              &#125;<br>            &#125;<br><span class="actionscript">            invertSelect.click(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span></span>&#123;</span><br><span class="actionscript">                langs.get().map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span></span>&#123;</span><br><span class="javascript">                    $(x).prop(<span class="hljs-string">'checked'</span>, !($(x).prop(<span class="hljs-string">'checked'</span>)));</span><br>                    checkAll();<br>                &#125;);<br>            &#125;);<br><br><span class="actionscript">            <span class="hljs-comment">// 设置所有input的监听事件</span></span><br><span class="actionscript">            <span class="hljs-keyword">var</span> inputs = langs.get();</span><br><span class="actionscript">            inputs.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span></span>&#123;</span><br><span class="javascript">                $(x).change(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>                  checkAll();<br>                &#125;);<br>            &#125;);<br><br>        &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  Hello, Lou!<br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br> <span class="hljs-comment">&lt;!-- HTML结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test-form"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"test"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>请选择想要学习的编程语言：<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selectAll"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selectAll"</span>&gt;</span>全选<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deselectAll"</span>&gt;</span>全不选<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#0"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"invertSelect"</span>&gt;</span>反选<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lang"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"javascript"</span>&gt;</span> JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lang"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"python"</span>&gt;</span> Python<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lang"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"ruby"</span>&gt;</span> Ruby<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lang"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"haskell"</span>&gt;</span> Haskell<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lang"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"scheme"</span>&gt;</span> Scheme<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143564690172894383ccd7ab64669b4971f4b03fa342d000#0" target="_blank" rel="noopener">事件 - 廖雪峰的官方网站</a></li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Node相关</title>
    <url>/js/node/</url>
    <content><![CDATA[<p>| crypto模块：提供通用的加密和哈希算法。</p>
<p>| 服务器案例（模块http、path、fs的运用）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">'use strict'</span><br><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">"http"</span>);<br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">"path"</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>);<br><br><span class="hljs-keyword">var</span> server = http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> workDir = path.resolve(<span class="hljs-string">"."</span>); <span class="hljs-comment">// 获取当前目录</span><br>  <span class="hljs-keyword">var</span> filepath = path.join(workDir, <span class="hljs-string">"showdate.html"</span>); <span class="hljs-comment">// 定位showdate.html文件</span><br><br>  <span class="hljs-comment">// 将本地的文件作为响应返回</span><br>  response.writeHead(<span class="hljs-number">200</span>);<br>  fs.createReadStream(filepath).pipe(response);<br>&#125;);<br><br>server.listen(<span class="hljs-number">3000</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"服务已开启，请登录：http://localhost:3000"</span>);<br></code></pre></td></tr></table></figure>

<p>| pipe</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>);<br><span class="hljs-keyword">var</span> rs = fs.createReadStream(<span class="hljs-string">"hello.js"</span>);<br><span class="hljs-keyword">var</span> ws = fs.createWriteStream(<span class="hljs-string">"copy.js"</span>);<br>rs.pipe(ws);<br></code></pre></td></tr></table></figure>

<p>| stream 是node.js提供的仅在服务端可用的模块；<br>基于事件的、异步的方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>);<br><span class="hljs-keyword">var</span> rs = fs.createReadStream(<span class="hljs-string">"hello.js"</span>, <span class="hljs-string">"utf-8"</span>);<br>rs.on(<span class="hljs-string">"data"</span>, f);<br>rs.on(<span class="hljs-string">"end"</span>, f);<br>rs.on(<span class="hljs-string">"error"</span>, f);<br></code></pre></td></tr></table></figure>

<p>| 同步的写文件：<code>fs.writeFileSync()</code>；</p>
<p>| 写文件：<code>fs.writeFile(&quot;output.txt&quot;, data, function(x){})</code>，如果data是String，默认<br>  编码是UTF-8；如果传入的是Buffer，则写入的是二进制文件；回调函数只关心成功与否。</p>
<p>| 同步读文件使用<code>fs.readFileSync()</code>方法，不接受回调函数，函数直接返回结果。<br>通过<code>try...catch</code>来捕获同步获取文件时的错误。</p>
<p>| <code>Buffer</code>对象可以和String做转换：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Buffer -&gt; String</span><br><span class="hljs-keyword">var</span> text = data.toString(<span class="hljs-string">"utf-8"</span>);<br><span class="hljs-built_in">console</span>.log(text);<br><span class="hljs-comment">// String -&gt; Buffer</span><br><span class="hljs-keyword">var</span> buf = <span class="hljs-keyword">new</span> Buffer(text, <span class="hljs-string">"utf-8"</span>);<br><span class="hljs-built_in">console</span>.log(buf);<br></code></pre></td></tr></table></figure>

<p>| fs模块</p>
<ul>
<li>读取文件编码是<code>utf-8</code>的文件；<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>);<br>fs.readFile(<span class="hljs-string">"hello.js"</span>, <span class="hljs-string">"utf-8"</span>, <span class="hljs-built_in">console</span>.log);<br></code></pre></td></tr></table></figure></li>
<li>读取二进制文件，不传入文件编码，回调函数将返回一个Buffer对象。<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">fs.readFile(<span class="hljs-string">"hello.js"</span>, <span class="hljs-built_in">console</span>.log);<br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>| 在需要使用回调函数的地方，传入<code>console.log</code>，可以打印出回调函数的参数信息。</p>
<p>| 建议始终使用<code>module.exports</code>的方式，而不是省写的<code>exports</code>；</p>
<p>| 如果要输出一个键值对象<code>{}</code>，可以利用<code>exports</code>这个已经存在的空对象<code>{}</code>，<br>  并继续在上面添加新的键值；</p>
<blockquote>
<p>var exported = load(module.exports, module);<br>  因为对exports重新赋值，对module.exports没有任何副作用。</p>
</blockquote>
<p>如果要输出一个函数或数组，必须直接对<code>module.exports</code>对象赋值；</p>
<p>| 实现“模块”功能的奥妙就在于JavaScript是一种函数式编程语言，它支持闭包。</p>
<p>| 引入的对象具体是什么，取决于引用模块输出的变量。（输出的变量可以是任意对象、函数、数组等等）</p>
<p>| 一个模块想要对外暴露变量（函数也是变量），可以用<code>module.exports = variable;</code>；<br>  一个模块想要引用其他模块暴露的变量，用<code>var ref = require(&#39;module_name&#39;)</code>就拿到了引用模块变量；</p>
<p>| 使用模块的好处：</p>
<ul>
<li>提高了代码的可维护性；</li>
<li>代码重用；</li>
<li>避免了函数名和变量名冲突；</li>
</ul>
<p>| 在Node环境中，一个.js文件就称之为一个模块（module）。</p>
<p>| 让node直接为所有js文件都开启严格模式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">node --use_strict myFile.js<br></code></pre></td></tr></table></figure>


<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000</a></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node配置</title>
    <url>/js/node%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="国内优秀npm镜像推荐及使用"><a href="#国内优秀npm镜像推荐及使用" class="headerlink" title="国内优秀npm镜像推荐及使用"></a><a href="http://riny.net/2014/cnpm/" target="_blank" rel="noopener">国内优秀npm镜像推荐及使用</a></h2><p>淘宝npm镜像</p>
<ul>
<li>搜索地址：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></li>
<li>registry地址：<a href="http://registry.npm.taobao.org/" target="_blank" rel="noopener">http://registry.npm.taobao.org/</a><br>cnpmjs镜像</li>
<li>搜索地址：<a href="http://cnpmjs.org/" target="_blank" rel="noopener">http://cnpmjs.org/</a></li>
<li>registry地址：<a href="http://r.cnpmjs.org/" target="_blank" rel="noopener">http://r.cnpmjs.org/</a></li>
</ul>
<h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">npm --registry https://registry.npm.taobao.org install express<br></code></pre></td></tr></table></figure>
<h3 id="持久使用"><a href="#持久使用" class="headerlink" title="持久使用"></a>持久使用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br><br>// 配置后可通过下面方式来验证是否成功<br>npm config get registry<br>// 或<br>npm info express<br></code></pre></td></tr></table></figure>
<h3 id="通过cnpm使用"><a href="#通过cnpm使用" class="headerlink" title="通过cnpm使用"></a>通过cnpm使用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">npm install -g cnpm --registry=https://registry.npm.taobao.org<br><br>// 使用<br>cnpm install express<br></code></pre></td></tr></table></figure>




<h2 id="https-blog-niceue-com-front-end-development-using-domestic-npm-images-html"><a href="#https-blog-niceue-com-front-end-development-using-domestic-npm-images-html" class="headerlink" title="https://blog.niceue.com/front-end-development/using-domestic-npm-images.html"></a><a href="https://blog.niceue.com/front-end-development/using-domestic-npm-images.html" target="_blank" rel="noopener">https://blog.niceue.com/front-end-development/using-domestic-npm-images.html</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 配置 registry</span><br>npm config <span class="hljs-built_in">set</span> registry https://r.cnpmjs.org/<br><span class="hljs-comment"># 验证配置是否修改成功</span><br>npm config get registry<br></code></pre></td></tr></table></figure>

<h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><blockquote>
<p>If you have a package.json file in your directory and you run npm install,<br>then npm will look at the dependencies that are listed in that file and<br>download the latest versions satisfying semver rules for all of those.<br><a href="https://docs.npmjs.com/getting-started/using-a-package.json" target="_blank" rel="noopener">https://docs.npmjs.com/getting-started/using-a-package.json</a></p>
</blockquote>
<h2 id="修改npm-install-g-的安装目录"><a href="#修改npm-install-g-的安装目录" class="headerlink" title="修改npm install -g 的安装目录"></a>修改<code>npm install -g</code> 的安装目录</h2><p>查看： <code>npm root -g</code><br>修改：在配置文件中 <code>.npmrc</code> 中添加，<code>prefix = &quot;D:\\c\\nodejs\\node_modules\\npm&quot;</code></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>【RN】相关</title>
    <url>/js/rn/</url>
    <content><![CDATA[<h2 id="run-from-android"><a href="#run-from-android" class="headerlink" title="run from android"></a>run from android</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">C:\Users\Administrator\AppData\Roaming\npm<br><br>react-native bundle --platform android --dev <span class="hljs-literal">false</span> --entry-file App.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res<br><br>react-native run-android<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/44446523/unable-to-load-script-from-assets-index-android-bundle-on-windows" target="_blank" rel="noopener">react native - Unable to load script from assets index.android.bundle on windows - Stack Overflow</a></li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue相关</title>
    <url>/js/vue/</url>
    <content><![CDATA[<h2 id="官方文档：https-cn-vuejs-org"><a href="#官方文档：https-cn-vuejs-org" class="headerlink" title="官方文档：https://cn.vuejs.org"></a>官方文档：<a href="https://cn.vuejs.org" target="_blank" rel="noopener">https://cn.vuejs.org</a></h2><h2 id="Uploading-Files-With-VueJS-and-Axios"><a href="#Uploading-Files-With-VueJS-and-Axios" class="headerlink" title="Uploading Files With VueJS and Axios"></a><a href="https://serversideup.net/uploading-files-vuejs-axios/" target="_blank" rel="noopener">Uploading Files With VueJS and Axios</a></h2><h2 id="读懂原理："><a href="#读懂原理：" class="headerlink" title="读懂原理："></a>读懂原理：</h2><ul>
<li><a href="http://www.cnblogs.com/keepfool/p/5619070.html" target="_blank" rel="noopener">Vue.js——60分钟快速入门 - keepfool - 博客园</a></li>
<li><a href="http://www.cnblogs.com/keepfool/p/5625583.html" target="_blank" rel="noopener">Vue.js——60分钟组件快速入门（上篇） - keepfool - 博客园</a></li>
<li><a href="http://www.cnblogs.com/keepfool/p/5637834.html" target="_blank" rel="noopener">Vue.js——60分钟组件快速入门（下篇） - keepfool - 博客园</a></li>
<li><a href="http://www.cnblogs.com/keepfool/p/5678427.html" target="_blank" rel="noopener">Vue.js——60分钟webpack项目模板快速入门 - keepfool - 博客园</a></li>
<li><a href="http://www.cnblogs.com/keepfool/p/5690366.html" target="_blank" rel="noopener">Vue.js——vue-router 60分钟快速入门 - keepfool - 博客园</a></li>
</ul>
<h2 id="视频教程：vue-js入门教程"><a href="#视频教程：vue-js入门教程" class="headerlink" title="视频教程：vue.js入门教程"></a>视频教程：<a href="http://www.imooc.com/learn/694" target="_blank" rel="noopener">vue.js入门教程</a></h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>webpack结合vue的时候，less中的元素重名会导致渲染错误。可以通过添加前缀来区别：<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.a</span>&#123;<br>    <span class="hljs-selector-class">.container</span> &#123;<br>        <span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.nihao</span> &#123;<br>        <span class="hljs-attribute">color</span>:<span class="hljs-number">#2f0</span>;<br>        <span class="hljs-attribute">background</span>:<span class="hljs-number">#c38</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-selector-class">.b</span>&#123;<br>    <span class="hljs-selector-class">.container</span> &#123;<br>        <span class="hljs-attribute">background</span>:<span class="hljs-number">#000</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.nihao</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="通过scoped来避免全局污染"><a href="#通过scoped来避免全局污染" class="headerlink" title="通过scoped来避免全局污染"></a>通过<code>scoped</code>来避免全局污染</h2><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs less">&lt;style lang="less" scoped&gt;<br>  <span class="hljs-keyword">@import</span> <span class="hljs-string">"../../styles/product-list.less"</span>;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h2 id="Vue-固定滚动位置的处理办法-前端-掘金"><a href="#Vue-固定滚动位置的处理办法-前端-掘金" class="headerlink" title="Vue 固定滚动位置的处理办法. - 前端 - 掘金"></a><a href="https://juejin.im/entry/5966372251882568d546f51d" target="_blank" rel="noopener">Vue 固定滚动位置的处理办法. - 前端 - 掘金</a></h2>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Js中的常见问题</title>
    <url>/js/qa/</url>
    <content><![CDATA[<h1 id="通过var拿到到对象的属性后，能直接删除它吗？（而不是通过类似a-b-的方式）"><a href="#通过var拿到到对象的属性后，能直接删除它吗？（而不是通过类似a-b-的方式）" class="headerlink" title="通过var拿到到对象的属性后，能直接删除它吗？（而不是通过类似a[b]的方式）"></a>通过var拿到到对象的属性后，能直接删除它吗？（而不是通过类似<code>a[b]</code>的方式）</h1><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">a=&#123;<br>    b:<span class="hljs-number">1</span>,<br>    c:<span class="hljs-number">2</span>,<br>&#125;<br><span class="hljs-keyword">delete</span> a[<span class="hljs-string">'b'</span>]; <span class="hljs-comment">// ok，返回true</span><br><br><span class="hljs-keyword">var</span> k = a[b]; <br><span class="hljs-keyword">delete</span> k; <span class="hljs-comment">// 这样是不行，《JavaScript权威指南》p89中这样说：不能删除通过var声明的变量，返回false</span><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Weex</title>
    <url>/js/weex/</url>
    <content><![CDATA[<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul>
<li>官网：<a href="https://weex.incubator.apache.org/cn/guide/" target="_blank" rel="noopener">快速上手 | Weex</a></li>
<li>示例：<a href="https://hanks10100.github.io/weex-vue-examples/" target="_blank" rel="noopener">weex-vue-examples</a></li>
<li>源码：<a href="https://github.com/apache/incubator-weex" target="_blank" rel="noopener">incubator-weex</a></li>
<li><a href="https://alibaba.github.io/weex-ui/#/?id=weex-ui" target="_blank" rel="noopener">Weex Ui</a></li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul>
<li><a href="https://github.com/w11p3333/weex-start-kit" target="_blank" rel="noopener">weex-start-kit</a></li>
<li><a href="https://github.com/CarGuo/GSYGithubAppWeex" target="_blank" rel="noopener">GSYGithubAppWeex</a></li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="可能是史上最全的weex踩坑攻略"><a href="#可能是史上最全的weex踩坑攻略" class="headerlink" title="可能是史上最全的weex踩坑攻略"></a><a href="https://www.jianshu.com/p/497f1a9ff33f" target="_blank" rel="noopener">可能是史上最全的weex踩坑攻略</a></h3><h3 id="WEEX-使用navigator跳转Android系统出现ActivityNotFoundException报错"><a href="#WEEX-使用navigator跳转Android系统出现ActivityNotFoundException报错" class="headerlink" title="WEEX 使用navigator跳转Android系统出现ActivityNotFoundException报错"></a><a href="https://blog.csdn.net/violetjack0808/article/details/74390249" target="_blank" rel="noopener">WEEX 使用navigator跳转Android系统出现ActivityNotFoundException报错</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">  <span class="hljs-attr">android:name</span>=<span class="hljs-string">".WXPageActivity"</span></span><br><span class="hljs-tag">  <span class="hljs-attr">android:label</span>=<span class="hljs-string">"@string/app_name"</span></span><br><span class="hljs-tag">  <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">"portrait"</span></span><br><span class="hljs-tag">  <span class="hljs-attr">android:theme</span>=<span class="hljs-string">"@style/AppTheme.NoActionBar"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"com.taobao.android.intent.action.WEEX"</span>/&gt;</span><br>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.category.DEFAULT"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"com.taobao.android.intent.category.WEEX"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.intent.action.VIEW"</span>/&gt;</span><br>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">"http"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">"https"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">"file"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">"wxpage"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String navUrl = getIntent().getData().toString();<br></code></pre></td></tr></table></figure>

<p>分析模板代码（如下面所示）：<br>我们需要一个<code>mContainer</code>来容纳已经渲染过的<code>wxview</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- activity_wxpage.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/container"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">"#ffffff"</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AbsWeexActivity.java</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onViewCreated</span><span class="hljs-params">(WXSDKInstance wxsdkInstance, View view)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (mContainer != <span class="hljs-keyword">null</span>) &#123;<br>        mContainer.removeAllViews();<br>        mContainer.addView(view); <span class="hljs-comment">// mContainer是用来容纳wxview的viewgroup</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>《JavaScript权威指南》笔记</title>
    <url>/js/%E3%80%8AJavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>注：笔记是倒序排列的。</p>
</blockquote>
<p>| node的helloworld程序：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//! program.js</span><br><span class="hljs-comment">// 通过在命令行输入`node program.js`来运行，然后在浏览器中打开网址`127.0.0.1:8080`来访问</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);<br><br><span class="hljs-keyword">var</span> server = <span class="hljs-keyword">new</span> http.Server();<br>server.listen(<span class="hljs-number">8080</span>);<br>server.on(<span class="hljs-string">'request'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(request.url); <span class="hljs-comment">//打印请求网址</span><br>  response.write(<span class="hljs-string">"Hello World!"</span>);<br>  response.end();<br>&#125;);<br></code></pre></td></tr></table></figure>
<p>| Rhino，一种用Java编写的JavaScript解释器。在<a href="https://github.com/mozilla/rhino" target="_blank" rel="noopener">mozilla/rhino: Rhino is an open-source implementation of JavaScript written entirely in Java</a>中具体研究。</p>
<p>| Web浏览器之外的两种运行环境</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/Rhino/Download_Rhino" target="_blank" rel="noopener">下载 Rhino - Mozilla 产品与私有技术 | MDN</a></li>
<li>node</li>
</ul>
<h2 id="第十二章：服务器端JavaScript"><a href="#第十二章：服务器端JavaScript" class="headerlink" title="第十二章：服务器端JavaScript"></a>第十二章：服务器端JavaScript</h2><p>| 解构赋值右侧的数组所包含的元素不必和左侧的变量一一对应，左侧多余的变量的赋值为<code>undefined</code>，右侧多于的值则会被忽略。左侧的变量列表可以包含连续的逗号用以跳过右侧对应的值。–p275</p>
<p>| 通过var声明的变量在函数内都是可用的，而通过let声明的变量则只属于就近的花括号括起来的语句块。–p272</p>
<h2 id="第十一章：JavaScript的子集和扩展"><a href="#第十一章：JavaScript的子集和扩展" class="headerlink" title="第十一章：JavaScript的子集和扩展"></a>第十一章：JavaScript的子集和扩展</h2><p>| RegExp方法</p>
<ul>
<li><code>exec()</code>：exec()方法对一个指定的字符串执行一个正则表达式。lastIndex属性会在设置了<code>g</code>修饰符后起作用。 –p264 –p265</li>
<li><code>test(字符串)</code>：对字符串进行检测，如果包含有一个匹配，则返回true；</li>
</ul>
<p>| String支持4种正则表达式用法。–p262</p>
<ul>
<li>String.search(/正则/); 如果参数不是正则，则通过RegExp构造正则对象；</li>
<li>String.replace(/正则/, “代替换文本”); 如果第一个参数是字符串，则直接搜索该字符串而不是构造成正则表达式。第二个参数可以是函数，该函数能够动态地计算替换字符串；</li>
<li>String.match(/正则/); 最常用的正则方法；</li>
<li>String.split(/正则/); 参数可以是字符串也可以是正则；</li>
</ul>
<p>| 正则表达式修饰符：出现在第二条斜线之外的字符。 –p261</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">i</span> <span class="hljs-string">不区分大小写</span><br><span class="hljs-attr">g</span> <span class="hljs-string">全局匹配</span><br><span class="hljs-attr">m</span> <span class="hljs-string">多行模式的匹配</span><br></code></pre></td></tr></table></figure>

<p>| 锚字符：–p261</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">^ 匹配字符串开头<br>$ 匹配字符串结尾<br>\b 匹配单词的边界<br>\B 匹配非单词边界<br>(<span class="hljs-string">?=</span>p) 零宽正向先行断言，要求接下来字符都与p匹配<br>(<span class="hljs-string">?!</span>p) 零宽负向先行断言，要求接下来字符不与p匹配<br></code></pre></td></tr></table></figure>

<p>| 非贪婪匹配（尽可能少地匹配）：在匹配的字符后跟随一个问号。–p257</p>
<p>| 重复：–p257</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">&#123;<span class="hljs-built_in">n</span>, m&#125; （至少<span class="hljs-built_in">n</span>次，不能超过m次）<br>&#123;<span class="hljs-built_in">n</span>, &#125; （匹配前一项<span class="hljs-built_in">n</span>次到多次）<br>&#123;<span class="hljs-built_in">n</span>&#125; 匹配前一项<span class="hljs-built_in">n</span>次<br>? <span class="hljs-number">0</span>次或多次<br>+ <span class="hljs-number">1</span>次或多次<br>* <span class="hljs-number">0</span>次或多次<br></code></pre></td></tr></table></figure>

<p>| 字符类：将直接量字符单独放进方括号<code>[]</code>内就组成了字符类。 –p256</p>
<p>| 在正则表达式中，具有特殊含义的标点符号：–p255</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">^ $ . * + ? = ! : | \ / ( ) [ ] &#123; &#125;<br></code></pre></td></tr></table></figure>

<p>| ECMAScript 5 规范做了同ECMAScript 3相反的规定，同一段代码所表示的正则表达式直接量的每次运算都返回新的对象。–p254</p>
<p>| 创建正则表达式：</p>
<ul>
<li>使用<code>RegExp()</code>构造函数来创建；</li>
<li>使用正则表达式直接量语法（包含在一对斜杠之间的字符）；</li>
</ul>
<h2 id="第十章：正则表达式"><a href="#第十章：正则表达式" class="headerlink" title="第十章：正则表达式"></a>第十章：正则表达式</h2><p>| 模块，导出API：</p>
<ol>
<li>返回构造函数； –p251</li>
<li>通过new来直接调用模块函数； –p252</li>
<li>框架提供的导出模块API方法； –p252</li>
</ol>
<p>| 模块化，实现代码的重用。–p248</p>
<p>| 锁定原型对象的一个使用场合：阻止枚举类型<code>enumeration()</code>属性的变化（修改和删除）。在<code>Object.freeze()</code>方法调用之前所做的设置都是生效可用的。 –p244</p>
<p>| <code>Object.freeze()</code>和<code>Object.seal</code>的功能一样，都会把对象的属性设置为只读和不可配置的。–p244</p>
<p>| <code>Object.defineProperty()</code>和<code>Object.defineProperties()</code>可以用来创建新特性，也可以用来修改已有属性的特性。 –p242</p>
<p>| ECMAScript 5给对象的扩展性增加了限制（方法支持：setter、getter、可枚举性、可写性、可配置性），其新特性使类更加健壮。 –p239</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty();<br><span class="hljs-built_in">Object</span>.defineProperties();<br><span class="hljs-built_in">Object</span>.seal();<br><span class="hljs-built_in">Object</span>.preventExtensions();<br><span class="hljs-built_in">Object</span>.create();<br><span class="hljs-built_in">Object</span>.freeze();<br><span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor();<br></code></pre></td></tr></table></figure>


<p>| <code>var str = JSON.stringify(o);</code>将对象转化为json字符串，<br><code>JSON.parse(str)</code>，将字符串转化为对象，但是该对象不具有和o对象相同的继承结构。 –p222</p>
<p>| 鸭式辨型不能应用于内置类，比如不能通过<code>quacks(o, Array)</code>来检测o是否实现了Array中的所有同名方法。原因是内置类的方法都是不可枚举的（for/in操作无法遍历）。–p217</p>
<p>| 在JavaScript中，类的实现是基于其原型继承机制的。–p201</p>
<h2 id="第九章：类和模块"><a href="#第九章：类和模块" class="headerlink" title="第九章：类和模块"></a>第九章：类和模块</h2><p>| 需要给<code>f()</code>传入一个参数，所以使用<code>f()</code>的<code>()</code>方法；<br>  需要给<code>g()</code>传入多个参数，所以使用<code>g()</code>的<code>apply()</code>方法； –p197 –p189</p>
<p>| 可以通过<code>new Function()</code>构造方法的方式来定义函数（另外两种定义方式：1.函数定义语句；2. 函数直接量表达式）。<code>Function</code>构造函数创建的是一个匿名函数，不需要指定函数名。–p192</p>
<p>| 书写闭包的时候还需要注意一件事，this是JavaScript的关键字，而不是变量。</p>
<p>| 函数的执行依赖于变量作用域，这个作用域是在函数定义时决定的，而不是函数调用时。 –p182</p>
<p>| 直接调用匿名函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我是匿名函数，我被调用"</span>)&#125;());<br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我是匿名函数，我被调用=&gt;"</span> + x)&#125;)(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure>
<p>注意：<code>function</code>之前的左圆括号是必需的，如果不写这个左圆括号，JavaScript解释器会视图将关键字function解析为函数定义表达式。</p>
<p>| 调用函数中的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数中的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我是a"</span>);<br>  <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我是b"</span>);<br>  <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我是c"</span>);<br>&#125;<br><br>a()()(); <span class="hljs-comment">// =&gt; 我是a /n 我是b /n 我是c</span><br></code></pre></td></tr></table></figure>

<p>| <code>argument[]</code>对象适用场合：函数包含固定个数的命名和必须的参数，以及随后个数不定的可选实参。–p175</p>
<p>| JavaScript针对实参的默认检查行为：省略的实参都是<code>undefined</code>，多出的实参会自动省略。–p174</p>
<p>| 标识符<code>arguments</code>是指向实参对象的引用，实参对象是一个类数组对象。可以通过下标来访问传入的实参值。例如：<code>argeuments[0]</code>表示第一个参数，<code>arguments.length()</code>表示实参数组的长度。–p174</p>
<p>| this是一个关键字，不是变量，也不是属性名。JavaScript的语法不允许给this赋值。–p171</p>
<p>| 任何函数只要作为方法调用实际上都会传入一个隐士的实参——这个实参是个对象，方法调用的母体就是这个对象。–p170</p>
<p>| 函数定义表达式/函数声明语句<br>函数声明语句：ECMAScript规范只是允许它们作为顶级语句。可以出现在全局代码里，或者内嵌在其他函数中，不能出现在循环，条件判断，或者try/catch/finally中。<br>函数定义表达式：可以出现在JavaScript代码的任何地方。 –p168</p>
<h1 id="第八章：函数"><a href="#第八章：函数" class="headerlink" title="第八章：函数"></a>第八章：函数</h1><p>| 对于字符串<code>var a = &quot;test&quot;</code>虽然可以通过<code>a[0]</code>的方式获取字符（很类似于数组的获取方式），但是字符串不是数组：<code>Array.isArray(a) === false</code>。</p>
<p>| <code>Array.indexOf()</code>和<code>Array.lastIndexOf()</code>：<br>参数1：需要搜索的值。<br>参数2：指定数组中的一个索引，从那里开始搜索。（可选的，如果省略则从头开始搜索；如果是负数，则表示相对末尾的偏移量） –p160</p>
<p>| <code>Array.reduce()</code>需要两个参数：<br>参数1： 执行化简操作的函数。<br>参数2： 传递给函数的初始值（可选的）。</p>
<p>| forEach无法在所有元素都传递给调用的函数之前终止遍历。可以通过抛异常的方式来中断。–p156</p>
<p>| <a href="http://www.cnblogs.com/moltboy/archive/2013/04/24/3040450.html" target="_blank" rel="noopener">JavaScript中函数和方法的区别</a><br>函数：是可执行的JavaScript代码块，由JavaScript程序定义或JavaScript实现预定义。<br>方法：是通过对象调用的JavaScript函数。<br>（一个方法无非是个保存在一个对象的属性里的JavaScript。–p169）<br>（如果函数挂载在一个对象上，作为对象的一个属性，就称它为对象的一个方法。当通过这个对象来调用函数时，该对象就是此次调用的上下文，也就是该函数的this值–p165）<br>方法是用来对this对象进行操作的，this对象是方法的一个重要属性，当this对象出现在方法主体内部，this值就指向调用该方法的对象。而函数通常是独立的，并不需要经常使用this对象。</p>
<p>| <code>Array.push(a)</code>和<code>Array.pop()</code>，均修改原数组本身。 –p154</p>
<p>|<code>Array.splice()</code>，对元素本身做修改。</p>
<ul>
<li>参数1：指定插入或删除的起始位置；</li>
<li>参数2：指定了应该从数组中删除的元素个数。（为0时不删除任何元素）</li>
<li>后续参数：要插入的元素；</li>
</ul>
<p>| <code>Array.concat()</code>不会递归扁平化数组的数组。<code>concat()</code>也不会修改调用的数组。</p>
<p>| <code>Array.reverse()</code>操作的是原数组，对原数组进行重新排列。<br>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>a.reverse().join(<span class="hljs-string">"-"</span>); <span class="hljs-comment">// =&gt; 1-2-3</span><br>a <span class="hljs-comment">// =&gt;[3, 2, 1]</span><br></code></pre></td></tr></table></figure>

<p>| <code>Array.join()</code>，用什么字符来拼接数组中的元素。例如：<code>[1, 2, 3].join(-)</code>的结果是<code>1-2-3</code>；</p>
<p>| 在数组尾部压入一个元素，与给数组a[a.length]赋值是一样的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [];<br>a.push(<span class="hljs-string">"one"</span>); <span class="hljs-comment">// ["one"]</span><br>a[a.length] = <span class="hljs-string">"two"</span>; <span class="hljs-comment">// ["one", "two"]</span><br></code></pre></td></tr></table></figure>

<p>| 在数组直接量中省略值时不会创建稀疏数组。省略的元素在数组中是存在的，其值为<code>undefined</code>。 –p147</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a1 = [,,,]; <span class="hljs-comment">// 数组是[undefined, undefined, undefined]</span><br><span class="hljs-keyword">var</span> a2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// 该数组根本没有元素</span><br><span class="hljs-number">0</span> <span class="hljs-keyword">in</span> a1 <span class="hljs-comment">// =&gt; true: a1在索引0处有一个元素——undefined。？？？，在Chrome56.0中，其值为false；而如果a1=[undefined, undefined, undefined]，该结果是true</span><br><span class="hljs-number">0</span> <span class="hljs-keyword">in</span> a2 <span class="hljs-comment">// =&gt; false: a2在索引0处没有元素</span><br></code></pre></td></tr></table></figure>

<p>| 数组最大能容纳<code>2^32-1=4 294 967 295</code>个元素。</p>
<p>| 非标准的方法：以两条下划线作前缀，两条下划线做后缀的方法。例如：<code>__lookupGetter__()、__lookupSetter__()</code>。–p138</p>
<h1 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h1><p>| 基于兼容性考虑，不推荐使用<code>__proto__</code>，IE和Opera尚未实现它。 –p139</p>
<p>| <code>Object.defineProperty(对象, 要创建或修改的属性名称, 属性描述符对象)</code>方法可以用来设置属性的特性、新建属性的某种特性。<br>属性描述符：<code>{value: 1, writable: true, enumerable: false, configurable: true}</code>，不必包含所有4个特性，例如:<code>{value:2}</code>；<br>对于新创建的属性来说，默认的特性值是<code>false</code>或<code>undefined</code>。 –p136</p>
<p>| 对象直接量:var a = {x:1, y:2}<br>对象直接量是一个表达式，每次运算都创建并初始化一个新对象，如果在一个重复调用的函数中的循环体内使用了对象直接量，它将会创建很多新对象；–p<br>120<br><a href="http://www.cnblogs.com/jiuyi/p/4226903.html" target="_blank" rel="noopener">http://www.cnblogs.com/jiuyi/p/4226903.html</a></p>
<p>| 严格模式（”use strict”是ECMAScript 5引入的一条指令）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// c = "dd"; // 在`use strict`之前没有任何表达式</span><br><span class="hljs-meta">"use strict"</span> <span class="hljs-comment">// 被当作指令</span><br>d = <span class="hljs-string">"d1"</span><br></code></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">c = <span class="hljs-string">"dd"</span>;<br><span class="hljs-meta">"use strict"</span> <span class="hljs-comment">// 被当作普通的表达式语句对待。</span><br>d = <span class="hljs-string">"d1"</span>;<br></code></pre></td></tr></table></figure>

<p>| 严格模式存在的意义：修正了语言的重要缺陷，并提供健壮的查错功能和增强的安全机制。 –p115</p>
<p>| with的用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ==&gt; with测试</span><br><span class="hljs-keyword">var</span> o = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;;<br><span class="hljs-built_in">console</span>.log(o); <span class="hljs-comment">// =&gt; &#123;x:1&#125;</span><br><span class="hljs-keyword">with</span>(o) x = <span class="hljs-number">12</span>;<br><span class="hljs-built_in">console</span>.log(o); <span class="hljs-comment">// =&gt; &#123;x: 12&#125;: with语句可以用来修改对象中属性的值。</span><br><br><span class="hljs-keyword">var</span> o = &#123;&#125;;<br><span class="hljs-keyword">with</span>(o) x = <span class="hljs-number">13</span>;<br><span class="hljs-built_in">console</span>.log(o); <span class="hljs-comment">// =&gt; &#123;&#125;:with提供了一种读取o的属性的快捷方式，但是不能创建o的属性。</span><br><span class="hljs-built_in">console</span>.log(x); <span class="hljs-comment">// =&gt; 13:如果o没有属性x, 则相当于这段代码相当于`x=13`</span><br></code></pre></td></tr></table></figure>

<p>| 在严格模式下是禁止使用<code>with</code>语句的，并且在非严格模式下也是不推荐的，尽量避免使用<code>with</code>语句。(难优化，运行的慢) –p113</p>
<p>| 通过<code>prompt(&quot;msg&quot;)</code>的方式，从浏览器客户端获取用户输入。<br> 通过<code>alert(&quot;msg&quot;)</code>的方式弹出消息。</p>
<p>| 如果抛出异常的函数没有处理它的<code>try/catch/finally</code>语句，异常将向上传播到调用该函数的代码。如果没有找到任何异常处理程序，JavaScript将把异常当作程序错误来处理。–p110</p>
<p>| return语句只能在函数体内出现，否则会报语法错误。 –p109</p>
<p>| 函数，可以通过两种方式来定义： –p62, p57，p95</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方式1--函数定义表达式：</span><br><span class="hljs-keyword">var</span> square = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123; <span class="hljs-keyword">return</span> x * x;&#125;<br><span class="hljs-comment">// 方式2--函数声明语句：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">square</span>(<span class="hljs-params">x</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> x * x;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>两者的区别是：</p>
<ul>
<li>使用var，只有变量声明提前了–变量的初始化代码仍然在原来的位置。</li>
<li>使用函数声明语句的话，函数名称和函数体均提前。</li>
</ul>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ==&gt;函数声明提前测试；</span><br><span class="hljs-comment">// 在函数初始化之前调用</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"代码定义之前调用============="</span>);<br><span class="hljs-comment">// f1(); // =&gt;TypeError: f1 is not a function</span><br>f2(); <span class="hljs-comment">// =&gt; f2</span><br><br><span class="hljs-comment">// 函数定义的地方</span><br><span class="hljs-keyword">var</span> f1 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">"f1"</span>)&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">"f2"</span>)&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"代码定义之后调用============="</span>);<br>f1(); <span class="hljs-comment">// =&gt; f1</span><br>f2(); <span class="hljs-comment">// =&gt; f2</span><br></code></pre></td></tr></table></figure>

<p>整体被显示地“提前”到了脚本或函数的顶部。</p>
<p>| 函数体内局部变量会声明提前，并且会覆盖同名的全局变量 –p58</p>
<blockquote>
<p>将函数内的变量声明“提前”至函数体顶部，同时变量初始化留在原来的位置。</p>
</blockquote>
<p>| JavaScript中，if,else的匹配规则是，else总是和就近的if语句匹配。 –p97</p>
<p>JavaScript中没有块级作用域。 –p93</p>
<p>delete:一些内置核心和客户端属性是不能删除的，用户通过var语句声明的变量不能删除。–p89</p>
<p>三元运算符的使用场合： –87<br>如果有定义就使用定义过的，如果没有定义则使用默认值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> greeting = <span class="hljs-string">"hello"</span> + (username ? username : <span class="hljs-string">"there"</span>);<br></code></pre></td></tr></table></figure>

<p>为什么会有下面这种用法？p.x的执行依赖于p，如果不使用这种“&amp;&amp;”的方式，那么会抛出类型错误异常。–p80</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> p = <span class="hljs-literal">null</span>;<br>p &amp;&amp; p.x<br></code></pre></td></tr></table></figure>

<p>假值是<code>false, null, undefined, 0, -0, NaN和&quot;&quot;</code>，所有其他的值包括对象都是真值。 –p79</p>
<p>所有小写的ASCII字母都“大于”大写的ASCII字母。 – p77</p>
<p>数组也是对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> [] === <span class="hljs-string">"object"</span>; <span class="hljs-comment">// =&gt;true</span><br></code></pre></td></tr></table></figure>

<p>只有在<code>x</code>等于<code>NaN</code>时，表达式<code>x!==x</code>成立。 –p75</p>
<p>true在比较的过程中会转换为1.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span> == <span class="hljs-literal">true</span> <span class="hljs-comment">// =&gt; true</span><br><span class="hljs-number">2</span> == <span class="hljs-literal">true</span> <span class="hljs-comment">// =&gt; false</span><br></code></pre></td></tr></table></figure>

<p>NaN和其他任何值都是不相等的（包括它本身）。 –p75</p>
<p>位操作移动的位数的范围是：0-31.<br>为什么？因为位运算符要求它的操作数是整数，这些整数表示为32位整型而不是64位浮点型； -p73</p>
<p>在JavaScript中，所有的数字都是浮点型的，除法运算的结果也是浮点型的。–p70</p>
<p>如果操作数是NaN，那么操作结果也是NaN。–p70</p>
<p>所有无法转换成数字的操作数在进行算术运算时，都转换成NaN。 –p70</p>
<p>结合性：一元运算符，赋值和三元条件运算符都具有从右至左的结合性。 –p69</p>
<p>注意：当属性名是通过运算得出的值而不是固定的值的时候，使用方括号写法。 –p64</p>
<p>点式的写法更简单（相比较于方括号），但是访问的属性名称必须是合法的标识符，并且需要知道属性的名字。 –p63</p>
<p>对于属性名称中包含空格的情况，可以通过<code>[]</code>来表示，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> p = &#123;<span class="hljs-string">"ni hao"</span> : <span class="hljs-string">"hello"</span>&#125;;<br>p[<span class="hljs-string">"ni hao"</span>] <span class="hljs-comment">// =&gt; hello</span><br></code></pre></td></tr></table></figure>

<p>对象直接量中的属性名称可以是字符串而不是标识符。–p62</p>
<p>数组直接量中的列表逗号之间的元素可以省略，省略的空位会填充 <code>undefined</code>。<br>数组直接量的元素列表结尾可以留下单个逗号，这时并不创建一个新的<code>undefined</code>对象。 –p62</p>
<p>在开头添加一行字符串<code>use strict;</code>可以开启严格模式；</p>
<p>同名的变量名，局部的会覆盖全局的。注意声明提前。</p>
<p>始终使用<code>var</code>来声明变量（不要隐藏var）。 –p56</p>
<p><code>new Boolean(false)</code>是一个对象，而不是原始值。所以以下代码会打印出<code>1</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> c = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span>(c)&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>依照术语的叫法，对象值都是引用，对象的比较均是引用的比较：当且仅当他们引用同一个基对象时，他们才相等。–p48</p>
<p>JavaScript中的字符串相等：<br>当且仅当他们的长度相等，且每个索引的字符都相等时. –p47</p>
<p>JavaScript对象是一种复合值：它是属性或已命名值的集合。 –p46<br>属性值可以是方法名。通过<code>o.m()</code>的方式进行调用。</p>
<p>任意JavaScript的值都可以转换成布尔值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-literal">undefined</span><br><span class="hljs-literal">null</span><br><span class="hljs-number">0</span><br><span class="hljs-number">-0</span><br><span class="hljs-literal">NaN</span><br><span class="hljs-string">""</span> <span class="hljs-comment">// 空字符串</span><br></code></pre></td></tr></table></figure>
<p>所有其他值，包括所有对象（数组）都会转换成true. –p43</p>
<p>在两条斜线之间的文本构成了一个正则表达式直接量。</p>
<p>舍入误差的解决方案：使用整数“分”而不要使用小数“元”进行基于货币单位的运算。 –p38</p>
<p>二进制浮点数表示法并不能精确表示类似0.1这样的简单数字。 –p37</p>
<p>除了作为除数外<code>0</code>和<code>-0</code>是一模一样的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> zero = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> negz = <span class="hljs-number">-0</span>;<br>zero === negz; <span class="hljs-comment">// =&gt; true</span><br><span class="hljs-number">1</span>/zero === <span class="hljs-number">1</span>/negz; <span class="hljs-comment">// =&gt; false: 正无穷大和负无穷大不一样</span><br></code></pre></td></tr></table></figure>
<p>– p37</p>
<p>当且仅当x为<code>NaN</code>时，表达式<code>x != x</code>为<code>true</code>；–p37</p>
<p>无穷大值在进行加减乘除运算后，结果还是无穷大。</p>
<p>JavaScript中的算术运算在溢出、下溢、被零整除时不会报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-number">3</span> / <span class="hljs-number">0</span> = <span class="hljs-literal">Infinity</span>;<br><span class="hljs-number">-3</span> / <span class="hljs-number">0</span> = -<span class="hljs-literal">Infinity</span>;<br></code></pre></td></tr></table></figure>
<p>–p36</p>
<p>八进制（不推荐使用八进制，在ECMAScript 6的严格模式下  ，8进制是明令禁止的）：<br>0377是八进制；<br>0378是十进制；（可以通过console来验证） –p35</p>
<p>浮点数范围（采用IEEE 754标准）：<br>最大值（无限远离0）：+- 1.7976931348623157 x 10^308<br>最小值（无限接近0）：+- 5.0 x 10^-324<br>–p34</p>
<p>数字直接量：一个数字直接出现在JavaScript程序中。<br>在任何数字直接量前添加<code>-</code>符号，可以得到它们的负值。但负号是一元求反运算符，并不是数字直接量语法的组成部分。p34</p>
<p>JavaScript中的所有数字均用浮点数值表示。</p>
<p>不在任何函数内声明的变量称作全局变量，它在JavaScript程序中的任何地方都是可见的。<br>在函数内声明的变量具有函数作用域，并且只在函数内可见。 –p34</p>
<h3 id="可选的分号"><a href="#可选的分号" class="headerlink" title="可选的分号"></a>可选的分号</h3><p>在JavaScript中，分割语句的分号是可选的。<br>JavaScript并不是在所有换行处都填补分号：只有在缺少了分号就无法正确解析代码的情况下，JavaScript才会填补分号；<br>例外1：注意：在<code>return</code>, <code>break</code>, <code>continue</code>和随后的表达式之间不能换行（会自动添加分号）。<br>例外2：在涉及<code>++</code>, <code>--</code>的时候，既可以作为前缀也可以作为后缀。如果作为后缀表达式，则应当放在同一行。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>在编程语言中，能够表示并操作的值的类型称作数据类型。</p>
<p>在技术上讲，只有JavaScript对象才能拥有方法。然而数字，字符串和布尔值也可以拥有自己的方法。<br>在JavaScript中只有<code>null</code>和<code>undefined</code>是无法拥有方法的；</p>
<p>本书的风格和《Effective Java》很类似</p>
<h1 id="《JavaScript权威指南》笔记"><a href="#《JavaScript权威指南》笔记" class="headerlink" title="《JavaScript权威指南》笔记"></a>《JavaScript权威指南》笔记</h1><p>2012年4月第1版 2016年9月第17次印刷。</p>
<h3 id="书中的错误"><a href="#书中的错误" class="headerlink" title="书中的错误"></a>书中的错误</h3><p>| p75<br>结果应该是相等，这条和第四条关于NaN的描述存在矛盾。</p>
<blockquote>
<p>如果两个值都是null或者都是undefined，则它们不相等。 =&gt; 则他们相等</p>
</blockquote>
<p>| p77</p>
<blockquote>
<p>则需要首先将字符串转全部换为小写字母 =&gt; 则需要首先将字符串全部转换为小写字母</p>
</blockquote>
<p>| p113</p>
<blockquote>
<p>width、debugger和use strict =&gt; with、debugger和use strict</p>
</blockquote>
<p>| p159</p>
<blockquote>
<p>为了简单起见，到目前位置 =&gt; 到目前为止</p>
</blockquote>
<p>| p168</p>
<blockquote>
<p>try/cache/finally =&gt; try/catch/finally</p>
</blockquote>
<p>| p177</p>
<blockquote>
<p>数组a中必须为数字、null和undefined的元素都将忽略。 =&gt; <code>、</code>修改为<code>,</code></p>
</blockquote>
<p>| p203</p>
<blockquote>
<p>prototye属性 =&gt; prototype</p>
</blockquote>
<p>| p204</p>
<blockquote>
<p>var r = range(1, 3); =&gt; var r = new Range(1, 3);</p>
</blockquote>
<p>| p205</p>
<blockquote>
<p>冠以关键字mew =&gt; 冠以关键字new</p>
</blockquote>
<p>| p213</p>
<blockquote>
<p>但我们常常会忽觉原型上的constructor属性。 =&gt; 但我们常常会忽略原型上的constructor属性。</p>
</blockquote>
<p>| p260</p>
<blockquote>
<p>/\s\Javas/ =&gt; /\sJava\s/</p>
</blockquote>
<p>| p260</p>
<blockquote>
<p> 带有“(?!”的断言是负向先行断言，用以指定接下来的字符都不必匹配。<br>=&gt; 带有“(?!”的断言是负向先行断言，用以指定接下来的字符都不匹配。</p>
</blockquote>
<p>| p263</p>
<blockquote>
<p> 接下来对exec()方法的讨论中会提到：<br>=&gt; 接下来对exec()方法的讨论中会提到。</p>
</blockquote>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>商品多规格组合成单个SKU</title>
    <url>/js/%E5%95%86%E5%93%81sku%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compose</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">if</span> (!a || a.length == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> b;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> a) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j <span class="hljs-keyword">in</span> b) &#123;<br>      arr.push(a[i] + <span class="hljs-string">","</span> + b[j]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getComposeResult</span>(<span class="hljs-params">d</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> result = compose([]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; d.length; i++) &#123;<br>    result = compose(<br>      result,<br>      d[i]<br>    );<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">let</span> b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> c = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">let</span> d = [a, b, c];<br><span class="hljs-comment">// let d = [[1,2], [3,4], [5,6]]</span><br><span class="hljs-built_in">console</span>.log(getComposeResult(d));<br><br><span class="hljs-comment">// output: ["1,3,5", "1,3,6", "1,4,5", "1,4,6", "2,3,5", "2,3,6", "2,4,5", "2,4,6"]</span><br></code></pre></td></tr></table></figure>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> products = [&#123;<br>    <span class="hljs-string">"18547,49234,48480"</span>: <span class="hljs-number">947858</span><br>&#125;, &#123;<br>    <span class="hljs-string">"18547,49234,48481"</span>: <span class="hljs-number">947859</span><br>&#125;, &#123;<br>    <span class="hljs-string">"18547,49235,48480"</span>: <span class="hljs-number">947860</span><br>&#125;, &#123;<br>    <span class="hljs-string">"18547,49235,48481"</span>: <span class="hljs-number">947861</span><br>&#125;, &#123;<br>    <span class="hljs-string">"19167,49234,48480"</span>: <span class="hljs-number">947862</span><br>&#125;, &#123;<br>    <span class="hljs-string">"19167,49234,48481"</span>: <span class="hljs-number">947863</span><br>&#125;, &#123;<br>    <span class="hljs-string">"19167,49235,48480"</span>: <span class="hljs-number">947864</span><br>&#125;, &#123;<br>    <span class="hljs-string">"19167,49235,48481"</span>: <span class="hljs-number">947865</span><br>&#125;]<br><br><span class="hljs-keyword">let</span> spec = [&#123;<br>    <span class="hljs-string">"spec_name"</span>: <span class="hljs-string">"颜色"</span>,<br>    <span class="hljs-string">"children"</span>: [&#123;<br>        <span class="hljs-string">"spec_value_name"</span>: <span class="hljs-string">"红"</span>,<br>        <span class="hljs-string">"spec_value_image"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-string">"spec_value_id"</span>: <span class="hljs-number">18547</span>,<br>        <span class="hljs-string">"active"</span>: <span class="hljs-string">"selected"</span>,<br>        <span class="hljs-string">"disabled"</span>: <span class="hljs-string">"false"</span><br>    &#125;, &#123;<br>        <span class="hljs-string">"spec_value_name"</span>: <span class="hljs-string">"白"</span>,<br>        <span class="hljs-string">"spec_value_image"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-string">"spec_value_id"</span>: <span class="hljs-number">19167</span>,<br>        <span class="hljs-string">"disabled"</span>: <span class="hljs-string">"false"</span><br>    &#125;],<br>    <span class="hljs-string">"spec_id"</span>: <span class="hljs-number">4</span><br>&#125;, &#123;<br>    <span class="hljs-string">"spec_name"</span>: <span class="hljs-string">"重量"</span>,<br>    <span class="hljs-string">"children"</span>: [&#123;<br>        <span class="hljs-string">"spec_value_name"</span>: <span class="hljs-string">"1吨"</span>,<br>        <span class="hljs-string">"spec_value_image"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-string">"spec_value_id"</span>: <span class="hljs-number">49234</span>,<br>        <span class="hljs-string">"active"</span>: <span class="hljs-string">"selected"</span>,<br>        <span class="hljs-string">"disabled"</span>: <span class="hljs-string">"false"</span><br>    &#125;, &#123;<br>        <span class="hljs-string">"spec_value_name"</span>: <span class="hljs-string">"2吨"</span>,<br>        <span class="hljs-string">"spec_value_image"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-string">"spec_value_id"</span>: <span class="hljs-number">49235</span>,<br>        <span class="hljs-string">"disabled"</span>: <span class="hljs-string">"false"</span><br>    &#125;],<br>    <span class="hljs-string">"spec_id"</span>: <span class="hljs-number">113</span><br>&#125;, &#123;<br>    <span class="hljs-string">"spec_name"</span>: <span class="hljs-string">"大小"</span>,<br>    <span class="hljs-string">"children"</span>: [&#123;<br>        <span class="hljs-string">"spec_value_name"</span>: <span class="hljs-string">"L"</span>,<br>        <span class="hljs-string">"spec_value_image"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-string">"spec_value_id"</span>: <span class="hljs-number">48480</span>,<br>        <span class="hljs-string">"active"</span>: <span class="hljs-string">"selected"</span>,<br>        <span class="hljs-string">"disabled"</span>: <span class="hljs-string">"false"</span><br>    &#125;, &#123;<br>        <span class="hljs-string">"spec_value_name"</span>: <span class="hljs-string">"M"</span>,<br>        <span class="hljs-string">"spec_value_image"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-string">"spec_value_id"</span>: <span class="hljs-number">48481</span>,<br>        <span class="hljs-string">"disabled"</span>: <span class="hljs-string">"false"</span><br>    &#125;],<br>    <span class="hljs-string">"spec_id"</span>: <span class="hljs-number">742</span><br>&#125;]<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNumberArray</span>(<span class="hljs-params">spec</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr1 = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> spec) &#123;<br>        <span class="hljs-keyword">let</span> arr2 = [];<br>        <span class="hljs-keyword">let</span> children = spec[i].children;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j <span class="hljs-keyword">in</span> children) &#123;<br>            <span class="hljs-keyword">let</span> child = children[j].spec_value_id;<br>            arr2.push(child);<br>        &#125;<br>        arr1.push(arr2);<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compose</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">if</span> (!a || a.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> a) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j <span class="hljs-keyword">in</span> b) &#123;<br>            arr.push(a[i] + <span class="hljs-string">','</span> + b[j])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getComposeSpecArray</span>(<span class="hljs-params">numArr</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = compose([])<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; numArr.length; i++) &#123;<br>        result = compose(result, numArr[i])<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSelectSkuBySelectedStatus</span>(<span class="hljs-params">spec</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> spec) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j <span class="hljs-keyword">in</span> spec[i].children) &#123;<br>            <span class="hljs-keyword">let</span> child = spec[i].children[j];<br>            <span class="hljs-keyword">if</span> (child.active &amp;&amp; child.active == <span class="hljs-string">'selected'</span>) &#123;<br>                arr.push(child.spec_value_id);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr.join(<span class="hljs-string">','</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> arr = getNumberArray(spec);<br><span class="hljs-built_in">console</span>.log(arr)<br><span class="hljs-comment">// output: [[18547,19167],[49234,49235],[48480,48481]]</span><br><br><span class="hljs-keyword">let</span> specArr = getComposeSpecArray(arr)<br><span class="hljs-built_in">console</span>.log(specArr);<br><span class="hljs-comment">// output: ["18547,49234,48480", "18547,49234,48481", "18547,49235,48480", "18547,49235,48481", "19167,49234,48480", "19167,49234,48481", "19167,49235,48480", "19167,49235,48481"]</span><br><br><span class="hljs-keyword">let</span> sku = getSelectSkuBySelectedStatus(spec);<br><span class="hljs-built_in">console</span>.log(sku)<br><span class="hljs-comment">// output: '18547,49234,48480'</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getProductId</span>(<span class="hljs-params">products, sku</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> products) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j <span class="hljs-keyword">in</span> products[i]) &#123;<br>            <span class="hljs-keyword">if</span> (j == sku) &#123;<br>                <span class="hljs-keyword">return</span> products[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> productId = getProductId(products, sku)<br><span class="hljs-built_in">console</span>.log(productId)<br><span class="hljs-comment">// output: 947858</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Js文件服务器</title>
    <url>/js/%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Node-js-quick-file-server-static-files-over-HTTP-Stack-Overflow"><a href="#Node-js-quick-file-server-static-files-over-HTTP-Stack-Overflow" class="headerlink" title="Node.js quick file server (static files over HTTP) - Stack Overflow"></a><a href="https://stackoverflow.com/questions/16333790/node-js-quick-file-server-static-files-over-http" target="_blank" rel="noopener">Node.js quick file server (static files over HTTP) - Stack Overflow</a></h2><p>A good “ready-to-use tool” option could be http-server:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">npm install http-server -g<br>sudo ln -sf /home/<span class="hljs-variable">$USER</span>/c/node/bin/http-server  /usr/bin/http-server<br></code></pre></td></tr></table></figure>

<p>To use it:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> D:\Folder<br>http-server<br></code></pre></td></tr></table></figure>

<p>Or, like this:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">http-server D:\Folder<br></code></pre></td></tr></table></figure>

<p>Check it out: <a href="https://github.com/nodeapps/http-server" target="_blank" rel="noopener">https://github.com/nodeapps/http-server</a></p>
<h2 id="serve"><a href="#serve" class="headerlink" title="serve"></a>serve</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">npm i -g serve   // install<br>serve C:/repos            // run with one line?? FTW!!<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack相关</title>
    <url>/js/webpack/</url>
    <content><![CDATA[<ul>
<li><a href="http://www.cnblogs.com/keepfool/p/5678427.html" target="_blank" rel="noopener">Vue.js——60分钟webpack项目模板快速入门 - keepfool - 博客园</a><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 使用vue-webpack-simple模板</span><br>vue init webpack-simple my-webpack-simple-demo <span class="hljs-comment"># webpack-simple是项目模板的名称，my-webpack-simple-demo是你要生成的项目名称。</span><br><br><span class="hljs-built_in">cd</span> my-webpack-simple-demo<br>npm install<br><br>npm run dev<br><br>npm run build<br></code></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 使用vue-webpack模板</span><br>vue init webpack my-webpack-demo <span class="hljs-comment"># webpack是项目模板，my-webpack-demo是项目名称。</span><br><br><span class="hljs-built_in">cd</span> my-webpack-demo<br>npm install<br><br>npm run dev<br><br>npm run build <span class="hljs-comment"># 发布</span><br></code></pre></td></tr></table></figure>


<ul>
<li>视频教程：<a href="http://www.imooc.com/learn/802" target="_blank" rel="noopener">webpack深入与实战</a></li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm-Package</title>
    <url>/js/npm-package.json/</url>
    <content><![CDATA[<h2 id="package-json：The-difference-between-devDependencies-and-dependencies"><a href="#package-json：The-difference-between-devDependencies-and-dependencies" class="headerlink" title="package.json：The difference between devDependencies and dependencies"></a>package.json：The difference between devDependencies and dependencies</h2><blockquote>
<p>If someone is planning on downloading and using your module in their program,<br> then they probably don’t want or need to download and build the external test<br> or documentation framework that you use. In this case,<br> it’s best to list these additional items in a devDependencies hash.</p>
</blockquote>
<ul>
<li><a href="https://blog.csdn.net/u011240877/article/details/76582670" target="_blank" rel="noopener">npm 与 package.json 快速入门教程</a></li>
<li><a href="http://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank" rel="noopener">package.json文件 – JavaScript 标准参考教程（alpha）</a></li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工具</title>
    <url>/js/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<ul>
<li><p><a href="http://www.imooc.com/learn/37" target="_blank" rel="noopener">Fiddler工具使用</a></p>
</li>
<li><p><a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">网站快速成型工具</a></p>
</li>
<li><p>webpack</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序</title>
    <url>/js/%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li><p>本地资源无法通过css获取<br>background-image：可以使用网络图片，或者base64或者使用<code>&lt;image/&gt;</code>标签<br><a href="http://www.wxapp-union.com/thread-910-1-1.html" target="_blank" rel="noopener">http://www.wxapp-union.com/thread-910-1-1.html</a></p>
</li>
<li><p>每个身份证最多注册5个小程序； <a href="https://zhuanlan.zhihu.com/p/30185790" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30185790</a></p>
</li>
</ul>
<ul>
<li><p><code>app.json</code>文件，不可以添加任何注释</p>
</li>
<li><p>页面的<code>.json</code>只能设置 window 相关的配置项，以决定本页面的窗口表现，所以无需写 window 这个键<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html</a></p>
</li>
<li><p><code>前台、后台</code>定义： 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。需要注意的是：只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/app.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/app.html</a></p>
</li>
<li><p>Tip：不要尝试修改页面栈，会导致路由以及页面状态错误。<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.htmlr" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.htmlr</a></p>
</li>
</ul>
<ul>
<li><p>模版中：对象扩展运算符 … 来将一个对象展开<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/data.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/data.html</a><br>  存在变量名相同的情况，后边的会覆盖前面</p>
</li>
<li><p>注意： 花括号和引号之间如果有空格，将最终被解析成为字符串（<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/data.html）" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/data.html）</a>    </p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"&#123;&#123;[1,2,3]&#125;&#125; "</span>&gt;</span><br>  &#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 等价于 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"&#123;&#123;[1,2,3] + ' '&#125;&#125;"</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 其中&#123;&#123;[1,2,3]+''&#125;&#125;="1,2,3 " --&gt;</span> <br>  &#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;block&gt;</code>标签：用来渲染一个包含多节点的结构块；<br>  <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/list.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/list.html</a></p>
</li>
<li><p><code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。<br>  <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/conditional.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/conditional.html</a></p>
</li>
<li><p>一般来说，wx:if 有更高的切换消耗而 hidden 有更高的初始渲染消耗。<br>  因此，如果需要频繁切换的情景下，用 hidden 更好，如果在运行时条件不大可能改变则 wx:if 较好。</p>
</li>
<li><p>事件分为冒泡事件和非冒泡事件：<br>冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递。<br>非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递。<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html</a></p>
</li>
</ul>
<ul>
<li><p>bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。</p>
</li>
<li><p>在布局的时候，通过下面这个特性，将想要布局的页面放在第一个，可以剩下许多时间。</p>
<blockquote>
<p>而写在 pages 字段的第一个页面就是这个小程序的首页(打开小程序看到的第一个页面)。<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/quickstart/basic/framework.html#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/quickstart/basic/framework.html#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8</a></p>
</blockquote>
</li>
<li><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/page.html" target="_blank" rel="noopener">Page 生命周期函数</a></p>
<blockquote>
<p><code>onLoad</code>: 页面加载<br>一个页面只会调用一次，可以在 onLoad 中获取打开当前页面所调用的 query 参数。</p>
</blockquote>
</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin in Action笔记</title>
    <url>/kotlin/kotlininaction/</url>
    <content><![CDATA[<p>Only after understanding the surrounding code can you make the necessary<br>modifications.</p>
<p>Note that omitting the return type is allowed only for functions with an expression<br>body</p>
<p>Note that this example shows the<br>only place in the Kotlin syntax where you’re required to use semicolons: if you define<br>any methods in the enum class, the semicolon separates the enum constant list from the<br>method definitions.</p>
<p>The rule “the last expression in a block is the result” holds in all cases where a block<br>can be used and a result is expected. As you’ll see at the end of this chapter, the same<br>rule works for the try body and catch clauses, and chapter 5 discusses its application to<br>lambda expressions. But as we already mentioned in section 2.2.1, this rule doesn’t hold<br>for regular functions. A function can have either an expression body that can’t be a block,<br>or a block body with explicit return statements inside.<br>p41</p>
<p>Just like many other modern JVM languages, Kotlin doesn’t differentiate between<br>checked and unchecked exceptions. You don’t specify the exceptions thrown by a<br>function, and you may or may not handle any exceptions. This design decision is based<br>on the practice of using checked exceptions in Java. Experience has shown that the Java<br>rules often require a lot of meaningless code to rethrow or ignore exceptions, and the<br>rules don’t consistently protect you from the errors that can happen.<br>p48</p>
<p>Note that extension<br>functions don’t allow you to break encapsulation. Unlike methods defined in the class,<br>extension functions don’t have access to private or protected members of the class.<br>p61</p>
<p>Method overriding in Kotlin works as usual for member functions, but you can’t override<br>an extension function.<br>the function that’s called depends on the static type of the<br>variable being declared, not on the runtime type of the value stored in that variable.<br>p64-p65</p>
<p>Note: If the class has a member function with the same signature as an<br>extension function, the member function always takes precedence.<br>You should keep this in mind when extending the API of classes: if<br>you add a member function with the same signature as an<br>extension function that a client of your class has defined, and they<br>then recompile their code, it will change its meaning and start<br>referring to the new member function.<br>p65<br>//TODO but how to override CharSequence.split, if the member function always takes precedence ???</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>(<span class="hljs-keyword">var</span> c: String) &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getDiffC</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"---<span class="hljs-variable">$c</span>---"</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getDiffD</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"!!!!!<span class="hljs-variable">$c</span>!!!!!"</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> A.<span class="hljs-title">getDiffD</span><span class="hljs-params">()</span></span>: String = <span class="hljs-string">"====<span class="hljs-subst">$&#123;this.c&#125;</span>===="</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    println(A(<span class="hljs-string">"a"</span>).getDiffC())<br>    println(A(<span class="hljs-string">"d"</span>).getDiffD())<br>&#125;<br></code></pre></td></tr></table></figure>


<p>The destructuring declaration feature isn’t limited to pairs. For example, you can<br>assign a map entry to two separate variables, key and value , as well.<br>p69</p>
<p>The to function is an extension function. You can create a pair of any elements,<br>which means it’s an extension to a generic receiver: you can write <code>1 to &quot;one&quot;</code> ,<br><code>&quot;one&quot; to 1</code> , <code>list to list.size()</code> , and so one.<br>Even though the creation of a new map may look like a special construct in Kotlin,<br>it’s a regular function with a concise syntax</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">1</span>.to(<span class="hljs-string">"one)</span><br><span class="hljs-string">// ====equivalent====</span><br><span class="hljs-string">1 to "</span>one<span class="hljs-string">"</span><br></code></pre></td></tr></table></figure>
<p>p70</p>
<p>local functions and extensions<br>Kotlin gives you a cleaner solution: you can nest the functions you’ve extracted in the<br>containing function. This way, you have the structure you need without any extra<br>syntactic overhead. (meaning fun in fun)<br>p75</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>(<span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Int</span>, <span class="hljs-keyword">val</span> name: String, <span class="hljs-keyword">val</span> address: String)<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">saveUser</span><span class="hljs-params">(user: <span class="hljs-type">User</span>)</span></span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">validate</span><span class="hljs-params">(user: <span class="hljs-type">User</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                 value: <span class="hljs-type">String</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                 fieldName: <span class="hljs-type">String</span>)</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (value.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> IllegalArgumentException(<br>                    <span class="hljs-string">"Cannot save user <span class="hljs-subst">$&#123;user.id&#125;</span>: <span class="hljs-variable">$fieldName</span> is empty"</span>)<br>        &#125;<br>    &#125;<br>    validate(user, user.name, <span class="hljs-string">"Name"</span>)<br>    validate(user, user.address, <span class="hljs-string">"Address"</span>)<br><span class="hljs-comment">// Save user to the database</span><br>&#125;<br></code></pre></td></tr></table></figure>


<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>Declaring a class as a <code>data</code> class instructs the compiler to generate several standard methods<br>for this class. You can also avoid writing delegating methods by hand, because the delegation<br>pattern is supported natively in Kotlin.<br>p78</p>
<p>This chapter also describes a new <code>object</code> keyword that declares a class and also<br>creates an instance of the class. The keyword is used to express singleton objects,<br>companion objects, and object expressions<br>p78</p>
<p>Unlike Java, using the override modifier is mandatory in Kotlin<br>p79</p>
<p>Whereas Java’s classes and methods are open by<br>default, Kotlin’s are final by default.<br>If you want to allow the creation of subclasses of a class, you need to mark the class<br>with the open modifier. In addition, you need to add the open modifier to everyproperty<br>or method that can be overridden<br>p82</p>
<p>Note that if you override a member of a base class or interface, the overriding<br>member will also be open by default. If you want to change this and forbid the subclasses<br>of your class from overriding your implementation, you can explicitly mark the<br>overriding member as final.(不像java中的修饰符不能缩小权限，kotlin中可以)<br>p83</p>
<p>The meaning of access modifiers in a class (p84)</p>
<table>
<thead>
<tr>
<th align="left">Modifier</th>
<th align="left">Corresponding member</th>
<th align="left">Comments</th>
</tr>
</thead>
<tbody><tr>
<td align="left">final</td>
<td align="left">Can’t be overridden</td>
<td align="left">Used by default for class members</td>
</tr>
<tr>
<td align="left">open</td>
<td align="left">Can be overridden</td>
<td align="left">Should be specified explicitly</td>
</tr>
<tr>
<td align="left">abstract</td>
<td align="left">Must be overridden</td>
<td align="left">Can be used only in abstract classes; abstract members can’t have an implementation</td>
</tr>
<tr>
<td align="left">override</td>
<td align="left">Overrides a member in a superclass</td>
<td align="left">Overridden member is open by default, if not marked final</td>
</tr>
</tbody></table>
<p>Kotlin offers a new visibility modifier, <code>internal</code>, which means<br>“visible inside a module.” A module is a set of Kotlin files compiled together. It may be<br>an IntelliJ IDEA module, an Eclipse project, a Maven or Gradle project, or a set of files<br>compiled with an invocation of the Ant task.<br>p84</p>
<p>kotlin visibility modifiers (p85)</p>
<table>
<thead>
<tr>
<th align="left">Modifier</th>
<th align="left">Class Member</th>
<th align="left">Top-level declaration</th>
</tr>
</thead>
<tbody><tr>
<td align="left">public(default)</td>
<td align="left">Visible everywhere</td>
<td align="left">Visible everywhere</td>
</tr>
<tr>
<td align="left">internal</td>
<td align="left">Visible in a moudle</td>
<td align="left">Visible in a moudle</td>
</tr>
<tr>
<td align="left">protected</td>
<td align="left">Visible in a subclasses</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">private</td>
<td align="left">Visible in a class</td>
<td align="left">Visible in a file</td>
</tr>
</tbody></table>
<p>This is a case of a general rule that<br>requires all types used in the list of base types and type parameters of a class, or the<br>signature of a method, to be as visible as the class or method itself. This rule ensures that<br>you always have access to all types you might need to invoke the function or extend a<br>class.<br>p85</p>
<p>Note the difference in behavior for the protected modifier in Java and in Kotlin. In<br>Java, you can access a protected member from the same package, but Kotlin doesn’t<br>allow that. In Kotlin, visibility rules are simple, and a protected member is only visible<br>in the class and its subclasses. Also note that extension functions of a class don’t get<br>access to its private or protected members.<br>p85</p>
<p>The difference<br>is that Kotlin nested classes don’t have access to the outer class instance, unless you<br>specifically request that.<br>p86</p>
<p>A nested class in Kotlin with no explicit modifiers is the same as a static nested<br>class in Java. To turn it into an inner class, so that it contains a reference to an outer<br>class, you use the inner modifier.<br>p88</p>
<table>
<thead>
<tr>
<th align="left">Class A declared within another class B</th>
<th align="left">In Java</th>
<th>In Kotlin</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Nested class (doesn’t store a reference to an outer class)</td>
<td align="left">static class A</td>
<td>class A</td>
</tr>
<tr>
<td align="left">Inner class (store a reference to an outer class)</td>
<td align="left">class A</td>
<td>inner class A</td>
</tr>
<tr>
<td align="left"><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br>    <span class="hljs-keyword">inner</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getOuterReference</span><span class="hljs-params">()</span></span>: Outer = <span class="hljs-keyword">this</span><span class="hljs-symbol">@Outer</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></td>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left">p88</td>
<td align="left"></td>
<td></td>
</tr>
</tbody></table>
<p>In Java, as you know, a class can declare one or more constructors. Kotlin is similar, with<br>one additional change: it makes a distinction between a primary constructor (which is<br>usually the main, concise way to initialize a class and is <code>declared outside of the class body</code>)<br>and a secondary constructor (which is <code>declared in the class body</code>). It also allows<br>you to put additional initialization logic in initializer blocks</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// This block of code surrounded by parentheses is called a primary constructor. It serves two</span><br><span class="hljs-comment">// purposes: specifying constructor parameters and defining properties that are initialized by</span><br><span class="hljs-comment">// those parameters.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>(<span class="hljs-keyword">val</span> nickname: String)<br></code></pre></td></tr></table></figure>
<p>p91</p>
<p>If your class has a superclass, the primary constructor also needs to initialize the<br>superclass. You can do so by providing the superclass constructor parameters after the<br>superclass reference in the base class list:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>(<span class="hljs-keyword">val</span> nickname: String) &#123; ... &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwitterUser</span></span>(nickname: String) : User(nickname) &#123; ... &#125;<br></code></pre></td></tr></table></figure>
<p>p93</p>
<p>If you inherit the Button class and don’t provide any constructors, you have to<br>explicitly invoke the constructor of the superclass even if it doesn’t have any parameters:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RadioButton</span>: <span class="hljs-type">Button</span></span>()<br></code></pre></td></tr></table></figure>
<p>That’s why you need empty parentheses after the name of the superclass. Note the<br>difference with interfaces: interfaces don’t have constructors, so if you implement an<br>interface, you never put parentheses after its name in the supertype list.<br>p93</p>
<p>If you want to ensure that your class can’t be instantiated by other code, you have to<br>make the constructor private</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Secretive</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">constructor</span></span>() &#123;&#125;<br><br><span class="hljs-comment">// or</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Secretive</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">constructor</span>()<br>&#125;<br><br><span class="hljs-comment">// or use : companion objects</span><br></code></pre></td></tr></table></figure>
<p>p94</p>
<p><code>secondary constructor</code><br>The below class doesn’t declare a primary constructor (as you can tell because there are no<br>parentheses after the class name in the class header), but it declares two secondary<br>constructors. A secondary constructor is introduced using the <code>constructor</code> keyword<br>You can declare as many secondary constructors as you need.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">View</span> </span>&#123;<br>    <span class="hljs-keyword">constructor</span>(ctx: Context) &#123;<br>        <span class="hljs-comment">// some code</span><br>    &#125;<br><br>    <span class="hljs-keyword">constructor</span>(ctx: Context, attr: AttributeSet) &#123;<br>        <span class="hljs-comment">// some code</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>If you want to extend this class, you can declare the same constructors:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyButton</span> : <span class="hljs-type">View &#123;</span></span><br>    <span class="hljs-keyword">constructor</span>(ctx: Context) : <span class="hljs-keyword">super</span>(ctx) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>    <span class="hljs-keyword">constructor</span>(ctx: Context, attr: AttributeSet) : <span class="hljs-keyword">super</span>(ctx, attr) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>p95</p>
<p>If the class has no primary constructor, then each secondary constructor has to<br>initialize the base class or delegate to another constructor that does so. Thinking in terms<br>of the previous figures, each secondary constructor must have an outgoing arrow starting<br>a path that ends at any constructor of the base class.<br>p96</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>(<span class="hljs-keyword">val</span> name: String) &#123;<br>    <span class="hljs-keyword">var</span> address: String = <span class="hljs-string">"unspecified"</span><br>        <span class="hljs-keyword">set</span>(value: String) &#123;<br>            println(<span class="hljs-string">"""</span><br><span class="hljs-string">                Address was changed for <span class="hljs-variable">$name</span>:</span><br><span class="hljs-string">                "<span class="hljs-variable">$field</span>" -&gt; "<span class="hljs-variable">$value</span>"."""</span>.trimIndent())<br>            field = value<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>In the body of the setter, you use the special identifier field to access the value of<br>the backing field. In a getter, you can only read the value; and in a setter, you can both<br>read and modify it.<br>In the body of the setter, you use the special identifier field to access the value of<br>the backing field. In a getter, you can only read the value; and in a setter, you can both<br>read and modify it.<br>Note that you can redefine only one of the accessors for a mutable property. The<br>getter in the previous example is trivial and just returns the field value, so you didn’t<br>need to redefine it<br>p99</p>
<p>In Kotlin, == is the default way to compare two objects: it compares their<br>values by calling equals under the hood. Thus, if equals is overridden in<br>your class, you can safely compare its instances using == . For reference<br>comparison, you can use the === operator, which works exactly thesame<br>as == in Java.<br>p102</p>
<p>Note that properties that aren’t declared in the primary<br>constructor don’t take part in the equality checks and hashcode calculation.<br>p104</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">- You use the field identifier to reference a property backing field from the accessor body.<br>- Data classes provide compiler-generated equals() , hashCode() , toString() , copy() , and other methods.<br>- Companion objects (along with package-level functions and properties) replace Java’s static method and field definitions.<br>- Companion objects, like other objects, can implement interfaces or have extension functions or properties.<br>- Object expressions are Kotlin’s replacement for Java’s anonymous inner classes, with <br>    added power such as the ability to implement multiple interfaces and to modify the<br>    variables defined in the scope where the object is created.<br></code></pre></td></tr></table></figure>

<h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">&#123;x:<span class="hljs-built_in">Int</span>, y:<span class="hljs-built_in">Int</span> -&gt; x+y&#125;<br></code></pre></td></tr></table></figure>
<p>A lambda expression in Kotlin is always surrounded by curly braces. Note that there<br>are no parentheses around the arguments. The arrow separates the argument list from the<br>body of the lambda.<br>p122</p>
<p>The road of improvement</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>(<span class="hljs-keyword">val</span> name: String, <span class="hljs-keyword">val</span> age: <span class="hljs-built_in">Int</span>)<br><span class="hljs-keyword">val</span> people = listOf(Person(<span class="hljs-string">"lisi"</span>, <span class="hljs-number">18</span>), Person(<span class="hljs-string">"wangwu"</span>, <span class="hljs-number">15</span>))<br>people.maxBy(&#123;p:Person -&gt; p.age&#125;)<br></code></pre></td></tr></table></figure>
<p>In Kotlin, a syntactic convention lets you move a lambda expression out of parentheses<br>if it’s the last argument in a function call.<br>In this example, the lambda is the only argument, so it can be placed<br>after the parentheses:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">people.maxBy() &#123; p: Person -&gt; p.age &#125;<br></code></pre></td></tr></table></figure>
<p>When the lambda is the only argument to a function, you can also remove the empty<br>parentheses from the call:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// If a lambda is the only argument, you’ll definitely want to write it without the parentheses.</span><br>people.maxBy &#123; p: Person -&gt; p.age &#125;<br></code></pre></td></tr></table></figure>
<p>As with local variables, if the type of a lambda parameter can be inferred, you don’t<br>need to specify it explicitly.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">people.maxBy &#123; p -&gt; p.age &#125;<br></code></pre></td></tr></table></figure>
<p>The last simplification you can make in this example is to replace an argument with<br>the default argument name: <code>it</code> . This name is generated if the context expects a lambda<br>with only one argument, and its type can be inferred:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">peopel.maxBy &#123;it.age&#125;<br></code></pre></td></tr></table></figure>
<p>p125</p>
<p>One important difference between Kotlin and Java is that in Kotlin, you aren’t<br>restricted to accessing final variables. You can also modify variables from within a<br>lambda. The next example counts the number of client and server errors in the given set<br>of response status codes:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printProblemCounts</span><span class="hljs-params">(responses: <span class="hljs-type">Collection</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> clientErrors = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">var</span> serverErrors = <span class="hljs-number">0</span><br>    responses.forEach &#123;<br>        <span class="hljs-keyword">if</span> (it.startsWith(<span class="hljs-string">"4"</span>)) &#123;<br>            clientErrors++<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (it.startsWith(<span class="hljs-string">"5"</span>)) &#123;<br>            serverErrors++<br>        &#125;<br>    &#125;<br>    println(<span class="hljs-string">"<span class="hljs-variable">$clientErrors</span> client errors, <span class="hljs-variable">$serverErrors</span> server errors"</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>Note that, by default, the lifetime of a local variable is constrained by the function in<br>which the variable is declared. But if it’s captured by the lambda, the code that uses this<br>variable can be stored and executed later. You may ask how this works. When you<br>capture a final variable, is value is stored together with the lambda code that uses it. For<br>non-final variables, the value is enclosed in a special wrapper that lets you change it, and<br>the reference to the wrapper is stored together with the lambda.<br>p127</p>
<p>An important caveat is that, if a lambda is used as an event handler or is otherwise<br>executed asynchronously, the modifications to local variables will occur only when the<br>lambda is executed. For example, the following code isn’t a correct way to count button<br>clicks:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">tryToCountButtonClicks</span><span class="hljs-params">(button: <span class="hljs-type">Button</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;   <br>    <span class="hljs-keyword">var</span> clicks = <span class="hljs-number">0</span><br>    button.onClick &#123; clicks++ &#125;<br>    <span class="hljs-keyword">return</span> clicks <span class="hljs-comment">// always return 0, you should store the clicks variable </span><br>                  <span class="hljs-comment">// in a location that remains accessible outside of the function</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>p128</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// smaple1</span><br>people.filter &#123; it.age == people.maxBy(Person::age).age &#125; <span class="hljs-comment">// not work well with performance, because calculate maxAge everytime</span><br><br><span class="hljs-comment">// sample2</span><br><span class="hljs-keyword">val</span> maxAge = people.maxBy(Person::age).age <span class="hljs-comment">// work well, only compulate once</span><br>people.filter &#123; it.age == maxAge &#125;<br></code></pre></td></tr></table></figure>
<p>Don’t repeat a calculation if you don’t need to! Simple-looking code using lambda<br>expressions can sometimes obscure the complexity of the underlying operations, so<br>always keep in mind what is happening in the code you write.<br>p133</p>
<p>The entry point for lazy collection operations in Kotlin is the Sequence interface. The<br>interface represents just that: a sequence of elements that can be enumerated one by one.<br>Sequence provides only one method, iterator , that you can use to obtain the values<br>from the sequence.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">people.asSequence() <span class="hljs-comment">// the lazy way more efficient than eager way when there are a million data.</span><br>.map(Person::name)<br>.filter &#123; it.startsWith(<span class="hljs-string">"A"</span>) &#125;<br>.toList()<br></code></pre></td></tr></table></figure>
<p>p138</p>
<p>Note<br>As a rule, use a sequence whenever you have a chain of<br>operations on a large collection. In section 8.2, we’ll discuss why<br>eager operations on regular collections are efficient in Kotlin, in<br>spite of creating intermediate collections. But if the collection<br>contains a large number of elements, the intermediate rearranging<br>of elements costs a lot, so lazy evaluation is preferable.<br>p139</p>
<p>The order of the operations you perform on a collection can affect performance as<br>well.<br>If map goes first, each element is transformed. If you apply filter first,<br>inappropriate elements are filtered out as soon as possible and aren’t transformed.<br>p141</p>
<p>SAM: single abstract method p144</p>
<p>In addition to returning values, SAM constructors are used when you need to store a<br>functional interface instance generated from a lambda in a variable. Suppose you want to<br>reuse one listener for several buttons, as in the following example (in an Android<br>application, this code can be a part of the Activity.onCreate method):</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> listener = OnClickListener &#123; view -&gt;<br>    <span class="hljs-keyword">val</span> text = <span class="hljs-keyword">when</span> (view.id) &#123;<br>        R.id.button1 -&gt; <span class="hljs-string">"First button"</span><br>        R.id.button2 -&gt; <span class="hljs-string">"Second button"</span><br>        <span class="hljs-keyword">else</span> -&gt; <span class="hljs-string">"Unknown button"</span><br>    &#125;<br>    toast(text)<br>&#125;<br>button1.setOnClickListener(listener)<br>button2.setOnClickListener(listener)<br></code></pre></td></tr></table></figure>
<p>p147</p>
<p>Note that there’s no this in a lambda as there is in an anonymousobject:<br>there’s no way to refer to the anonymous class instance into which the<br>lambda is converted. From the compiler’s point of view, the lambda is a<br>block of code, not an object, and you can’t refer to it as an object.<br><code>The &#39;this&#39; reference in a lambda refers to a surrounding class.</code><br>p148</p>
<p>If your event listener needs to unsubscribe itself while handling an event,<br>you can’t use a lambda for that. Use an anonymous object to implement<br>a listener, instead. In an anonymous object, the this keyword refers to<br>the instance of that object, and you can pass it to the API that removes<br>the listener.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span>  anonymousObject: Runnable = <span class="hljs-keyword">object</span> : Runnable &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">"world"</span>)<br>    &#125;<br>&#125;<br>Computation().postponeComputation(<span class="hljs-number">1</span>, anonymousObject)<br></code></pre></td></tr></table></figure>
<p>p148</p>
<h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><p>To reiterate, a type without a question mark denotes that variables of this type can’t<br>store null references. This means all regular types are non- null by default, unless<br>explicitly marked as nullable.<br>p156</p>
]]></content>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin疑点难点</title>
    <url>/kotlin/%E9%9A%BE%E7%82%B9/</url>
    <content><![CDATA[<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>本书中我们大量讲了这个函数。 with 接收一个对象和一个函数，这个函数会作为<br>这个对象的扩展函数执行。这表示我们根据推断可以在函数内使用 this 。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T, R&gt;</span> <span class="hljs-title">with</span><span class="hljs-params">(receiver: <span class="hljs-type">T</span>, f: <span class="hljs-type">T</span>.() -&gt; <span class="hljs-type">R</span>)</span></span>: R = receiver.f()<br></code></pre></td></tr></table></figure>

<p>泛型在这里也是以相同的方式运行： T 代表接收类型， R 代表结果。如你所见，<br>函数通过 f: T.() -&gt; R 声明被定义成了<strong>扩展函数</strong>。这就是为什么我们可以调<br>用 receiver.f() 。<br>kotlin-for-android-developers-zh p188</p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><blockquote>
<p>下面 3 种声明都是等效的 （《kotlin 实战》p81）</p>
</blockquote>
<p><strong>实现 1</strong></p>
<figure class="highlight kt"><table><tr><td class="code"><pre><code class="hljs kt"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">constructor</span></span>(_nickname:String)&#123;<br>    <span class="hljs-keyword">val</span> nickname: String<br>    <span class="hljs-keyword">init</span> &#123;<br>        nickname = _nickname<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>实现 2</strong></p>
<figure class="highlight kt"><table><tr><td class="code"><pre><code class="hljs kt"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>(_nickname:String)&#123;<br>    <span class="hljs-keyword">val</span> nickname = _nickname <span class="hljs-comment">// 如果主构造方法没有注解和可见性修饰符，可以去掉 `constructor` 关键字；也不用放到 init 中，可以在声明的时候初始化了</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>实现 3</strong></p>
<figure class="highlight kt"><table><tr><td class="code"><pre><code class="hljs kt"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>(<span class="hljs-keyword">val</span> nickname: String) <span class="hljs-comment">// “val” 意味着相应的属性会用构造方法的参数来初始化</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Curl</title>
    <url>/linux/curl/</url>
    <content><![CDATA[<ul>
<li><a href="https://ifttl.com/send-http-post-request-with-curl/" target="_blank" rel="noopener">使用 curl 发送 POST 请求的几种方式 - 自由人的 BLOG</a></li>
<li><a href="https://superuser.com/questions/149329/what-is-the-curl-command-line-syntax-to-do-a-post-request" target="_blank" rel="noopener">http - What is the cURL command-line syntax to do a POST request? - Super User</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -X POST -H <span class="hljs-string">"Accept-Language:zh-CN"</span> -H <span class="hljs-string">'x-auth-token:09ef4702-578e-408b-91b2-a40393dfc996'</span> -F <span class="hljs-string">'symbol=BTC/USDT'</span> -F <span class="hljs-string">'price=76.00000'</span> -F <span class="hljs-string">'amount=1002'</span> -F <span class="hljs-string">'direction=BUY'</span> -F <span class="hljs-string">'type=LIMIT_PRICE'</span> http://192.168.1.22:8091/exchange/order/add<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -X GET --data <span class="hljs-string">'&#123;"album_id": "4510261846343990"&#125;'</span> -H <span class="hljs-string">"Content-Type:application/json"</span>  http://localhost:6004/media/output/materiellist<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 相关</title>
    <url>/linux/centos/</url>
    <content><![CDATA[<h2 id="设置主机名称"><a href="#设置主机名称" class="headerlink" title="设置主机名称"></a>设置主机名称</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 设置主机名</span><br>hostnamectl <span class="hljs-built_in">set</span>-hostname yourhostname<br><span class="hljs-comment"># 刷新生效</span><br>bash<br></code></pre></td></tr></table></figure>

<p><strong>查看版本</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cat /etc/redhat-release<br>uname -a<br>uname -r<br></code></pre></td></tr></table></figure>

<h2 id="配置固定-ip"><a href="#配置固定-ip" class="headerlink" title="配置固定 ip"></a>配置固定 ip</h2><p>编辑：<code>vi /etc/sysconfig/network-scripts/ifcfg-ens0s8</code><br>(注意：ens0s8 这个名字要和 <code>ip addr</code>中的名字保持一致，如果不一样修改文件名即可，否则会重启失败)</p>
<p><strong>默认</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">TYPE=Ethernet<br>BOOTPROTO=dhcp<br>DEFROUTE=yes<br>PEERDNS=yes<br>PEERROUTES=yes<br>IPV4_FAILURE_FATAL=no<br>IPV6INIT=yes<br>IPV6_AUTOCONF=yes<br>IPV6_DEFROUTE=yes<br>IPV6_PEERDNS=yes<br>IPV6_PEERROUTES=yes<br>IPV6_FAILURE_FATAL=no<br>NAME=enp0s8<br>UUID=ed6c068c-149c-4678-8a13-d6e34a5d50c9<br>DEVICE=enp0s8<br>ONBOOT=yes<br>DNS1=10.0.2.2<br>DNS2=8.8.8.8<br></code></pre></td></tr></table></figure>

<p><strong>自定义</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">TYPE=Ethernet<br>BOOTPROTO=none<br>DEFROUTE=yes<br>PEERDNS=yes<br>PEERROUTES=yes<br>IPV4_FAILURE_FATAL=no<br>IPV6INIT=yes<br>IPV6_AUTOCONF=yes<br>IPV6_DEFROUTE=yes<br>IPV6_PEERDNS=yes<br>IPV6_PEERROUTES=yes<br>IPV6_FAILURE_FATAL=no<br>NAME=enp0s8<br>UUID=ed6c068c-149c-4678-8a13-d6e34a5d50c9<br>DEVICE=enp0s8<br>ONBOOT=yes<br>IPADDR=172.20.130.84<br>GATEWAY=172.20.130.1<br>DNS1=10.0.2.2<br>DNS2=8.8.8.8<br></code></pre></td></tr></table></figure>

<p>重启： <code>systemctl restart network</code></p>
<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">systemctl status firewalld<br>systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure>

<h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.20.130.84<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/linux/command/</url>
    <content><![CDATA[<h2 id="设置管理员密码"><a href="#设置管理员密码" class="headerlink" title="设置管理员密码"></a>设置管理员密码</h2><p>首次使用管理员登录需要先设置密码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo passwd<br></code></pre></td></tr></table></figure>

<h2 id="定时关机"><a href="#定时关机" class="headerlink" title="定时关机"></a>定时关机</h2><p><a href="http://os.51cto.com/art/201108/287974.htm" target="_blank" rel="noopener">http://os.51cto.com/art/201108/287974.htm</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">shutdown -h 22:30 <span class="hljs-comment"># 在指定时间关机</span><br>shutdown -h 30 <span class="hljs-comment">#30分钟后关机</span><br></code></pre></td></tr></table></figure>

<h2 id="history之后执行指定行的命令"><a href="#history之后执行指定行的命令" class="headerlink" title="history之后执行指定行的命令"></a>history之后执行指定行的命令</h2><blockquote>
<p><code>$ history // 查看命令历史</code><br><code>$ !334  //表示执行第334行的命令</code></p>
</blockquote>
<h2 id="在命令行中用默认程序打开文件"><a href="#在命令行中用默认程序打开文件" class="headerlink" title="在命令行中用默认程序打开文件"></a>在命令行中用默认程序打开文件</h2><p><code>xdg-open { file | URL }</code></p>
<blockquote>
<p><a href="http://blog.chinaunix.net/uid-27025492-id-3376626.html" target="_blank" rel="noopener">Ubuntu下用命令行快速打开各类型文件(转)-bough22-ChinaUnix博客</a></p>
</blockquote>
<h2 id="ps-查看运行的进程"><a href="#ps-查看运行的进程" class="headerlink" title="ps 查看运行的进程"></a>ps 查看运行的进程</h2><p><code>ps -aux | grep vim</code></p>
<h2 id="Ubuntu-系统强制关闭进程。"><a href="#Ubuntu-系统强制关闭进程。" class="headerlink" title="Ubuntu 系统强制关闭进程。"></a>Ubuntu 系统强制关闭进程。</h2><blockquote>
<p>$ps -aux | grep [应用名]  # 抓取指定应用的进程信息，几下 应用的pid<br>$kill -9 [应用的pid]</p>
</blockquote>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>10行的上下文</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cat file.txt | grep -C 10 key_word<br></code></pre></td></tr></table></figure>

<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>查看实时日志： tail -fn 100 log_file_name.out</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">tail --<span class="hljs-built_in">help</span><br>-f: `--follow[HOW]` Output appended data as the file grows;<br>-n: `--lines=[+]NUM` Output the last NUM lines, instead of the last 10;<br></code></pre></td></tr></table></figure>
<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p><a href="https://coolshell.cn/articles/9104.html" target="_blank" rel="noopener">https://coolshell.cn/articles/9104.html</a></p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><code class="hljs scilab">sed -i <span class="hljs-string">"s/'</span>proxy.*/<span class="hljs-string">'proxy'</span>: <span class="hljs-string">'http://proxy.lyloou.com'</span>/g<span class="hljs-string">" eros.dev.js</span><br></code></pre></td></tr></table></figure>

<h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p>用途：不挂断地运行命令。<br>语法：nohup Command [ Arg … ] [　&amp; ]<br>描述：nohup 命令运行由 Command 参数和任何相关的 Arg 参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示”and”的符号）到命令的尾部。<br><a href="http://www.cnblogs.com/allenblogs/archive/2011/05/19/2051136.html" target="_blank" rel="noopener">http://www.cnblogs.com/allenblogs/archive/2011/05/19/2051136.html</a></p>
<h3 id="nohup-不生成-nohup-out的方法"><a href="#nohup-不生成-nohup-out的方法" class="headerlink" title="nohup 不生成 nohup.out的方法"></a>nohup 不生成 nohup.out的方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">nohup java -jar /xxx/xxx/xxx.jar &gt;/dev/null 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure>
<p>关键在于最后的 &gt;/dev/null 2&gt;&amp;1 部分，/dev/null是一个虚拟的空设备（类似物理中的黑洞），任何输出信息被重定向到该设备后，将会石沉大海</p>
<blockquote>
<p>/dev/null 表示将标准输出信息重定向到”黑洞”<br>2&gt;&amp;1 表示将标准错误重定向到标准输出(由于标准输出已经定向到“黑洞”了，即：标准输出此时也是”黑洞”，再将标准错误输出定向到标准输出，相当于错误输出也被定向至“黑洞”)<br><a href="http://www.cnblogs.com/yjmyzz/p/4831182.html" target="_blank" rel="noopener">http://www.cnblogs.com/yjmyzz/p/4831182.html</a></p>
</blockquote>
<h2 id="在某目录及其子目录下所有文件的最前面添加几行文字"><a href="#在某目录及其子目录下所有文件的最前面添加几行文字" class="headerlink" title="在某目录及其子目录下所有文件的最前面添加几行文字"></a>在某目录及其子目录下所有文件的最前面添加几行文字</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">grep -rl <span class="hljs-string">''</span> tmpdir\ | xargs sed -i <span class="hljs-string">"1 i hi 你好吗\n 你知道我是谁吗\n 是的，是我\n"</span><br></code></pre></td></tr></table></figure>
<ul>
<li><a href="https://stackoverflow.com/questions/6758963/find-and-replace-with-sed-in-directory-and-sub-directories" target="_blank" rel="noopener">linux - Find and replace with sed in directory and sub directories - Stack Overflow</a></li>
</ul>
<h2 id="lsof-i-8088"><a href="#lsof-i-8088" class="headerlink" title="lsof -i 8088"></a>lsof -i 8088</h2><h2 id="通过域名查看ip"><a href="#通过域名查看ip" class="headerlink" title="通过域名查看ip"></a>通过域名查看ip</h2><ul>
<li>ping的方式：<code>ping lyloou.com</code></li>
<li>nslookup方式： <code>nslookup lyloou.com</code></li>
</ul>
<h2 id="拉取远程文件"><a href="#拉取远程文件" class="headerlink" title="拉取远程文件"></a>拉取远程文件</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">scp root<span class="hljs-variable">@138</span>.<span class="hljs-number">128.208</span>.<span class="hljs-number">16</span><span class="hljs-symbol">:/root/go/src/github</span>.com/inconshreveable/ngrok/bin/ngrok <span class="hljs-symbol">D:</span>/dd/ngrok<br></code></pre></td></tr></table></figure>
<p>如果出现这个错误：<code>connect to xxxxxxx port 22: Connection refused</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">yum -y install openssh-server<br>service sshd start<br><span class="hljs-comment"># 首先使用命令：ss -lnt查询22号端口是否开启，如下图所示为正常开启，否则要开启22号端口。 如果要修改端口，查看或编辑SSH服务配置文件，使用命令 vi /etc/ssh/sshd.config，进入后把 port 后面默认的22端口改成别的端口即可.</span><br><span class="hljs-comment"># https://www.linuxidc.com/Linux/2017-11/148586.htm</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># http://wiki.ubuntu.org.cn/UbuntuSkills#.E9.80.9A.E8.BF.87ssh.E4.BC.A0.E8.BE.93.E6.96.87.E4.BB.B6</span><br>scp -rp /path/filename username@remoteIP:/path <span class="hljs-comment">#将本地文件拷贝到服务器上</span><br>scp -rp username@remoteIP:/path/filename /path <span class="hljs-comment">#将远程文件从服务器下载到本地</span><br></code></pre></td></tr></table></figure>


<h2 id="df查看硬盘容量"><a href="#df查看硬盘容量" class="headerlink" title="df查看硬盘容量"></a>df查看硬盘容量</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">df -h<br></code></pre></td></tr></table></figure>

<h2 id="how-to-automount-ntfs-partitions"><a href="#how-to-automount-ntfs-partitions" class="headerlink" title="how-to-automount-ntfs-partitions"></a><a href="https://askubuntu.com/questions/46588/how-to-automount-ntfs-partitions" target="_blank" rel="noopener">how-to-automount-ntfs-partitions</a></h2><ul>
<li><p><code>vi /etc/fstab</code> &amp; add below line</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#Windows-Partition</span><br>UUID=&lt;xxxxx&gt; /media/win ntfs rw,auto,users,<span class="hljs-built_in">exec</span>,nls=utf8,<span class="hljs-built_in">umask</span>=003,gid=46,uid=1000    0   0<br></code></pre></td></tr></table></figure>
</li>
<li><p>Finding which disk you will set</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo fdisk -l<br></code></pre></td></tr></table></figure>
</li>
<li><p>Finding the UUID</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo blkid<br></code></pre></td></tr></table></figure>
</li>
<li><p>Check it</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo mount -a</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="查看使用最多的10条命令"><a href="#查看使用最多的10条命令" class="headerlink" title="查看使用最多的10条命令"></a>查看使用最多的10条命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">history</span> | awk <span class="hljs-string">'&#123;print $2&#125;'</span> | sort | uniq -c | sort -k1,1nr | head -10<br></code></pre></td></tr></table></figure>
<p><a href="https://coolshell.cn/articles/8619.html" target="_blank" rel="noopener">https://coolshell.cn/articles/8619.html</a><br><a href="http://blog.51cto.com/huanglianfeng/1381267" target="_blank" rel="noopener">http://blog.51cto.com/huanglianfeng/1381267</a></p>
<h2 id="bash-How-to-use-arguments-from-previous-command-Stack-Overflow"><a href="#bash-How-to-use-arguments-from-previous-command-Stack-Overflow" class="headerlink" title="bash - How to use arguments from previous command? - Stack Overflow"></a><a href="https://stackoverflow.com/questions/4009412/how-to-use-arguments-from-previous-command" target="_blank" rel="noopener">bash - How to use arguments from previous command? - Stack Overflow</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">echo</span> a b c d e <br>a b c d e<br>$ <span class="hljs-built_in">echo</span> !^<br><span class="hljs-built_in">echo</span> a<br>a<br><br>$ <span class="hljs-built_in">echo</span> a b c d e <br>a b c d e<br>$ <span class="hljs-built_in">echo</span> !:1<br><span class="hljs-built_in">echo</span> a<br>a<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">!^      first argument<br>!$      last argument<br>!*      all arguments<br>!:2     second argument<br><br>!:2-3   second to third arguments<br>!:2-$   second to last arguments<br>!:2*    second to last arguments<br>!:2-    second to next to last arguments<br><br>!:0     the <span class="hljs-built_in">command</span><br>!!      repeat the previous line<br></code></pre></td></tr></table></figure>

<h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><ul>
<li><a href="https://www.cnblogs.com/liuhouhou/p/5400540.html" target="_blank" rel="noopener">Linux kill -9 和 kill -15 的区别 - 妖老山黑 - 博客园</a></li>
<li><a href="https://www.zhihu.com/question/23747655" target="_blank" rel="noopener">大家在kill -9前不会尝试kill -15么？ - 知乎</a></li>
</ul>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>查看包含部分文字的上下文</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># -E, --extended-regexp     PATTERN is an extended regular expression</span><br><span class="hljs-comment"># -i, --ignore-case         ignore case distinctions</span><br>-C, --context=NUM         <span class="hljs-built_in">print</span> NUM lines of output context<br>grep -E -i -C 10 <span class="hljs-string">"((exception) | (error))"</span><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Command Editing Shortcuts</title>
    <url>/linux/key/</url>
    <content><![CDATA[<p>移除一句话中的某个单词的词尾：<br>如: select key<cursour_is_here>_error from table1;<br>如果想要删除<code>_error</code>，可以按<code>Alt+D</code>;</cursour_is_here></p>
<p>Bash Shortcuts For Maximum Productivity<br><a href="https://www.skorks.com/2009/09/bash-shortcuts-for-maximum-productivity/" target="_blank" rel="noopener">https://www.skorks.com/2009/09/bash-shortcuts-for-maximum-productivity/</a></p>
<p>SKORKS<br>Bash Shortcuts For Maximum Productivity<br>September 15, 2009 By Alan Skorkin 82 Comments</p>
<p>MaximumIt may or may not surprise you to know that the bash shell has a very rich array of convenient shortcuts that can make your life, working with the command line, a whole lot easier. This ability to edit the command line using shortcuts is provided by the GNU Readline library. This library is used by many other *nix application besides bash, so learning some of these shortcuts will not only allow you to zip around bash commands with absurd ease :), but can also make you more proficient in using a variety of other *nix applications that use Readline. I don’t want to get into Readline too deeply so I’ll just mention one more thing. By default Readline uses emacs key bindings, although it can be configured to use the vi editing mode, I however prefer to learn the default behavior of most applications (I find it makes my life easier not having to constantly customize stuff). If you’re familiar with emacs then many of these shortcuts will not be new to you, so these are mostly for the rest of us :).<br>Command Editing Shortcuts</p>
<pre><code>Ctrl + a – go to the start of the command line
Ctrl + e – go to the end of the command line
Ctrl + k – delete from cursor to the end of the command line
Ctrl + u – delete from cursor to the start of the command line
Ctrl + w – delete from cursor to start of word (i.e. delete backwards one word)
Ctrl + y – paste word or text that was cut using one of the deletion shortcuts (such as the one above) after the cursor
Ctrl + xx – move between start of command line and current cursor position (and back again)
Alt + b – move backward one word (or go to start of word the cursor is currently on)
Alt + f – move forward one word (or go to end of word the cursor is currently on)
Alt + d – delete to end of word starting at cursor (whole word if cursor is at the beginning of word)
Alt + c – capitalize to end of word starting at cursor (whole word if cursor is at the beginning of word)
Alt + u – make uppercase from cursor to end of word
Alt + l – make lowercase from cursor to end of word
Alt + t – swap current word with previous
Ctrl + f – move forward one character
Ctrl + b – move backward one character
Ctrl + d – delete character under the cursor
Ctrl + h – delete character before the cursor
Ctrl + t – swap character under cursor with the previous one</code></pre><p>Command Recall Shortcuts</p>
<pre><code>Ctrl + r – search the history backwards
Ctrl + g – escape from history searching mode
Ctrl + p – previous command in history (i.e. walk back through the command history)
Ctrl + n – next command in history (i.e. walk forward through the command history)
Alt + . – use the last word of the previous command</code></pre><p>Command Control Shortcuts</p>
<pre><code>Ctrl + l – clear the screen
Ctrl + s – stops the output to the screen (for long running verbose command)
Ctrl + q – allow output to the screen (if previously stopped using command above)
Ctrl + c – terminate the command
Ctrl + z – suspend/stop the command</code></pre><p>Bash Bang (!) Commands</p>
<p>Bash also has some handy features that use the ! (bang) to allow you to do some funky stuff with bash commands.</p>
<pre><code>!! – run last command
!blah – run the most recent command that starts with ‘blah’ (e.g. !ls)
!blah:p – print out the command that !blah would run (also adds it as the latest command in the command history)
!$ – the last word of the previous command (same as Alt + .)
!$:p – print out the word that !$ would substitute
!* – the previous command except for the last word (e.g. if you type ‘find some_file.txt /‘, then !* would give you ‘find some_file.txt‘)
!*:p – print out what !* would substitute</code></pre>]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】interview</title>
    <url>/linux/interview/</url>
    <content><![CDATA[<h2 id="3-Top-10-Linux-Job-Interview-Questions-YouTube"><a href="#3-Top-10-Linux-Job-Interview-Questions-YouTube" class="headerlink" title="(3) Top 10 Linux Job Interview Questions - YouTube"></a><a href="https://www.youtube.com/watch?v=l0QGLMwR-lY" target="_blank" rel="noopener">(3) Top 10 Linux Job Interview Questions - YouTube</a></h2><p>Can you answer the 10 most popular Linux tech job interview questions?<br>0:00 Introduction<br>0:53 Tech Phone screens<br>1:50 How to check the kernel version of a Linux system?</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">man uname<br><br>uname -a <span class="hljs-comment"># everything</span><br>uname -rsm<br></code></pre></td></tr></table></figure>

<p>2:50 How to see the current IP address on Linux?</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">ifconfig<br><br>ip addr<br>ip addr show eth0<br></code></pre></td></tr></table></figure>

<p>4:03 How to check for free disk space in Linux?</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">man df<br>df -ah<br><br>df -T -h<br><span class="hljs-comment"># ?????</span><br>du -sh * | grep G<br></code></pre></td></tr></table></figure>

<p>6:33 How to check the size of a directory in Linux?</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">man du<br>du -sh directory_name/<br></code></pre></td></tr></table></figure>

<p>4:55 How to see if a Linux service is running?</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">service udev status<br>systemctl status udev<br></code></pre></td></tr></table></figure>

<p>7:02 How to check for open ports in Linux?</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">man netstat<br>netstat -tulpn<br>sudo !! <span class="hljs-comment"># show PID/Program name</span><br></code></pre></td></tr></table></figure>

<p>9:48 How to check Linux process information (CPU usage, memory, user information, etc.)?</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">ps -aux | grep ngrok<br>top<br>htop<br></code></pre></td></tr></table></figure>

<p>11:49 How to deal with mounts in Linux</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">ls /mnt<br>mount /dev/sdb2 /mnt<br>less /etc/fstab<br></code></pre></td></tr></table></figure>

<p>13:51 Man pages<br>15:04 Other resources</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】frps内网穿透软件</title>
    <url>/linux/frps/</url>
    <content><![CDATA[<p>frps 是一个优秀的内网穿透软件。</p>
<p>frps 下载安装：<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a></p>
<p><strong>服务端:</strong> <code>./frps -c ./frps.ini</code></p>
<p>frps.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_addr</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-attr">bind_udp_port</span> = <span class="hljs-number">7001</span><br><br><span class="hljs-attr">dashboard_port</span> = <span class="hljs-number">7500</span><br><span class="hljs-attr">dashboard_user</span> = admin<br><span class="hljs-attr">dashboard_pwd</span> = admin<br><br><span class="hljs-attr">vhost_http_port</span> = <span class="hljs-number">2780</span><br><span class="hljs-attr">subdomain_host</span> = frps.example.com<br></code></pre></td></tr></table></figure>

<p><strong>客户端:</strong> <code>./frpc -c ./frpc.ini</code></p>
<p>frpc.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = xx.xx.xx.xx<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">admin_addr</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">admin_port</span> = <span class="hljs-number">7400</span><br><br><span class="hljs-section">[ssh]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">7022</span><br><br><span class="hljs-section">[web]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">2780</span><br><span class="hljs-attr">subdomain</span> = <span class="hljs-literal">off</span>ice<br></code></pre></td></tr></table></figure>

<p>访问服务器端的 dashboard 查看统计信息: <code>http://frps.example.com:7500/</code></p>
<p>访问内网 ssh： <code>ssh -oPort=7022 test@x.x.x.x</code><br>通过浏览器访问内网机器: <code>http://office.frps.example.com:2780/</code></p>
<h2 id="配置自动启动"><a href="#配置自动启动" class="headerlink" title="配置自动启动"></a>配置自动启动</h2><p>安装 supervisor</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">apt install supervisor<br><br><span class="hljs-comment"># 查看 supervisor 状态</span><br>service supervisor status<br></code></pre></td></tr></table></figure>

<p>添加 frps 配置：<code>vi /etc/supervisor/conf.d/frps.conf</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">[program:frps]<br><span class="hljs-built_in">command</span>=/root/c/frp/frps -c /root/c/frp/frps.ini<br>autostart=<span class="hljs-literal">true</span><br>autorestart=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<p>可以依次运行下面操作加载 新加入的 frps</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 告诉 supervisor 新加了配置</span><br>supervisorctl reread<br><br><span class="hljs-comment"># 让 supervisor 启动 frps</span><br>supervisorctl update<br></code></pre></td></tr></table></figure>

<p>输入 supervisorctl 查看 frps 是否已运行</p>
<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/202202082113352.png" alt="202202082113352"></p>
<p>start 和 stop frps<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/202202082114908.png" alt="202202082114908"></p>
<p>设置 supervisor 开机启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> supervisor.service<br>systemctl daemon-reload<br></code></pre></td></tr></table></figure>

<p>为 supervisor 添加 dashboard，通过 9001 来访问：</p>
<p><code>vi /etc/supervisor/supervisord.conf</code> 添加下面代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">[inet_http_server]<br>port=*:9001<br>username=admin<br>password=admin<br></code></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/202202082135628.png" alt="202202082135628"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a></p>
<p><a href="https://www.jianshu.com/p/219553bfeca9" target="_blank" rel="noopener">通过 frp 实现访问内网 ssh 与 http 简明教程 - 简书</a></p>
<p><a href="https://www.atlantic.net/vps-hosting/how-to-install-and-configure-supervisor-on-ubuntu-20-04/" target="_blank" rel="noopener">How to Install and Configure Supervisor on Ubuntu 20.04 | Atlantic.Net</a></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[program:nginx]</span><br><span class="hljs-attr">command</span>=/usr/sbin/nginx -g <span class="hljs-string">"daemon off;"</span><br><span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">startretries</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">numprocs</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">startsecs</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">process_name</span>=%(program_name)s_%(process_num)<span class="hljs-number">02</span>d<br><span class="hljs-attr">stderr_logfile</span>=/var/log/supervisor/%(program_name)s_stderr.log<br><span class="hljs-attr">stderr_logfile_maxbytes</span>=<span class="hljs-number">10</span>MB<br><span class="hljs-attr">stdout_logfile</span>=/var/log/supervisor/%(program_name)s_stdout.log<br><span class="hljs-attr">stdout_logfile_maxbytes</span>=<span class="hljs-number">10</span>MB<br></code></pre></td></tr></table></figure>

<p><a href="https://www.92ez.com/?action=show&id=23484" target="_blank" rel="noopener">使用 supervisor 设置服务端 frp 开机启动 - 一只猿 - 前端攻城尸 | 安全研究员 | 硬件控 | 业余极客 | 开源拥护者</a></p>
<p><a href="https://www.bookstack.cn/read/frp/README_zh.md" target="_blank" rel="noopener">frp - 《frp 中文文档》 - 书栈网 · BookStack</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux管理工具</title>
    <url>/linux/manager/</url>
    <content><![CDATA[<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="supervisor-进程管理工具"><a href="#supervisor-进程管理工具" class="headerlink" title="supervisor 进程管理工具"></a>supervisor 进程管理工具</h2><ul>
<li><a href="http://supervisord.org/" target="_blank" rel="noopener">Supervisor: A Process Control System — Supervisor 4.0.3 documentation</a></li>
<li><a href="https://blog.csdn.net/xyang81/article/details/51555473" target="_blank" rel="noopener">Supervisor 安装与配置（Linux/Unix 进程管理工具） - CSDN 博客</a></li>
<li><a href="https://www.cnblogs.com/smail-bao/p/5673434.html" target="_blank" rel="noopener">supervisor - BigBao 的博客 - 博客园</a></li>
</ul>
<h1 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h1><h2 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">df -a <span class="hljs-comment">#  显示目前在Linux系统上的文件系统的磁盘使用情况统计</span><br>du -sh * <span class="hljs-comment"># 显示当前目录或文件所占用的磁盘空间. -s表示总计，-h是以K，M，G为单位，提高信息的可读性</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">/var/<span class="hljs-built_in">log</span>/journal/<br>journalctl --vacuum-size=10M<br>journalctl --disk-usage<br><span class="hljs-comment"># https://blog.csdn.net/ithomer/article/details/89530790</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看某个目录的文件大小并排序（单位为MB）</span><br>du -hm --max-depth=1 /var/ | sort -n<br></code></pre></td></tr></table></figure>

<h2 id="自动挂载-E-盘"><a href="#自动挂载-E-盘" class="headerlink" title="自动挂载 E 盘"></a><a href="https://askubuntu.com/questions/46588/how-to-automount-ntfs-partitions" target="_blank" rel="noopener">自动挂载 E 盘</a></h2><ul>
<li><code>vi /etc/fstab</code> &amp; add below line</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#Windows-Partition</span><br>UUID=0004D1FE0007434B /home/lou/e ntfs rw,auto,users,<span class="hljs-built_in">exec</span>,nls=utf8,<span class="hljs-built_in">umask</span>=003,gid=46,uid=1000    0   0<br></code></pre></td></tr></table></figure>

<ul>
<li>Finding which disk you will set</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo fdisk -l<br></code></pre></td></tr></table></figure>

<ul>
<li>Finding the UUID</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo blkid<br></code></pre></td></tr></table></figure>

<ul>
<li>Check it</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo mount -a</span><br></code></pre></td></tr></table></figure>

<p>设置 image:</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//mirros.aliyun.com/ubuntu</span><br></code></pre></td></tr></table></figure>

<h2 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h2><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><ul>
<li>修改文件的所有者和所属组：</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">sudo chown -R OWNER:<span class="hljs-keyword">GROUP</span> <span class="hljs-title">/www</span><br></code></pre></td></tr></table></figure>

<ul>
<li><a href="http://blog.51cto.com/jschu/1722959" target="_blank" rel="noopener">修改用户所在组，group，usermod-J S Chu 的技术家园-51CTO 博客</a></li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">usermod</span> <span class="hljs-string">-g 用户组 用户名</span><br>    <span class="hljs-attr">强制修改用户所在组</span><br><span class="hljs-attr">usermod</span> <span class="hljs-string">-a -G 用户组 用户名</span><br>    <span class="hljs-attr">把某个用户添加进某个组</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Samba</title>
    <url>/linux/samba/</url>
    <content><![CDATA[<p><a href="https://tutorials.ubuntu.com/tutorial/install-and-configure-samba#0" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/install-and-configure-samba#0</a></p>
<p><a href="https://blog.csdn.net/wbaction/article/details/72758673" target="_blank" rel="noopener">https://blog.csdn.net/wbaction/article/details/72758673</a></p>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get install samba<br></code></pre></td></tr></table></figure>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo vim /etc/samba/smb.conf<br></code></pre></td></tr></table></figure>

<p>添加在后面</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[smbshare]</span><br>    comment = samba home directory <br>    path = /home/user/w/smbshare<br>    public = yes<br>    browseable = yes<br>    public = yes<br>    read only = no<br>    valid users = user<br>    create mask = 0777<br>    directory mask = 0777 <br>    force user = nobody<br>    force group = nogroup<br>    available = yes<br>```    <br><br>```sh<br>chmod 777 /home/user/w/smbshare<br></code></pre></td></tr></table></figure>

<h2 id="add-user"><a href="#add-user" class="headerlink" title="add user"></a>add user</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo smbpasswd -a <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure>

<h2 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo service smbd restart<br></code></pre></td></tr></table></figure>

<h2 id="uninstall"><a href="#uninstall" class="headerlink" title="uninstall"></a>uninstall</h2><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">sudo apt <span class="hljs-built_in">remove</span> <span class="hljs-comment">--purge samba samba-common</span><br></code></pre></td></tr></table></figure>

<h2 id="reinstall"><a href="#reinstall" class="headerlink" title="reinstall"></a>reinstall</h2><p>sudo apt remove –purge samba samba-common<br>sudo apt install samba</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】shell</title>
    <url>/linux/shell/</url>
    <content><![CDATA[<ul>
<li><a href="https://blog.csdn.net/u012373815/article/details/62076793" target="_blank" rel="noopener">shell 基础 $(cd <code>dirname $0</code>;pwd) - 哎幽的成长 - CSDN 博客</a></li>
</ul>
<p>在/home/admin/test/下新建 test.sh 内容如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> `dirname <span class="hljs-variable">$0</span>`<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">pwd</span>`<br></code></pre></td></tr></table></figure>

<p>然后返回到/home/admin/执行<br><code>sh test/test.sh</code><br>运行结果:<br><code>/home/admin/test</code></p>
<h2 id="查看网络连接数情况"><a href="#查看网络连接数情况" class="headerlink" title="查看网络连接数情况"></a>查看网络连接数情况</h2><p>netstat -an|awk ‘/tcp/ {print $6}’|sort|uniq -c</p>
<h2 id="查看一下你最常用的-10-个命令"><a href="#查看一下你最常用的-10-个命令" class="headerlink" title="查看一下你最常用的 10 个命令"></a>查看一下你最常用的 10 个命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cat .bash_history | sort | uniq -c | sort -rn | head -n 10<br></code></pre></td></tr></table></figure>

<h2 id="查看端口号占用情况"><a href="#查看端口号占用情况" class="headerlink" title="查看端口号占用情况"></a>查看端口号占用情况</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">ss -nelp | grep 8080<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Tmux</title>
    <url>/linux/tmux/</url>
    <content><![CDATA[<h2 id="install-on-Ubuntu"><a href="#install-on-Ubuntu" class="headerlink" title="install on Ubuntu"></a>install on Ubuntu</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Steps to build and install tmux from source on Ubuntu.</span><br><span class="hljs-comment"># Takes &lt; 25 seconds on EC2 env [even on a low-end config instance].</span><br>VERSION=2.8<br>sudo apt-get -y remove tmux<br>sudo apt-get -y install wget tar libevent-dev libncurses-dev<br>wget https://github.com/tmux/tmux/releases/download/<span class="hljs-variable">$&#123;VERSION&#125;</span>/tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span>.tar.gz<br>tar xf tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span>.tar.gz<br>rm -f tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span>.tar.gz<br><span class="hljs-built_in">cd</span> tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span><br>./configure<br>make<br>sudo make install<br><span class="hljs-built_in">cd</span> -<br>sudo rm -rf /usr/<span class="hljs-built_in">local</span>/src/tmux-*<br>sudo mv tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span> /usr/<span class="hljs-built_in">local</span>/src<br><br><span class="hljs-comment">## Logout and login to the shell again and run.</span><br>tmux -V<br></code></pre></td></tr></table></figure>

<h2 id="install-on-centos"><a href="#install-on-centos" class="headerlink" title="install on centos"></a>install on centos</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># [Install tmux 2.8 on centos 7](https://gist.github.com/pokev25/4b9516d32f4021d945a140df09bf1fde)</span><br><span class="hljs-comment"># Install tmux 2.8 on Centos</span><br>VERSION=2.8<br><br><span class="hljs-comment"># install deps</span><br>yum install gcc kernel-devel make ncurses-devel<br><br><span class="hljs-comment"># DOWNLOAD SOURCES FOR LIBEVENT AND MAKE AND INSTALL</span><br>curl -LOk https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz<br>tar -xf libevent-2.1.8-stable.tar.gz<br><span class="hljs-built_in">cd</span> libevent-2.1.8-stable<br>./configure --prefix=/usr/<span class="hljs-built_in">local</span><br>make<br>make install<br><br><span class="hljs-comment"># DOWNLOAD SOURCES FOR TMUX AND MAKE AND INSTALL</span><br><br>curl -LOk https://github.com/tmux/tmux/releases/download/<span class="hljs-variable">$&#123;VERSION&#125;</span>/tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span>.tar.gz<br>tar -xf tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span>.tar.gz<br>rm -f tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span>.tar.gz<br><span class="hljs-built_in">cd</span> tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span><br>LDFLAGS=<span class="hljs-string">"-L/usr/local/lib -Wl,-rpath=/usr/local/lib"</span> ./configure --prefix=/usr/<span class="hljs-built_in">local</span><br>make<br>make install<br><span class="hljs-built_in">cd</span> -<br>sudo rm -rf /usr/<span class="hljs-built_in">local</span>/src/tmux-*<br>sudo mv tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span> /usr/<span class="hljs-built_in">local</span>/src<br><br><span class="hljs-comment"># pkill tmux</span><br><span class="hljs-comment"># close your terminal window (flushes cached tmux executable)</span><br><span class="hljs-comment"># open new shell and check tmux version</span><br>tmux -V<br></code></pre></td></tr></table></figure>

<h2 id="Tmux-快捷键-amp-速查表"><a href="#Tmux-快捷键-amp-速查表" class="headerlink" title="Tmux 快捷键 &amp; 速查表"></a><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7" target="_blank" rel="noopener">Tmux 快捷键 &amp; 速查表</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs conf">bind r source-file ~&#x2F;.tmux.conf \; display-message &quot;Config reloaded&quot;<br><br>bind &#39;&quot;&#39; split-window -c &#39;#&#123;pane_current_path&#125;&#39;<br>bind &#39;%&#39; split-window -h -c &#39;#&#123;pane_current_path&#125;&#39;<br><br>bind Escape copy-mode<br>bind-key -Tcopy-mode-vi &#39;v&#39; send -X begin-selection<br>bind-key -Tcopy-mode-vi &#39;y&#39; send -X copy-selection<br>unbind p<br>bind p pasteb<br>setw -g mode-keys vi      # Vi风格选择文本<br># set-window-option -g mode-keys vi<br><br># https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;17445100&#x2F;getting-back-old-copy-paste-behaviour-in-tmux-with-mouse<br>set -g mouse off # 不启用鼠标（启用鼠标会导致无法复制到系统）<br><br>########### myself ##########<br># select panel<br>bind k selectp -U<br>bind j selectp -D<br>bind h selectp -L<br>bind l selectp -R<br><br>set-option -g default-shell &#x2F;bin&#x2F;zsh<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://superuser.com/questions/428016/how-do-i-rename-a-session-in-tmux" target="_blank" rel="noopener">How do I rename a session in tmux? - Super User</a><br><code>Ctrl</code> + <code>B</code>, <code>$</code></li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>【Shell】ssh</title>
    <url>/linux/ssh/</url>
    <content><![CDATA[<h2 id="connection-refused"><a href="#connection-refused" class="headerlink" title="connection refused"></a>connection refused</h2><p><a href="https://askubuntu.com/questions/30080/how-to-solve-connection-refused-errors-in-ssh-connection" target="_blank" rel="noopener">https://askubuntu.com/questions/30080/how-to-solve-connection-refused-errors-in-ssh-connection</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get install openssh-server openssh-client<br></code></pre></td></tr></table></figure>

<h2 id="将-ssh-keys-复制到-user-host-以启用无密码-SSH-登录。"><a href="#将-ssh-keys-复制到-user-host-以启用无密码-SSH-登录。" class="headerlink" title="将 ssh keys 复制到 user@host 以启用无密码 SSH 登录。"></a>将 ssh keys 复制到 user@host 以启用无密码 SSH 登录。</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-variable">$ssh</span>-copy-id user@host<br></code></pre></td></tr></table></figure>

<h2 id="将本地的文本文件保存到远程服务端中"><a href="#将本地的文本文件保存到远程服务端中" class="headerlink" title="将本地的文本文件保存到远程服务端中"></a>将本地的文本文件保存到远程服务端中</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cat ~/.ssh/id_rsa.pub | ssh user@123.45.56.78 <span class="hljs-string">"mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt;  ~/.ssh/authorized_keys"</span><br>https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2<br></code></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.howtogeek.com/168147/add-public-ssh-key-to-remote-server-in-a-single-command/" target="_blank" rel="noopener">Add Public SSH Key to Remote Server in a Single Command</a></li>
</ul>
<h2 id="bash-How-can-I-ssh-directly-to-a-particular-directory-Stack-Overflow"><a href="#bash-How-can-I-ssh-directly-to-a-particular-directory-Stack-Overflow" class="headerlink" title="bash - How can I ssh directly to a particular directory? - Stack Overflow"></a><a href="https://stackoverflow.com/questions/626533/how-can-i-ssh-directly-to-a-particular-directory" target="_blank" rel="noopener">bash - How can I ssh directly to a particular directory? - Stack Overflow</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">ssh -t xxx.xxx.xxx.xxx <span class="hljs-string">"cd /directory_wanted; bash"</span><br></code></pre></td></tr></table></figure>

<h2 id="How-to-enter-ssh-password-using-bash"><a href="#How-to-enter-ssh-password-using-bash" class="headerlink" title="How to enter ssh password using bash? "></a><a href="https://stackoverflow.com/questions/16928004/how-to-enter-ssh-password-using-bash" target="_blank" rel="noopener">How to enter ssh password using bash? </a></h2><blockquote>
<p>Create a new keypair: (go with the defaults)<br><code>ssh-keygen</code></p>
</blockquote>
<blockquote>
<p>Copy the public key to the server: (password for the last time)<br><code>ssh-copy-id user@my.server.com</code></p>
</blockquote>
<blockquote>
<p>From now on the server should recognize your key and not ask you for the password anymore:<br><code>ssh user@my.server.com</code></p>
</blockquote>
<h2 id="设置ngrok域名"><a href="#设置ngrok域名" class="headerlink" title="设置ngrok域名"></a>设置ngrok域名</h2><ul>
<li>ngrok -proto=tcp 22</li>
<li>ssh -p 3894 <a href="mailto:lilou@ngrok.lyloou.com">lilou@ngrok.lyloou.com</a></li>
<li><a href="https://www.zhihu.com/question/27771692" target="_blank" rel="noopener">如何远程登录家里的Ubuntu电脑(命令行模式)？</a></li>
<li><a href="https://blog.csdn.net/sethqqq/article/details/77033154" target="_blank" rel="noopener">https://blog.csdn.net/sethqqq/article/details/77033154</a></li>
</ul>
<h2 id="ssh-connect-to-host-localhost-port-22-Connection-refused"><a href="#ssh-connect-to-host-localhost-port-22-Connection-refused" class="headerlink" title="ssh: connect to host localhost port 22: Connection refused"></a><a href="https://blog.csdn.net/jszhangyili/article/details/8881807" target="_blank" rel="noopener">ssh: connect to host localhost port 22: Connection refused</a></h2><p>错误原因：<br>1.sshd 未安装<br>2.sshd 未启动<br>3.防火墙<br>解决方法：<br>1.确定安装sshd:<br><code>$ sudo apt-get install openssh-server</code><br>2.启动sshd:<br><code>$ sudo net start sshd</code><br>3.检查防火墙设置,关闭防火墙：<br><code>$ sudo ufw disable</code><br>检验方法，输入命令：<br><code>$ ssh localhost</code><br>若成功，则表示安装成功，且连接通过；<br>但是有的时候虽然成功了但是还是会出现Connection refused 问题。<br>运行 ps -e | grep ssh，查看是否有sshd进程：<br>有时候虽然可以看到sshd 但是还是不能连接成功<br>这时候就要想到重新启动一下：sudo service ssh restart</p>
<h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ftp</title>
    <url>/linux/ftp/</url>
    <content><![CDATA[<p><a href="https://hostadvice.com/how-to/how-to-install-and-configure-vsftpd-on-ubuntu-18-04/" target="_blank" rel="noopener">How to Install and Configure vsftpd on Ubuntu 18.04 | HostAdvice</a></p>
<p><a href="https://blog.csdn.net/soslinken/article/details/79304076" target="_blank" rel="noopener">ubuntu 使用vsftpd 创建FTP服务（用户名密码登录，限制列出目录）_迦蓝叶的博客-CSDN博客_ubuntu vsftpd添加用户</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu相关</title>
    <url>/linux/ubuntu/</url>
    <content><![CDATA[<h1 id="Ubuntu-更换阿里云软件源"><a href="#Ubuntu-更换阿里云软件源" class="headerlink" title="Ubuntu 更换阿里云软件源"></a>Ubuntu 更换阿里云软件源</h1><h2 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">sudo <span class="hljs-keyword">cp</span> /etc/apt/sources<span class="hljs-meta">.list</span> /etc/apt/sources<span class="hljs-meta">.list</span>.bak<br></code></pre></td></tr></table></figure>

<h2 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h2><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-keyword">vim</span> /etc/apt/sources.<span class="hljs-keyword">list</span><br></code></pre></td></tr></table></figure>

<p>将 source.list 文件内容替换成下面的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-security main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-updates main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-proposed main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-backports main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-security main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-updates main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-proposed main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> trusty-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure>

<h2 id="3-更新"><a href="#3-更新" class="headerlink" title="3. 更新"></a>3. 更新</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure>

<p><a href="https://developer.aliyun.com/article/704603" target="_blank" rel="noopener">Ubuntu 更换阿里云软件源-阿里云开发者社区</a></p>
<h2 id="默认源"><a href="#默认源" class="headerlink" title="默认源"></a>默认源</h2><figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># deb cdrom:[Ubuntu 18.04.3 LTS _Bionic Beaver_ - Release amd64 (20190805)]/ bionic main restricted</span><br><br><span class="hljs-meta"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span><br><span class="hljs-meta"># newer versions of the distribution.</span><br>deb http:<span class="hljs-comment">//us.archive.ubuntu.com/ubuntu/ bionic main restricted</span><br><span class="hljs-meta"># deb-src http://us.archive.ubuntu.com/ubuntu/ bionic main restricted</span><br><br><span class="hljs-meta">## Major bug fix updates produced after the final release of the</span><br><span class="hljs-meta">## distribution.</span><br>deb http:<span class="hljs-comment">//us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted</span><br><span class="hljs-meta"># deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted</span><br><br><span class="hljs-meta">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><br><span class="hljs-meta">## team. Also, please note that software in universe WILL NOT receive any</span><br><span class="hljs-meta">## review or updates from the Ubuntu security team.</span><br>deb http:<span class="hljs-comment">//us.archive.ubuntu.com/ubuntu/ bionic universe</span><br><span class="hljs-meta"># deb-src http://us.archive.ubuntu.com/ubuntu/ bionic universe</span><br>deb http:<span class="hljs-comment">//us.archive.ubuntu.com/ubuntu/ bionic-updates universe</span><br><span class="hljs-meta"># deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-updates universe</span><br><br><span class="hljs-meta">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><br><span class="hljs-meta">## team, and may not be under a free licence. Please satisfy yourself as to</span><br><span class="hljs-meta">## your rights to use the software. Also, please note that software in</span><br><span class="hljs-meta">## multiverse WILL NOT receive any review or updates from the Ubuntu</span><br><span class="hljs-meta">## security team.</span><br>deb http:<span class="hljs-comment">//us.archive.ubuntu.com/ubuntu/ bionic multiverse</span><br><span class="hljs-meta"># deb-src http://us.archive.ubuntu.com/ubuntu/ bionic multiverse</span><br>deb http:<span class="hljs-comment">//us.archive.ubuntu.com/ubuntu/ bionic-updates multiverse</span><br><span class="hljs-meta"># deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-updates multiverse</span><br><br><span class="hljs-meta">## N.B. software from this repository may not have been tested as</span><br><span class="hljs-meta">## extensively as that contained in the main release, although it includes</span><br><span class="hljs-meta">## newer versions of some applications which may provide useful features.</span><br><span class="hljs-meta">## Also, please note that software in backports WILL NOT receive any review</span><br><span class="hljs-meta">## or updates from the Ubuntu security team.</span><br>deb http:<span class="hljs-comment">//us.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="hljs-meta"># deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><br><span class="hljs-meta">## Uncomment the following two lines to add software from Canonical's</span><br><span class="hljs-meta">## 'partner' repository.</span><br><span class="hljs-meta">## This software is not part of Ubuntu, but is offered by Canonical and the</span><br><span class="hljs-meta">## respective vendors as a service to Ubuntu users.</span><br><span class="hljs-meta"># deb http://archive.canonical.com/ubuntu bionic partner</span><br><span class="hljs-meta"># deb-src http://archive.canonical.com/ubuntu bionic partner</span><br><br>deb http:<span class="hljs-comment">//security.ubuntu.com/ubuntu bionic-security main restricted</span><br><span class="hljs-meta"># deb-src http://security.ubuntu.com/ubuntu bionic-security main restricted</span><br>deb http:<span class="hljs-comment">//security.ubuntu.com/ubuntu bionic-security universe</span><br><span class="hljs-meta"># deb-src http://security.ubuntu.com/ubuntu bionic-security universe</span><br>deb http:<span class="hljs-comment">//security.ubuntu.com/ubuntu bionic-security multiverse</span><br><span class="hljs-meta"># deb-src http://security.ubuntu.com/ubuntu bionic-security multiverse</span><br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_34039018/article/details/103837158" target="_blank" rel="noopener">Ubuntu18.04 中默认的软件源 sources.list_谷永普的博客-CSDN 博客</a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"># 默认注释了源码镜像以提高 apt <span class="hljs-keyword">update</span> 速度，如有需要可自行取消注释<br><span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic main restricted universe multiverse<br># <span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic main restricted universe multiverse<br><span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-updates main restricted universe multiverse<br># <span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-updates main restricted universe multiverse<br><span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-backports main restricted universe multiverse<br># <span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-backports main restricted universe multiverse<br><span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-security main restricted universe multiverse<br># <span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-security main restricted universe multiverse<br><br># 预发布软件源，不建议启用<br># <span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-proposed main restricted universe multiverse<br># <span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/fanqisoft/p/10753092.html" target="_blank" rel="noopener">Ubuntu18.04 更换官方默认更新源 sources.list - SpringCore - 博客园</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>学习资料</title>
    <url>/linux/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<p><a href="http://mingxinglai.com/cn/2013/01/skills-of-shell/" target="_blank" rel="noopener">一堆shell脚本技巧 | 赖明星</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim</title>
    <url>/linux/vim/</url>
    <content><![CDATA[<h2 id="How-to-change-visudo-editor-from-nano-to-vim"><a href="#How-to-change-visudo-editor-from-nano-to-vim" class="headerlink" title="How to change visudo editor from nano to vim?"></a><a href="https://askubuntu.com/questions/539243/how-to-change-visudo-editor-from-nano-to-vim" target="_blank" rel="noopener">How to change visudo editor from nano to vim?</a></h2><p><code>sudo update-alternatives --config editor</code></p>
<h2 id="Vim-Plug"><a href="#Vim-Plug" class="headerlink" title="Vim-Plug"></a>Vim-Plug</h2><p><a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">https://github.com/junegunn/vim-plug</a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">curl -fLo ~/.<span class="hljs-keyword">vim</span>/autoload/plug.<span class="hljs-keyword">vim</span> --create-dirs \<br>    http<span class="hljs-variable">s:</span>//raw.githubusercontent.<span class="hljs-keyword">com</span>/junegunn/<span class="hljs-keyword">vim</span>-plug/master/plug.<span class="hljs-keyword">vim</span><br></code></pre></td></tr></table></figure>

<h2 id="用-vim-编辑上一次输入的命令"><a href="#用-vim-编辑上一次输入的命令" class="headerlink" title="用 vim 编辑上一次输入的命令"></a>用 vim 编辑上一次输入的命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">fc</span><br></code></pre></td></tr></table></figure>

<h2 id="当你在-vi-中修改了半天配置文件-然后发现没有写权限-没有比这更令人感到挫败了-此时你需要这条命令。"><a href="#当你在-vi-中修改了半天配置文件-然后发现没有写权限-没有比这更令人感到挫败了-此时你需要这条命令。" class="headerlink" title="当你在 vi 中修改了半天配置文件,然后发现没有写权限,没有比这更令人感到挫败了,此时你需要这条命令。"></a><a href="http://mingxinglai.com/cn/2012/08/you-had-better-know-instruction/" target="_blank" rel="noopener">当你在 vi 中修改了半天配置文件,然后发现没有写权限,没有比这更令人感到挫败了,此时你需要这条命令。</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">:w !sudo tee %<br><span class="hljs-comment"># or</span><br>:w ! sudo tee %<br><br><span class="hljs-comment"># occur error</span><br>:w! sudo tee %<br></code></pre></td></tr></table></figure>

<h2 id="Alternative-tab-navigation-Vim-Tips-Wiki-FANDOM-powered-by-Wikia"><a href="#Alternative-tab-navigation-Vim-Tips-Wiki-FANDOM-powered-by-Wikia" class="headerlink" title="Alternative tab navigation | Vim Tips Wiki | FANDOM powered by Wikia"></a><a href="http://vim.wikia.com/wiki/Alternative_tab_navigation" target="_blank" rel="noopener">Alternative tab navigation | Vim Tips Wiki | FANDOM powered by Wikia</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-string">" Tab navigation like Firefox.</span><br><span class="hljs-string">nnoremap &lt;C-S-tab&gt; :tabprevious&lt;CR&gt;</span><br><span class="hljs-string">nnoremap &lt;C-tab&gt;   :tabnext&lt;CR&gt;</span><br><span class="hljs-string">inoremap &lt;C-S-tab&gt; &lt;Esc&gt;:tabprevious&lt;CR&gt;i</span><br><span class="hljs-string">inoremap &lt;C-tab&gt;   &lt;Esc&gt;:tabnext&lt;CR&gt;i</span><br><span class="hljs-string"></span><br><span class="hljs-string">nnoremap &lt;C-PageDown&gt; :tabprevious&lt;CR&gt;</span><br><span class="hljs-string">nnoremap &lt;C-PageUp&gt;   :tabnext&lt;CR&gt;</span><br><span class="hljs-string">inoremap &lt;C-PageDown&gt; &lt;Esc&gt;:tabprevious&lt;CR&gt;i</span><br><span class="hljs-string">inoremap &lt;C-PageUp&gt;   &lt;Esc&gt;:tabnext&lt;CR&gt;i</span><br><span class="hljs-string"></span><br><span class="hljs-string">nnoremap &lt;C-t&gt;     :tabnew&lt;CR&gt;</span><br><span class="hljs-string">inoremap &lt;C-t&gt;     &lt;Esc&gt;:tabnew&lt;CR&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="vim-插件-delimitmate-符号自动补全"><a href="#vim-插件-delimitmate-符号自动补全" class="headerlink" title="vim 插件: delimitmate[符号自动补全] "></a><a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-delimitmate.html" target="_blank" rel="noopener">vim 插件: delimitmate[符号自动补全] </a></h2><blockquote>
<p>触发后, 假设你要跳到补全后的符号后面继续编辑, 按 Shift-Tab</p>
</blockquote>
<h2 id="You-don’t-need-more-than-one-cursor-in-vim"><a href="#You-don’t-need-more-than-one-cursor-in-vim" class="headerlink" title="You don’t need more than one cursor in vim"></a><a href="https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db" target="_blank" rel="noopener">You don’t need more than one cursor in vim</a></h2><h2 id="vim-插件-easy-align-快速对齐"><a href="#vim-插件-easy-align-快速对齐" class="headerlink" title="vim 插件: easy-align[快速对齐] "></a><a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-easyalign.html" target="_blank" rel="noopener">vim 插件: easy-align[快速对齐] </a></h2><h2 id="分享-关于-vim"><a href="#分享-关于-vim" class="headerlink" title="[分享]关于 vim "></a><a href="http://www.wklken.me/posts/2016/07/24/about-vim.html" target="_blank" rel="noopener">[分享]关于 vim </a></h2><h2 id="vim-文本行逆序化-my-live-123-CSDN-博客-vim-倒序"><a href="#vim-文本行逆序化-my-live-123-CSDN-博客-vim-倒序" class="headerlink" title="vim 文本行逆序化_my_live_123-CSDN 博客_vim 倒序"></a><a href="https://blog.csdn.net/cwcmcw/article/details/44876267" target="_blank" rel="noopener">vim 文本行逆序化_my_live_123-CSDN 博客_vim 倒序</a></h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">要求<br><br>示例：将文本<br><span class="hljs-number">1234</span><br><span class="hljs-number">123</span><br><span class="hljs-number">12</span><br><span class="hljs-number">1</span><br>转换成<br><span class="hljs-number">1</span><br><span class="hljs-number">12</span><br><span class="hljs-number">123</span><br><span class="hljs-number">1234</span><br>命令<br><br>:g/.*/mo0<br>或者<br>:g/^/mo0<br><br>补充说明<br>原理是从第一行开始，匹配每一行，然后执行mo（move）操作移动到第<span class="hljs-number">0</span>行。如此处理每一行，直到文本末行。执行完毕文本逆序化成功！<br>&gt; https:<span class="hljs-comment">//blog.csdn.net/cwcmcw/article/details/44876267</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】技巧</title>
    <url>/linux/%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="https-www-youtube-com-watch-v-V8EUdia-kOE"><a href="#https-www-youtube-com-watch-v-V8EUdia-kOE" class="headerlink" title="https://www.youtube.com/watch?v=V8EUdia_kOE"></a><a href="https://www.youtube.com/watch?v=V8EUdia_kOE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=V8EUdia_kOE</a></h2><ul>
<li>sudo !!</li>
<li>ctrl-k, ctrl-u, ctrl-w, ctrl-y - cutting and pasting text in the command line</li>
<li>practical kill/yank example</li>
<li>use ‘less +F’ to view logfiles, instead of ‘tail’ (ctrl-c, shift-f, q to quit)</li>
<li>ctrl-x-e - continue editing your current shell line in a text editor (uses $EDITOR)</li>
<li>alt-. - paste previous command’s argument (useful for running multiple commands on the same resource)</li>
<li>reset - resets/unborks your terminal</li>
</ul>
<h2 id="linux-kill-某个端口对应的进程"><a href="#linux-kill-某个端口对应的进程" class="headerlink" title="linux kill 某个端口对应的进程"></a>linux kill 某个端口对应的进程</h2><ul>
<li><a href="https://blog.csdn.net/gq__97/article/details/80487588" target="_blank" rel="noopener">Linux 一条命令杀死占用端口的所有进程 - gq__97 的博客 - CSDN 博客</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">kill</span> -9 $(lsof -i:端口号 -t)<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://blog.csdn.net/shengzhu1/article/details/54138419" target="_blank" rel="noopener">linux 下怎么根据端口号杀死进程 - shengzhu1 的博客 - CSDN 博客</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">kill</span> [<span class="hljs-string">']netstat -nlp | grep :3306 | awk '</span>&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$7</span>&#125;<span class="hljs-string">' | awk -F"/" '</span>&#123; <span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span> &#125;<span class="hljs-string">'['</span>]<br></code></pre></td></tr></table></figure>

<h2 id="根据启动的应用名称来杀死进程"><a href="#根据启动的应用名称来杀死进程" class="headerlink" title="根据启动的应用名称来杀死进程"></a>根据启动的应用名称来杀死进程</h2><p><strong>获取所有该应用名称的进程</strong><br><code>ps -aux | grep user-0.0.1.jar</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">lilou     <span class="hljs-number">2676</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">21536</span>   <span class="hljs-number">980</span> pts/<span class="hljs-number">18</span>   S+   <span class="hljs-number">09</span>:<span class="hljs-number">49</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> grep --color=<span class="hljs-built_in">auto</span> --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn user<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>.jar<br>lilou     <span class="hljs-number">4353</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">2.0</span> <span class="hljs-number">8230288</span> <span class="hljs-number">339332</span> pts/<span class="hljs-number">21</span> Sl+  <span class="hljs-number">5</span>月<span class="hljs-number">28</span>   <span class="hljs-number">0</span>:<span class="hljs-number">43</span> java -jar user<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>.jar<br></code></pre></td></tr></table></figure>

<p><strong>排除含有 grep 的行</strong><br><code>ps -aux | grep user-0.0.1.jar | grep -v grep</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">lilou     <span class="hljs-number">4353</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">2.0</span> <span class="hljs-number">8230288</span> <span class="hljs-number">339332</span> pts/<span class="hljs-number">21</span> Sl+  <span class="hljs-number">5</span>月<span class="hljs-number">28</span>   <span class="hljs-number">0</span>:<span class="hljs-number">43</span> java -jar user<span class="hljs-number">-0.0</span><span class="hljs-number">.1</span>.jar<br></code></pre></td></tr></table></figure>

<p><strong>获取进程号</strong><br><code>ps -aux | grep user-0.0.1.jar | grep -v grep | cut -c 9-15</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">4353</span><br></code></pre></td></tr></table></figure>

<p><strong>使用 kill 命令杀死进程</strong><br><code>ps -aux | grep user-0.0.1.jar | grep -v grep | cut -c 9-15 | xargs kill -15</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">该进程已经被杀死<br></code></pre></td></tr></table></figure>

<h2 id="java-项目启动和停止脚本"><a href="#java-项目启动和停止脚本" class="headerlink" title="java 项目启动和停止脚本"></a>java 项目启动和停止脚本</h2><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">➜ <span class="hljs-keyword">cat</span> env.<span class="hljs-keyword">sh</span><br>NAME=<span class="hljs-string">"user-0.0.1.jar"</span><br>➜ <span class="hljs-keyword">cat</span> start.<span class="hljs-keyword">sh</span><br>. ./env.<span class="hljs-keyword">sh</span><br>nohup java -Duser.timezone=GMT+<span class="hljs-number">08</span> -Xmx1G -Xms1G -jar $NAME &gt; /dev/null &amp;<br>➜ <span class="hljs-keyword">cat</span> <span class="hljs-keyword">stop</span>.<span class="hljs-keyword">sh</span><br>. ./env.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword">ps</span> -aux | <span class="hljs-keyword">grep</span> $NAME | <span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span> | cut -<span class="hljs-keyword">c</span> <span class="hljs-number">9</span>-<span class="hljs-number">15</span> | xargs kill -<span class="hljs-number">15</span><br>➜ <span class="hljs-keyword">cat</span> restart.<span class="hljs-keyword">sh</span><br>./<span class="hljs-keyword">stop</span>.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword">sleep</span> <span class="hljs-number">8</span><br>./start.<span class="hljs-keyword">sh</span><br>➜<br></code></pre></td></tr></table></figure>

<p>ps -aux | grep python | grep 9090 | cut -c 9-15 | xargs kill -15<br>cd /www/smbshare &amp;&amp; python -m SimpleHTTPServer 9090 &gt; /dev/null 2&gt;&amp;1 &amp;</p>
<h2 id="根据端口来-kill-进程"><a href="#根据端口来-kill-进程" class="headerlink" title="根据端口来 kill 进程"></a>根据端口来 kill 进程</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">cd</span> $(dirname <span class="hljs-variable">$0</span>)<br>lsof -i :21001 |grep <span class="hljs-string">"\(LISTEN\)"</span>|awk -F <span class="hljs-string">' '</span> <span class="hljs-string">'&#123;print "kill -15 " $2&#125;'</span>|sh<br></code></pre></td></tr></table></figure>

<p>具体参考： <code>man lsof</code></p>
<h2 id="递归删除文件和目录"><a href="#递归删除文件和目录" class="headerlink" title="递归删除文件和目录"></a>递归删除文件和目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 递归清除不必要的文件</span><br><span class="hljs-comment"># https://blog.csdn.net/skylin19840101/article/details/75099240</span><br><br><span class="hljs-comment"># 删除文件</span><br>find . -name .flattened-pom.xml | xargs rm -f<br>find . -name .project | xargs rm -f<br><br><span class="hljs-comment"># 删除目录</span><br>find . -name <span class="hljs-string">".settings"</span> | xargs rm -rf<br>find . -name <span class="hljs-string">"target"</span> | xargs rm -rf<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Tar &amp; Zip</title>
    <url>/linux/%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<ul>
<li><a href="https://unix.stackexchange.com/questions/85194/how-to-download-an-archive-and-extract-it-without-saving-the-archive-to-disk/85195" target="_blank" rel="noopener">shell - How to download an archive and extract it without saving the archive to disk? - Unix &amp; Linux Stack Exchange</a><figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">wget -qO- your_link_here <span class="hljs-string">| tar xvz -C /target/directory</span><br></code></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">https:<span class="hljs-comment">//unix.stackexchange.com/questions/46969/compress-a-folder-with-tar</span><br>To tar and gzip <span class="hljs-selector-tag">a</span> folder, the syntax is:<br>tar czf name_of_archive_file<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> name_of_directory_to_tar<br><br>tar -zcvf xxx<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> aaa bbb<br>tar -jcvf xxx<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.bz2</span> aaa bbb<br>tar -Jcvf xxx<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.xz</span> aaa bbb<br></code></pre></td></tr></table></figure>
<h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">tar -xf xxx.tar.gz<br>tar -xf xxx.tar.bz2<br>tar -Jxf xxx.tar.xz<br><br>tar -xf xxx.tar.gz -C ./xxx<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu环境变量</title>
    <url>/linux/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">alias</span> cdt=<span class="hljs-string">'cd ~/t'</span><br><span class="hljs-built_in">alias</span> cdw=<span class="hljs-string">'cd ~/w'</span><br><span class="hljs-built_in">alias</span> e.=<span class="hljs-string">'caja .'</span><br><span class="hljs-built_in">alias</span> egrep=<span class="hljs-string">'egrep --color=auto'</span><br><span class="hljs-built_in">alias</span> fgrep=<span class="hljs-string">'fgrep --color=auto'</span><br><span class="hljs-built_in">alias</span> gl=<span class="hljs-string">'git lg'</span><br><span class="hljs-built_in">alias</span> grep=<span class="hljs-string">'grep --color=auto'</span><br><span class="hljs-built_in">alias</span> l=<span class="hljs-string">'ls -CF'</span><br><span class="hljs-built_in">alias</span> la=<span class="hljs-string">'ls -A'</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">'ls -alF'</span><br><span class="hljs-built_in">alias</span> ls=<span class="hljs-string">'ls --color=auto'</span><br></code></pre></td></tr></table></figure>

<h2 id="java"><a href="#java" class="headerlink" title="java"></a><a href="https://blog.csdn.net/u012707739/article/details/78489833" target="_blank" rel="noopener">java</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get install openjdk-8-jdk<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#set oracle jdk environment</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk1.8.0_121  <span class="hljs-comment">## 这里要注意目录要换成自己解</span><br>压的jdk 目录 <br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre   <br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib   <br><span class="hljs-built_in">export</span> <span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure>

<h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> GOROOT=<span class="hljs-variable">$HOME</span>/c/go<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin<br><span class="hljs-built_in">export</span> GOPATH=<span class="hljs-variable">$HOME</span>/w/go<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;GOPATH&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure>

<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="to-set"><a href="#to-set" class="headerlink" title="to set"></a>to set</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git config --global user.name lilou<br>git config --global user.email lilou@lyloou.com<br>git config --global core.autocrlf  <span class="hljs-literal">false</span><br>git config --global alias.lg <span class="hljs-string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span><br>git config --global http.proxy <span class="hljs-string">'socks5://127.0.0.1:1080'</span><br>git config --global https.proxy <span class="hljs-string">'socks5://127.0.0.1:1080'</span><br></code></pre></td></tr></table></figure>

<h3 id="result"><a href="#result" class="headerlink" title="result"></a>result</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">[user]<br>        email = lilou@lyloou.com<br>        name = lilou<br>[<span class="hljs-built_in">alias</span>]<br>        lg = <span class="hljs-built_in">log</span> --color --graph --pretty=format:<span class="hljs-string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit<br>[core]        <br>        autocrlf = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin 参考资料</title>
    <url>/kotlin/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<p><a href="https://www.kotlincn.net/docs/reference/delegated-properties.html" target="_blank" rel="noopener">委托属性 - Kotlin 语言中文站</a></p>
]]></content>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】软件</title>
    <url>/linux/%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="wps"><a href="#wps" class="headerlink" title="wps"></a>wps</h2><p><a href="http://wps-community.org/downloads" target="_blank" rel="noopener">http://wps-community.org/downloads</a></p>
<h2 id="gvim"><a href="#gvim" class="headerlink" title="gvim"></a>gvim</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt update<br>sudo apt install vim-gnome<br></code></pre></td></tr></table></figure>

<h2 id="synpase（快速启动）"><a href="#synpase（快速启动）" class="headerlink" title="synpase（快速启动）"></a>synpase（快速启动）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo add-apt-repository ppa:synapse-core/ppa<br>sudo apt-get update<br>sudo apt-get install synapse<br></code></pre></td></tr></table></figure>

<h2 id="fcitx-五笔输入法"><a href="#fcitx-五笔输入法" class="headerlink" title="fcitx 五笔输入法"></a>fcitx 五笔输入法</h2><ul>
<li><p>安装<br><code>sudo apt-get install fcitx fcitx-table-wubi fcitx-tools -y</code></p>
</li>
<li><p>启用自动调频<br>修改配置文件 /usr/share/fcitx/table/wbx.conf</p>
</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">AdjustOrder</span>=AdjustFreq<br></code></pre></td></tr></table></figure>

<ul>
<li>不能正常打出中文标点<br>修改配置文件<br>/usr/share/fcitx/addon/fcitx-fullwidth-char.conf</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Priority</span>=<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>

<ul>
<li><p>重启输入法<br><code>fcitx -r</code></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/28586200" target="_blank" rel="noopener">linux 安装与配置 fcitx 五笔输入法</a></p>
</li>
</ul>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get update<br>sudo apt-get install git<br></code></pre></td></tr></table></figure>

<h2 id="vlc（多媒体播放器）"><a href="#vlc（多媒体播放器）" class="headerlink" title="vlc（多媒体播放器）"></a>vlc（多媒体播放器）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get update<br>sudo apt install vlc<br></code></pre></td></tr></table></figure>

<h2 id="wiz"><a href="#wiz" class="headerlink" title="wiz"></a>wiz</h2><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//www.wiz.cn/wiznote-linux.html</span><br></code></pre></td></tr></table></figure>

<h2 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#</span><br><span class="hljs-comment"># https://www.computernetworkingnotes.com/ubuntu-linux-tutorials/how-to-update-firefox-in-ubuntu-linux.html</span><br><span class="hljs-comment"># install</span><br>sudo apt-get update<br>sudo apt-get install firefox<br><br><span class="hljs-comment"># update</span><br>sudo apt-get update<br>sudo apt-get install --only-upgrade firefox<br></code></pre></td></tr></table></figure>

<h2 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h2><ul>
<li>install</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://askubuntu.com/questions/510056/how-to-install-google-chrome</span><br><br><span class="hljs-comment"># 1. add key</span><br>wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -<br><span class="hljs-comment"># 2. set repository</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'</span> | sudo tee /etc/apt/sources.list.d/google-chrome.list<br><span class="hljs-comment"># 3. install package</span><br>sudo apt-get update<br>sudo apt-get install google-chrome-stable<br></code></pre></td></tr></table></figure>

<ul>
<li>config</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">https://github.com/FelisCatus/SwitchyOmega/releases/<br><br>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt<br></code></pre></td></tr></table></figure>

<h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://code.visualstudio.com/docs/setup/linux</span><br><br>curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg<br>sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg<br>sudo sh -c <span class="hljs-string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" &gt; /etc/apt/sources.list.d/vscode.list'</span><br>sudo apt-get update<br>sudo apt-get install code <span class="hljs-comment"># or code-insiders</span><br></code></pre></td></tr></table></figure>

<h2 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://www.jetbrains.com/help/idea/install-and-set-up-product.html</span><br>sudo snap install intellij-idea-ultimate --classic<br></code></pre></td></tr></table></figure>

<h2 id="emacs"><a href="#emacs" class="headerlink" title="emacs"></a>emacs</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get install emacs<br></code></pre></td></tr></table></figure>

<h2 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a><a href="https://blog.huihut.com/2017/08/25/LinuxInstallConfigShadowsocksClient/" target="_blank" rel="noopener">shadowsocks</a></h2><ul>
<li>install</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># ubuntu</span><br>sudo apt-get install python-pip<br>pip install --upgrade pip<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">// sudo vim /usr/bin/pip<br><span class="hljs-keyword">from</span> pip <span class="hljs-keyword">import</span> __main__<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    sys.exit(__main__._main())<br></code></pre></td></tr></table></figure>

<p>sudo pip install shadowsocks</p>
<ul>
<li>config<br><code>sudo vi $HOME/p/shadowsocks.json</code></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 在shadowsocks.json中加入以下内容：</span><br>&#123;<br>  <span class="hljs-attr">"server"</span>: <span class="hljs-string">"my_server_ip"</span>,<br>  <span class="hljs-attr">"local_address"</span>: <span class="hljs-string">"127.0.0.1"</span>,<br>  <span class="hljs-attr">"local_port"</span>: <span class="hljs-number">1080</span>,<br>  <span class="hljs-attr">"server_port"</span>: my_server_port,<br>  <span class="hljs-attr">"password"</span>: <span class="hljs-string">"my_password"</span>,<br>  <span class="hljs-attr">"timeout"</span>: <span class="hljs-number">300</span>,<br>  <span class="hljs-attr">"method"</span>: <span class="hljs-string">"aes-256-cfb"</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p><code>sudo ln -s $HOME/p/shadowsocks.json /etc/shadowsocks.json</code></p>
<ul>
<li>start</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">- 前端启动： sudo sslocal -c /etc/shadowsocks.json<br>- 后端启动： sudo sslocal -c /etc/shadowsocks.json -d start<br>- 后端停止： sudo sslocal -c /etc/shadowsocks.json -d stop<br>- 重启(修改配置要重启才生效)： sudo sslocal -c /etc/shadowsocks.json -d restart<br></code></pre></td></tr></table></figure>

<ul>
<li>boot up<br><code>sudo vim /etc/systemd/system/shadowsocks.service</code></li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Shadowsocks Client Service<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">User</span>=root<br><span class="hljs-attr">ExecStart</span>=/usr/bin/sslocal -c /etc/shadowsocks.json<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure>

<p><code>systemctl enable /etc/systemd/system/shadowsocks.service</code></p>
<ul>
<li>now you can reboot to check it~</li>
</ul>
<h2 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://askubuntu.com/questions/610333/how-to-set-socks5-proxy-in-the-terminal</span><br><span class="hljs-comment"># install proxychains</span><br>sudo apt install proxychains<br>sudo proxychains apt-get update<br><br><span class="hljs-comment"># now you can config your proxy in /etc/proxychains.conf</span><br><span class="hljs-comment"># sudo vim /etc/proxychains.conf</span><br>socks5 127.0.0.1 1080<br></code></pre></td></tr></table></figure>

<h2 id="privoxy"><a href="#privoxy" class="headerlink" title="privoxy"></a>privoxy</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://linoxide.com/linux-how-to/install-use-privoxy-ubuntu-16-04/</span><br><span class="hljs-comment"># install</span><br>sudo apt-get install privoxy<br><br><span class="hljs-comment"># sudo vim /etc/privoxy/config</span><br><span class="hljs-comment"># 添加下面这一行</span><br>forward-socks5 / 0.0.0.0:1080 .<br><br><span class="hljs-comment">#启动</span><br>/etc/init.d/privoxy restart<br><br><span class="hljs-comment"># 测试</span><br>curl  -x 127.0.0.1:8118 http://www.google.com<br></code></pre></td></tr></table></figure>

<h2 id="caja（文件管理器）"><a href="#caja（文件管理器）" class="headerlink" title="caja（文件管理器）"></a>caja（文件管理器）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://www.devmanuals.net/install/ubuntu/ubuntu-16-04-LTS-Xenial-Xerus/how-to-install-caja.html</span><br>sudo apt-get update<br>sudo apt-get install caja<br></code></pre></td></tr></table></figure>

<h2 id="terminal"><a href="#terminal" class="headerlink" title="terminal"></a>terminal</h2><h3 id="terminator"><a href="#terminator" class="headerlink" title="terminator"></a>terminator</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># http://www.ubuntugeek.com/terminator-multiple-gnome-terminals-in-one-window.html</span><br><span class="hljs-comment"># https://linux.cn/article-2978-1.html</span><br>sudo apt-get install terminator<br></code></pre></td></tr></table></figure>

<h3 id="PAC-Manager"><a href="#PAC-Manager" class="headerlink" title="PAC Manager"></a>PAC Manager</h3><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get install tmux<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="http://witkowskibartosz.com/blog/update-your-tmux-to-latest-version.html#.W2wMk87-iCo" target="_blank" rel="noopener">Update your tmux to latest version</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">VERSION=2.8<br>wget https://github.com/tmux/tmux/releases/download/<span class="hljs-variable">$&#123;VERSION&#125;</span>/tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span>.tar.gz<br>tar xf tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span>.tar.gz<br>rm -f tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span>.tar.gz<br><span class="hljs-built_in">cd</span> tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span><br><br>sudo apt-get install libevent-dev<br>sudo apt-get install ncurses-dev<br>./configure<br>make<br>sudo make install<br><span class="hljs-built_in">cd</span> -<br>sudo rm -rf /usr/<span class="hljs-built_in">local</span>/src/tmux-\*<br>sudo mv tmux-<span class="hljs-variable">$&#123;VERSION&#125;</span> /usr/<span class="hljs-built_in">local</span>/src<br></code></pre></td></tr></table></figure>

<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><ul>
<li><a href="https://www.cnblogs.com/EasonJim/p/7863099.html" target="_blank" rel="noopener">https://www.cnblogs.com/EasonJim/p/7863099.html</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># install</span><br>sudo apt-get install zsh<br><br><span class="hljs-comment"># change default shell to zsh</span><br>chsh -s /bin/zsh<br></code></pre></td></tr></table></figure>

<ul>
<li>oh my zsh</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://github.com/robbyrussell/oh-my-zsh</span><br>sh -c <span class="hljs-string">"<span class="hljs-variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span><br>sh -c <span class="hljs-string">"<span class="hljs-variable">$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)</span>"</span><br></code></pre></td></tr></table></figure>

<ul>
<li>autojump</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get install autojump<br><br>vim .zshrc<br><span class="hljs-comment">#在最后一行加入，注意点后面是一个空格</span><br>plugins=( [plugins...] autojump)<br></code></pre></td></tr></table></figure>

<ul>
<li>zsh-syntax-highlighting</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md</span><br><span class="hljs-comment"># 1. Clone this repository in oh-my-zsh's plugins directory:</span><br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br><span class="hljs-comment"># 2. Activate the plugin in ~/.zshrc:</span><br>plugins=( [plugins...] zsh-syntax-highlighting)<br><span class="hljs-comment"># 3. Source ~/.zshrc to take changes into account:</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>

<ul>
<li>zsh-autosuggestions</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br>plugins=( [plugins...] zsh-autosuggestions)<br></code></pre></td></tr></table></figure>

<ul>
<li>theme:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">$ git <span class="hljs-built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k<br><br>vi ~/.vimrc<br>ZSH_THEME=<span class="hljs-string">"powerlevel9k/powerlevel9k"</span><br></code></pre></td></tr></table></figure>
<p><a href="https://travis.media/top-12-oh-my-zsh-themes-for-productive-developers/#20210921-eastwood" target="_blank" rel="noopener">https://travis.media/top-12-oh-my-zsh-themes-for-productive-developers/#20210921-eastwood</a></p>
<h2 id="git-cola"><a href="#git-cola" class="headerlink" title="git-cola"></a>git-cola</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">apt-get install git-cola<br></code></pre></td></tr></table></figure>

<h2 id="variety-壁纸切换"><a href="#variety-壁纸切换" class="headerlink" title="variety 壁纸切换"></a>variety 壁纸切换</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get update<br>sudo apt-get install variety<br></code></pre></td></tr></table></figure>

<h2 id="catfish-文件搜索"><a href="#catfish-文件搜索" class="headerlink" title="catfish 文件搜索"></a>catfish 文件搜索</h2><h2 id="calibre（电子书阅读器）"><a href="#calibre（电子书阅读器）" class="headerlink" title="calibre（电子书阅读器）"></a>calibre（电子书阅读器）</h2><h2 id="红移（色温调节工具）"><a href="#红移（色温调节工具）" class="headerlink" title="红移（色温调节工具）"></a>红移（色温调节工具）</h2><h2 id="workrave（定时提醒）"><a href="#workrave（定时提醒）" class="headerlink" title="workrave（定时提醒）"></a>workrave（定时提醒）</h2><h2 id="LibreOffice"><a href="#LibreOffice" class="headerlink" title="LibreOffice"></a>LibreOffice</h2><h2 id="Transmission-downloader"><a href="#Transmission-downloader" class="headerlink" title="Transmission (downloader)"></a>Transmission (downloader)</h2><h2 id="diodon"><a href="#diodon" class="headerlink" title="diodon"></a>diodon</h2><h2 id="截图软件-shutter"><a href="#截图软件-shutter" class="headerlink" title="截图软件 shutter"></a>截图软件 shutter</h2><ol>
<li><code>sudo add-apt-repository ppa:shutter/ppa1</code></li>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install shutter1</code></li>
<li>设置快捷键 keyboard -&gt; shortcut -&gt; <code>shutter -s</code> -&gt; Ctrl+Alt+A -&gt; ok</li>
</ol>
<ul>
<li><a href="http://www.linuxidc.com/Linux/2015-07/119753.htm" target="_blank" rel="noopener">Ubuntu 安装截图工具 Shutter，并设置快捷键 Ctrl+Alt+A_Linux 教程_Linux 公社-Linux 系统门户网站</a></li>
</ul>
<h2 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h2><ol>
<li>查找安装名称：<code>dpkg -l | grep package_name</code></li>
<li>卸载<code>sudo apt-get remove package_name</code>, 具体输入<code>apt-get</code>命令查看</li>
</ol>
<h2 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h2><p>以安装网易云音乐为例</p>
<ol>
<li>从官网下载 deb 安装文件</li>
<li>执行下列命令</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">$ sudo dpkg -i netease*.dbg<br>$ sudo apt -f install<br></code></pre></td></tr></table></figure>

<h2 id="去除-chrome-的输入密码以解锁密码环提示"><a href="#去除-chrome-的输入密码以解锁密码环提示" class="headerlink" title="去除 chrome 的输入密码以解锁密码环提示"></a>去除 chrome 的<code>输入密码以解锁密码环</code>提示</h2><ul>
<li>终端输入<code>seahorse</code></li>
<li>右键删除 <code>登录</code></li>
<li>退出 chrome</li>
<li>提示输入密码时，不输入任何内容，直接按下一步。<blockquote>
<p><a href="http://blog.csdn.net/kangear/article/details/20789451" target="_blank" rel="noopener">解决打开 Chrome 出现 输入密码以解锁您的登录密钥环 - Android/Linux 的专栏 - 博客频道 - CSDN.NET</a></p>
</blockquote>
</li>
</ul>
<h2 id="安装-WenQuanYi-Zen-Hei-字体"><a href="#安装-WenQuanYi-Zen-Hei-字体" class="headerlink" title="安装 WenQuanYi Zen Hei 字体"></a>安装 WenQuanYi Zen Hei 字体</h2><ol>
<li>download file: wqy-zenhei-0.9.45.deb</li>
<li>install: dpkg -i wqy-zenhei-0.9.45.deb</li>
</ol>
<h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a><a href="https://medium.com/@jerilkuriakose/keyboard-shortcuts-for-custom-terminal-commands-in-ubuntu-17-10-aeb902f71869" target="_blank" rel="noopener">sleep</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br>dbus-send --system --<span class="hljs-built_in">print</span>-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 <span class="hljs-string">"org.freedesktop.login1.Manager.Suspend"</span> boolean:<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<h2 id="wine"><a href="#wine" class="headerlink" title="wine"></a>wine</h2><p><a href="https://wiki.winehq.org/Ubuntu" target="_blank" rel="noopener">https://wiki.winehq.org/Ubuntu</a></p>
<h2 id="add-C-env"><a href="#add-C-env" class="headerlink" title="add C env"></a>add C env</h2><p>apt-get install build-essential</p>
<h2 id="rg"><a href="#rg" class="headerlink" title="rg"></a>rg</h2><p><a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noopener">https://github.com/BurntSushi/ripgrep</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -LO https://github.com/BurntSushi/ripgrep/releases/download/0.10.0/ripgrep_0.10.0_amd64.deb<br><br>sudo dpkg -i ripgrep_0.10.0_amd64.deb<br></code></pre></td></tr></table></figure>

<h2 id="trash-cli"><a href="#trash-cli" class="headerlink" title="trash-cli"></a>trash-cli</h2><ul>
<li><a href="https://github.com/andreafrancia/trash-cli" target="_blank" rel="noopener">andreafrancia/trash-cli: Command line interface to the freedesktop.org trashcan.</a></li>
<li><a href="https://linux.cn/article-10029-1.html" target="_blank" rel="noopener">分享|Trash-Cli：Linux 上的命令行回收站工具</a></li>
</ul>
<h2 id="fzf"><a href="#fzf" class="headerlink" title="fzf"></a>fzf</h2><p>A command-line fuzzy finder</p>
<p><a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener">https://github.com/junegunn/fzf</a></p>
<h2 id="v2ray"><a href="#v2ray" class="headerlink" title="v2ray"></a>v2ray</h2><p><strong>server</strong></p>
<ul>
<li><a href="https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener">V2Ray 一键安装脚本 · 233boy/v2ray Wiki · GitHub</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">bash &lt;(curl -s -L https://git.io/v2ray.sh)<br>bash &lt;(curl -s -L https://git.io/v2ray-setup.sh)<br></code></pre></td></tr></table></figure>

<p><strong>client</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">bash &lt;(curl -L -s https://install.direct/go.sh)<br></code></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">说明<br>此脚本会自动安装以下文件：<br>/usr/bin/v2ray/v2ray：V2Ray 程序；<br>/usr/bin/v2ray/v2ctl：V2Ray 工具；<br>/etc/v2ray/config.json：配置文件；<br>/usr/bin/v2ray/geoip.dat：IP 数据文件<br>/usr/bin/v2ray/geosite.dat：域名数据文件<br></code></pre></td></tr></table></figure>

<ol start="2">
<li><p>修改配置<br><code>vi /etc/v2ray/config.json</code></p>
</li>
<li><p>启动和状态查看</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">service v2ray start<br>service v2ray status<br>service v2ray restart<br></code></pre></td></tr></table></figure>

<p>android 客户端：BifrostV</p>
<h2 id="file-server"><a href="#file-server" class="headerlink" title="file server"></a>file server</h2><p><a href="https://www.ostechnix.com/how-to-quickly-serve-files-and-folders-over-http-in-linux/" target="_blank" rel="noopener">How To Quickly Serve Files And Folders Over HTTP In Linux - OSTechNix</a></p>
<h2 id="How-do-I-modify-or-disable-the-HUD’s-use-of-the-Alt-key"><a href="#How-do-I-modify-or-disable-the-HUD’s-use-of-the-Alt-key" class="headerlink" title="How do I modify or disable the HUD’s use of the Alt key?"></a>How do I modify or disable the HUD’s use of the Alt key?</h2><ol>
<li>open <code>System Settings</code></li>
<li>Then go to Keyboard &gt; Shortcuts &gt; Launchers. You can redefine the HUD key with the Key to show the HUD option. Pressing Backspace will disable the HUD shortcut altogether.</li>
<li>You can redefine the HUD key with the Key to show the HUD option. Pressing Backspace will disable the HUD shortcut altogether.</li>
</ol>
<ul>
<li><a href="https://askubuntu.com/questions/122209/how-do-i-modify-or-disable-the-huds-use-of-the-alt-key" target="_blank" rel="noopener">unity - How do I modify or disable the HUD’s use of the Alt key? - Ask Ubuntu</a></li>
</ul>
<h2 id="Install-Fira-in-Ubuntu"><a href="#Install-Fira-in-Ubuntu" class="headerlink" title="Install Fira in Ubuntu"></a><a href="https://stevescott.ca/2015-09-28-installing-fira-in-ubuntu.html" target="_blank" rel="noopener">Install Fira in Ubuntu</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">wget https://github.com/mozilla/Fira/archive/master.zip<br>unzip master.zip<br>sudo mkdir -p /usr/share/fonts/truetype/fira<br>sudo cp Fira-master/ttf/* /usr/share/fonts/truetype/fira<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Sftp</title>
    <url>/linux/sftp/</url>
    <content><![CDATA[<h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><p>sftp&gt; help</p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>类似 <code>ssh</code> 的用法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sftp lilou@192.168.0.1<br></code></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table>
<thead>
<tr>
<th>命令描述</th>
<th>命令（远程/本地)</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>切换目录</td>
<td>cd/lcd</td>
<td>cd /tmp</td>
</tr>
<tr>
<td>显示目录</td>
<td>pwd/lpwd</td>
<td>pwd</td>
</tr>
<tr>
<td>下载到本地</td>
<td>get</td>
<td><code>get a.txt</code> <code>get -r /tmp/dir/ /local/tmp/dir</code></td>
</tr>
<tr>
<td>上传到远程</td>
<td>put</td>
<td><code>put a.txt a.txt</code> <code>put -r /local/tmp/dir/ /tmp/dir/</code></td>
</tr>
</tbody></table>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul>
<li><a href="https://blog.zfanw.com/sftp/#%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9" target="_blank" rel="noopener">SFTP 用法</a></li>
<li><a href="https://www.cnblogs.com/chen1987lei/archive/2010/11/26/1888391.html" target="_blank" rel="noopener">linux 下如何使用 sftp 命令 - BradyChen - 博客园</a></li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】系统</title>
    <url>/linux/%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="制作-ubuntu-系统启动-u-盘"><a href="#制作-ubuntu-系统启动-u-盘" class="headerlink" title="制作 ubuntu 系统启动 u 盘"></a>制作 ubuntu 系统启动 u 盘</h2><h3 id="下载发行版镜像"><a href="#下载发行版镜像" class="headerlink" title="下载发行版镜像"></a>下载发行版镜像</h3><p>有这几个供参考：ubuntu、xbuntu、mate ubuntu</p>
<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><ul>
<li>Startup Disk Creator(启动盘创建器)</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># install</span><br>sudo apt-get install usb-creator-gtk<br><span class="hljs-comment"># run</span><br>usb-creator-gtk<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-ubuntu" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-ubuntu</a></li>
</ul>
<h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><ul>
<li>Disk Utility</li>
<li><a href="https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-macos" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-macos</a></li>
</ul>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><ul>
<li><p>下载 Pen Drive Linux’s USB 安装器 （或：rufus）</p>
</li>
<li><p>从下拉选项中选择 Ubuntu 桌面版本。</p>
</li>
<li><p>点击‘浏览’然后打开已下载的 ISO 文件。</p>
</li>
<li><p>选择一个 USB 驱动器并点击‘创建’.</p>
</li>
<li><p><a href="http://www.ubuntu.org.cn/download/desktop/create-a-usb-stick-on-windows" target="_blank" rel="noopener">如何在 Windows 下创建一个可启动 USB 驱动器 | Ubuntu</a><br>注意：U 盘启动后，会出现提示<code>gfxboot.c32: not a com32r image</code>，这时按下 TAB，并输入<code>live</code>回车即可进入启动系统。</p>
</li>
<li><p><a href="https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows</a></p>
</li>
</ul>
<h2 id="如何找到-Linux-的版本号"><a href="#如何找到-Linux-的版本号" class="headerlink" title="如何找到 Linux 的版本号"></a><a href="https://linux.cn/article-9760-1.html" target="_blank" rel="noopener">如何找到 Linux 的版本号</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">uname -srm<br><span class="hljs-comment"># uname --kernel-name --kernel-release --machine</span><br><span class="hljs-comment"># Linux 4.13.0-46-generic x86_64</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cat /etc/os-release<br></code></pre></td></tr></table></figure>
<h2 id="Checking-Your-Ubuntu-Version-From-the-Terminal"><a href="#Checking-Your-Ubuntu-Version-From-the-Terminal" class="headerlink" title="Checking Your Ubuntu Version From the Terminal"></a>Checking Your Ubuntu Version From the Terminal</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">lsb_release -a<br></code></pre></td></tr></table></figure>

<h2 id="How-do-you-run-Ubuntu-Server-with-a-GUI"><a href="#How-do-you-run-Ubuntu-Server-with-a-GUI" class="headerlink" title="How do you run Ubuntu Server with a GUI?"></a><a href="https://askubuntu.com/questions/53822/how-do-you-run-ubuntu-server-with-a-gui" target="_blank" rel="noopener">How do you run Ubuntu Server with a GUI?</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Minimal GUI:</span><br>sudo apt install xorg<br>sudo apt install --no-install-recommends openbox<br><br><span class="hljs-comment"># Minimal GUI with display manager:</span><br>sudo apt install xorg<br>sudo apt install --no-install-recommends lightdm-gtk-greeter<br>sudo apt install --no-install-recommends lightdm<br>sudo apt install --no-install-recommends openbox<br><br><span class="hljs-comment"># A more functional minimal desktop environment (the one I use):</span><br>sudo apt install xorg<br>sudo apt install --no-install-recommends lightdm-gtk-greeter<br>sudo apt install --no-install-recommends lightdm<br>sudo apt install --no-install-recommends lxde-icon-theme<br>sudo apt install --no-install-recommends lxde-core<br>sudo apt install --no-install-recommends lxde-common<br>sudo apt install --no-install-recommends policykit-1 lxpolkit<br>sudo apt install --no-install-recommends lxsession-logout<br>sudo apt install --no-install-recommends gvfs-backends<br><br><span class="hljs-comment"># A full lightweight desktop environment:</span><br>sudo apt install xorg<br>sudo apt install --no-install-recommends xubuntu-core<br><span class="hljs-comment"># or</span><br>sudo apt install --no-install-recommends ubuntu-mate-core<br></code></pre></td></tr></table></figure>

<h2 id="Can-I-access-Ubuntu-from-Windows-remotely"><a href="#Can-I-access-Ubuntu-from-Windows-remotely" class="headerlink" title="Can I access Ubuntu from Windows remotely?"></a><a href="https://askubuntu.com/questions/592537/can-i-access-ubuntu-from-windows-remotely" target="_blank" rel="noopener">Can I access Ubuntu from Windows remotely?</a></h2><p><a href="https://www.tweaking4all.com/software/linux-software/use-xrdp-remote-access-ubuntu-14-04/" target="_blank" rel="noopener">https://www.tweaking4all.com/software/linux-software/use-xrdp-remote-access-ubuntu-14-04/</a></p>
<h2 id="vmware-esxi"><a href="#vmware-esxi" class="headerlink" title="vmware esxi"></a>vmware esxi</h2>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>《鸟哥的Linux私房菜》读书笔记</title>
    <url>/linux/%E9%B8%9F%E5%93%A5%E7%9A%84linux%E7%A7%81%E6%88%BF%E8%8F%9C/</url>
    <content><![CDATA[<h1 id="《鸟哥的-Linux-私房菜》读书笔记"><a href="#《鸟哥的-Linux-私房菜》读书笔记" class="headerlink" title="《鸟哥的 Linux 私房菜》读书笔记"></a>《鸟哥的 Linux 私房菜》读书笔记</h1><blockquote>
<p>逆序记录</p>
</blockquote>
<p>| 使用 crontab 时需要注意： –p502</p>
<ul>
<li>资源分配不均；</li>
<li>取消不要的输出选项；</li>
<li>安全的检验；</li>
<li>周与日、月不可同时并存；</li>
</ul>
<p>| cron 这个服务的最低检测限制是“分钟”。（编辑保存后，cron 的设置就生效了，<br>也有些例外情况，这时重启 crond 这个服务即可 <code>/etc/init.d/crond restart</code>） –p500</p>
<p>| 需要注意的是<code>crontab -e</code> 这个 crontab 其实是 /usr/bin/crontab 这个执行文件，<br>但是 /etc/crontab 可是一个“纯文本文件”，可以用 root 身份来编辑这个文件。–p500</p>
<p>| <code>crontab -l</code> 显示 crontab 的工作内容 –p500<br><code>crontab -r</code> 移除全部的 crontab 的工作内容</p>
<p>| crontab 的限制同 at 命令，主要通过两个文件（cron.allow、cron.deny） –p498</p>
<p>| 循环执行的例行性工作调度（crontab） –p498</p>
<p>| batch 系统有空时才进行后台任务。 –p497</p>
<p>| 利用 atq 来查询设置的 at 任务，<br>利用 atrm 来删除设置的 at 任务。 –p497</p>
<p>| 对 atd 程序施加限制：<br>利用 <code>/etc/at.allow</code> 与 <code>/etc/at.deny</code> 这两个文件来进行 at 的使用限制。 –p495</p>
<p>| 设置 atd 开机启动： –p495</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">chkconfig atd on<br></code></pre></td></tr></table></figure>

<p>| 手动启动 atd： –p494</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">/etc/init.d/atd restart<br></code></pre></td></tr></table></figure>

<p>| Linux 上常见的例行性工作 –p493</p>
<ul>
<li>进行日志文件的轮替</li>
<li>日志文件分析 logwatch 的任务</li>
<li>新建 locate 的数据库</li>
<li>whatis 数据库的建立</li>
<li>RPM 软件日志文件的新建</li>
<li>删除临时文件</li>
<li>与网络服务有关的分析行为</li>
</ul>
<p>| Linux 工作调度的种类：at， cron –p494<br>工作调度的方式：</p>
<ul>
<li>一种是例行性的，就是每隔一定的周期要来办的事项；</li>
<li>一种是突发性的，就是这次做完了以后就没有的那一种；</li>
</ul>
<h2 id="第-16-章"><a href="#第-16-章" class="headerlink" title="第 16 章"></a>第 16 章</h2><p>| LVM 相关命令汇整与 LVM 的关闭： –p488</p>
<p>| LVM 另一个重要功能：系统快照。<br>快照就是将当时的系统信息记录下来，就好像照相机记录一般。<br>将来若有任何数据改动了，则原始数据会被移到快照区，没有被改动的区域则由快照区<br>与文件系统共享。 –p483</p>
<p>| LVM 实作流程(LV 放大容量和 LV 缩小容量)：</p>
<ul>
<li>PV 阶段</li>
<li>VG 阶段</li>
<li>LV 阶段</li>
<li>文件系统阶段</li>
</ul>
<p>| 如果要强调性能与备份，那么就直接使用 RAID 即可，不需要使用 LVM 。 –p475</p>
<p>| 数据写入 LV 的机制：分为线性模式（默认推荐的）和交错模式。 –p475</p>
<p>| 之所以称“卷”，是因为可以讲文件系统像卷一样伸长或缩短之故吧。–p473</p>
<p>| LVM(Logical Volume Manager) 逻辑卷管理器： –p473<br>LVM 的重点在于可以弹性调整文件系统的容量！（即不需要重新分区、格式化）</p>
<p>| RAID 的功能设置：开机自启、自动挂载、关闭软件 RAID。 –p466</p>
<p>| 磁盘阵列可以通过硬件和软件的方式来构建。 –p466</p>
<ul>
<li>硬件的方式是使用磁盘阵列卡，好的很贵。</li>
<li>通过软件的方式（会占用较多的系统资源，例如 CPU 的运算和 I/O 总线资源。）使用 mdadm 命令来构建<br>磁盘阵列。</li>
</ul>
<p>| 磁盘阵列（RAID），即容错廉价磁盘阵列。RAID 可以通过一些技术（软件或硬件）将多个较小的磁盘整合<br>成为一个较大的磁盘设备；而这个较大的磁盘功能可不只是存储而已，它还具有数据保护的功能。 –p463<br>基于等级的不同，有不同的功能:</p>
<ul>
<li>RAID-0：性能最佳。（注意：由于数据是依序放置到各个磁盘分区。因此 RAID-0 只要有任何一块<br>磁盘的区块被损毁，在 RAID 上面的所有数据都会丢失而无法读取。）</li>
<li>RAID-1: 完整备份。这种模式也是需要相同的磁盘容量的，最好是一模一样的磁盘。如果是不同容量<br>的磁盘组成 RAID-1 时，那么总容量将以最小的那一块磁盘为主。</li>
<li>RAID 0+1，RAID 1+0：整合上面两个的优点，性能上拥有 RAID 0 的优点、安全上拥有 RAID 1 的备份<br>功能（但是也有 RAID 1 的缺点，总容量会少一半用来备份）。</li>
<li>RAID 5：性能与数据备份的均衡考虑。</li>
<li>Spare Disk：预备磁盘的功能。所谓的　 spare disk 就是一块或多块没有包含在原本磁盘阵列等级中的磁盘，<br>这块磁盘平时并不会被磁盘阵列所使用，当磁盘整列有任何磁盘损毁时，则这块　 spare disk 会被主动拉进<br>磁盘阵列中，并将坏掉的那块磁盘移除磁盘整列，然后立即重建数据系统。如此，你的系统则可以拥抱安康。</li>
<li>磁盘阵列的优点体现在：数据安全与可靠、读写性能的加强，容量的扩增。（尤其是数据的可靠性和完整性更是<br>　 RAID 的考虑重点）　–p466</li>
</ul>
<p>| Education is :</p>
<blockquote>
<p>Education is what, when, and why to do things.<br>Training is how to do it. Most your courses have been Training.<br>I am trying to talk about the Education part.<br>–Richard W. Hamming (<a href="http://mat.uc.pt/~zhang/teaching.html" target="_blank" rel="noopener">http://mat.uc.pt/~zhang/teaching.html</a>)</p>
</blockquote>
<p>| api 使用步骤：(this is how)</p>
<ul>
<li>调用的命令；（知道自己要干啥）</li>
<li>设置参数；（知道自己干啥时要选择那些配置）</li>
<li>整串执行；（开始 do it. ）</li>
</ul>
<p>| warnquota: 对超过限额者发出警告信； –p460</p>
<p>| quota 的报表主要有两种模式：<br>一种是针对每个个人或用户组的 quota 命令，<br>一个是针对整个文件系统的 repquota 命令；</p>
<p>| 坐而言不如起而行。 –p454</p>
<p>| Quota 的使用限制： –p452</p>
<ul>
<li>仅能针对整个文件系统；</li>
<li>内核必须支持 Quota；</li>
</ul>
<p>| 开始看不懂了，心里发毛了。</p>
<blockquote>
<p>底下的幾篇文章是學習 Linux 的基礎文件，這些文件是基礎中的基礎，如果您能將其中的文件都看完並且消化過，那麼未來在管理 Linux 主機以及架設網站方面，就能夠達到『事半功倍』的成效，請不要忽略這部份了！否則，再怎麼討論都是枉然的啦！因為 Linux 的資料非常的多，每份資料彼此的相關性都很強，要單獨的一項一項講解並不容易， 所以底下的文件該怎麼看呢？建議先按照順序將內容大致瀏覽過一次，看不懂的地方也可以先略過不要緊。 全部看完之後，再從頭開始『仔細』的實際操作過一遍，那應該就能夠進入 Linux 的世界囉～<br>另外，每篇文章底下的日期，指的是重大改版日期而非最新日期，每篇文章的最新日期請以該篇文章最下方的工作日誌為主的喔！<br><a href="http://linux.vbird.org/linux_basic/" target="_blank" rel="noopener">http://linux.vbird.org/linux_basic/</a></p>
</blockquote>
<p>| Quota(磁盘配额), 就字面上的意思来看，就是有多少“限额”的意思。如果是用在零用钱上面，就是类似<br>“有多少零用钱一个月”的意思。在 Linux 系统中，由于是多用户、多任务的环境，所以会有多用户<br>使用一个硬盘空间的情况发生，如果其中有少数几个用户大量占掉了硬盘空间的话，那肯定影响其他用户<br>的使用权限。因此管理员应该适当限制硬盘的空间给用户，以妥善分配系统资源。 –p452</p>
<p>| 特殊账号的手工新建：–p445</p>
<p>| 纯数字账号，容易和其他属性混淆（例如：UID 501, 权限 755），建议不要使用纯数字形式的账号；–p444</p>
<p>| chpasswd 常用于批量新建账号：<code>echo &quot;dmtsai:abcdef&quot; | chpasswd -m</code></p>
<p>| 一般来说，如果你正常使用 useradd 增加用户，使用 pwconv 并不会有任何的操作，因为<br><code>/etc/passwd</code> 与 <code>/etc/shadow</code> 并不会有以上两点问题（两个文件不对应）。不过，<br>如果手动设置账号，这个 pwconv 就很重要了。–p444</p>
<p>| mail -s “bashrc file content” lou &lt; ~/.bashrc ：讲文件的内容通过邮件发给 lou –p442</p>
<p>| wall、write 命令的进行需要等到用户在线才行。可以通过 mail 的方式寄出邮件。–p442</p>
<p>| 通过广播的方式发送消息： wall “I will shutdown my linux server…” –p442</p>
<p>| 不接收任何消息： mesg n<br>接收消息： mesg y</p>
<p>| 为什么 root 无法以 telnet 直接登录系统，但是却能够使用 ssh 直接登录？<br>telnet 会引用 login 的 PAM 模块，而 login 的验证会有 /etc/securetty 的限制。<br>由于远程连接属于 pts/n (n 为数字)的动态终端机接口设备名称，并么有写入到 /etc/securetty,<br>因此 root 无法以 telnet 登录远程主机。而 ssh 使用的是 /etc/pam.d/sshd 这个模块，<br>这个模块的验证阶段没有加入 pam_securetty， 因此就没有 /etc/securetty 的限制！<br>故可以从远程直接联机到服务器。</p>
<p>| login 的 PAM 验证机制流程：</p>
<ol>
<li>验证阶段；</li>
<li>授权阶段；</li>
<li>密码阶段；</li>
<li>会议阶段；</li>
</ol>
<p>| 我们以 passwd 这个命令调用 PAM。 当你执行 passwd 后这个程序调用 PAM 的流程是： –p435</p>
<ol>
<li>用户开始执行 /usr/bin/passwd 这支程序，并输入密码；</li>
<li>passwd 调用 PAM 模块进行验证；</li>
<li>PAM 模块会到 /etc/pam.d/ 中找寻与程序（passwd）同名的配置文件。</li>
<li>依据 /etc/pam.d/passwd 内的配置，引用相关的 PAM 模块逐步进行验证分析；</li>
<li>passwd 这支程序会依据 PAM 回传的结果决定下一个操作（重新输入新密码或者通过验证）</li>
</ol>
<p>| PAM（Pluggable Authentication Modules, 嵌入式模块）,<br>为解决账号密码可能不同步的验证问题。 –p434</p>
<p>| 可以通过给不需要登录的账户设置无法登录的合法 shell 来达到目的。 –p434</p>
<p>| 两次执行 sudo 在 5 分钟之内，那么再次执行 sudo 时就不需要再次输入密码了。 –p433</p>
<p>| 默认 root 可以切换任何身份且进行任何命令。–p431</p>
<p>| 通过 visudo 来修改 <code>/etc/sudoers</code>，避免其他修改方式造成的语法错误而无法使用 sudo. –p430</p>
<p>| 可以使用 sudo 的用户是通过输入用户自己的密码来执行后续的命令串。 –p430</p>
<p>| sudo<br>并非所有用户都可以执行 sudo , 而是仅有 /etc/sudoers 内的用户才能够执行 sudo 这个命令。<br>–p429</p>
<p>| 只执行一个只有 root 才能进行的命令，且执行完毕就恢复原本的身份。–p429</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">su - -c <span class="hljs-string">"head -n 3 /etc/shadow"</span><br></code></pre></td></tr></table></figure>

<p>| 使用“su -”切换成 root 的身份，以 login shell 的方式。 –p428</p>
<p>| 单纯使用“su”切换成 root 的身份，读取的变量设置方式为 non-login shell 的方式，<br>这种方式下很多原本的变量不会被改变。–p428</p>
<p>| 以<code>su -</code> 命令来切换，代表使用 login-shell 的变量文件读取方式来登录系统。 –p428</p>
<p>| 让一般用户转变为 root 身份。 –p428</p>
<ul>
<li>以 “su -” 直接将身份变成 root。（需要密码）</li>
<li>以 “sudo 命令” 执行 root 的命令串。</li>
</ul>
<p>| 针对新创建的文件，设置默认的 acl; –p426</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">setfacl -m d:u:myuser1:rx /srv/projecta <span class="hljs-comment"># 这样在 projecta目录中新创建的文件，就默认有 rx 权限了。</span><br></code></pre></td></tr></table></figure>

<p>| 针对某个用户具体设置权限： –p424</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">setfacl -m u:vbird1:rx test.txt <span class="hljs-comment"># 对于文件 test.txt，给用户 vbird1 设置权限 rx</span><br>setfacl -m g:mygroup1:rx test.txt <span class="hljs-comment"># 同上，设置用户组权限</span><br></code></pre></td></tr></table></figure>

<p>| acl 的设置：getfacl, setfacl –p424</p>
<p>| ACL (Access Control List), 提供传统的 owner、 group、 others 的 read、<br>write、 execute 权限之外的具体权限设置； –p423</p>
<p>| 用户组的新增与删除： –p420</p>
<ul>
<li>groupadd: 添加用户组</li>
<li>groupmod: 修改用户组（例如用户组 id, 用户组名）</li>
<li>groupdel: 删除用户组</li>
<li>用户组管理员：让某个用户组具有一个管理员，可以来管理哪些账号可以加入/移出用户组；<ul>
<li>新建一个用户组管理员： gpasswd groupname</li>
</ul>
</li>
</ul>
<p>| 是不是断了网就没法进行下去，其实也看是什么事情啦！</p>
<p>| 一般身份用户常用的账号数据更改与查询命令： –p417</p>
<ul>
<li>figure: 查询用户信息（大部分来源于 /etc/passwd 中的内容）</li>
<li>chsh: change shell</li>
<li>id: 查询某人或自己的相关 UID/GID 等的信息；</li>
</ul>
<p>| 用户修改与删除: usermod userdel –p416</p>
<p>| 对于 root 用户，唉～要帮一般账号新设密码需要使用 <code>passwd 账号</code> 的格式，使用 <code>passwd</code><br>表示修改自己的密码。–p414</p>
<p>| 使用 useradd 来创建 Linux 上的账号时至少会参考： –p413</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">default</span>/useradd<br><span class="hljs-regexp">/etc/</span>login.defs<br><span class="hljs-regexp">/etc/</span>skel<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure>

<p>| 在通过 useradd 来创建用户时，默认设置： –p411</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">useradd -D<br></code></pre></td></tr></table></figure>

<p>| 系统账号默认都不会主动创建主文件夹(可以通过参数 <code>-m</code> 强制添加)； –p410</p>
<p>| 添加用户: –p410</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">useradd vlou<br>passwd vlou<br>grep vlou /etc/passwd /etc/shadow /etc/group /home/vlou <span class="hljs-comment"># 查看创建后的属性</span><br></code></pre></td></tr></table></figure>

<p>| 加入用户组： –p408</p>
<ul>
<li>通过 root ，让其通过 usermod 命令；</li>
<li>通过 用户组管理员，让其通过 gpasswd 命令；</li>
</ul>
<p>| 有效用户组： –p408</p>
<ul>
<li>也就是使用<code>groups</code>命令得到的第一个用户组；</li>
<li>通过 <code>newgrp</code> 可以切换有效用户组；（首先必须要成为这个用户组的成员才可以执行）,<br>另外，执行了 <code>newgrp</code> 相当于启用了新的 shell, 可以 exit 退出。<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">groups <span class="hljs-comment"># 查看用户所属组</span><br>newgrp adm <span class="hljs-comment">#  切换到 adm 组, 以新 shell 进入</span><br><span class="hljs-comment"># ...</span><br><span class="hljs-built_in">exit</span> <span class="hljs-comment"># 退出刚才切换的 shell</span><br>groups <span class="hljs-comment"># 此时恢复到之前的用户组</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<p>| 一个用户可以有多个用户组，那么用户在作业的时候，到底以哪个用户组为标准？ –p407<br>这个涉及到有效用户组（effective group） 和 初始用户组 （initial group）</p>
<p>| 忘记 root 密码： –p406</p>
<ul>
<li>在用户维护模式下修改；</li>
<li>以 Live CD 开机后挂载根目录去修改 /etc/shadow</li>
</ul>
<p>| 一般用户密码忘记了：这个最容易解决，请系统管理员帮忙，他会重新设置好你的密码而不需要知道你的旧密码<br>(利用 root 身份 使用 passwd 命令) –p406</p>
<p>| shadow 文件结构: –p403</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">lou@Lou:~$ sudo head -n 4 /etc/shadow<br>root:<span class="hljs-variable">$6</span><span class="hljs-variable">$ExVgN6IF</span><span class="hljs-variable">$GzxieFmtydKzA6pCaIjd1k</span>/wIhQmfqSDNQ6vrnCXZ4UkpgAQ5mdCu3Y4DS2DsnBkku4IzwW2HV4CxB2.I1.Oz.:17215:0:99999:7:::<br>daemon:*:16911:0:99999:7:::<br>bin:*:16911:0:99999:7:::<br>sys:*:16911:0:99999:7:::<br></code></pre></td></tr></table></figure>

<ol>
<li>账号名称</li>
<li>密码</li>
<li>最近更动密码的日期</li>
<li>密码不可被更动的天数</li>
<li>密码需要重新更改的天数</li>
<li>密码需要更改期限前的警告天数</li>
<li>密码过期后的账号宽限时间</li>
<li>账号失效日期</li>
<li>保留</li>
</ol>
<p>| passwd 的文件结构： –p403</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">lou@Lou:~$ head -n 4 /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br></code></pre></td></tr></table></figure>

<ol>
<li>账号名称</li>
<li>密码</li>
<li>UID</li>
<li>GID</li>
<li>用户信息说明列</li>
<li>主文件夹</li>
<li>Shell</li>
</ol>
<p>| 计算机认识 0 与 1, 人们认识账号；文件属性中的所有者实际上存储的是数字。 –p401</p>
<h2 id="第-14-章-Linux-账号管理与-ACL-权限设置"><a href="#第-14-章-Linux-账号管理与-ACL-权限设置" class="headerlink" title="第 14 章 Linux 账号管理与 ACL 权限设置"></a>第 14 章 Linux 账号管理与 ACL 权限设置</h2><p>| 睡不着觉：20170407, 起来看看。</p>
<p>| shell script 的追踪与调试： –p397</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sh [-nvx] scripts.sh<br>-n: 不要执行 script, 仅查询语法的问题；<br>-v: 在执行 script 前，现将script的内容输出到屏幕上；<br>-x: 将使用到的 script 内容显示到屏幕上。<br></code></pre></td></tr></table></figure>

<p>| 运行程序时出现错误：通过以下方案解决。</p>
<ul>
<li><a href="https://my.oschina.net/zphj1987/blog/77884" target="_blank" rel="noopener">syntax error: Bad for loop variable 解决办法(ubuntu)</a></li>
<li><a href="https://wiki.ubuntu.com/DashAsBinSh" target="_blank" rel="noopener">DashAsBinSh</a><blockquote>
<p>错误为 Syntax error: Bad for loop variable<br>解决办法：sudo dpkg-reconfigure dash<br>在选择项中选 No<br>从 ubuntu 6.10 开始，ubuntu 就将先前默认的 bash shell 更换成了 dash shell；其表现为 /bin/sh 链接倒了/bin/dash 而不是传统的/bin/bash。<br>ubuntu edgy 是第一个将 dash 作为默认 shell 来发行的版本，这似乎是受了 debian 的影响。wiki 里面有官方的解释，<a href="https://wiki.ubuntu.com/DashAsBinSh，主要原因是dash更小，运行更快，还与POSIX兼容。" target="_blank" rel="noopener">https://wiki.ubuntu.com/DashAsBinSh，主要原因是dash更小，运行更快，还与POSIX兼容。</a><br>但 目前存在的问题是，由于 shell 的更换，致使很多脚本出错，毕竟现在的很多脚本不是 100%POSIX 兼容。<br>在 wiki 里面也说到，如 何将默认的 shell 改回 bash，方法就是<br>在终端执行 sudo dpkg-reconfigure dash<br>然后选 择 no</p>
</blockquote>
</li>
</ul>
<p>| 在 for 循环中如何表示一段连续的范围：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> sitenu <span class="hljs-keyword">in</span> $(seq 1 100)<br><span class="hljs-keyword">do</span><br>  <span class="hljs-comment">#statements</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>

<p>| while 条件成立时执行条件；util 条件成立时退出条件； –p394</p>
<p>| 直到型（util）: 满足条件，就终止循环；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">until [[ condition ]]; <span class="hljs-keyword">do</span><br>  <span class="hljs-comment">#statements</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>

<p>| 当型(while)：满足条件时，就进行循环；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">while</span> [condition]<br><span class="hljs-keyword">do</span><br>  程序段落<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>

<p>| 循环 –p393</p>
<ul>
<li>不断地执行某个程序段落；</li>
<li>直到用户设置的条件达成为止；</li>
</ul>
<p>| 利用 <code>function</code> 来重用轮子<br>在 shell script 当中的 function 的设置一定要在程序的最前面，这样才能够在执行时被找到<br>可用的程序段。<br>function 不但可以简化程序代码，而且可以做成类似“模块”的玩意儿。–p392</p>
<p>| 条件判断语句：<br><strong>if</strong> –p386</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [条件判断式1]; <span class="hljs-keyword">then</span><br>  <span class="hljs-comment"># 条件1成立时的逻辑</span><br><span class="hljs-keyword">elif</span> [条件判断式2]; <span class="hljs-keyword">then</span><br>  <span class="hljs-comment">#  条件2成立的逻辑</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-comment"># 其他情况下的逻辑</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>

<p><strong>case</strong> –p390</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">case</span> $变量名称 <span class="hljs-keyword">in</span><br>  <span class="hljs-string">"第1个变量的内容"</span>)<br>  程序段<br>  ;;<br>  <span class="hljs-string">"第2个变量的内容"</span>)<br>  程序段<br>  ;;<br>  * )<br>  程序段<br>  ;;<br></code></pre></td></tr></table></figure>

<p>| <code>shift</code> 会移动变量，而且 shift 后面可以接数字，代表拿掉最前面的几个参数的意思。–p385<br>(左移)</p>
<p>| 在脚本文件中的较特殊的变量： –p384</p>
<ul>
<li><code>$#</code>: 代表后接的参数“个数”;</li>
<li><code>$@</code>: 代表”$1” 、”$2” 、”$3”之意思，每个变量是独立的</li>
<li><code>$*</code>: 代表”$1c$2c$3c$4”，其中 c 为分割字符，默认为空格键。</li>
</ul>
<p>| 在脚本文件中可以使用默认变量（$0, $1, $2） –p384</p>
<p>| 中括号比较常用在调剂判断式 if…then..fi 的情况中。–p383</p>
<p>| 也可以使用<code>[]</code>来测试，注意括号两边需要有空格。 –p382</p>
<p>| 利用 <code>test</code>命令的测试功能 –p380<br>各参数参考 p380；<br>eg.</p>
<ul>
<li><code>-e</code> 表示文件名是否存在；</li>
<li><code>-f</code> 该文件名是否存在且为文件（file）;</li>
<li><code>-d</code> 该文件名是否存在且为目录（directory）;</li>
<li><code>-z</code> 测试字符串是否为空：<code>test -z string</code></li>
</ul>
<p>| 利用 <code>source</code> 来执行脚本，脚本中的变量在父进程中依然可用（默认不可用）。–p379<br>eg. <code>source sh03.sh</code></p>
<p>| 利用 <code>$((运算内容))</code> 来进行数值运算。<br>例如： <code>echo $ (( 13 % 3))</code></p>
<p>| 脚本文件中的<code>exit 0</code>: –p376<br>表示离开 script 并且回传一个 0 给系统。（可以通过<code>echo $?</code> 来查看上一个命令的运行结果）</p>
<p>| 程序内容的说明(要养成这种好习惯)： –p376</p>
<ul>
<li>功能；</li>
<li>版本信息；</li>
<li>作者与联络方式；</li>
<li>版权声明方式；</li>
<li>较特殊的命令，使用”绝对路径”的方式来说明；</li>
<li>建立日期；</li>
<li>历史记录；</li>
<li>执行时需要的环境变量预先声明与设置；</li>
<li>批注说明；</li>
</ul>
<p>| 脚本文件中的第一行 <code>#!/bin/bash</code> 声明这个 script 使用的 shell 名称。 –p375<br>声明这个文件内的语法使用 bash 的语法。</p>
<p>| 可以利用 sh 的参数，如 -n 及 -x 来检查与追踪脚本文件的语法是否正确。 –p375</p>
<p>| 可以使用<code>sh shell.sh</code>来执行脚本文件：表示我想要直接以 bash 的功能来执行 shell.sh<br>这个文件。 –p375</p>
<p>| 名在 shell script 的编写中还需要用到下面的注意事项：</p>
<ol>
<li>命令的执行是从上而下、从左而右地分析与执行；</li>
<li>命令的执行就如同第 5 章内提到的：命令、参数间的多个空白都会被忽略掉；</li>
<li>空白行也将被忽略掉，并且[tab] 按键所得的空白同样视为空格键；</li>
<li>如果读到一个 Enter 符号 （CR）, 就尝试开始执行该行（或该串）命令；</li>
<li>至于如果一行的内容太多，则可以使用 <code>&quot;\[Enter]&quot;</code>来扩展至下一行；</li>
<li>“#”可作为批注。任何加在#后面的数据将全部被视为批注文字而被忽略。</li>
</ol>
<p>| shell script 用在系统管理上面是很好的一项工具，但是用在处理大量数值运算上，就不够好了，因为<br>shell script 的速度较慢，且使用的 CPU 资源较多，造成主机资源的分配不良。 –p374</p>
<p>| 为什么学习 shell script –p373</p>
<ul>
<li>自动化管理重要依据；</li>
<li>追踪管理系统的重要工作；</li>
<li>简单入侵检测系统；</li>
<li>连续命令单一化；</li>
<li>简单的数据处理；</li>
<li>跨平台支持与学习历程较短；</li>
</ul>
<p>| shell script 是针对 shell 所写的“脚本”!</p>
<h3 id="第-13-章-学习-shell-script"><a href="#第-13-章-学习-shell-script" class="headerlink" title="第 13 章 学习 shell script"></a>第 13 章 学习 shell script</h3><p>| 用 diff 可以用来制作补丁文件，然后通过 <code>patch</code> 来更新或还原文件。 –p368</p>
<p>| diff 和 cmp 的区别： –p367</p>
<ul>
<li>diff: 以行为单位;</li>
<li>cmp： 以字节为单位；</li>
</ul>
<p>| cmp 也用来比较两个文件，利用“字节”单位去比较。还可以用来比较非纯文本文件；–p367</p>
<p>| diff 还可以来比较两个目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">diff /etc/rc3.d/ /etc/rc5.d<br></code></pre></td></tr></table></figure>

<p>| diff 一般用来比较文本文件，并且以行为单位来比较。<br>diff 通常是用在同一文件的新旧版本区别上。 –p367</p>
<p>| awk 主要是处理每一行的字段内的数据，而默认的字段的分隔符为空格键或[tab]键。 –p364</p>
<p>| 相比于 sed 常常作用于一整行的处理， awk 则比较倾向于将一行分成数个 “字段” 来处理。 –p363</p>
<p>| <code>printf</code>，按照指定的格式来输出。 –p363</p>
<p>| 特别注意 <code>!</code> 在正则表达式中并不是特殊字符。 –p361</p>
<p>| 扩展型正则表达式可以通过组功能 “|” 来进行一次查找。 –p361</p>
<p>| <code>sed</code> 的查找和替换类似于 <code>vi</code> –p359</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sed <span class="hljs-string">'s/要被替换的字符串/新的字符串/g'</span><br></code></pre></td></tr></table></figure>

<p>| <code>sed</code> 后面的动作，务必要以 <code>&#39;&#39;</code> 两个单引号括住； –p358</p>
<p>| <code>sed</code> 本身是一个管道命令，可以分析 standard input<br>而且还可以将数据进行替换、删除、新增、选取特定行等的功能。 –p357</p>
<p>| 限定字符重复数:<code>{}</code> –p355<br>两个 o： <code>&#39;o\{2\}&#39;</code><br>两个 o 以上： <code>&#39;o\{2,\}&#39;</code><br>两-五个 o： <code>&#39;o\{2,5\}&#39;</code></p>
<p>| 去掉空白行和去掉以<code>#</code>开头的行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">grep <span class="hljs-string">'^$'</span> -v regular_express.txt | grep -v <span class="hljs-string">'^#'</span> -n<br></code></pre></td></tr></table></figure>

<p>| 找到空白行： –p354</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">grep <span class="hljs-string">'^$'</span> -n regular_express.txt<br></code></pre></td></tr></table></figure>

<p>| 特殊字符若在正则表达式中有特殊含义，需要用转义字符<code>\</code>来加以修饰。 –p353</p>
<p>| 不想要开头是英文字母： –p353</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -n <span class="hljs-string">'^[^a-zA-Z]'</span> regular_express.txt<br></code></pre></td></tr></table></figure>

<p>| 以<code>.</code>结尾的那一行的表示：<code>\.$</code> –p353</p>
<p>| 注意 –p353<br><code>[^a-z]</code> 和<code>^[a-z]</code>这两个是不一样的意思；<br>在<code>[]</code>内表示“反向选择”,<br>在<code>[]</code>外表示“定位在行首”。</p>
<p>| 下面的例子是一样的：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">grep -n <span class="hljs-string">'[[:digit:]]'</span> regular_express.txt<br>grep -n <span class="hljs-string">'[0-9]'</span> regular_express.txt<br></code></pre></td></tr></table></figure>

<p>| 练习：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">grep -n <span class="hljs-string">'t[ea]st'</span> regular_express.txt<br></code></pre></td></tr></table></figure>

<p>注意：<code>[]</code>里面不论有几个字符，它都只代表某“一个”字符。<br>所以匹配了 tast 和 test。–p352</p>
<p>| 使用正则表达式，要注意语系的不同（编码） –p349</p>
<p>| 正则表达式和通配符是完全不一样的东西！ –p348<br>通配符代表的是 bash 操作接口的一个功能，<br>正则表达式是一种字符串处理的表示方式。</p>
<p>| 正则表达式的广泛用途</p>
<ul>
<li>系统管理员管理主机;</li>
<li>邮件服务器；</li>
</ul>
<p>| 正则表达式就是处理字符串的方法，它是以行为单位来进行字符串的处理行为，<br>正则表达式通过一些特殊符号的辅助，可以让用户轻易达到查找、删除、替换某特定字符串的处理<br>程序。 –p347</p>
<h2 id="第-12-章-正则表达式与文件格式化处理"><a href="#第-12-章-正则表达式与文件格式化处理" class="headerlink" title="第 12 章 正则表达式与文件格式化处理"></a>第 12 章 正则表达式与文件格式化处理</h2><p>| 管道命令的重点是它仅会处理 standard output, 对于 standard error output 会予以忽略。<br>管道命令必须要能够接受来自前一个命令的数据称为 standard input 继续处理才行。 –p344</p>
<p>| <code>tee</code> 会将数据流于文件和屏幕；而输出到屏幕的，其实就是 stdout, 可以让下个命令继续处理。<br>–p338</p>
<p>| grep 可以解析一行文字，取得关键字，若该行有存在关键字，就会整行显示出来。 –p336</p>
<p>| 数据流重定向就是将某个命令执行后应该要出现在屏幕上的数据传输到其他的地方，例如文件或者<br>是设备（例如打印机之类的） –p328</p>
<p>| source ： 读取环境变量文件的命令；</p>
<ul>
<li>利用 source 或小数点（.）都可以将配置文件的内容读进目前的 shell 环境中。–p324<br>(用来动态更新环境变量)</li>
</ul>
<p>| login shell 和 non-login shell 读取的配置文件数据是不一样的。 –p322</p>
<p>| 基本上，命令运行的顺序： –p320</p>
<ul>
<li>以相对/绝对路径执行命令，例如 “/bin/ls” 或 “./ls”;</li>
<li>由 alias 找到该命令莱执行;</li>
<li>由 bash 内置的命令来执行；</li>
<li>通过 $PATH 这个变量的顺序找到的第一个命令来执行；</li>
</ul>
<p>| alias 设置别名为什么要用单引号？<br>单引号、双引号、不用引号其实都可以，但是有些是有空格的，就需要用单引号或双引号：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">alias</span> lm=<span class="hljs-string">'ls -al | more'</span><br><span class="hljs-built_in">alias</span> h=<span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure>

<p>| 命令别名与变量有什么不同？<br>命令别名是新创的一个新的命令，你可以直接执行该命令。<br>至于变量则需要使用类似 <code>echo</code> 命令才能调用变量的内容。</p>
<p>| 添加别名： <code>alias vi=&#39;vim&#39;</code><br>删除别名： <code>unalias vi</code></p>
<p>| 注意： alias 的定义规则与变量定义规则几乎相同，所以你只要在 alias 后面加上你的{“别名”=’命令参数…’}.<br>eg. <code>alias lm=&#39;ls -l | more&#39;</code> –p317</p>
<p>| <code>read</code> 想要跟用户对谈？用这个命令就对了。 –p310</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">read</span> -p <span class="hljs-string">"Please keyin your name:"</span> -t 30 named<br></code></pre></td></tr></table></figure>

<p>| 被 export 后的变量，我们可以称为“环境变量”。环境变量可以被子进程所引用，<br>但是其他的自定义变量内容就不会存在于子进程中。 –p309</p>
<p>| 可以将父进程的自定义变量变成环境变量，就可以让该变量值继续存在于子进程。–p308</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> 变量名称<br></code></pre></td></tr></table></figure>

<p>| 子进程仅会记录父进程的环境变量，子进程不会继承父进程的自定义变量。 –p307</p>
<p>| 留意：较高级的硬件通常会向下兼容旧有的软件，但较高级的软件可能无法在旧机器上面安装。 –p307<br>举例来说：你可以在 x86_64 的硬件上安装 i386 的 Linux 操作系统，但是你无法在 i686 的硬件<br>上安装 x86_64 的 Linux 操作系统。</p>
<p>| <code>?</code> 上一个命令的回传码。 –p307</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> $?<br></code></pre></td></tr></table></figure>

<p>| <code>$</code> 符号本身也是一个变量。这个代表的是目前这个 Shell 的线程代号，即是所谓的 PID。<br>想要知道外贸的 shell 的 PID， 用 “echo $$“ 即可，出现的数字就是你的 PID 号码。<br>（另外通过<code>bash</code> 命令来新建子进程，通过 <code>exit</code> 来推出子进程。） –p306</p>
<p>| 基本上，在 Linux 默认的情况下，使用{大写的字母}来设置的变量一般为系统内定需要的变量。–p306</p>
<p>| 自定义一个范围的随机数生成变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">declare</span> -i number=<span class="hljs-variable">$RANDOM</span>*10/32768;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$number</span><br></code></pre></td></tr></table></figure>

<p>| 使用 <code>$(uname -r)</code> 来代替 ```;因为反单引号容易打错或看错。 –p304</p>
<p>| 给常用的目录设置变量： –p304</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1. 进入到一个很长的目录中;</span><br><span class="hljs-built_in">cd</span> /lib/modules/$(uname -r)/kernel<br><span class="hljs-comment"># 2. 给当前目录设置变量：</span><br>work=$(<span class="hljs-built_in">pwd</span>)<br><span class="hljs-comment"># 3. 在其他地方进入到这个常用目录：</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$work</span><br></code></pre></td></tr></table></figure>

<p>| 反单引号(`) 这个符号代表的意义为何？<br>在一串命令中，在 （`）之内的命令将会被先执行，而其执行出来的结果将作为外部的输入信息。<br>–p303</p>
<p>| 使用了单引号的时候，$name 将失去原有的变量内容，仅为一般字符的显示类型而已。 –p303</p>
<p>| 在变量的设置当中，单引号与双引号的用途有何不同？<br>答：单引号与双引号的最大不同在于双引号仍然可以保有变量的内容，<br>但单引号内仅能是一般字符，而不会有特殊符号。 –p303</p>
<p>| 在一般情况下，父进程的自定义变量是无法在子进程内使用的。<br>但是通过 export 将变量变成环境变量后，就能够在子进程下面应用了。 –p302</p>
<p>| bash 　优点　－－p297</p>
<ul>
<li>命令记忆能力；</li>
<li>命令与文件不全功能；</li>
<li>命令别名（alias）；</li>
<li>作业控制（jobs）前台、后台控制；</li>
<li>程序脚本；</li>
<li>通配符；</li>
</ul>
<p>| 为何学习　 shell？ –p295<br>－　相对于图形界面的软件， distributions 各家的 bash 　是一样的;<br>－　远程管理，命令行界面快速，稳定；<br>－　系统管理的利器；</p>
<p>| 一般用户只能通过 shell 来跟内核通信，以让内核达到我们所想要达到的工作。 –p294</p>
<p>| bash</p>
<ul>
<li>变量的设置和使用；</li>
<li>bash 操作环境的搭建；</li>
<li>数据流重定向的功能；</li>
<li>管道命令；</li>
</ul>
<h2 id="第-11-章-认识和学习-bash"><a href="#第-11-章-认识和学习-bash" class="headerlink" title="第 11 章 认识和学习 bash"></a>第 11 章 认识和学习 bash</h2><p>| 格式转换：<br><code>iconv -f big5 -t utf8 vi.big5 -o vi.utf8</code></p>
<p>| 尽可能使用 utf-8 来编码； -p289</p>
<p>| vim 记录操作的文件：<code>.viminfo</code></p>
<p>| 多窗口编辑：<br><code>:sp{filename}</code><br>如果想要在新窗口启动另一个文件，就添加文件名，否则仅输入 :sp 时，出现的则是同一个文件在两个<br>窗口间。</p>
<p>| 多文件编辑 –p286</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">vim hosts /etc/hosts<br></code></pre></td></tr></table></figure>

<p>| 块选择：<br>可以以块为单位，而不是以行为单位来处理你的整份文件。<br>借助 <code>[ctrl]+v</code> 来进行块选择； –p285</p>
<p>| 为什么要用 vim 呢？<br>因为 vim 具有颜色显示的功能，并且还支持许多的程序语法。 –p284</p>
<p>| 当我们在 vim 的一般模式下按下 [ctrl]-Z 的组合键时，你的 vim 会被丢到后台去执行； –p282</p>
<p>| 在 vi 里面，[TAB] 键所得到的结果与空格符所得到的结果是不一样的，特别强调一下。 –p277</p>
<p>| 3 种模式： –p276</p>
<ul>
<li>一般模式；</li>
<li>编辑模式；</li>
<li>命令行模式；</li>
</ul>
<p>| vim 支持的一些功能 –p276</p>
<ul>
<li>正则表达式的查找架构；</li>
<li>多文件编辑；</li>
<li>块复制；</li>
</ul>
<p>| 为何要学 vim –p275</p>
<ul>
<li>所有的 UNIX Like 系统都会内置 vi 文本编辑器，其他的文本编辑器不一定会存在。</li>
<li>很多软件的编辑借口都会主动调用 vi；</li>
<li>vim 具有程序编辑的能力，可以主动以字体颜色辨别语法的正确性，方便程序设计；</li>
<li>程序简单，编辑速度相当快速；</li>
</ul>
<h2 id="第-10-章-vim-程序编辑器"><a href="#第-10-章-vim-程序编辑器" class="headerlink" title="第 10 章 vim 程序编辑器"></a>第 10 章 vim 程序编辑器</h2><p>| 光盘刻录工具： cdrecord –p267</p>
<p>| 新建镜像文件：mkisofs –p265</p>
<p>| 和 <code>dump</code> 备份对应的是恢复 <code>restore</code> –p262</p>
<p>| <code>dump</code>,除了能针对整个文件系统备份之外，也能够仅针对目录来备份。 –p259</p>
<p>| 打包的时候，忽略某些文件： tar -jcv -f /root/system.tar.bz2 –exclude=/root/etc*<br>–p257</p>
<p>| 仅解开单一文件的做法： tar -jxv -f /root/etc.tar.bz2 etc/shadow –p256</p>
<p>| 其实最简单地使用 tar 就只要记忆下面的方式即可： –p254</p>
<ul>
<li>压缩： tar -jcv -f filename.tar.bzz2 要被压缩的文件或目录名称；</li>
<li>查询： tar -jtv -f filename.tar.bzz2</li>
<li>解压缩： tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录；<br>注意：-c、-t、-x 不可同事出现在一串命令行中。</li>
</ul>
<p>| 打包与压缩是不同的概念： –p254</p>
<ul>
<li>打包：将多个文件和目录包成一个大文件；（例如：tar）</li>
<li>压缩：缩小文件体积；(例如： compress, gzip, bzip2)</li>
</ul>
<p>| <code>bzip2</code>的压缩比相对于 <code>gzip</code> 更好，用法同 <code>gzip</code>; –p253<br>使用 <code>bzcat</code>可以在不用解压缩的情况下，读取文本文件的内容。</p>
<p>| 通过 <code>zcat</code> 可以读取文本压缩文件的内容。–p252</p>
<p>| 压缩： <code>gzip [-cdtv#] 文件名</code></p>
<ul>
<li><code>-c</code> 输出到屏幕上，可以用来重定向输出到制定文件;</li>
<li><code>-d</code> 解压缩； （默认会删除掉原有的<code>gz</code>文件，同样可以组合<code>-c</code>参数而不删除 <code>gz</code> 文件）</li>
<li><code>-#</code> 压缩等级，用户可以自己指定压缩等级，-1 最快，压缩比差；-9 最慢，压缩比最好；<br>默认是 -6</li>
</ul>
<p>| compress 已经很少用了， gzip 可以说是应用最广的压缩命令了。<br>目前 gzip 可以解开 compress、zip、与 gzip 等软件所压缩的文件。–p252</p>
<p>| 文件扩展名的存在是为了便于人类小小的大脑的识别的。（虽然 linux 文件的属性基本上和文件名<br>没有绝对的关系） –p250</p>
<p>| 压缩技术：一些聪明的计算机工程师利用复杂的计算方式，讲没有使用到的空间“丢”出来，以让<br>文件占用的空间变小。 –p249</p>
<p>| 计算机上最小的计量单位是 <code>bit</code>, 另外：1byte = 8bit</p>
<h2 id="第-9-章-文件与文件系统的压缩与打包"><a href="#第-9-章-文件与文件系统的压缩与打包" class="headerlink" title="第 9 章: 文件与文件系统的压缩与打包"></a>第 9 章: 文件与文件系统的压缩与打包</h2><p>| 常见的支持文件系统： –p209</p>
<ul>
<li>传统文件系统： ext2;</li>
<li>日志文件系统： ext3/NTFS;</li>
<li>网络文件系统： NFS</li>
</ul>
<p>| 除非你有使用到大于 2TB 以上的磁盘，否则请使用 <code>fdisk</code> 这个程序来进行分区。 –p244</p>
<p>| 可以使用 <code>parted</code> 来处理高于 2TB 的分区情况。 –p243</p>
<p>| 使用<code>du -sb /etc</code>命令来查看目录所占用的所有空间。 –p243</p>
<p>| 使用<code>ls -l</code>去查询某个目录下的数据时，第一行都会出现一个<code>total</code>字样，<br>其实那就是该目录下的所有数据所占用的实际 block 数量 xblock 大小的值。–p243</p>
<p>| swap 的使用场合主要是在服务器上面，个人的桌面计算机一般用不到。–p241</p>
<p>| 构建 swap 分区 –p240</p>
<ul>
<li>使用物理分区：fdisk</li>
<li>使用文件块：dd</li>
</ul>
<p>| swap 的功能就是在应付物理内存不足的情况下所造成的内存扩展记录的功能。–p238</p>
<p>| 按照制定的参数格式设置到<code>/etc/fstab</code>文件中，即实现开机挂载。<br>注意：需要检查写入到<code>/etc/fstab</code>的语法有没有错误，这个很重要，因为文件如果写错了，<br>则你的 Linux 很可能将无法顺利开机完成！–p236</p>
<p>| 挂载点是什么？一定是目录。 –p235</p>
<p>| 开机挂载<br><code>/etc/fstab (file system table)</code>就是将我们利用 mount 命令进行挂载时，<br>将所有的参数写入到这个文件中就可以了。</p>
<p>| 使用<code>hdparm</code> 在 sata 上做测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">hdparm -Tt /dev/sda<br>hdparm -Tt /dev/sdb<br></code></pre></td></tr></table></figure>

<p>| 可以通过 Label 的方式进行挂载： –p231</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mount -L <span class="hljs-string">"vbird_logical"</span> /mnt/ccc<br></code></pre></td></tr></table></figure>

<p>| e.g., 挂载一个 iso 文件到<code>/mnt/ccc</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mount xxxx.iso /mnt/ccc<br></code></pre></td></tr></table></figure>

<p>一般这种 iso 文件都是只读形式的，因此可能会有下面这种提示：<br><code>mount: /dev/loop0 is write-protected, mounting read-only</code><br>镜像文件不刻录就挂载使用。</p>
<p>| 进入到挂载目录中，进行卸载操作是不成功的。<br><code>umount: /media/cdrome: device is busy</code><br>解决办法是退出挂载目录，重新<code>umount</code><br>–p230</p>
<p>| 磁盘挂载： mount</p>
<p>| 磁盘检验：fsck, badblocks</p>
<p>| 磁盘分区完成后，进行格式化操作：<code>mkfs</code></p>
<p>| fdisk 没有办法处理大于 2TB 以上的磁盘分区。（可以使用 parted 这个命令） –p223</p>
<p>| fdisk<br>需要以管理员身份运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">fdisk /dev/sda<br>fdisk /dev/sdb <span class="hljs-comment"># 注意不需要带具体数值</span><br></code></pre></td></tr></table></figure>

<p>| 要制作连接文件必须要使用<code>ln</code>这个命令；–p215</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">ln [-sf] 源文件 目标文件<br></code></pre></td></tr></table></figure>

<p>| <code>symbolic link</code>符号连接；（类似于 windows 上的快捷方式）</p>
<p>| hard link 连接有限制：</p>
<ul>
<li>不能跨文件系统；</li>
<li>不能连接到目录；</li>
</ul>
<p>| 注意硬链接和软连接的区别；–p213</p>
<p>| 整个 filesystem 其实都是 VFS（Virtual Filesystem Switch）进行管理；</p>
<p>| 根目录的上一级就是他自己。 <code>ls -ild / /. /..</code>，通过这个命令发现<code>inode</code>都是 2；</p>
<p>| Ext2 文件系统 –p197</p>
<h2 id="第-8-章"><a href="#第-8-章" class="headerlink" title="第 8 章"></a>第 8 章</h2><p>| 通过 find 来按时间属性查找：</p>
<ul>
<li>mtime</li>
<li>ctime</li>
<li>atime</li>
</ul>
<p>| 更新 locate 数据库：<br><code>updatedb</code></p>
<p>| 按文件名查找：</p>
<ul>
<li><code>whereis</code></li>
<li><code>locate</code></li>
</ul>
<p>| 查找<code>commond</code>的路径:<br><code>which -a ifconfig</code></p>
<p>| root 用户身份的 umask 权限默认是：022<br>一般用户身份的 umask 权限默认是：002 –p183</p>
<p>| 设置 umask: <code>umask 002</code></p>
<ul>
<li>具体运算规则，是默认的权限减去 umask 数值。</li>
</ul>
<p>| 新建文件的默认权限：-rw-rw-rw-<br>新建文件夹的默认权限：drwxrwxrwx<br>注意：具体的生成结果还得依赖于 umask 的值(拿掉 umask 的那一部分)。</p>
<p>| <code>ll; ls</code>:<br><code>;</code>分号表示连续命令的执行；</p>
<p>| <code>ll</code>命令是<code>ls -l</code>的缩写。–p179</p>
<p>| <code>touch</code>可以只用来修改时间，使用参数<code>-a</code>。 –p179<br>可以指定时间，使用<code>-d</code>参数。<br>还可以用来创建空文件。</p>
<p>| tail 命令：显示文件后面几行<br><code>-f</code>参数表示，持续检测文件的内容(实时性)。按 ctrl-c 停止检测。</p>
<p>| man 命令就是通过调用 less 来显示说明文件的内容的。</p>
<p>| <code>nl</code>显示文件的时候，顺便显示行号。</p>
<p>| <code>rename</code>更改大量文件的文件名</p>
<p>| <code>mv</code>命令<br>移动文件 &amp; 重命名文件</p>
<p>| <code>rm</code>命令<br>删除文件/目录</p>
<ul>
<li><code>-r</code> 遍历删除参数。（慎用）</li>
</ul>
<p>| 你是要站在巨人的肩膀上瞭望的。</p>
<p>| <code>mv</code>命令<br>用途：</p>
<ul>
<li>移动文件/文件夹；</li>
<li>用来重命名；</li>
</ul>
<p>| <code>cp</code>命令<br>用途：</p>
<ul>
<li><p>复制文件；<br>加上参数<code>-a</code> 讲文件的所有特性一起复制过来。（包括属性/权限）<br>这个功能常用来备份文件。<br>注意：复制给别人的文件要注意到文件的权限（否则别人无法修订）。<br>要复制连接文件的属性，就得使用 -d 的参数了。</p>
</li>
<li><p>创建链接（快捷方式）</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua配置</title>
    <url>/lua/config/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># c</span><br><span class="hljs-comment"># https://askubuntu.com/questions/194523/how-do-i-install-gnu-readline</span><br>    sudo apt-get install libreadline6 libreadline6-dev<br><br>curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz<br>tar zxf lua-5.3.5.tar.gz<br><span class="hljs-built_in">cd</span> lua-5.3.5<br>make linux <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMq</title>
    <url>/mq/RabbitMq/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/5dabec98e51d4524c06047aa" target="_blank" rel="noopener">docker安装RabbitMq - 掘金</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><br><span class="hljs-attr">version:</span> <span class="hljs-string">'3.3'</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">rabbitmq-server:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">rabbitmq</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">rabbitmq:3.8-management</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">15672</span><span class="hljs-string">:15672</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">25672</span><span class="hljs-string">:25672</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">4369</span><span class="hljs-string">:4369</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">5671</span><span class="hljs-string">:5671</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">5672</span><span class="hljs-string">:5672</span><br>    <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./mq/rabbitmq:/var/lib/rabbitmq</span><br>    <span class="hljs-attr">environment:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Hong_Kong</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">RABBITMQ_DEFAULT_USER=qq</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">RABBITMQ_DEFAULT_PASS=1234</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">RABBITMQ_DEFAULT_VHOST=/qq</span><br></code></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/2ecad37d64ff" target="_blank" rel="noopener">Rabbit安装配置问题 - 简书</a></p>
<p><a href="https://www.jianshu.com/p/dae5bbed39b1" target="_blank" rel="noopener">RabbitMQ入门教程（概念，应用场景，安装，使用） - 简书</a></p>
]]></content>
      <tags>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ 相关</title>
    <url>/mq/RocketMQ/</url>
    <content><![CDATA[<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><p>virtualbox: 6.1<br>centos: 7.0<br>jdk: 1.8<br>rocketmq: <a href="https://archive.apache.org/dist/rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip" target="_blank" rel="noopener">https://archive.apache.org/dist/rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip</a><br>rocketmq-console: <a href="https://github.com/apache/rocketmq-externals/tree/release-rocketmq-console-1.0.0" target="_blank" rel="noopener">https://github.com/apache/rocketmq-externals/tree/release-rocketmq-console-1.0.0</a></p>
<h2 id="启动-RocketMQ"><a href="#启动-RocketMQ" class="headerlink" title="启动 RocketMQ"></a>启动 RocketMQ</h2><p><strong>启动 mq server</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">./mqnamesrv<br></code></pre></td></tr></table></figure>

<p><strong>启动 broker</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">./mqbroker -n localhost:<span class="hljs-number">9876</span><br></code></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 配置 namesrv 地址环境</span><br><span class="hljs-built_in">export</span> NAMESRV_ADDR=localhost:9876<br><span class="hljs-comment"># 示例：生产</span><br>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer<br><span class="hljs-comment"># 示例：消费</span><br>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer<br></code></pre></td></tr></table></figure>

<p><strong>启动控制台</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /root/c/rocketmq-externals-rocketmq-console-1.0.0<br>mvn clean package -Dmaven.test.skip<br>java -jar /root/c/rocketmq-externals-rocketmq-console-1.0.0/rocketmq-console/target/rocketmq-console-ng-1.0.0.jar<br></code></pre></td></tr></table></figure>

<h2 id="基于-RocketMQ-分布式事务"><a href="#基于-RocketMQ-分布式事务" class="headerlink" title="基于 RocketMQ 分布式事务"></a>基于 RocketMQ 分布式事务</h2><p><img src="http://cdn.lyloou.com/img/RocketMQ-2021-06-15-11-33-52.png" alt="RocketMQ-2021-06-15-11-33-52"></p>
<blockquote>
<p>RocketMQ 事务消息的实现原理就是基于两阶段提交和事务状态回查，来决定消息最终是提交还是回滚。</p>
</blockquote>
<ul>
<li><a href="https://juejin.cn/post/6844904099993878536" target="_blank" rel="noopener">基于 RocketMQ 分布式事务 - 完整示例</a></li>
</ul>
]]></content>
      <tags>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】配置</title>
    <url>/linux/%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="修改-hostname"><a href="#修改-hostname" class="headerlink" title="修改 hostname"></a>修改 hostname</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">vi /etc/hostname<br>reboot<br></code></pre></td></tr></table></figure>

<h2 id="Linux-Basics-Set-a-Static-IP-on-Ubuntu"><a href="#Linux-Basics-Set-a-Static-IP-on-Ubuntu" class="headerlink" title="Linux Basics - Set a Static IP on Ubuntu"></a><a href="https://www.howtoforge.com/linux-basics-set-a-static-ip-on-ubuntu" target="_blank" rel="noopener">Linux Basics - Set a Static IP on Ubuntu</a></h2><p>Here is an example for an older Ubuntu Release:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">auto lo eth0<br>iface lo inet loopback<br>iface eth0 inet static<br>	address 192.168.1.100<br>	netmask 255.255.255.0<br>	gateway 192.168.1.1<br></code></pre></td></tr></table></figure>

<p>And here an example for Ubuntu 16.04 and newer:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># This file describes the network interfaces available on your system</span><br><span class="hljs-comment"># and how to activate them. For more information, see interfaces(5).</span><br><br><span class="hljs-built_in">source</span> /etc/network/interfaces.d/*<br><br><span class="hljs-comment"># The loopback network interface</span><br>auto lo<br>iface lo inet loopback<br><br><span class="hljs-comment"># test</span><br><br><span class="hljs-comment"># The primary network interface</span><br>auto ens33<br>iface ens33 inet static<br> address 192.168.1.100<br> netmask 255.255.255.0<br> network 192.168.1.0<br> broadcast 192.168.1.255<br> gateway 192.168.1.1<br> dns-nameservers 8.8.8.8 8.8.4.4<br></code></pre></td></tr></table></figure>

<h2 id="Changing-ubuntu-server’s-language-to-english"><a href="#Changing-ubuntu-server’s-language-to-english" class="headerlink" title="Changing ubuntu server’s language to english"></a>Changing ubuntu server’s language to english</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get install language-pack-en language-pack-en-base manpages<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># /etc/default/locale</span><br>LANG=<span class="hljs-string">"en_US.UTF-8"</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">## OR</span><br>sudo update-locale LANG=en_US.UTF-8<br></code></pre></td></tr></table></figure>

<h2 id="build-essential"><a href="#build-essential" class="headerlink" title="build-essential"></a>build-essential</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">apt-get install build-essential<br></code></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">sudo apt-get <span class="hljs-keyword">install</span> aptitude<br>sudo aptitude <span class="hljs-keyword">install</span> <span class="hljs-keyword">build</span>-essential<br></code></pre></td></tr></table></figure>

<h2 id="switch-between-gdm-lightdm"><a href="#switch-between-gdm-lightdm" class="headerlink" title="switch between gdm,lightdm"></a>switch between gdm,lightdm</h2><p><a href="http://www.webupd8.org/2011/07/how-to-switch-between-gdm-lightdm-or.html" target="_blank" rel="noopener">http://www.webupd8.org/2011/07/how-to-switch-between-gdm-lightdm-or.html</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo dpkg-reconfigure lightdm<br></code></pre></td></tr></table></figure>

<h2 id="How-can-I-define-startup-applications-with-the-Awesome-Window-Manager-Ask-Ubuntu"><a href="#How-can-I-define-startup-applications-with-the-Awesome-Window-Manager-Ask-Ubuntu" class="headerlink" title="[How can I define startup applications with the Awesome Window Manager? - Ask Ubuntu]("></a>[How can I define startup applications with the Awesome Window Manager? - Ask Ubuntu](</h2><p><a href="https://askubuntu.com/questions/57264/how-can-i-define-startup-applications-with-the-awesome-window-manager" target="_blank" rel="noopener">https://askubuntu.com/questions/57264/how-can-i-define-startup-applications-with-the-awesome-window-manager</a>)</p>
<p>Starting from a template<br>First you’ll need to copy the template rc.lua file into your home folder</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mkdir ~/.config/awesome<br>cp /etc/xdg/awesome/rc.lua ~/.config/awesome/<br></code></pre></td></tr></table></figure>

<p>Defining applications to start<br>Now using awesome - edit config copy the following code at the bottom of your new rc.lua file</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">local</span> cmds =<br>  &#123;<br>    <span class="hljs-string">"firefox"</span>,<br>    <span class="hljs-string">"xedit"</span><br>  &#125;<br><br>  <span class="hljs-keyword">for</span> _,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(cmds) <span class="hljs-keyword">do</span><br>    awful.util.spawn(i)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>

<p>In this example - firefox and xedit are run on startup.<br>An excellent wiki page describing this and much more can be found on <a href="https://wiki.archlinux.org/index.php/Awesome3#Autorun_programs" target="_blank" rel="noopener">ArchLinux</a></p>
<h2 id="rootlogin"><a href="#rootlogin" class="headerlink" title="rootlogin"></a>rootlogin</h2><p>root 账号不能登录，提示 ssh permission denied 问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">vi /etc/ssh/sshd_config<br><span class="hljs-comment"># add below line</span><br>PermitRootLogin yes<br><span class="hljs-comment"># then restart sshd</span><br>service sshd restart<br></code></pre></td></tr></table></figure>

<h2 id="ubuntu-设置静态网络"><a href="#ubuntu-设置静态网络" class="headerlink" title="ubuntu 设置静态网络"></a>ubuntu 设置静态网络</h2><ol>
<li>修改 /etc/netplan/00-installer-config.yaml</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">network:</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">2</span><br>  <span class="hljs-comment"># renderer: networkd</span><br>  <span class="hljs-attr">ethernets:</span><br>    <span class="hljs-attr">enp0s3:</span><br>      <span class="hljs-attr">dhcp4:</span> <span class="hljs-literal">no</span><br>      <span class="hljs-attr">addresses:</span> <span class="hljs-string">[192.168.137.15/24]</span><br>      <span class="hljs-attr">gateway4:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.137</span><span class="hljs-number">.1</span><br>      <span class="hljs-attr">nameservers:</span><br>        <span class="hljs-comment"># search: [itzgeek.local]</span><br>        <span class="hljs-attr">addresses:</span> <span class="hljs-string">[233.5.5.5,</span> <span class="hljs-number">233.6</span><span class="hljs-number">.6</span><span class="hljs-number">.6</span><span class="hljs-string">]</span><br></code></pre></td></tr></table></figure>

<ol start="2">
<li>执行命令：<code>netplay apply</code> 即可生效</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Tool</title>
    <url>/python/tool/</url>
    <content><![CDATA[<h2 id="HTTP-服务"><a href="#HTTP-服务" class="headerlink" title="HTTP 服务"></a>HTTP 服务</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">python -m SimpleHTTPServer 8080<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># alias.sh</span><br>www=<span class="hljs-string">'python -m SimpleHTTPServer 8000'</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka相关</title>
    <url>/mq/kafka/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/jasongj/category/672183.html" target="_blank" rel="noopener">Kafka - 随笔分类 - 郭俊 Jason - 博客园</a></p>
<p><a href="http://www.jasongj.com/2015/01/02/Kafka" target="_blank" rel="noopener">www.jasongj.com/2015/01/02/Kafka</a> 深度解析/</p>
<h2 id="查看-kafka-消息队列的积压情况-12463494-51CTO-博客"><a href="#查看-kafka-消息队列的积压情况-12463494-51CTO-博客" class="headerlink" title="查看 kafka 消息队列的积压情况-12463494-51CTO 博客"></a><a href="https://blog.51cto.com/12473494/2420105" target="_blank" rel="noopener">查看 kafka 消息队列的积压情况-12463494-51CTO 博客</a></h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">kafka-consumer-groups.sh --bootstrap-server <span class="hljs-number">172.20</span><span class="hljs-number">.154</span><span class="hljs-number">.101</span>:<span class="hljs-number">9092</span> --describe --group  marketing_group | grep task-prize-gift<br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/u013256816/article/details/79955578" target="_blank" rel="noopener">Kafka 的 Lag 计算误区及正确实现_朱小厮的博客-CSDN 博客_kafka lag</a></p>
<p>查看正在运行的消费组<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/20210702092139.png" alt="kafka_2020-07-30-12-51-21"></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">kafka-consumer-groups --bootstrap-server master:<span class="hljs-number">9092</span> --<span class="hljs-keyword">list</span> --<span class="hljs-keyword">new</span>-consumer<br>kafka-consumer-groups.<span class="hljs-keyword">sh</span> --bootstrap-server <span class="hljs-keyword">ce</span>-kafk<span class="hljs-variable">a:9092</span> --<span class="hljs-keyword">list</span><br></code></pre></td></tr></table></figure>

<p>计算消息的消息堆积情况<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/20210702092149.png" alt="kafka_2020-07-30-12-51-47"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">kafka-consumer-groups --bootstrap-server master:9092 --describe --group  test_kafka_game_x_g1<br>kafka-consumer-groups.sh --bootstrap-server ce-kafka:9092 --describe --group  default-group<br></code></pre></td></tr></table></figure>

<p>说明：</p>
<blockquote>
<p>LogEndOffset 下一条将要被加入到日志的消息的位移<br>CurrentOffset 当前消费的位移<br>LAG 消息堆积量</p>
<p>消息堆积量：消息中间件服务端中所留存的消息与消费掉的消息之间的差值即为消息堆积量也称之为消费滞后量</p>
</blockquote>
<h2 id="kafka-清理数据日志-Adrian·Ding-博客园"><a href="#kafka-清理数据日志-Adrian·Ding-博客园" class="headerlink" title="kafka 清理数据日志 - Adrian·Ding - 博客园"></a><a href="https://www.cnblogs.com/ding2016/p/9294544.html" target="_blank" rel="noopener">kafka 清理数据日志 - Adrian·Ding - 博客园</a></h2><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">log.dirs</span>=/data/kafka-logslog.cleaner.enable=<span class="hljs-literal">true</span><br><span class="hljs-attr">log.cleanup.policy</span> = delete　　　　// delete|compact<br><span class="hljs-attr">log.retention.hours</span>=<span class="hljs-number">168</span><br><span class="hljs-attr">log.segment.bytes</span>=<span class="hljs-number">1073741824</span><br><span class="hljs-attr">log.retention.check.interval.ms</span>=<span class="hljs-number">300000</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">kafka-configs.sh --zookeeper ce-zookeeper:2181 --entity-type topics --entity-name __consumer_offsets --describe<br>kafka-configs.sh --zookeeper ce-zookeeper:2181 --entity-type topics --entity-name __consumer_offsets --alter --delete-config cleanup.policy<br></code></pre></td></tr></table></figure>

<h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建名称为 topic_1 的主题</span><br>kafka-topics.sh --zookeeper nodek.com:2181/myKafka --create --topic topic_1 --partitions 1 --replication-factor 1<br><br><span class="hljs-comment"># 显示消费组</span><br>kafka-consumer-groups.sh --bootstrap-server nodek.com:9092 --list<br>kafka-consumer-groups.sh --new-consumer --bootstrap-server nodek.com:9092 --list<br><br><span class="hljs-comment"># 描述消费组（可以查看 offset, client_id, partition等）</span><br>kafka-consumer-groups.sh --bootstrap-server nodek.com:9092 --describe --group  consumer_demo1<br><br><span class="hljs-comment"># 生产消息</span><br>kafka-console-producer.sh --topic topic_1 --broker-list nodek.com:9092<br><br><span class="hljs-comment"># 消费消息（指定消费组为 console-consumer-83559）</span><br>kafka-console-consumer.sh --bootstrap-server nodek.com:9092 --topic topic_1 --group console-consumer-83559<br>kafka-console-consumer.sh --bootstrap-server 172.20.154.101:9092 --topic task-prize-gift-dev --from-beginning<br></code></pre></td></tr></table></figure>

<h2 id="【spring-kafka】属性-concurrency-的作用及如何配置-RoundRobinAssignor-、RangeAssignor-云-社区-腾讯云"><a href="#【spring-kafka】属性-concurrency-的作用及如何配置-RoundRobinAssignor-、RangeAssignor-云-社区-腾讯云" class="headerlink" title="【spring-kafka】属性 concurrency 的作用及如何配置(RoundRobinAssignor 、RangeAssignor) - 云+社区 - 腾讯云"></a><a href="https://cloud.tencent.com/developer/article/1846785" target="_blank" rel="noopener">【spring-kafka】属性 concurrency 的作用及如何配置(RoundRobinAssignor 、RangeAssignor) - 云+社区 - 腾讯云</a></h2><p><a href="https://www.cnblogs.com/wangzhuxing/p/10111831.html#_label1_14" target="_blank" rel="noopener">kafka 系列七、kafka 核心配置 - 小人物的奋斗 - 博客园</a></p>
<p><a href="https://blog.51cto.com/u_15239532/2858254" target="_blank" rel="noopener">Apache Kafka-通过 concurrency 实现并发消费_小小工匠的技术博客_51CTO 博客</a><br><a href="https://blog.csdn.net/weixin_42331178/article/details/119936230" target="_blank" rel="noopener">kafka 动态添加 topic，动态添加消费者_小小传奇的博客-CSDN 博客_kafka topic 动态</a><br><a href="https://blog.csdn.net/weixin_36380516/article/details/119524653?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.pc_relevant_default&spm=1001.2101.3001.4242.2&utm_relevant_index=4" target="_blank" rel="noopener">Kafka 中@KafkaListener 如何动态指定多个 topic<em>Java 知音</em>的博客-CSDN 博客</a><br><a href="https://blog.csdn.net/lishuangzhe7047/article/details/74530417" target="_blank" rel="noopener">Kafka auto.offset.reset 值详解_lishuangzhe7047 的博客-CSDN 博客_auto.offset.reset</a><br><a href="https://blog.csdn.net/qq_29976261/article/details/90229375" target="_blank" rel="noopener">Kafka 获得 topicPartition 的最早，最新 offset 的时间，以及存储量_卞卞要运动的博客-CSDN 博客_topicpartitions</a><br><a href="http://haoyuanliu.github.io/2020/07/24/Kafka%E6%B6%88%E8%B4%B9%E8%80%85%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/" target="_blank" rel="noopener">Kafka 消费者重复消费问题解决 | 贫贫贫贫僧</a></p>
<p><a href="https://www.cfanz.cn/mobile/resource/detail/QzqWOjxEnjxEv" target="_blank" rel="noopener">“高深莫测”的Kafka时间轮原理，原来也就这么回事-CFANZ编程社区</a></p>
]]></content>
      <tags>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>【Ruby】 Tool</title>
    <url>/ruby/tool/</url>
    <content><![CDATA[<h2 id="HTTP-服务"><a href="#HTTP-服务" class="headerlink" title="HTTP 服务"></a>HTTP 服务</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">ruby -run -e httpd . -p <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure>

<p>Q: [2019-07-23 17:21:43] ERROR Encoding::CompatibilityError: incompatible character encodings: ASCII-8BIT and UTF-8<br>A: 参考<a href="https://jhuthasach.com/skills/2018/03/21/Jekyll%E4%B8%AD%E6%96%87%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E7%BC%96%E7%A0%81%E9%A2%84%E8%A7%88/" target="_blank" rel="noopener">Jekyll 本地预览时路径中有中文不能编码无法预览 - Jhutha Sach</a></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># vi /usr/lib/ruby/2.3.0/webrick/httpservlet/filehandler.rb</span><br><span class="hljs-number">520</span>           s =  <span class="hljs-string">"&lt;TR&gt;&lt;TD class=\"name\"&gt;&lt;A HREF=\"<span class="hljs-subst">#&#123;HTTPUtils::escape(name)&#125;</span><span class="hljs-subst">#&#123;query <span class="hljs-keyword">if</span> name.end_with?(<span class="hljs-string">'/'</span>)&#125;</span>\"&gt;<span class="hljs-subst">#&#123;HTMLUtils::escape(dname)&#125;</span>&lt;/A&gt;&lt;/TD&gt;"</span><br><span class="hljs-number">521</span>           s &lt;&lt; <span class="hljs-string">"&lt;TD class=\"mtime\"&gt;"</span> &lt;&lt; (time ? time.strftime(<span class="hljs-string">"%Y/%m/%d %H:%M"</span>) : <span class="hljs-string">""</span>) &lt;&lt; <span class="hljs-string">"&lt;/TD&gt;"</span><br><span class="hljs-number">522</span>           s &lt;&lt; <span class="hljs-string">"&lt;TD class=\"size\"&gt;"</span> &lt;&lt; (size &gt;= <span class="hljs-number">0</span> ? size.to_s : <span class="hljs-string">"-"</span>) &lt;&lt; <span class="hljs-string">"&lt;/TD&gt;&lt;/TR&gt;\n"</span><br><span class="hljs-number">523</span>           res.body.force_encoding(<span class="hljs-string">"UTF-8"</span>) <span class="hljs-comment"># ============&gt; add this line</span><br><span class="hljs-number">524</span>           res.body &lt;&lt; s<br><span class="hljs-number">525</span>         &#125;<br><span class="hljs-number">526</span>         res.body &lt;&lt; <span class="hljs-string">"&lt;/TBODY&gt;&lt;/TABLE&gt;"</span><br><span class="hljs-number">527</span>         res.body &lt;&lt; <span class="hljs-string">"&lt;HR&gt;"</span><br></code></pre></td></tr></table></figure>

<ul>
<li><a href="http://www.benjaminoakes.com/2013/09/13/ruby-simple-http-server-minimalist-rake/" target="_blank" rel="noopener">Ruby Simple HTTP Server, minimalist Rake | Benjamin Oakes</a></li>
</ul>
<p><strong>tip: 快速重启脚本</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># vi .bashrc</span><br><span class="hljs-comment"># add below line</span><br><span class="hljs-built_in">alias</span> xapk=<span class="hljs-string">'/usr/local/src/apk-server/restart.sh'</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># restart.sh</span><br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">kill</span> service ...<br>ps -aux | grep ruby | grep 9090 | cut -c 9-15 | xargs <span class="hljs-built_in">kill</span> -15<br><span class="hljs-built_in">echo</span> start service ...<br><span class="hljs-comment"># cd /usr/local/src/apk-server/smbshare &amp;&amp; nohup python -m SimpleHTTPServer 9090 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/src/apk-server/smbshare &amp;&amp; nohup ruby -run -e httpd . -p 9090 &gt; /dev/null 2&gt;&amp;1 &amp;<br><span class="hljs-built_in">echo</span> oked<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 知多少-基础篇</title>
    <url>/search/Elasticsearch-1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/ElasticSearch-basic_20211229152205725_8b645c.png" alt="ElasticSearch-basic"></p>
<h4 id="什么是-ES。ES-的功能、特点、使用场景"><a href="#什么是-ES。ES-的功能、特点、使用场景" class="headerlink" title="什么是 ES。ES 的功能、特点、使用场景"></a>什么是 ES。ES 的功能、特点、使用场景</h4><p>简介：<br>全称 Elasticsearch，是一个分布式、RESTful 风格的搜索和数据分析引擎。<br>通过 Elasticsearch，可以轻松地存储、搜索和分析大量数据。<br>速度快，近乎实时的存储和检索数据。扩展性好，可扩展到上百台服务器，处理 PB 级别的数据。<br>易使用，ES 使用 Lucene 作为核心实现索引和搜索功能，通过 ResutfulAPI 和 JavaAPI 来隐藏 Lucene 的复杂性。</p>
<p>官网：<br><a href="https://www.elastic.co/cn/elasticsearch/" target="_blank" rel="noopener">https://www.elastic.co/cn/elasticsearch/</a></p>
<p>起源：<br>2004 年，失业的工程师 Shay Banon，帮老婆写一个菜谱搜索引擎。<br>封装 Lucene 开源项目做成了 compass，找到工作后，又基于 compass 封装成了 elasticsearch。<br>现在是 Elastic 创始人兼 Elastic 首席执行官。</p>
<p>功能：</p>
<ul>
<li>分布式的搜索引擎，类似谷歌、百度，也可以做站内搜索。</li>
<li>全文检索，具有模糊搜索，相关性排名，高亮等功能。</li>
<li>数据分析引擎，电商网站中商品销量排名前 10 的商家、新闻网点 1 个月访问量排名前 3 的板块。</li>
<li>海量数据的实时处理，分布式架构可以存储和检索大量数据，秒级的数据搜索和分析</li>
</ul>
<p>特点：</p>
<ul>
<li>安装方便，除了 java，没有其它依赖；修改几个参数即可搭建一个集群；</li>
<li>JSON 格式，输入和输出都是 JSON，不需要另外定义 Schema，快捷方便；</li>
<li>RESTful：基本操作都可以通过 http 接口进行；</li>
<li>分布式，每个节点都可做入口，加入的节点自动负载均衡；</li>
<li>多租户，可以根据不同用途区分索引，可同时操作多个索引；</li>
<li>支持超大数据，可以扩展到 PB 量级的数据。</li>
</ul>
<p>使用场景：</p>
<ul>
<li>搜索类场景，如电商、招聘、新闻</li>
<li>日志分析类场景，如经典的 ELK</li>
<li>数据预警和数据分析，如电商中的价格预警，销售量 top10 的品牌</li>
<li>商业 BI 系统，数据报表、预测热卖商品、推荐系统</li>
</ul>
<p>使用案例：<br>百科、stack overflow、github，elk 等</p>
<h4 id="搜索方案对比"><a href="#搜索方案对比" class="headerlink" title="搜索方案对比"></a>搜索方案对比</h4><p>Lucene<br>是由 Apache 基金会维护的信息搜索工具包，由 java 编写的。<br>包含索引结构，读写索引的工具，相关性工具，排序是一个框架，需要开发很多内容才能工作（数据获取、解析、分词等）</p>
<p>Solr<br>基于 Lucene 框架开发的查询服务器，封装了 Lucene 的细节，可以用 HTTP GET/POST 来查询、修改索引</p>
<p>Elasticsearch<br>基于 Lucene 核心开发的搜索引擎，采用了分布式实时文件存储的策略</p>
<p>三者共同点和区别</p>
<p>Solr 和 ES 是基于 Lucene 实现的。<br>Solr 利用 ZK 进行分布式管理，<br>ES 使用自带的分布式协调管理功能 Solr 实现更全面，功能多；<br>ES 注重核心功能，高级功能由扩展来实现</p>
<p>Solr 在传统搜索应用中表现好于 ES，ES 在实时搜索应用方面好于 Solr</p>
<h4 id="有哪些公司使用了-es"><a href="#有哪些公司使用了-es" class="headerlink" title="有哪些公司使用了 es"></a>有哪些公司使用了 es</h4><p><a href="https://elasticsearch.cn/explore/" target="_blank" rel="noopener">https://elasticsearch.cn/explore/</a></p>
<p>从中文社区活动中可以看到有 华为、百度、腾讯、阿里、京东、美团、小米、今日头条、顺丰等</p>
<h4 id="什么是-es-集群和-es-节点"><a href="#什么是-es-集群和-es-节点" class="headerlink" title="什么是 es 集群和 es 节点"></a>什么是 es 集群和 es 节点</h4><p>节点：节点是 ES 的实例，是一个独立的进程，一般会将一个节点部署到一个服务器或虚拟机上。</p>
<p>按照角色分配为，master node（主节点）、data node（数据节点）、Coordinate node（协调节点）</p>
<p>主节点，主要职责是配置和管理集群中的节点。</p>
<p>数据节点，对数据的 CRUD 操作，还有搜索和聚合操作。</p>
<p>协调节点，将集群请求转发到主节点，将数据请求转发到数据节点<br>（每个节点都是自带协调节点功能的，也可以只作为协调节点。设置协调节点有益于降低主节点和数据节点负担，但过多会增加集群负担，因为需要同步状态）。</p>
<p>集群：ES 集群是一组连接在一起的 ES 节点实例。</p>
<p>集群规划策略：当前数据规模+适量增长规模。（后续可按需添加）</p>
<p>示例，三个节点和一个索引的集群（2 个主分片，4 个副本分片）<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/Elasticsearch-1%E5%9F%BA%E7%A1%80_20211231161535_2021-12-31-16-15-35.png" alt="Elasticsearch-1基础_20211231161535_2021-12-31-16-15-35"><br>我们发出的请求，可以被任何一个节点接收处理（首个处理的节点被称为协调节点），每个节点都知道集群中任一文档的位置，<br>可以将请求转发到需要的节点上。</p>
<ul>
<li><a href="https://juejin.cn/post/7038828692671299620" target="_blank" rel="noopener">ES集群中各节点角色功能简介 - 掘金</a></li>
</ul>
<h4 id="安装-es-需要什么组件"><a href="#安装-es-需要什么组件" class="headerlink" title="安装 es 需要什么组件"></a>安装 es 需要什么组件</h4><p>只需要 java 环境即可（Lucene 是基于 java 编写的）</p>
<h4 id="如何安装、配置和启动"><a href="#如何安装、配置和启动" class="headerlink" title="如何安装、配置和启动"></a>如何安装、配置和启动</h4><blockquote>
<p>下载 ES 和 kibana: <a href="https://www.elastic.co/cn/start" target="_blank" rel="noopener">https://www.elastic.co/cn/start</a></p>
</blockquote>
<p>创建 OS 的新用户用于启动 es 和 kibana</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 添加用户</span><br>useradd estest<br><span class="hljs-comment"># 为用户添加密码</span><br>passwd estest<br><br><span class="hljs-comment"># 修改目录权限</span><br>chown -R estest /usr/elasticsearch<br>chown -R estest /usr/kibana<br><br><span class="hljs-comment"># 切换用户</span><br>su estest<br></code></pre></td></tr></table></figure>

<ol>
<li>先安装 jdk，配置环境变量</li>
<li>安装 es、修改配置，并启动（非 root 用户启动） 验证： <a href="http://node.com:9200" target="_blank" rel="noopener">http://node.com:9200</a><br>启动：<code>./bin/elasticsearch</code></li>
<li>再安装 kibana，修改配置、并启动（非 root 用户启动） 进入 kibana: <a href="http://node.com:5601%EF%BC%8C%E7%82%B9%E5%87%BBdev_tools%E9%A1%B9%EF%BC%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://node.com:5601，点击 dev_tools 项，测试。</a><br>启动：<code>./bin/kibana</code></li>
<li>es 集成 IK 分词器，添加 analysis-ik 插件，ik 分词器分 ik_max_word 模式（将文本做最细粒度拆分） 和 ik_smart 模式（将文本做最粗粒度拆分）。<br>扩展词典：自定义扩展词库、停用词库，远程扩展词库。<br>同义词典「具体操作参考讲义」</li>
</ol>
<p>启动报错的话，可能需要修改最大虚拟内存数量（在 root 下进行）<br><code>sysctl -a | grep vm.max_map_count</code></p>
<p>文件<code>/etc/systel.conf</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 限制一个进程拥有的VMA（虚拟内存区域）数量</span><br><span class="hljs-attr">vm.max_map_count</span>=<span class="hljs-number">655360</span><br></code></pre></td></tr></table></figure>

<p>使修改生效：<code>sysctl -p</code></p>
<p>修改 <code>/etc/security/limits.conf</code>，末尾追加（在 root 下进行，重新登录后生效）</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">*  soft  nofile   65536<br>*  hard  nofile   65536<br>*  soft  nproc  4096<br>*  hard  nproc  4096<br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/anqixiang/article/details/104922680" target="_blank" rel="noopener">Linux 修改文件句柄数及 vm.max<em>map_count、stack size 的大小</em>运维</a></p>
<p>测试</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">GET _search<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match_all"</span>: &#123;&#125;<br>   &#125;<br>&#125;<br><br>POST _analyze<br>&#123;<br>   <span class="hljs-string">"analyzer"</span>: <span class="hljs-string">"ik_max_word"</span>,<br>   <span class="hljs-string">"text"</span>: [<span class="hljs-string">"南京市长江大桥"</span>]<br>&#125;<br><br>POST _analyze<br>&#123;<br>   <span class="hljs-string">"analyzer"</span>: <span class="hljs-string">"ik_smart"</span>,<br>   <span class="hljs-string">"text"</span>: [<span class="hljs-string">"南京市长江大桥"</span>]<br>&#125;<br><br><br>POST _analyze<br>&#123;<br>   <span class="hljs-string">"analyzer"</span>: <span class="hljs-string">"ik_smart"</span>,<br>   <span class="hljs-string">"text"</span>: [<span class="hljs-string">"南京市市长"</span>]<br>&#125;<br><br><br>PUT /lagou-es-synonym<br>&#123;<br>   <span class="hljs-string">"settings"</span>: &#123;<br>      <span class="hljs-string">"analysis"</span>: &#123;<br>      <span class="hljs-string">"filter"</span>: &#123;<br>         <span class="hljs-string">"word_sync"</span>: &#123;<br>            <span class="hljs-string">"type"</span>: <span class="hljs-string">"synonym"</span>,<br>            <span class="hljs-string">"synonyms_path"</span>: <span class="hljs-string">"analysis-ik/synonym.txt"</span><br>         &#125;<br>      &#125;,<br>      <span class="hljs-string">"analyzer"</span>: &#123;<br>         <span class="hljs-string">"ik_sync_max_word"</span>: &#123;<br>            <span class="hljs-string">"filter"</span>: [<span class="hljs-string">"word_sync"</span>],<br>            <span class="hljs-string">"type"</span>: <span class="hljs-string">"custom"</span>,<br>            <span class="hljs-string">"tokenizer"</span>: <span class="hljs-string">"ik_max_word"</span><br>         &#125;,<br>         <span class="hljs-string">"ik_sync_smart"</span>: &#123;<br>            <span class="hljs-string">"filter"</span>: [<span class="hljs-string">"word_sync"</span>],<br>            <span class="hljs-string">"type"</span>: <span class="hljs-string">"custom"</span>,<br>            <span class="hljs-string">"tokenizer"</span>: <span class="hljs-string">"ik_smart"</span><br>         &#125;<br>      &#125;<br>      &#125;<br>   &#125;,<br>   <span class="hljs-string">"mappings"</span>: &#123;<br>      <span class="hljs-string">"properties"</span>: &#123;<br>      <span class="hljs-string">"name"</span>: &#123;<br>         <span class="hljs-string">"type"</span>: <span class="hljs-string">"text"</span>,<br>         <span class="hljs-string">"analyzer"</span>: <span class="hljs-string">"ik_sync_smart"</span>,<br>         <span class="hljs-string">"search_analyzer"</span>: <span class="hljs-string">"ik_sync_smart"</span><br>      &#125;<br>      &#125;<br>   &#125;<br>&#125;<br><br><br><br>POST /lagou-es-synonym/_doc/<span class="hljs-number">1</span><br>&#123;<br>   <span class="hljs-string">"name"</span>: <span class="hljs-string">"拉勾是中国专业的互联网招聘平台"</span><br>&#125;<br><br>POST /lagou-es-synonym/_doc/_search<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match"</span>:&#123;<br>      <span class="hljs-string">"name"</span>: <span class="hljs-string">"china"</span><br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="什么是-Index（索引）"><a href="#什么是-Index（索引）" class="headerlink" title="什么是 Index（索引）"></a>什么是 Index（索引）</h4><p>一个索引可以理解成一个关系型的 Table(数据库表)，相类似结构的数据放在一个索引，不类似的结构放在不同索引中。</p>
<h4 id="什么是-Type（类型）"><a href="#什么是-Type（类型）" class="headerlink" title="什么是 Type（类型）"></a>什么是 Type（类型）</h4><p>代表 documet 属于 index 中的哪个类别，类似于数据库中的表，在 7.x 中弃用了这个概念，8.x 中完全删除</p>
<h4 id="什么是-Mapping（映射）"><a href="#什么是-Mapping（映射）" class="headerlink" title="什么是 Mapping（映射）"></a>什么是 Mapping（映射）</h4><p>定义了每个字段的类型信息，相当于关系型数据库中的表结构(Schema)</p>
<h4 id="什么是-Document（文档）"><a href="#什么是-Document（文档）" class="headerlink" title="什么是 Document（文档）"></a>什么是 Document（文档）</h4><p>存储 json 文档，相当于关系型数据库中的 Row(一行记录)</p>
<h4 id="什么是-Field（字段）"><a href="#什么是-Field（字段）" class="headerlink" title="什么是 Field（字段）"></a>什么是 Field（字段）</h4><p>存储某一具体字段，相当于关系型数据库中的 Column(列)</p>
<h4 id="与关系型数据库中的术语比较"><a href="#与关系型数据库中的术语比较" class="headerlink" title="与关系型数据库中的术语比较"></a>与关系型数据库中的术语比较</h4><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/Elasticsearch_%3E_2021-12-29-14-46-52.png" alt="Elasticsearch_&gt;_2021-12-29-14-46-52"></p>
<h4 id="什么是-shard（分片）"><a href="#什么是-shard（分片）" class="headerlink" title="什么是 shard（分片）"></a>什么是 shard（分片）</h4><p>将索引数据分成若干小块的过程，称为分片。</p>
<p>分片的作用是：当文档数据量太多，磁盘和处理能力不足，对客户端的请求响应变慢时，使用分片可以改善这些问题（吞吐量、性能）。</p>
<p>单台服务器无法存储大量数据，es 通过分片将数据分散到多个服务器，（也就是说可以横向扩展）</p>
<h4 id="什么是-replica（副本），有什么好处？"><a href="#什么是-replica（副本），有什么好处？" class="headerlink" title="什么是 replica（副本），有什么好处？"></a>什么是 replica（副本），有什么好处？</h4><p>副本是对分片的拷贝，当在高负载下可以提高查询的吞吐量，也能用来实现高可用。</p>
<p>高可用：当主分片出现问题时，副本可以用来替换主分片，保证集群高可用。</p>
<p>默认情况下，每个索引有 10 个分片，5 个主分片，5 个副本分片</p>
<h4 id="什么是倒排索引"><a href="#什么是倒排索引" class="headerlink" title="什么是倒排索引"></a>什么是倒排索引</h4><p>倒排索引，即关键词到文档 ID 的映射，每个关键词都对应有一组文档（每个文档中都有这个关键词），有了倒排索引，就可以很方便用户搜索。</p>
<p>每个文档都有对应的文档 ID，文档就可以被表示为一系列的关键词。</p>
<p>这些文档是通过分词器，提取出出现次数和位置等内容得到关键词信息。</p>
<p>倒排索引中两个重要细节：</p>
<ol>
<li>倒排索引中的所有词项对应一个或多个文档。</li>
<li>倒排索引中的词项，是根据字典序排列。</li>
</ol>
<p>正向索引：从索引库中依次遍历所有文档，从文档中查找关键词，根据打分规则打分，然后排出名次，再返回。</p>
<p>相比正向索引对每个文档的关键字遍历过程，倒排索引是通过关键字找到文档的过程。</p>
<h4 id="什么是-ik-分词器，作用是什么"><a href="#什么是-ik-分词器，作用是什么" class="headerlink" title="什么是 ik 分词器，作用是什么"></a>什么是 ik 分词器，作用是什么</h4><p>ik 分词器，是基于 java 语言的中文分词工具包。</p>
<p>ik 分词器 3.0 特性</p>
<ol>
<li>高处理能力。采用特有的“正向迭代最细粒度切分算法”，具有 60 万字/秒的处理能力</li>
<li>多子处理器分析模式。支持英文字母、数字、中文词汇等分词处理。</li>
<li>优化词典存储，更小的内存占用。支持扩展词典</li>
<li>提高了命中率。针对 Lucene 全文检索优化的查询分析器 KQueryParser，采用歧义分析算法优化查询关键字的搜索搜索排列组合。<a href="https://www.jdon.com/36617" target="_blank" rel="noopener">分享 IKAnalyzer 3.0 中文分词器</a></li>
</ol>
<h4 id="DocValues-是什么，有什么作用"><a href="#DocValues-是什么，有什么作用" class="headerlink" title="DocValues 是什么，有什么作用"></a>DocValues 是什么，有什么作用</h4><p>DocValue 是一种列式存储结构，主要作用是解决字段值排序、聚合等问题（倒排索引对于检索性能好，但是对字段值排序却不理想）</p>
<p>搜索的时候，需要快速得到结果集</p>
<p>排序的时候，需要将正排索引（转置倒排索引，可以看作以文档为维度，实现根据指定字段的排序和聚合功能）</p>
<p>es 中的 DocValue 是默认激活的，在索引的时候创建，当字段索引时，为了快速检索，会把字段值加入到倒排索引中，同时他它也会存储字段的 DocValues。</p>
<p>应用场景：排序、聚合、过滤、脚本计算</p>
<p>当 docValues 远大于节点的可用内存时，OS 会将 doc values 放在内存中。</p>
<p>当 docValues 远小于节点的可用内存时，OS 会将 doc values 放在页缓存中，避免 jvm 堆内存溢出异常。</p>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/docvalues-intro.html" target="_blank" rel="noopener">Doc Values 介绍 | Elasticsearch: 权威指南 | Elastic</a></p>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/docvalues.html" target="_blank" rel="noopener">倒排索引和 UN 倒排索引 | Doc Values | Elasticsearch: 权威指南 | Elastic</a></p>
<h4 id="text-和-keyword-的区别是什么"><a href="#text-和-keyword-的区别是什么" class="headerlink" title="text 和 keyword 的区别是什么"></a>text 和 keyword 的区别是什么</h4><p>keyword 和 text 类型的主要区别是「是否分词」.</p>
<p>keyword 是不会分词的，是直接根据字符串的内容来建立倒排索引（只能通过精确值搜索到）。</p>
<p>text 是会分词的，在存入 text 类型的值时，会先分词，然后再建立倒排索引。</p>
<h4 id="什么是停顿词过滤"><a href="#什么是停顿词过滤" class="headerlink" title="什么是停顿词过滤"></a>什么是停顿词过滤</h4><p>没有意义的一类词，可以过滤掉的词。如「的」、「而」等等</p>
<h4 id="query-和-filter-的区别是什么"><a href="#query-和-filter-的区别是什么" class="headerlink" title="query 和 filter 的区别是什么"></a>query 和 filter 的区别是什么</h4><p>query: 不仅仅用于查询，还会计算分值，用于确定相关度。</p>
<p>filter: 仅查询，不会计算分值，也不会排序，结果可以缓存（提高性能）</p>
<h4 id="操作-定义、列出、更新、删除索引的语法"><a href="#操作-定义、列出、更新、删除索引的语法" class="headerlink" title="操作-定义、列出、更新、删除索引的语法"></a>操作-定义、列出、更新、删除索引的语法</h4><p>索引，类似于关系型数据库中的 database，有了索引才可以创建其它内容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"># 创建-语法<br>PUT /索引名称<br>&#123;<br>  <span class="hljs-string">"settings"</span>: &#123;<br>      <span class="hljs-string">"属性名"</span>: <span class="hljs-string">"属性值"</span><br>  &#125;<br>&#125;<br># 创建-示例<br>PUT /lagou-company-index<br><br># 判断索引是否存在-语法<br>HEAD /索引名称<br># 判断索引是否存在-示例<br>HEAD /lagou-company-index<br><br># 查看索引-语法<br>GET /索引名称<br># 查看索引-示例<br>GET /lagou-company-index<br><br># 批量查看索引（用英文逗号隔开）<br>GET /索引名称<span class="hljs-number">1</span>,索引名称<span class="hljs-number">2</span><br><br># 查看所有索引<br># 方式1<br>GET _all<br># 方式2，状态意义：绿色，分片都正常分配；黄色，至少有一个副本没有正确分配；红色，至少有一个主分片没有正确分配。<br>GET /_cat/indices?v<br><br># 打开和关闭索引：一旦索引被关闭，这个索引就只能显示元数据信息，不能做读写操作。<br># 打开索引-语法<br>POST /索引名称/_open<br># 打开索引-示例<br>POST /lagou-company-index/_open<br># 关闭索引-语法<br>POST /索引名称/_close<br># 关闭索引-示例<br>POST /lagou-company-index/_close<br><br># 删除索引-语法<br>DELETE /索引名称<span class="hljs-number">1</span>,索引名称<span class="hljs-number">2</span>,索引名称<span class="hljs-number">3</span><br># 删除索引-示例<br>DELETE /lagou-company-index,lagou-employee-index<br></code></pre></td></tr></table></figure>

<h4 id="操作-定义、列出、更新、删除映射"><a href="#操作-定义、列出、更新、删除映射" class="headerlink" title="操作-定义、列出、更新、删除映射"></a>操作-定义、列出、更新、删除映射</h4><p>索引创建后，就可以对字段设置约束信息，即字段映射（mapping）。</p>
<p>约束信息包括有：字段的数据类型、是否存储、是否索引、分词器</p>
<p>注意：</p>
<p>我们可以增加一个映射，但不能修改已存在的映射。<br>如易映射已经存在，那么数据可能已经被索引，意图修改这个映射，<br>索引的数据可能会出错，不能正常被索引。（即，除了新增操作，只能操作只能删除删除索引，新建映射）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"># 创建映射-语法<br>PUT /索引库名/_mapping<br>&#123;<br>    <span class="hljs-string">"properties"</span>: &#123;<br>        <span class="hljs-string">"字段名"</span>: &#123;<br>            "type": "类型", # 可以是 text, long, short, date, integer, date等<br>            "index": true, # 是否索引，默认true；false时，不能搜索<br>            "store": true, # 是否独立存储, 默认false；独立存储时解析速度快，会占用更多的内存<br>            "analyzer": "分词器" # 指定分词器中文中会<br>        &#125;<br>    &#125;<br>&#125;<br># 创建映射-示例<br>PUT /lagou-company-index<br>PUT /lagou-company-index/_mapping<br>&#123;<br>  <span class="hljs-string">"properties"</span>: &#123;<br>    <span class="hljs-string">"name"</span>: &#123; <span class="hljs-string">"type"</span>: <span class="hljs-string">"text"</span>, <span class="hljs-string">"analyzer"</span>: <span class="hljs-string">"ik_max_word"</span> &#125;,<br>    <span class="hljs-string">"job"</span>: &#123; <span class="hljs-string">"type"</span>: <span class="hljs-string">"text"</span>, <span class="hljs-string">"analyzer"</span>: <span class="hljs-string">"ik_max_word"</span> &#125;,<br>    <span class="hljs-string">"logo"</span>: &#123; <span class="hljs-string">"type"</span>: <span class="hljs-string">"keyword"</span>, <span class="hljs-string">"index"</span>: <span class="hljs-string">"false"</span> &#125;,<br>    <span class="hljs-string">"payment"</span>: &#123; <span class="hljs-string">"type"</span>: <span class="hljs-string">"float"</span> &#125;<br>  &#125;<br>&#125;<br><br># 查看映射关系-语法<br>GET /索引名称/_mapping<br># 查看映射关系-示例<br>GET /lagou-company-index/_mapping<br><br># 查看所有索引映射关系<br># 方式1<br>GET _mapping<br># 方式2<br>GET _all/_mapping<br><br># 修改索引映射关系-语法<br>PUT /索引名称/_mapping<br>&#123;<br>   <span class="hljs-string">"properties"</span>: &#123;<br>      <span class="hljs-string">"type"</span>: <span class="hljs-string">"类型"</span>,<br>      <span class="hljs-string">"index"</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">"store"</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">"analyzer"</span>: <span class="hljs-string">"分词器"</span><br>   &#125;<br>&#125;<br># 修改索引映射关系-示例（新增一个age映射）<br>PUT /lagou-company-index/_mapping<br>&#123;<br>   <span class="hljs-string">"properties"</span>: &#123;<br>      <span class="hljs-string">"age"</span>: &#123;<br>         <span class="hljs-string">"type"</span>: <span class="hljs-string">"text"</span><br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="操作-定义、列出、更新、删除文档"><a href="#操作-定义、列出、更新、删除文档" class="headerlink" title="操作-定义、列出、更新、删除文档"></a>操作-定义、列出、更新、删除文档</h4><p>文档，类似于关系型数据库中的一行记录。</p>
<p>是索引库中的数据，这些数据会根据索引规则创建索引，将来用于搜索。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"># 新增文档（可以手动指定id，也可以自动生成id）<br># 新增文档，手动指定id-语法<br>POST /索引名称/_doc/&#123;id&#125;<br>&#123;<br>   <span class="hljs-string">"属性名"</span>: <span class="hljs-string">"值"</span><br>&#125;<br># 新增文档，手动指定id-示例<br>POST /lagou-company-index/_doc/<span class="hljs-number">1</span><br>&#123;<br>   <span class="hljs-string">"name"</span>: <span class="hljs-string">"百度"</span>,<br>   <span class="hljs-string">"job"</span>: <span class="hljs-string">"小度用户运营经理"</span>,<br>   <span class="hljs-string">"payment"</span>: <span class="hljs-string">"30000"</span>,<br>   <span class="hljs-string">"logo"</span>: <span class="hljs-string">"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png"</span><br>&#125;<br><br># 新增文档，自动生成id-语法<br>POST /索引名称/_doc<br>&#123;<br>   <span class="hljs-string">"属性名"</span>: <span class="hljs-string">"值"</span><br>&#125;<br># 新增文档，自动生成id-示例<br>POST /lagou-company-index/_doc<br>&#123;<br>   <span class="hljs-string">"name"</span>: <span class="hljs-string">"百度"</span>,<br>   <span class="hljs-string">"job"</span>: <span class="hljs-string">"算法工程师"</span>,<br>   <span class="hljs-string">"payment"</span>: <span class="hljs-string">"50000"</span>,<br>   <span class="hljs-string">"logo"</span>: <span class="hljs-string">"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png"</span><br>&#125;<br><br># 查看单个文档-语法<br>GET /索引名称/_doc/&#123;id&#125;<br># 查看单个文档-示例<br>GET /lagou-company-index/_doc/<span class="hljs-number">1</span><br><br># 查看所有文档-语法<br>POST /索引名称/_search<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match_all"</span>: &#123;<br>      &#125;<br>   &#125;<br>&#125;<br># 查看所有文档-示例<br>POST /lagou-company-index/_search<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match_all"</span>: &#123;<br>      &#125;<br>   &#125;<br>&#125;<br><br># 查看文档-通过_source定制返回结果（指定source中的返回字段，多个字段之间用逗号隔开）<br>GET /lagou-company-index/_doc/<span class="hljs-number">1</span>?_source=name,job<br><br># 更新文档分全部更新和局部更新。全部更新，是把之前的文档删除了（先标记删除，后台随后清理），然后再添加；局部更新，是指修改某个字段。<br># 更新文档之全部更新，同添加文档一样，只是将POST换成了PUT，并带上了id值，存在则更新，不存在则添加<br>PUT /lagou-company-index/_doc/<span class="hljs-number">1</span><br>&#123;<br>   <span class="hljs-string">"name"</span>: <span class="hljs-string">"百度1"</span>,<br>   <span class="hljs-string">"job"</span>: <span class="hljs-string">"小度用户运营经理"</span>,<br>   <span class="hljs-string">"payment"</span>: <span class="hljs-string">"30000"</span>,<br>   <span class="hljs-string">"logo"</span>: <span class="hljs-string">"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png"</span><br>&#125;<br># 更新文档之局部更新-语法<br>POST /索引名称/_update/&#123;id&#125;<br>&#123;<br>   <span class="hljs-string">"doc"</span>: &#123;<br>      <span class="hljs-string">"field"</span>: <span class="hljs-string">"value"</span><br>   &#125;<br>&#125;<br># 更新文档之局部更新-示例<br>POST /lagou-company-index/_update/<span class="hljs-number">1</span><br>&#123;<br>   <span class="hljs-string">"doc"</span>: &#123;<br>      <span class="hljs-string">"payment"</span>: <span class="hljs-string">"60000"</span><br>   &#125;<br>&#125;<br><br># 删除文档-语法<br>DELETE /索引名称/_doc/&#123;id&#125;<br># 删除文档-示例<br>DELETE /lagou-company-index/_doc/<span class="hljs-number">1</span><br><br># 根据查询条件删除-语法<br>POST /索引名称/_delete_by_query<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match"</span>: &#123;<br>         <span class="hljs-string">"字段名"</span>: <span class="hljs-string">"搜索关键字"</span><br>      &#125;<br>   &#125;<br>&#125;<br># 根据查询条件删除-示例<br>POST /lagou-company-index/_delete_by_query<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match"</span>: &#123;<br>         <span class="hljs-string">"name"</span>: <span class="hljs-string">"百度1"</span><br>      &#125;<br>   &#125;<br>&#125;<br># 删除所有文档-语法<br>POST /索引名/_delete_by_query<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match_all"</span>:&#123;&#125;<br>   &#125;<br>&#125;<br># 删除所有文档-示例<br>POST /lagou-company-index/_delete_by_query<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match_all"</span>: &#123;&#125;<br>   &#125;<br>&#125;<br><br># 全量替换文档，同「更新文档之全部更新」<br>PUT /lagou-company-index/_doc/<span class="hljs-number">1</span><br>&#123;<br>   <span class="hljs-string">"name"</span>: <span class="hljs-string">"百度1"</span>,<br>   <span class="hljs-string">"job"</span>: <span class="hljs-string">"小度用户运营经理"</span>,<br>   <span class="hljs-string">"payment"</span>: <span class="hljs-string">"30000"</span>,<br>   <span class="hljs-string">"logo"</span>: <span class="hljs-string">"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png"</span><br>&#125;<br># 强制创建，如果存在时不想替换，不存在时才创建<br>PUT /lagou-company-index/_doc/<span class="hljs-number">1</span>/_create<br># 或者 PUT /lagou-company-index/_doc/1?op_type=create<br>&#123;<br>   <span class="hljs-string">"payment"</span>: <span class="hljs-string">"30000"</span>,<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="操作-执行搜索有哪些方法"><a href="#操作-执行搜索有哪些方法" class="headerlink" title="操作-执行搜索有哪些方法"></a>操作-执行搜索有哪些方法</h4><p>方式 1（最常用）：基于 DSL 检索 Elasticsearch provides a full Query DSL (Domain Specific Language) based on JSON to define queries<br>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">GET /lagou-company-index/_search<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"bool"</span>: &#123;<br>         <span class="hljs-string">"filter"</span>: [<br>            &#123;<span class="hljs-string">"match"</span>: &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"百度1"</span>&#125;&#125;<br>         ]<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>方式 2： 基于 URL 检索</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /lagou-company-index/_search?<span class="hljs-attribute">q</span>=name:百度2<br></code></pre></td></tr></table></figure>

<p>方式 3（不推荐）：类 SQL 检索</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">POST /_sql?format=txt<br>&#123;<br>   <span class="hljs-string">"query"</span>: <span class="hljs-string">"SELECT * FROM lagou-compony-index"</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="Query-DSL-支持哪些类型的查询"><a href="#Query-DSL-支持哪些类型的查询" class="headerlink" title="Query DSL 支持哪些类型的查询"></a>Query DSL 支持哪些类型的查询</h4><p>ES 提供了基于 JSON 的完整查询 DSL 来定义查询。</p>
<p>将 DSL 视为查询的 AST（抽象语法树），由叶子查询子句和复合查询子句组成。</p>
<p><strong>叶子查询子句</strong>：</p>
<p>叶子查询，在特定域中寻找特定的值，如 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html" target="_blank" rel="noopener">match</a>, <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html" target="_blank" rel="noopener">term</a> 和 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html" target="_blank" rel="noopener">range</a></p>
<p>「精确匹配」包括：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html" target="_blank" rel="noopener">term</a>, exists, term set, <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html" target="_blank" rel="noopener">range</a>, prefix, <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-query.html" target="_blank" rel="noopener">ids</a>, wildcard, regexp, fuzzy 等等</p>
<p>「全文检索」匹配：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html" target="_blank" rel="noopener">match</a>, match_phrase, multi_match, match_phrase_prefix, query_string 等等</p>
<p><strong>复合查询子句</strong></p>
<p>复合查询子句，包装了其它的叶子查询或复合查询，并用逻辑方式组合多个查询（如 bool 和 dis_max 查询），或更改行为（如，constant_score 查询）</p>
<ol>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-constant-score-query.html" target="_blank" rel="noopener">Constant score query </a></li>
</ol>
<p>包装一个查询，并且返回所有与相关分值等于 <code>boost</code> 参数的结果。</p>
<blockquote>
<p>Wraps a filter query and returns every matching document with a relevance score equal to the boost parameter value.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">GET /_search<br>&#123;<br>  <span class="hljs-string">"query"</span>: &#123;<br>    <span class="hljs-string">"constant_score"</span>: &#123;<br>      <span class="hljs-string">"filter"</span>: &#123;<br>        <span class="hljs-string">"term"</span>: &#123; <span class="hljs-string">"user.id"</span>: <span class="hljs-string">"kimchy"</span> &#125;<br>      &#125;,<br>      <span class="hljs-string">"boost"</span>: <span class="hljs-number">1.2</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html" target="_blank" rel="noopener">Boolean query</a><br>bool 查询用 bool 操作来组合多个查询子句为一个查询</li>
</ol>
<p>bool 的 occurrence types 有： must， filter， should, must_not</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">POST _search<br>&#123;<br>  <span class="hljs-string">"query"</span>: &#123;<br>    <span class="hljs-string">"bool"</span> : &#123;<br>      <span class="hljs-string">"must"</span> : &#123;<br>        <span class="hljs-string">"term"</span> : &#123; <span class="hljs-string">"user.id"</span> : <span class="hljs-string">"kimchy"</span> &#125;<br>      &#125;,<br>      <span class="hljs-string">"filter"</span>: &#123;<br>        <span class="hljs-string">"term"</span> : &#123; <span class="hljs-string">"tags"</span> : <span class="hljs-string">"production"</span> &#125;<br>      &#125;,<br>      <span class="hljs-string">"must_not"</span> : &#123;<br>        <span class="hljs-string">"range"</span> : &#123;<br>          <span class="hljs-string">"age"</span> : &#123; <span class="hljs-string">"gte"</span> : <span class="hljs-number">10</span>, <span class="hljs-string">"lte"</span> : <span class="hljs-number">20</span> &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">"should"</span> : [<br>        &#123; <span class="hljs-string">"term"</span> : &#123; <span class="hljs-string">"tags"</span> : <span class="hljs-string">"env1"</span> &#125; &#125;,<br>        &#123; <span class="hljs-string">"term"</span> : &#123; <span class="hljs-string">"tags"</span> : <span class="hljs-string">"deployed"</span> &#125; &#125;<br>      ],<br>      <span class="hljs-string">"minimum_should_match"</span> : <span class="hljs-number">1</span>,<br>      <span class="hljs-string">"boost"</span> : <span class="hljs-number">1.0</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>带排序的查询</strong></p>
<p>相关性排序、字段值排序、组合排序</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">POST /book/_search<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match_all"</span>: &#123;&#125;<br>   &#125;,<br>   <span class="hljs-string">"sort"</span>: [<br>      &#123;<span class="hljs-string">"_score"</span>: &#123; <span class="hljs-string">"order"</span>: <span class="hljs-string">"asc"</span> &#125;&#125;<br>      &#123;<span class="hljs-string">"price"</span>: &#123; <span class="hljs-string">"order"</span>: <span class="hljs-string">"desc"</span> &#125;&#125;,<br>      &#123;<span class="hljs-string">"timestamp"</span>: &#123;<span class="hljs-string">"order:"</span>: <span class="hljs-string">"desc"</span> &#125;&#125;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>带分页的查询</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs javascript">POST /book/_search<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match_all"</span>: &#123;&#125;<br>   &#125;,<br>   <span class="hljs-string">"size"</span>: <span class="hljs-number">2</span>,<br>   <span class="hljs-string">"from"</span>: <span class="hljs-number">0</span><br>&#125;<br><br># size: 每页显示多少页<br># from: 从当前页的起始索引位置。 from = (pageNum - 1) * size<br></code></pre></td></tr></table></figure>

<p><strong>带高亮的查询</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">POST /lagou-company-index/_search<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"match"</span>: &#123;<br>         <span class="hljs-string">"name"</span>: <span class="hljs-string">"百"</span><br>      &#125;<br>   &#125;,<br>   <span class="hljs-string">"highlight"</span>: &#123;<br>      <span class="hljs-string">"pre_tags"</span>: <span class="hljs-string">"&lt;font color='red'&gt;"</span>,<br>      <span class="hljs-string">"post_tags"</span>: <span class="hljs-string">"&lt;/font&gt;"</span>,<br>      <span class="hljs-string">"fields"</span>: [&#123;<span class="hljs-string">"name"</span>:&#123;&#125;&#125;]<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>批量查询</strong></p>
<p>批量操作可以减少网络开销</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"># 不同索引下<br>GET /_mget<br>&#123;<br>   <span class="hljs-string">"docs"</span>: [<br>      &#123;<br>         <span class="hljs-string">"_index"</span>: <span class="hljs-string">"lagou-company-index"</span>,<br>         <span class="hljs-string">"_id"</span>: <span class="hljs-number">1</span><br>      &#125;,<br>      &#123;<br>         <span class="hljs-string">"_index"</span>: <span class="hljs-string">"lagou-exployee-index"</span>,<br>         <span class="hljs-string">"_id"</span>: <span class="hljs-number">3</span><br>      &#125;<br>   ]<br>&#125;<br><br># 同一索引下<br>GET /lagou-company-index/_mget<br>&#123;<br>   <span class="hljs-string">"docs"</span>: [<br>      &#123;<br>         <span class="hljs-string">"_id"</span>: <span class="hljs-number">1</span><br>      &#125;,<br>      &#123;<br>         <span class="hljs-string">"_id"</span>: <span class="hljs-number">3</span><br>      &#125;<br>   ]<br>&#125;<br># 或<br>POST /lagou-company-index/_search<br>&#123;<br>   <span class="hljs-string">"query"</span>: &#123;<br>      <span class="hljs-string">"ids"</span>: &#123;<span class="hljs-string">"values"</span>: [<span class="hljs-string">"1"</span>,<span class="hljs-string">"3"</span>]&#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>批量增删改</strong></p>
<p>将一系列的增删改操作，通过一条请求完成，减少网络开销。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">POST /_bulk<br>&#123;<span class="hljs-string">"action"</span>: &#123;<span class="hljs-string">"metadata"</span>&#125;&#125;<br>&#123;<span class="hljs-string">"data"</span>&#125;<br></code></pre></td></tr></table></figure>

<p>detete 不需要请求体</p>
<p>格式，每个 json 不能换行；相邻 json 必须换行。</p>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">POST /_bulk<br>&#123; <span class="hljs-string">"delete"</span>: &#123; <span class="hljs-string">"_index"</span>: <span class="hljs-string">"book"</span>, <span class="hljs-string">"_id"</span>: <span class="hljs-string">"1"</span> &#125;&#125;<br>&#123; <span class="hljs-string">"create"</span>: &#123; <span class="hljs-string">"_index"</span>: <span class="hljs-string">"book"</span>, <span class="hljs-string">"_id"</span>: <span class="hljs-string">"5"</span> &#125;&#125;<br>&#123; <span class="hljs-string">"name"</span>: <span class="hljs-string">"test14"</span>,<span class="hljs-string">"price"</span>:<span class="hljs-number">100.99</span> &#125;<br>&#123; <span class="hljs-string">"update"</span>: &#123; <span class="hljs-string">"_index"</span>: <span class="hljs-string">"book"</span>, <span class="hljs-string">"_id"</span>: <span class="hljs-string">"2"</span>&#125;&#125;<br>&#123; <span class="hljs-string">"doc"</span> : &#123;<span class="hljs-string">"name"</span> : <span class="hljs-string">"test"</span>&#125; &#125;<br></code></pre></td></tr></table></figure>

<h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><p>【金山文档】 ElasticSearch <a href="https://kdocs.cn/l/cpGSu8K35cQk" target="_blank" rel="noopener">https://kdocs.cn/l/cpGSu8K35cQk</a><br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/2.x/index.html" target="_blank" rel="noopener">Elasticsearch: 权威指南 | Elastic</a></p>
]]></content>
      <tags>
        <tag>search</tag>
        <tag>知多少</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】爬虫</title>
    <url>/python/%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<ul>
<li><a href="https://zhuanlan.zhihu.com/p/21479334" target="_blank" rel="noopener">如何学习 Python 爬虫[入门篇]？ - 知乎</a></li>
<li><a href="https://www.jianshu.com/p/e084c2b2b66d" target="_blank" rel="noopener">lxml 学习笔记 - 简书</a></li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">pip3 <span class="hljs-keyword">install </span>lxml pandas <span class="hljs-keyword">bs4 </span>xlrd openpyxl<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 脚本修改 Json 中某个字段值</title>
    <url>/shell/shell%20%E8%84%9A%E6%9C%AC%E4%BF%AE%E6%94%B9%20json%20%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5%E5%80%BC/</url>
    <content><![CDATA[<h2 id="shell-脚本修改-json-中某个字段的值"><a href="#shell-脚本修改-json-中某个字段的值" class="headerlink" title="shell 脚本修改 json 中某个字段的值"></a>shell 脚本修改 json 中某个字段的值</h2><ul>
<li>思路：通过 awk 来找到旧数据，然后用 sed 来替换旧数据</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>config.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"the_name"</span>,<br>  <span class="hljs-attr">"id"</span>: <span class="hljs-string">"132869"</span>,<br>  <span class="hljs-attr">"content_url"</span>: <span class="hljs-string">"https://hot.example.com/"</span>,<br>  <span class="hljs-attr">"enable_feature1"</span>: <span class="hljs-string">"true"</span>,<br>  <span class="hljs-attr">"enable_feature2"</span>: <span class="hljs-string">"false"</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>config/mode1.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!bin/bash</span><br>content_url_new=<span class="hljs-string">"https://hot1.example.com/"</span><br>enable_feature1_new=<span class="hljs-string">"true"</span><br>enable_feature2_new=<span class="hljs-string">"true"</span><br></code></pre></td></tr></table></figure>

<p>config/mode2.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!bin/bash</span><br>content_url_new=<span class="hljs-string">"https://hot2.example.com/"</span><br>enable_feature1_new=<span class="hljs-string">"false"</span><br>enable_feature2_new=<span class="hljs-string">"false"</span><br></code></pre></td></tr></table></figure>

<p>main.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!bin/bash</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> != <span class="hljs-string">"mode1"</span> -a <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> != <span class="hljs-string">"mode2"</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">"tip:─┬─────── 您输入参数不对，请重试："</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">"     │─────── 'mode1', 使用config/mode1.sh的配置"</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">"     └─────── 'mode2', 使用config/mode2.sh的配置"</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>mode1)<br>    . config/mode1.sh<br>;;<br>mode2)<br>    . config/mode2.sh<br>;;<br>*)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">"Usage: sh main.sh [mode1|mode2]"</span><br>    <span class="hljs-built_in">exit</span>;<br><span class="hljs-keyword">esac</span><br><br><span class="hljs-comment"># 如果要修改的内容在文档中唯一，可以做全局修改</span><br>content_url_old=$(awk -F<span class="hljs-string">"\""</span> <span class="hljs-string">'/content_url/&#123;print $4&#125;'</span> example.json)<br>sed -e <span class="hljs-string">"s@<span class="hljs-variable">$content_url_old</span>@<span class="hljs-variable">$content_url_new</span>@g"</span> -i example.json<br><br><br><span class="hljs-comment"># 如果要修改的内容在文档中不唯一，就需要针对那一行做修改。（例如，这个例子中有两个布尔类型的值）</span><br>enable_feature1_line=$(awk -F<span class="hljs-string">"\""</span> <span class="hljs-string">'/enable_feature1/&#123;print NR&#125;'</span> example.json) <span class="hljs-comment"># 记住行号</span><br>enable_feature1_old=$(awk -F<span class="hljs-string">"\""</span> <span class="hljs-string">'/enable_feature1/&#123;print $4&#125;'</span> example.json)  <span class="hljs-comment"># 获取旧数据</span><br>sed -e <span class="hljs-string">"<span class="hljs-variable">$enable_feature1_line</span> s@<span class="hljs-variable">$enable_feature1_old</span>@<span class="hljs-variable">$enable_feature1_new</span>@"</span> -i example.json <span class="hljs-comment"># 替换所在行的老数据</span><br><br>enable_feature2_line=$(awk -F<span class="hljs-string">"\""</span> <span class="hljs-string">'/enable_feature2/&#123;print NR&#125;'</span> example.json) <span class="hljs-comment"># 记住行号</span><br>enable_feature2_old=$(awk -F<span class="hljs-string">"\""</span> <span class="hljs-string">'/enable_feature2/&#123;print $4&#125;'</span> example.json)  <span class="hljs-comment"># 获取旧数据</span><br>sed -e <span class="hljs-string">"<span class="hljs-variable">$enable_feature2_line</span> s@<span class="hljs-variable">$enable_feature2_old</span>@<span class="hljs-variable">$enable_feature2_new</span>@"</span> -i example.json <span class="hljs-comment"># 替换所在行的老数据</span><br></code></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sh main.sh mode1<br>sh main.sh mode2<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ实现秒杀</title>
    <url>/mq/RocketMQ%E5%AE%9E%E7%8E%B0%E7%A7%92%E6%9D%80/</url>
    <content><![CDATA[<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><p>virtualbox: 6.1<br>centos: 7.0<br>jdk: 1.8<br>rocketmq: <a href="https://archive.apache.org/dist/rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip" target="_blank" rel="noopener">https://archive.apache.org/dist/rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip</a><br>rocketmq-console: <a href="https://github.com/apache/rocketmq-externals/tree/release-rocketmq-console-1.0.0" target="_blank" rel="noopener">https://github.com/apache/rocketmq-externals/tree/release-rocketmq-console-1.0.0</a><br>redis: Redis-x64-5.0.10<br>mysql: 5.6</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 修改主机名</span><br>hostnamectl <span class="hljs-built_in">set</span>-hostname node1.com<br>hostnamectl <span class="hljs-built_in">set</span>-hostname node2.com<br>hostnamectl <span class="hljs-built_in">set</span>-hostname node3.com<br>hostnamectl <span class="hljs-built_in">set</span>-hostname node4.com<br><br><span class="hljs-comment"># 刷新终端</span><br>bash<br><span class="hljs-comment"># 查看是否生效</span><br>hostname<br><br><span class="hljs-comment"># 修改网络为具体某个ip</span><br>vi /etc/sysconfig/network-scripts/ifcfg-ens0s8<br>TYPE=Ethernet<br>BOOTPROTO=none<br>DEFROUTE=yes<br>PEERDNS=yes<br>PEERROUTES=yes<br>IPV4_FAILURE_FATAL=no<br>IPV6INIT=yes<br>IPV6_AUTOCONF=yes<br>IPV6_DEFROUTE=yes<br>IPV6_PEERDNS=yes<br>IPV6_PEERROUTES=yes<br>IPV6_FAILURE_FATAL=no<br>NAME=enp0s8<br>UUID=ed6c068c-149c-4678-8a13-d6e34a5d50c9<br>DEVICE=enp0s8<br>ONBOOT=yes<br>IPADDR=192.168.56.11<br>GATEWAY=192.168.56.1<br>DNS1=10.0.2.2<br>DNS2=8.8.8.8<br><br><span class="hljs-comment"># 重启网络</span><br>systemctl restart network<br></code></pre></td></tr></table></figure>

<h2 id="修改和同步-hosts"><a href="#修改和同步-hosts" class="headerlink" title="修改和同步 hosts"></a>修改和同步 hosts</h2><ol>
<li>修改 node1.com</li>
</ol>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.56.11</span> node1.com<br><span class="hljs-number">192.168.56.12</span> node2.com<br><span class="hljs-number">192.168.56.13</span> node3.com<br><span class="hljs-number">192.168.56.14</span> node4.com<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">scp /etc/hosts root@node1.com:/etc/hosts<br>scp /etc/hosts root@node2.com:/etc/hosts<br>scp /etc/hosts root@node3.com:/etc/hosts<br>scp /etc/hosts root@node4.com:/etc/hosts<br></code></pre></td></tr></table></figure>

<h2 id="启动-RocketMQ"><a href="#启动-RocketMQ" class="headerlink" title="启动 RocketMQ"></a>启动 RocketMQ</h2><p><strong>启动 nameserver</strong><br>node1 操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/root/c/rocketmq-all-4.5.1-bin-release/bin/mqnamesrv<br></code></pre></td></tr></table></figure>

<p>node2 操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/root/c/rocketmq-all-4.5.1-bin-release/bin/mqnamesrv<br></code></pre></td></tr></table></figure>

<p><strong>启动 broker</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@node1 ~]#<br>/root/c/rocketmq-all-4.5.1-bin-release/bin/mqbroker -n "node1.com:9876;node2.com:9876" -c /root/c/rocketmq-all-4.5.1-bin-release/conf/2m-2s-sync/broker-a.properties<br>[root@node2 ~]#<br>/root/c/rocketmq-all-4.5.1-bin-release/bin/mqbroker -n "node1.com:9876;node2.com:9876" -c /root/c/rocketmq-all-4.5.1-bin-release/conf/2m-2s-sync/broker-b.properties<br>[root@node3 ~]#<br>/root/c/rocketmq-all-4.5.1-bin-release/bin/mqbroker -n "node1.com:9876;node2.com:9876" -c /root/c/rocketmq-all-4.5.1-bin-release/conf/2m-2s-sync/broker-a-s.properties<br>[root@node4 ~]#<br>/root/c/rocketmq-all-4.5.1-bin-release/bin/mqbroker -n "node1.com:9876;node2.com:9876" -c /root/c/rocketmq-all-4.5.1-bin-release/conf/2m-2s-sync/broker-b-s.properties<br></code></pre></td></tr></table></figure>

<p><strong>启动控制台</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /root/c/rocketmq-externals-rocketmq-console-1.0.0<br>mvn clean package -Dmaven.test.skip<br>java -jar /root/c/rocketmq-externals-rocketmq-console-1.0.0/rocketmq-console/target/rocketmq-console-ng-1.0.0.jar<br></code></pre></td></tr></table></figure>

<h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>通过分布式事务来保证一致性（数据库与 MQ 的一致性）</p>
<p><img src="http://cdn.lyloou.com/img/RocketMQ-2021-06-15-11-33-52.png" alt="RocketMQ-2021-06-15-11-33-52"></p>
<blockquote>
<p>RocketMQ 事务消息的实现原理就是基于两阶段提交和事务状态回查，来决定消息最终是提交还是回滚。</p>
</blockquote>
<ul>
<li><a href="https://juejin.cn/post/6844904099993878536" target="_blank" rel="noopener">基于 RocketMQ 分布式事务 - 完整示例</a></li>
</ul>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><strong>下单页</strong><br><a href="http://localhost:8081/order" target="_blank" rel="noopener">http://localhost:8081/order</a><br><img src="http://cdn.lyloou.com/img/RocketMQ%E5%AE%9E%E7%8E%B0%E7%A7%92%E6%9D%80-2021-06-16-11-09-12.png" alt="RocketMQ实现秒杀-2021-06-16-11-09-12"></p>
<p><strong>支付页</strong><br><a href="http://localhost:8081/pay" target="_blank" rel="noopener">http://localhost:8081/pay</a><br><img src="http://cdn.lyloou.com/img/RocketMQ%E5%AE%9E%E7%8E%B0%E7%A7%92%E6%9D%80-2021-06-16-11-09-30.png" alt="RocketMQ实现秒杀-2021-06-16-11-09-30"></p>
<p><strong>批量购买</strong><br><img src="http://cdn.lyloou.com/img/RocketMQ%E5%AE%9E%E7%8E%B0%E7%A7%92%E6%9D%80-2021-06-16-11-14-49.png" alt="RocketMQ实现秒杀-2021-06-16-11-14-49"><br>不会导致库存超卖<br><img src="http://cdn.lyloou.com/img/RocketMQ%E5%AE%9E%E7%8E%B0%E7%A7%92%E6%9D%80-2021-06-16-11-10-18.png" alt="RocketMQ实现秒杀-2021-06-16-11-10-18"></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://gitee.com/lyloou/practice-rocketmq-seckill/tree/feature_transaction/" target="_blank" rel="noopener">https://gitee.com/lyloou/practice-rocketmq-seckill/tree/feature_transaction/</a></p>
]]></content>
      <tags>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell Tips</title>
    <url>/shell/tips/</url>
    <content><![CDATA[<h2 id="help-tips"><a href="#help-tips" class="headerlink" title="help tips"></a>help tips</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-function"><span class="hljs-title">help</span></span>()&#123;<br>cat &lt;&lt; HELP<br>usage: dd ddk <br>example: <span class="hljs-string">'wowo wowo'</span><br>HELP<br><span class="hljs-built_in">exit</span> 0<br>&#125;<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$1</span> == <span class="hljs-string">""</span> || <span class="hljs-variable">$1</span> == <span class="hljs-string">"-h"</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">'what?'</span><br>    <span class="hljs-built_in">help</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$1</span> != <span class="hljs-string">""</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$1</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\033]0;<span class="hljs-variable">$1</span>\007"</span><br></code></pre></td></tr></table></figure>

<h2 id="read-from-terminal"><a href="#read-from-terminal" class="headerlink" title="read from terminal"></a>read from terminal</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> input your name:<br><span class="hljs-built_in">read</span> name<br><span class="hljs-built_in">echo</span> your name is <span class="hljs-variable">$&#123;name&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>关于SQLite的总结</title>
    <url>/sql/SQLite%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="C-Create"><a href="#C-Create" class="headerlink" title="C (Create)"></a>C (Create)</h2><p>使用自带API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">db = dbHelper.getWritableDatabase();<br>ContentValue values = <span class="hljs-keyword">new</span> ContentValue();<br>values.put(<span class="hljs-string">"name"</span>, <span class="hljs-string">"第一行代码"</span>);<br>values.put(<span class="hljs-string">"author"</span>, <span class="hljs-string">"郭霖"</span>);<br>values.put(<span class="hljs-string">"price"</span>, <span class="hljs-string">"79.99"</span>);<br>values.put(<span class="hljs-string">"pages"</span>, <span class="hljs-string">"552"</span>);<br>db.insert(<span class="hljs-string">"Book"</span>, <span class="hljs-keyword">null</span>, values);<br>values.clear();<br></code></pre></td></tr></table></figure>

<p>使用数据库语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">db = dbHelper.getWritableDatabase();<br>db.execSQL(<span class="hljs-string">"insert into Book (name, author, pages, price) values (?, ?, ?, ?)"</span>, <span class="hljs-keyword">new</span> String[]&#123; <span class="hljs-string">"第一行代码"</span>, <span class="hljs-string">"郭霖"</span>, <span class="hljs-string">"552"</span>, <span class="hljs-string">"79.00"</span>&#125;);<br></code></pre></td></tr></table></figure>

<h2 id="R-Retrieve"><a href="#R-Retrieve" class="headerlink" title="R (Retrieve)"></a>R (Retrieve)</h2><p>使用自带API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Cursor cursor = db.query(<span class="hljs-string">"Book"</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure>

<p>使用数据库语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">db = dbHelper.getReadableDatabase();<br>Cursor cursor = db.rawQuery(<span class="hljs-string">"SELECT id, name FROM people WHERE name = ? AND id = ?"</span>, <span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">"David"</span>, <span class="hljs-string">"2"</span>&#125;);<br><span class="hljs-keyword">if</span>(cursor.moveToFirst())&#123;<br>  <span class="hljs-keyword">do</span>&#123;<br>    String name = cursor.getString(cursor.getColumnIndex(<span class="hljs-string">"name"</span>));<br>    String id = cursor.getString(cursor.getColumnIndex(<span class="hljs-string">"id"</span>));<br><br>    Log.e(<span class="hljs-string">"TAG"</span>, <span class="hljs-string">"name = "</span> + name);<br>    Log.e(<span class="hljs-string">"TAG"</span>, <span class="hljs-string">"id = "</span> + id);<br>  &#125; <span class="hljs-keyword">while</span> (cursor.moveToNext());<br>&#125;<br>cursor.close();<br></code></pre></td></tr></table></figure>


<h2 id="U-Update"><a href="#U-Update" class="headerlink" title="U (Update)"></a>U (Update)</h2><p>使用自带API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">db = dbHelper.getWritableDatabase();<br>ContentValue values = <span class="hljs-keyword">new</span> ContentValue();<br>values.put(<span class="hljs-string">"price"</span>, <span class="hljs-number">79.99</span>);<br>db.update(<span class="hljs-string">"Book"</span>, values, <span class="hljs-string">"name = ?"</span>, <span class="hljs-keyword">new</span> String[]&#123; <span class="hljs-string">"第一行代码"</span> &#125;);<br></code></pre></td></tr></table></figure>

<p>使用数据库语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">db = dbHelper.getWritableDatabase();<br>db.execSQL(<span class="hljs-string">"update Book set price = ? where name = ?"</span>, <span class="hljs-keyword">new</span> String[]&#123; <span class="hljs-string">"79.99"</span>, <span class="hljs-string">"第一行代码"</span> &#125;)<br></code></pre></td></tr></table></figure>

<h2 id="D-Delete"><a href="#D-Delete" class="headerlink" title="D (Delete)"></a>D (Delete)</h2><p>使用自带API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">db = dbHelper.getWritableDatabase();<br>db.delete(<span class="hljs-string">"Book"</span>, <span class="hljs-string">"page &gt; ?"</span>, <span class="hljs-keyword">new</span> String[]&#123; <span class="hljs-string">"500"</span> &#125;);<br></code></pre></td></tr></table></figure>

<p>使用数据库语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">db = dbHelper.getWritableDatabase();<br>db.execSQL(<span class="hljs-string">"delete from Book where pages &gt; ?"</span>, <span class="hljs-keyword">new</span> String[]&#123; <span class="hljs-string">"500"</span> &#125;)<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="使用事务（保证数据操作的原子性）"><a href="#使用事务（保证数据操作的原子性）" class="headerlink" title="使用事务（保证数据操作的原子性）"></a>使用事务（保证数据操作的原子性）</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SQLiteDatabase db = mDbHelper.getWritableDatabase();<br><span class="hljs-keyword">try</span> &#123;<br>   db.beginTransaction();<br><br>   String position = mode.getPosition().ordinal() + <span class="hljs-string">""</span>;<br>   String action = mode.getAction().ordinal() + <span class="hljs-string">""</span>;<br><br>   ContentValues values = <span class="hljs-keyword">new</span> ContentValues();<br>   values.put(<span class="hljs-string">"color"</span>, mode.getColor());<br>   values.put(<span class="hljs-string">"used"</span>, mode.isUsed() ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>   values.put(<span class="hljs-string">"level"</span>, mode.getLevel());<br>   values.put(<span class="hljs-string">"time"</span>, mode.getTime());<br><br>   db.update(TABLE_NAME, values, <span class="hljs-string">" position=? and action = ? "</span>, <span class="hljs-keyword">new</span> String[]&#123;position, action&#125;);<br>   values.clear();<br><br>   db.setTransactionSuccessful();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>  e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>   db.endTransaction();<br>   db.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h2><ul>
<li><a href="http://stackoverflow.com/questions/10598137/rawqueryquery-selectionargs" target="_blank" rel="noopener">rawQuery(query, selectionArgs)</a></li>
<li>《第一行代码》（第六章 数据存储全方案，详解持久化技术）</li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatisplus相关</title>
    <url>/sql/mybatisplus/</url>
    <content><![CDATA[<h2 id="mybatisplus-saveOrUpdate-DuplicateKeyException-问题"><a href="#mybatisplus-saveOrUpdate-DuplicateKeyException-问题" class="headerlink" title="mybatisplus saveOrUpdate DuplicateKeyException 问题"></a>mybatisplus saveOrUpdate DuplicateKeyException 问题</h2><p>使用了 atlas 代理后，在 update 的时候，如果更新的内容不变，返回为 0 问题<br>mybatis 在这种情况下默认返回 1。（可以通过 jdbc 参数<code>useAffectedRows</code>来自定义）</p>
<p><strong><code>mybatis-plus-extension-3.0.1.jar</code></strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// ServiceImpl.java</span><br>    @Override<br>    public boolean save<span class="hljs-constructor">OrUpdate(T <span class="hljs-params">entity</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (null != entity) &#123;<br>            Class&lt;?&gt; cls = entity.get<span class="hljs-constructor">Class()</span>;<br>            TableInfo tableInfo = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TableInfoHelper</span>.</span></span>get<span class="hljs-constructor">TableInfo(<span class="hljs-params">cls</span>)</span>;<br>            <span class="hljs-keyword">if</span> (null != tableInfo<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">tableInfo</span>.<span class="hljs-params">getKeyProperty</span>()</span>)) &#123;<br>                Object idVal = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectionKit</span>.</span></span>get<span class="hljs-constructor">MethodValue(<span class="hljs-params">cls</span>, <span class="hljs-params">entity</span>, <span class="hljs-params">tableInfo</span>.<span class="hljs-params">getKeyProperty</span>()</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>check<span class="hljs-constructor">ValNull(<span class="hljs-params">idVal</span>)</span>) &#123;<br>                    return save(entity);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                     * 更新成功直接返回，失败执行插入逻辑</span><br><span class="hljs-comment">                     */</span><br>                    return update<span class="hljs-constructor">ById(<span class="hljs-params">entity</span>)</span><span class="hljs-operator"> || </span>save(entity);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                throw <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ExceptionUtils</span>.</span></span>mpe(<span class="hljs-string">"Error:  Can not execute. Could not find @TableId."</span>);<br>            &#125;<br>        &#125;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p><strong><code>在 mybatis-plus-extension-3.0.1 版本下面，会导致下面错误</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">org.springframework.dao.DuplicateKeyException:<br>### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '657-CHECK_IN_EXTRA_AWARD-ACCUMULATIVE' for key 'unique_id_type'<br>### The error may involve com.lyloou.springmybatisplus.mapper.CheckInExtraAwardMapper.insert-Inline<br>### The error occurred while setting parameters<br>### SQL: INSERT INTO check_in_extra_award  ( id, type_key, award_type_enum, award_rule_enum )  VALUES  ( ?, ?, ?, ? )<br>### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '657-CHECK_IN_EXTRA_AWARD-ACCUMULATIVE' for key 'unique_id_type'<br>; ]; Duplicate entry <span class="hljs-string">'657-CHECK_IN_EXTRA_AWARD-ACCUMULATIVE'</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">'unique_id_type'</span>; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry <span class="hljs-string">'657-CHECK_IN_EXTRA_AWARD-ACCUMULATIVE'</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">'unique_id_type'</span><br><br>	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:<span class="hljs-number">242</span>)<br>	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:<span class="hljs-number">72</span>)<br>	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:<span class="hljs-number">73</span>)<br>	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:<span class="hljs-number">446</span>)<br>	at com.sun.proxy.$Proxy59.insert(Unknown Source)<br>	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:<span class="hljs-number">278</span>)<br>	at com.baomidou.mybatisplus.core.override.PageMapperMethod.execute(PageMapperMethod.java:<span class="hljs-number">68</span>)<br>	at com.baomidou.mybatisplus.core.override.PageMapperProxy.invoke(PageMapperProxy.java:<span class="hljs-number">64</span>)<br>	at com.sun.proxy.$Proxy62.insert(Unknown Source)<br>	at com.baomidou.mybatisplus.extension.service.impl.ServiceImpl.save(ServiceImpl.java:<span class="hljs-number">99</span>)<br>	at com.baomidou.mybatisplus.extension.service.impl.ServiceImpl.saveOrUpdate(ServiceImpl.java:<span class="hljs-number">159</span>)<br>	at com.baomidou.mybatisplus.extension.service.impl.ServiceImpl$$FastClassBySpringCGLIB$$<span class="hljs-number">76535273</span>.invoke(&lt;generated&gt;)<br>	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class="hljs-number">204</span>)<br>	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="hljs-number">685</span>)<br>	at com.lyloou.springmybatisplus.service.CheckInExtraAwardBaseService$$EnhancerBySpringCGLIB$$<span class="hljs-number">22</span>ac1ad5.saveOrUpdate(&lt;generated&gt;)<br>	at com.lyloou.springmybatisplus.SpringMybatisplusApplicationTests.contextLoads(SpringMybatisplusApplicationTests.java:<span class="hljs-number">31</span>)<br>	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="hljs-number">62</span>)<br>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="hljs-number">43</span>)<br>	at java.lang.reflect.Method.invoke(Method.java:<span class="hljs-number">498</span>)<br>	at org.junit.runners.model.FrameworkMethod$<span class="hljs-number">1</span>.runReflectiveCall(FrameworkMethod.java:<span class="hljs-number">50</span>)<br>	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:<span class="hljs-number">12</span>)<br>	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:<span class="hljs-number">47</span>)<br>	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:<span class="hljs-number">17</span>)<br>	at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:<span class="hljs-number">73</span>)<br>	at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:<span class="hljs-number">83</span>)<br>	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:<span class="hljs-number">75</span>)<br>	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:<span class="hljs-number">86</span>)<br>	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:<span class="hljs-number">84</span>)<br>	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:<span class="hljs-number">325</span>)<br>	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:<span class="hljs-number">251</span>)<br>	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:<span class="hljs-number">97</span>)<br>	at org.junit.runners.ParentRunner$<span class="hljs-number">3</span>.run(ParentRunner.java:<span class="hljs-number">290</span>)<br>	at org.junit.runners.ParentRunner$<span class="hljs-number">1</span>.schedule(ParentRunner.java:<span class="hljs-number">71</span>)<br>	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:<span class="hljs-number">288</span>)<br>	at org.junit.runners.ParentRunner.access$<span class="hljs-number">000</span>(ParentRunner.java:<span class="hljs-number">58</span>)<br>	at org.junit.runners.ParentRunner$<span class="hljs-number">2</span>.evaluate(ParentRunner.java:<span class="hljs-number">268</span>)<br>	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:<span class="hljs-number">61</span>)<br>	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:<span class="hljs-number">70</span>)<br>	at org.junit.runners.ParentRunner.run(ParentRunner.java:<span class="hljs-number">363</span>)<br>	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:<span class="hljs-number">190</span>)<br>	at org.junit.runner.JUnitCore.run(JUnitCore.java:<span class="hljs-number">137</span>)<br>	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:<span class="hljs-number">69</span>)<br>	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:<span class="hljs-number">33</span>)<br>	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="hljs-number">221</span>)<br>	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:<span class="hljs-number">54</span>)<br>Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry <span class="hljs-string">'657-CHECK_IN_EXTRA_AWARD-ACCUMULATIVE'</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">'unique_id_type'</span><br>	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="hljs-number">62</span>)<br>	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="hljs-number">45</span>)<br>	at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="hljs-number">423</span>)<br>	at com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="hljs-number">425</span>)<br>	at com.mysql.jdbc.Util.getInstance(Util.java:<span class="hljs-number">408</span>)<br>	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="hljs-number">936</span>)<br>	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:<span class="hljs-number">3976</span>)<br>	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:<span class="hljs-number">3912</span>)<br>	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:<span class="hljs-number">2530</span>)<br>	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:<span class="hljs-number">2683</span>)<br>	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:<span class="hljs-number">2486</span>)<br>	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:<span class="hljs-number">1858</span>)<br>	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:<span class="hljs-number">1197</span>)<br>	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:<span class="hljs-number">493</span>)<br>	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="hljs-number">62</span>)<br>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="hljs-number">43</span>)<br>	at java.lang.reflect.Method.invoke(Method.java:<span class="hljs-number">498</span>)<br>	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:<span class="hljs-number">59</span>)<br>	at com.sun.proxy.$Proxy69.execute(Unknown Source)<br>	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:<span class="hljs-number">46</span>)<br>	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:<span class="hljs-number">74</span>)<br>	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:<span class="hljs-number">50</span>)<br>	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:<span class="hljs-number">117</span>)<br>	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:<span class="hljs-number">198</span>)<br>	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:<span class="hljs-number">185</span>)<br>	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="hljs-number">62</span>)<br>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="hljs-number">43</span>)<br>	at java.lang.reflect.Method.invoke(Method.java:<span class="hljs-number">498</span>)<br>	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:<span class="hljs-number">433</span>)<br>	... <span class="hljs-number">42</span> more<br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span>:<span class="hljs-number">38.356</span>  INFO <span class="hljs-number">92996</span> --- [       Thread-<span class="hljs-number">2</span>] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@<span class="hljs-number">1</span>a245833: startup date [Tue Jun <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span>:<span class="hljs-number">35</span> CST <span class="hljs-number">2021</span>]; root of context hierarchy<br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">10</span>:<span class="hljs-number">38.360</span>  INFO <span class="hljs-number">92996</span> --- [       Thread-<span class="hljs-number">2</span>] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-<span class="hljs-number">1</span>&#125; closed<br><br>Process finished with exit code -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><ol>
<li>升级 mybatis-plus 版本</li>
</ol>
<p>在 mybatis-plus 新版本，已经换了实现。<br><strong><code>mybatis-plus-extension-3.3.1.tmp.jar</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ServiceImpl.java</span><br>    <span class="hljs-meta">@Transactional</span>(<br>        rollbackFor = &#123;Exception<span class="hljs-class">.<span class="hljs-keyword">class</span>&#125;</span><br><span class="hljs-class">    )</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">boolean</span> <span class="hljs-title">saveOrUpdate</span>(<span class="hljs-title">T</span> <span class="hljs-title">entity</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == entity) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Class&lt;?&gt; cls = entity.getClass();<br>            TableInfo tableInfo = TableInfoHelper.getTableInfo(cls);<br>            Assert.notNull(tableInfo, <span class="hljs-string">"error: can not execute. because can not find cache of TableInfo for entity!"</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]);<br>            String keyProperty = tableInfo.getKeyProperty();<br>            Assert.notEmpty(keyProperty, <span class="hljs-string">"error: can not execute. because can not find column for id from entity!"</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]);<br>            Object idVal = ReflectionKit.getMethodValue(cls, entity, tableInfo.getKeyProperty());<br>            <span class="hljs-keyword">return</span> !StringUtils.checkValNull(idVal) &amp;&amp; !Objects.isNull(<span class="hljs-keyword">this</span>.getById((Serializable)idVal)) ? <span class="hljs-keyword">this</span>.updateById(entity) : <span class="hljs-keyword">this</span>.save(entity);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>不使用 atlas<br>github 上有人提过这个问题，目前还没有人解答：<br><a href="https://github.com/Qihoo360/Atlas/issues/191" target="_blank" rel="noopener">连接 atlas update 成功后返回结果为 0 · Issue #191 · Qihoo360/Atlas</a></li>
</ol>
<p>本以为可以通过配置来满足需求（返回匹配行数，而不是影响行数），找到了 <code>useAffectedRows</code>，<br>可是这个参数，对于 atlas 不可用。</p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p><a href="https://blog.csdn.net/qq_15071263/article/details/81662725" target="_blank" rel="noopener">Mysql 连接参数 useAffectedRows 详解_简简单单 Onlinezuozuo-CSDN 博客_useaffectedrows</a></p>
<blockquote>
<p>useAffectedRows=true 时, update 返回值为受影响行数;<br>useAffectedRows=false 时（默认）, update 返回值为 where 条件匹配的行数.</p>
</blockquote>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis相关</title>
    <url>/sql/mybatis/</url>
    <content><![CDATA[<h2 id="mybatisplus"><a href="#mybatisplus" class="headerlink" title="mybatisplus"></a>mybatisplus</h2><p><a href="https://github.com/lyloou/spring-master/tree/master/spring-mybatisplus" target="_blank" rel="noopener">https://github.com/lyloou/spring-master/tree/master/spring-mybatisplus</a></p>
<ul>
<li>自动生成，包括 Controller、Mapper、Entity、Service、Mapper.xml</li>
</ul>
<h2 id="mybatis-自动生成工具"><a href="#mybatis-自动生成工具" class="headerlink" title="mybatis 自动生成工具"></a>mybatis 自动生成工具</h2><ul>
<li>下载<code>mybatis-generator-core-1.3.7.jar</code></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">https://github.com/mybatis/generator/releases<br>https://github.com/mybatis/generator/releases/download/mybatis-generator-1.3.7/mybatis-generator-core-1.3.7.zip<br></code></pre></td></tr></table></figure>

<ul>
<li>下载<code>postgresql-42.2.2.jar</code></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">https://jdbc.postgresql.org/download.html<br>https://jdbc.postgresql.org/download/postgresql-42.2.2.jar<br></code></pre></td></tr></table></figure>

<ul>
<li>配置<code>generatorConfig.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">classPathEntry</span></span><br><span class="hljs-tag">            <span class="hljs-attr">location</span>=<span class="hljs-string">"D:/c/mybatis/mybatis-generator-core-1.3.7/lib/postgresql-42.2.2.jar"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"MysqlContext"</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">"MyBatis3Simple"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成的pojo，将implements Serializable--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"org.mybatis.generator.plugins.SerializablePlugin"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">"org.postgresql.Driver"</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">"jdbc:postgresql://192.168.1.123:5432/users?currentSchema=hello<span class="hljs-symbol">&amp;amp;</span>tcpKeepAlive=true"</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">"hello"</span> <span class="hljs-attr">password</span>=<span class="hljs-string">"hello"</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer</span><br><span class="hljs-comment">            true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"forceBigDecimals"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">"com.example.model.original"</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">"./src/main/java"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"enableSubPackages"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 从数据库返回的值被清理前后的空格  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"trimStrings"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"ANNOTATEDMAPPER"</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">"com.example.repository.mapper"</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetProject</span>=<span class="hljs-string">"./src/main/java"</span>  &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"rootInterface"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.example.repository.mark.IMarkMapper"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>			<span class="hljs-comment">&lt;!-- 阻止**生成的注释包含时间戳 true：是 ： false:否 --&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suppressDate"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span> /&gt;</span><br>			<span class="hljs-comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suppressAllComments"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span> /&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">schema</span>=<span class="hljs-string">"hello"</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">"app_verify_info"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">schema</span>=<span class="hljs-string">"hello"</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">"api_interface_info"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">schema</span>=<span class="hljs-string">"hello"</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">"api_interface_access"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">schema</span>=<span class="hljs-string">"hello"</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">"app_code"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>配置<code>generatorConfig.bat</code></li>
</ul>
<figure class="highlight bat"><table><tr><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br>java -jar mybatis-generator-core-<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.jar -configfile generatorConfig.xml<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure>

<p>参考资料：</p>
<ul>
<li><a href="https://github.com/mybatis/generator" target="_blank" rel="noopener">官网 generator</a></li>
<li><a href="https://blog.csdn.net/zxh_2581285470/article/details/51915228" target="_blank" rel="noopener">mybatis 自动生成工具-MBG</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># mysql使用的是不同的连接库</span><br>mysql-connector-java-5.1.37.jar<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://blog.csdn.net/weixin_42476601/article/details/81479362" target="_blank" rel="noopener">Mybatis 最入门—代码自动生成（generatorConfig.xml 配置） - 越来越好 ing 的博客 - CSDN 博客</a></li>
</ul>
<h2 id="根据数据库表生成对应实体类（Lombok-的注解实现）"><a href="#根据数据库表生成对应实体类（Lombok-的注解实现）" class="headerlink" title="根据数据库表生成对应实体类（Lombok 的注解实现）"></a>根据数据库表生成对应实体类（Lombok 的注解实现）</h2><p>记得 IDEA 安装好插件：Lombok Plugin</p>
<p>文件<code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.generator.version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.generator.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mysql.connector.java</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.connector.java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.generator.lombok.plugin</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.generator.lombok.plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysql.connector.java&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>src/main/resources/mybatis/generatorConfig.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysql.connector.java&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.softwareloop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-lombok-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.generator.lombok.plugin&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>文件<code>src/main/resources/mybatis/generatorConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"context1"</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">"MyBatis3Simple"</span> <span class="hljs-attr">defaultModelType</span>=<span class="hljs-string">"flat"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- include the plugin --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.softwareloop.mybatis.generator.plugins.LombokPlugin"</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- enable annotations --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"builder"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- annotation's option(boolean) --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"builder.fluent"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- annotation's option(String) --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"builder.builderMethodName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"myBuilder"</span>/&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"accessors"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- annotation's option(array of String) --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"accessors.prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"m_, _"</span>/&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- disable annotations --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"allArgsConstructor"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--  关闭自动生成的注释  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suppressAllComments"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">"com.mysql.jdbc.Driver"</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">"jdbc:mysql://127.0.0.1/lyloou?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8"</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">"root"</span> <span class="hljs-attr">password</span>=<span class="hljs-string">"root"</span>/&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span></span><br><span class="hljs-tag">                <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">"com.lyloou.orders.entity.task"</span></span><br><span class="hljs-tag">                <span class="hljs-attr">targetProject</span>=<span class="hljs-string">"src/main/java"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"trimStrings"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--&lt;table tableName="tasks" domainObjectName="Tasks"/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">"task_bonus"</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">"TaskBonus"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">"task_bonus_coupon"</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">"TaskBonusCoupon"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">"task_bonus_user"</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">"TaskBonusUser"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>如下图所示点击生成 entity<br><img src="https://github.com/lyloou/img/raw/develop/z/20190624151033.png" alt="点击生成 entity"></p>
<p>如果数据库中的时间用的是 <code>timestamp</code>，为了不损失精度，做一个【在文件夹中替换】的操作。<br>选中刚才的 task 文件夹，键入 <code>Ctrl + Shift + R</code><br>替换 <code>private Date</code> 为 <code>private java.sql.Timestamp</code></p>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Jooq相关</title>
    <url>/sql/jooq/</url>
    <content><![CDATA[<p><a href="https://www.jooq.org/doc/3.9/manual/#Overview" target="_blank" rel="noopener">https://www.jooq.org/doc/3.9/manual/#Overview</a></p>
<p>C</p>
<p>R</p>
<p>U</p>
<p>D</p>
<h2 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a><strong>插入或更新</strong></h2><p>如果没有就插入，如果有则更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 工具方法 https://github.com/jOOQ/jOOQ/issues/2134</span><br><span class="hljs-keyword">import</span> org.jooq.Field;<br><span class="hljs-keyword">import</span> org.jooq.impl.DSL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDSL</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Field&lt;T&gt; <span class="hljs-title">values</span><span class="hljs-params">(Field&lt;T&gt; field)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> DSL.field(<span class="hljs-string">"VALUES(&#123;0&#125;)"</span>, field.getDataType(), field);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertCouponItemsToDb</span><span class="hljs-params">(List&lt;TbkDgItemCouponGetResponse.TbkCoupon&gt; results)</span> </span>&#123;<br><br>    dslContext.transaction((configuration) -&gt; &#123;<br><br>        InsertValuesStep19&lt;TbkGoodsRecord, Long, Integer,<br>                String, Timestamp, Timestamp,<br>                String, Integer, Integer,<br>                String, String, Long,<br>                String, String, String,<br>                Byte, Integer, BigDecimal,<br>                String, BigDecimal&gt; step =<br>                DSL.using(configuration).insertInto(TBK_GOODS,<br>                        TBK_GOODS.NUM_IID,<br>                        TBK_GOODS.CATEGORY,<br>                        TBK_GOODS.COUPON_CLICK_URL,<br>                        TBK_GOODS.COUPON_START_TIME,<br>                        TBK_GOODS.COUPON_END_TIME,<br>                        TBK_GOODS.COUPON_INFO,<br>                        TBK_GOODS.COUPON_REMAIN_COUNT,<br>                        TBK_GOODS.COUPON_TOTAL_COUNT,<br>                        TBK_GOODS.NICK,<br>                        TBK_GOODS.PICT_URL,<br>                        TBK_GOODS.SELLER_ID,<br>                        TBK_GOODS.SHOP_TITLE,<br>                        TBK_GOODS.SMALL_IMAGES,<br>                        TBK_GOODS.TITLE,<br>                        TBK_GOODS.USER_TYPE,<br>                        TBK_GOODS.VOLUME,<br>                        TBK_GOODS.ZK_FINAL_PRICE,<br>                        TBK_GOODS.ITEM_DESCRIPTION,<br>                        TBK_GOODS.TK_RATE<br>                );<br><br>        results.forEach(tbkCoupon -&gt; &#123;<br>            step.values(tbkCoupon.getNumIid(),<br>                    tbkCoupon.getCategory().intValue(),<br>                    tbkCoupon.getCouponClickUrl(),<br>                    formatTime(tbkCoupon.getCouponStartTime()),<br>                    formatTime(tbkCoupon.getCouponEndTime()),<br>                    tbkCoupon.getCouponInfo(),<br>                    tbkCoupon.getCouponRemainCount().intValue(),<br>                    tbkCoupon.getCouponTotalCount().intValue(),<br>                    tbkCoupon.getNick(),<br>                    tbkCoupon.getPictUrl(),<br>                    tbkCoupon.getSellerId(),<br>                    tbkCoupon.getShopTitle(),<br>                    StringUtil.convertListToArrayStringWithDoubleQuotation(tbkCoupon.getSmallImages()),<br>                    tbkCoupon.getTitle(),<br>                    tbkCoupon.getUserType().byteValue(),<br>                    tbkCoupon.getVolume().intValue(),<br>                    BigDecimal.valueOf(Double.parseDouble(tbkCoupon.getZkFinalPrice())),<br>                    tbkCoupon.getItemDescription(),<br>                    BigDecimal.valueOf(Double.parseDouble(tbkCoupon.getCommissionRate()))<br>            );<br>        &#125;);<br><br>        step.onDuplicateKeyUpdate()<br>                .set(TBK_GOODS.CATEGORY, MyDSL.values(TBK_GOODS.CATEGORY))<br>                .set(TBK_GOODS.COUPON_CLICK_URL, MyDSL.values(TBK_GOODS.COUPON_CLICK_URL))<br>                .set(TBK_GOODS.COUPON_START_TIME, MyDSL.values(TBK_GOODS.COUPON_START_TIME))<br>                .set(TBK_GOODS.COUPON_END_TIME, MyDSL.values(TBK_GOODS.COUPON_END_TIME))<br>                .set(TBK_GOODS.COUPON_INFO, MyDSL.values(TBK_GOODS.COUPON_INFO))<br>                .set(TBK_GOODS.COUPON_REMAIN_COUNT, MyDSL.values(TBK_GOODS.COUPON_REMAIN_COUNT))<br>                .set(TBK_GOODS.NICK, MyDSL.values(TBK_GOODS.NICK))<br>                .set(TBK_GOODS.PICT_URL, MyDSL.values(TBK_GOODS.PICT_URL))<br>                .set(TBK_GOODS.SELLER_ID, MyDSL.values(TBK_GOODS.SELLER_ID))<br>                .set(TBK_GOODS.SHOP_TITLE, MyDSL.values(TBK_GOODS.SHOP_TITLE))<br>                .set(TBK_GOODS.SMALL_IMAGES, MyDSL.values(TBK_GOODS.SMALL_IMAGES))<br>                .set(TBK_GOODS.TITLE, MyDSL.values(TBK_GOODS.TITLE))<br>                .set(TBK_GOODS.USER_TYPE, MyDSL.values(TBK_GOODS.USER_TYPE))<br>                .set(TBK_GOODS.VOLUME, MyDSL.values(TBK_GOODS.VOLUME))<br>                .set(TBK_GOODS.ZK_FINAL_PRICE, MyDSL.values(TBK_GOODS.ZK_FINAL_PRICE))<br>                .set(TBK_GOODS.ITEM_DESCRIPTION, MyDSL.values(TBK_GOODS.ITEM_DESCRIPTION))<br>                .set(TBK_GOODS.TK_RATE, MyDSL.values(TBK_GOODS.TK_RATE))<br>                .executeAsync(executorService);<br><br>    &#125;);<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Timestamp <span class="hljs-title">formatTime</span><span class="hljs-params">(String time)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (Strings.isNullOrEmpty(time)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Timestamp.valueOf(time + <span class="hljs-string">" 00:00:00"</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="判断某个字段是否为空"><a href="#判断某个字段是否为空" class="headerlink" title="判断某个字段是否为空"></a>判断某个字段是否为空</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">step.and(TbkGoods.TBK_GOODS.COUPON_INFO.length().notEqual(<span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql命令行实用程序</title>
    <url>/sql/mysql%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mysql --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure>

<h2 id="启动-mysql："><a href="#启动-mysql：" class="headerlink" title="启动 mysql："></a>启动 mysql：</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mysql -u root -p<br>mysql -u root --password=your_password<br></code></pre></td></tr></table></figure>

<h2 id="导入数据结构和数据"><a href="#导入数据结构和数据" class="headerlink" title="导入数据结构和数据"></a>导入数据结构和数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysql -u root -p goods &lt; goods_db_structure.sql<br>mysql -u root -p goods &lt; goods_db_data.sql<br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/gaochen519/article/details/51504319" target="_blank" rel="noopener">Mysql 通过 cmd 命令导入 sql 文件_gaochen519 的博客-CSDN 博客</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysql -uroot -p<br>show database;<br>use mydb;<br><span class="hljs-built_in">source</span> /root/mydb.sql;<br></code></pre></td></tr></table></figure>

<h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><p><a href="https://www.iteye.com/blog/yufenfei-1743967" target="_blank" rel="noopener">mysql show columns 等 show 的用法 - yufenfei - ITeye 博客</a><br>SHOW DATABASES︰列出 MySQL Server 上的数据库。<br>SHOW TABLES [FROM db_name]︰列出数据库中的表。<br>SHOW TABLE STATUS [FROM db_name]︰列出数据库的表信息，比较详细。<br>SHOW COLUMNS FROM tbl_name [FROM db_name]︰列出表的列信息，同 SHOW FIELDS FROM tbl_name [FROM db_name]，DESCRIBE tbl_name [col_name]。<br>SHOW FULL COLUMNS FROM tbl_name [FROM db_name]︰列出表的列信息，比较详细，同 SHOW FULL FIELDS FROM tbl_name [FROM db_name]。<br>SHOW INDEX FROM tbl_name [FROM db_name]︰列出表的索引信息。<br>SHOW STATUS︰列出 Server 的状态信息。<br>SHOW VARIABLES︰列出 MySQL 系統参数值<br>SHOW PROCESSLIST︰查看当前 mysql 查询进程 （可以用来查看死锁问题）<br>SHOW GRANTS FOR user︰列出用户的授权命令</p>
<h2 id="g-和-G"><a href="#g-和-G" class="headerlink" title="\g 和 \G"></a><code>\g</code> 和 <code>\G</code></h2><p><a href="https://www.cnblogs.com/tjudzj/p/10032846.html" target="_blank" rel="noopener">MySQl 中的\g 和\G - 一步一个小脚印 - 博客园</a></p>
<ol>
<li>\g<br>在 MySQL 的 sql 语句后加上\g，效果等同于加上定界符，一般默认的定界符是分号;</li>
<li>\G<br>在 MySQL 的 sql 语句后加上\G，表示将查询结果进行按列打印，可以使每个字段打印到单独的行。即将查到的结构旋转 90 度变成纵向；</li>
</ol>
]]></content>
      <tags>
        <tag>sql</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的shell命令（Windows平台上）</title>
    <url>/shell/%E5%B8%B8%E7%94%A8%E7%9A%84shell%E5%91%BD%E4%BB%A4%EF%BC%88Windows%E5%B9%B3%E5%8F%B0%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h1 id="按任意键退出"><a href="#按任意键退出" class="headerlink" title="按任意键退出"></a>按任意键退出</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">read -n 1 -p "按任意键退出，并打开apk目录..."<br></code></pre></td></tr></table></figure>

<h1 id="打开Windows资源管理器指定目录"><a href="#打开Windows资源管理器指定目录" class="headerlink" title="打开Windows资源管理器指定目录"></a>打开Windows资源管理器指定目录</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取当前目录</span><br>rootpath=$(pwd)<br><span class="hljs-meta">#</span><span class="bash"> 打开当前目录下的/_apk/apk目录</span><br>start $rootpath'/_apk/apk'<br></code></pre></td></tr></table></figure>


<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/zzban/article/details/8852655" target="_blank" rel="noopener">Linux Shell编程语法（变量及其赋值）</a><br><a href="http://blog.csdn.net/ithomer/article/details/5904632" target="_blank" rel="noopener">SHELL学习笔记—-IF条件判断，判断条件</a><br><a href="http://blog.csdn.net/liuxincumt/article/details/6202295" target="_blank" rel="noopener">shell的read方法使用介绍</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql</title>
    <url>/sql/postgresql/</url>
    <content><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1 创建数据库</span><br>CREATE DATABASE testdb OWNER dbuser;<br><br><span class="hljs-comment"># 2 列出所有数据库</span><br>\l<br><br><span class="hljs-comment"># 3 连接数据库</span><br>\c testdb<br><br><span class="hljs-comment"># 4 创建表和查看表</span><br>CREATE TABLE student(id int, name varchar(20), birth_date date);<br>\d <span class="hljs-comment"># 查看所有表</span><br>\d student <span class="hljs-comment"># 查看当前表结构</span><br>\d+ student <span class="hljs-comment"># 显示更多的信息，如：与表列关联的注释</span><br><br><span class="hljs-comment"># 5 插入数据</span><br>INSERT INTO student(id, name, birth_date) values(1, <span class="hljs-string">'a'</span>, <span class="hljs-string">'2010-10-10'</span>);<br>INSERT INTO student(id, name, birth_date) values(2, <span class="hljs-string">'b'</span>, <span class="hljs-string">'2010-10-12'</span>);<br><br><span class="hljs-comment"># 6 查询表</span><br>SELECT * FROM student;<br><br><span class="hljs-comment"># 7 修改</span><br>UPDATE student SET name=<span class="hljs-string">'aa'</span> WHERE id = 1;<br>UPDATE student SET name=<span class="hljs-string">'bb'</span> WHERE id = 2;<br><br><span class="hljs-comment"># 8 删除</span><br>DELETE FROM student <span class="hljs-built_in">where</span> id = 1;<br><br><span class="hljs-comment"># 9 删除表</span><br>DROP TABLE student;<br></code></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install postgresql-client<br>sudo apt-<span class="hljs-builtin-name">get</span> install postgresql<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html" target="_blank" rel="noopener">PostgreSQL 新手入门</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">\h：查看SQL命令的解释，比如\h select。<br>\?：查看psql命令列表。<br>\l：列出所有数据库。<br>\c [database_name]：连接其他数据库。<br>\d：列出当前数据库的所有表格。<br>\d [table_name]：列出某一张表格的结构。<br>\du：列出所有用户。<br>\e：打开文本编辑器。<br>\conninfo：列出当前数据库和连接的信息。<br></code></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>要用<code>;</code>来结束语句；</li>
<li>字符串要用单引号<code>&#39;</code>来包裹；</li>
</ul>
<h2 id="enable-remote-connection"><a href="#enable-remote-connection" class="headerlink" title="enable remote connection"></a>enable remote connection</h2><ul>
<li><a href="https://blog.bigbinary.com/2016/01/23/configure-postgresql-to-allow-remote-connection.html" target="_blank" rel="noopener">Configure PostgreSQL to allow remote connection | BigBinary Blog</a></li>
</ul>
<p>sudo service postgresql restart</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.csdn.net/Chen_Victor/article/details/55515266" target="_blank" rel="noopener">PostgreSQL 入门 - CSDN 博客</a></li>
<li><a href="https://www.cnblogs.com/stephen-liu74/category/343171.html" target="_blank" rel="noopener">PostgreSQL - 随笔分类 - Stephen_Liu - 博客园</a></li>
<li>《PostgreSQL 修炼之道》</li>
</ul>
<h2 id="Permission-denied-for-relation"><a href="#Permission-denied-for-relation" class="headerlink" title="Permission denied for relation"></a>Permission denied for relation</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- login in admin:</span><br>psql -U postgres -d exampledb -h 127.0.0.1 -p 5432;<br><span class="hljs-comment">-- grant</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">TABLES</span> user_tbl <span class="hljs-keyword">TO</span> dbuser;<br><br><span class="hljs-comment">-- login in dbuser</span><br>psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432;<br></code></pre></td></tr></table></figure>

<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><a href="https://stackoverflow.com/questions/26277356/how-to-get-current-database-and-user-name-using-a-select-in-postgresql/26277430" target="_blank" rel="noopener">https://stackoverflow.com/questions/26277356/how-to-get-current-database-and-user-name-using-a-select-in-postgresql/26277430</a></p>
<p>查看当前用户；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure>

<p>查看当前数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> current_database();<br></code></pre></td></tr></table></figure>

<h2 id="pgcli"><a href="#pgcli" class="headerlink" title="pgcli"></a>pgcli</h2><p><a href="https://www.pgcli.com/config" target="_blank" rel="noopener">https://www.pgcli.com/config</a></p>
<h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>在修改某个字段类型之前，最好删除这个字段的约束，<br>修改完后再把合适的约束添加上去。《PostgreSQL 修炼之道》p166</p>
<h2 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> contacts <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">'n1'</span>, <span class="hljs-string">'&#123;15200000000, 15200000001&#125;'</span>, <span class="hljs-string">'shenzhen'</span>) <span class="hljs-keyword">on</span> conflict (<span class="hljs-keyword">id</span>) <span class="hljs-keyword">do</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">set</span> phone = excluded.phone;<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/1109061/insert-on-duplicate-update-in-postgresql" target="_blank" rel="noopener">https://stackoverflow.com/questions/1109061/insert-on-duplicate-update-in-postgresql</a></li>
<li><a href="https://stackoverflow.com/questions/39663280/how-to-do-insert-into-select-and-on-duplicate-update-in-postgresql-9-5" target="_blank" rel="noopener">https://stackoverflow.com/questions/39663280/how-to-do-insert-into-select-and-on-duplicate-update-in-postgresql-9-5</a></li>
</ul>
<h2 id="插入数组"><a href="#插入数组" class="headerlink" title="插入数组"></a>插入数组</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">TABLE</span> contacts(<br>        <span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>,<br>        <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">40</span>),<br>        phone <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>)[],<br>        address <span class="hljs-built_in">text</span>);<br><br> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> contacts <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">'n1'</span>, <span class="hljs-string">'&#123;15200000000, 15200000001&#125;'</span>, <span class="hljs-string">'shenzhen'</span>)<br></code></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/33335338/inserting-array-values" target="_blank" rel="noopener">https://stackoverflow.com/questions/33335338/inserting-array-values</a></p>
<h2 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(student_no <span class="hljs-built_in">int</span>, student_name <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>), age <span class="hljs-built_in">int</span>, class_no <span class="hljs-built_in">int</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student <span class="hljs-keyword">select</span> generate_series(<span class="hljs-number">1</span>,<span class="hljs-number">23</span>), <span class="hljs-keyword">concat</span>(<span class="hljs-string">'s'</span>,generate_series(<span class="hljs-number">1</span>,<span class="hljs-number">23</span>)),<span class="hljs-number">18</span>,  <span class="hljs-number">1</span><br><span class="hljs-keyword">on</span> conflict (student_no) <span class="hljs-keyword">do</span> <span class="hljs-keyword">update</span><br><span class="hljs-keyword">set</span> student_name=excluded.student_name,<br>    age=excluded.age,<br>    class_no=excluded.class_no;<br></code></pre></td></tr></table></figure>

<h2 id="修改默认的schema"><a href="#修改默认的schema" class="headerlink" title="修改默认的schema"></a>修改默认的<code>schema</code></h2><p><a href="https://stackoverflow.com/questions/2875610/permanently-set-postgresql-schema-path" target="_blank" rel="noopener">https://stackoverflow.com/questions/2875610/permanently-set-postgresql-schema-path</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">DATABASE</span> lou <span class="hljs-keyword">SET</span> search_path <span class="hljs-keyword">TO</span> lou, osdba,postgres,<span class="hljs-keyword">public</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>【Mysql】字段类型</title>
    <url>/sql/mysql%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><table>
<thead>
<tr>
<th>数值类型</th>
<th>范围(signed)</th>
<th>范围(unsigned)</th>
<th align="right">字节数</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>-2147493648 到 2147493647</td>
<td>0 到 4294967295 (<code>2^(4*8)</code>)</td>
<td align="right">4</td>
</tr>
<tr>
<td>bigint</td>
<td>-9223372036854775808 到 9223372036854775807</td>
<td>0 到 18446744073709551615 (<code>2^(8*8)</code>)</td>
<td align="right">8</td>
</tr>
<tr>
<td>float</td>
<td>见下方</td>
<td>见下方</td>
<td align="right">4</td>
</tr>
<tr>
<td>double</td>
<td>见下方</td>
<td>见下方</td>
<td align="right">-</td>
</tr>
<tr>
<td>decimal</td>
<td>DECIMAL[(M[,D])] <code>M&lt;=65 &amp;&amp; D&lt;=30</code></td>
<td>不能为负值</td>
<td align="right">-</td>
</tr>
</tbody></table>
<p>mysql 官方说明文档: <a href="https://dev.mysql.com/doc/refman/5.6/en/data-type-overview.html" target="_blank" rel="noopener">MySQL :: MySQL 5.6 Reference Manual :: 11.1 Data Type Overview</a></p>
<h2 id="mysql-字段类型范围说明-int、bigint、smallint、tinyint-char、varchar、nvarchar-幻星宇-博客园"><a href="#mysql-字段类型范围说明-int、bigint、smallint、tinyint-char、varchar、nvarchar-幻星宇-博客园" class="headerlink" title="mysql 字段类型范围说明:int、bigint、smallint、tinyint,char、varchar、nvarchar - 幻星宇 - 博客园"></a><a href="https://www.cnblogs.com/xingmeng/archive/2012/10/24/2737455.html" target="_blank" rel="noopener">mysql 字段类型范围说明:int、bigint、smallint、tinyint,char、varchar、nvarchar - 幻星宇 - 博客园</a></h2><p>MySQL 的列类型主要有三种：数字、字串和日期。</p>
<p>下面来详细的说明,不一定准确不一定完整,请多包含或者提出您的建议,我很乐意倾听,呵呵.</p>
<p>数字列类型 int、bigint、smallint、tinyint<br>　　数字列类型用于储存各种数字数据，如价格、年龄或者数量。数字列类型主要分为两种：整数型和浮点型。所有的数字列类型都允许有两个选 项：UNSIGNED 和 ZEROFILL。选择 UNSIGNED 的列不允许有负数，选择了 ZEROFILL 的列会为数值添加零。下面是 MySQL 中可用的 数字列类型<br>• TINYINT——一个微小的整数，支持 -128 到 127(SIGNED)，0 到 255(UNSIGNED)，需要 1 个字节存储<br>• BIT——同 TINYINT(1)<br>• BOOL——同 TINYINT(1)<br>• SMALLINT——一个小整数，支持 -32768 到 32767(SIGNED)，0 到 65535(UNSIGNED)，需要 2 个字节存储 MEDIUMINT——一个中等整数，支持 -8388608 到 8388607(SIGNED)，0 到 16777215(UNSIGNED)，需要 3 个字节存储<br>• INT——一个整数，支持 -2147493648 到 2147493647(SIGNED)，0 到 4294967295(UNSIGNED)，需要 4 个字节存储<br>• INTEGER——同 INT<br>• BIGINT——一个大整数，支持 -9223372036854775808 到 9223372036854775807(SIGNED)，0 到 18446744073709551615(UNSIGNED)，需要 8 个字节存储<br>• FLOAT(precision)——一个浮点数。precision&lt;=24 用于单精度浮点数；precision 在 25 和 53 之间，用于又精度 浮点数。FLOAT(X)与相诮的 FLOAT 和 DOUBLE 类型有差相同的范围，但是没有定义显示尺寸和小数位数。在 MySQL3.23 之前，这不是一个 真的浮点值，且总是有两位小数。MySQL 中的所有计算都用双精度，所以这会带来一些意想不到的问题。<br>• FLOAT——一个小的菜单精度浮点数。支持 -3.402823466E+38 到-1.175494351E-38，0 和 1.175494351E-38 to 3.402823466E+38，需要 4 个字节存储。如果是 UNSIGNED，正数的范围保持不变，但负数是不允许的。<br>• DOUBLE——一个双精度浮点数。支持 -1.7976931348623157E+308 到-2.2250738585072014E-308，0 和 2.2250738585072014E- 308 到 1.7976931348623157E+308。如果是 FLOAT，UNSIGNED 不会改变正数范围，但负数是不允许的。<br>• DOUBLE PRECISION——同 DOUBLE<br>• REAL——同 DOUBLE<br>• DECIMAL——将一个数像字符串那样存储，每个字符占一个字节<br>• DEC——同 DECIMAL<br>• NUMERIC——同 DECIMAL</p>
<p>字符串列类型:char、varchar、nvarchar<br>　　字符串列类型用于存储任何类型的字符数据，如名字、地址或者报纸文章。下面是 MySQL 中可用的字符串列类型<br>• CHAR——字符。固定长度的字串，在右边补齐空格，达到指定的长度。支持从 0 到 155 个字符。搜索值时，后缀的空格将被删除。<br>• VARCHAR——可变长的字符。一个可变长度的字串，其中的后缀空格在存储值时被删除。支持从 0 到 255 字符<br>• TINYBLOB——微小的二进制对象。支持 255 个字符。需要长度+1 字节的存储。与 TINYTEXT 一样，只不过搜索时是区分大小写的。(0.25KB)<br>• TINYTEXT——支持 255 个字符。要求长度+1 字节的存储。与 TINYBLOB 一样，只不过搜索时会忽略大小写。(0.25KB)<br>• BLOB——二进制对象。支持 65535 个字符。需要长度+2 字节的存储。 (64KB)<br>• TEXT——支持 65535 个字符。要求长度+2 字节的存储。 (64KB)<br>• MEDIUMBLOB——中等大小的二进制对象。支持 16777215 个字符。需要长度+3 字节的存储。 (16M)<br>• MEDIUMTEXT——支持 16777215 个字符。需要长度+3 字节的存储。 (16M)<br>• LONGBLOB——大的的二进制对象。支持 4294967295 个字符。需要长度+4 字节的存储。 (4G)<br>• LONGTEXT——支持 4294967295 个字符。需要长度+4 字节的存储。(4G)<br>• ENUM——枚举。只能有一个指定的值，即 NULL 或””，最大有 65535 个值<br>• SET——一个集合。可以有 0 到 64 个值，均来自于指定清单.</p>
<p>日期和时间列类型<br>　　日期和时间列类型用于处理时间数据，可以存储当日的时间或出生日期这样的数据。格式的规定：Y 表示年、M（前 M）表示月、D 表示日、H 表示小时、M（后 M）表示分钟、S 表示秒。下面是 MySQL 中可用的日期和时间列类型<br>• DATETIME——格式：’YYYY-MM-DD HH:MM:SS’，范围：’1000-01-01 00:00:00’到’9999-12-31 23:59:59’<br>• DATE——格式：’YYYY-MM-DD’，范围：’1000-01-01’到’9999-12-31’<br>• TIMESTAMP——格式：’YYYYMMDDHHMMSS’、’YYMMDDHHMMSS’、’YYYYMMDD’、’YYMMDD’，范围：’1970-01-01 00:00:00’到’2037-01-01 00:00:00’<br>• TIME——格式：’HH:MM:SS’<br>• YEAR——格式：’YYYY，范围：’1901’到’2155’</p>
<h2 id="MySQL-中-int-5-最大长度是多少？"><a href="#MySQL-中-int-5-最大长度是多少？" class="headerlink" title="MySQL 中 int(5)最大长度是多少？"></a>MySQL 中 int(5)最大长度是多少？</h2><ul>
<li>无论是 int(3)、int(10)，内存存储的是 4 个字节；</li>
<li>最大长度取决于类型是 int 还是 bigint ；</li>
<li><code>int(5)</code>的 5 表示默认显示字符的宽度: 如果输入的是<code>10</code>默认给你显示为<code>00010</code>（加上 <code>zerofill</code>后可以看到）；</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`test1`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'id'</span>,<br>  <span class="hljs-string">`id2`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`id3`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">unsigned</span> zerofill <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="hljs-number">17</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=latin1;<br></code></pre></td></tr></table></figure>

<p><img src="https://github.com/lyloou/img/raw/develop/z/20190718155452.png" alt></p>
<p>参考： <a href="https://blog.csdn.net/allenjay11/article/details/76549503" target="_blank" rel="noopener">MySQL 中 int(11)最大长度是多少？ - 养码青年 - CSDN 博客</a></p>
<blockquote>
<p>在 SQL 语句中 int 代表你要创建字段的类型，int 代表整型，11 代表字段的长度。<br>　这个 11 代表显示宽度，整数列的显示宽度与 mysql 需要用多少个字符来显示该列数值，与该整数需要的存储空间的大小都没有关系，比如，不管设定了显示宽度是多少个字符，bigint 都要占用 8 个 字节。</p>
<p>int 是整型，(11)是指显示字符的长度，但要加参数的，最大为 255，比如它是记录行数的 id,插入 10 笔资料，它就显示 00000000001 <del>~</del>00000000010，当字符的位数超过 11,它也只显示 11 位，如果你没有加那个让它未满 11 位就前面加 0 的参数，它不会在前面加 0</p>
<p>声明整型数据列时，我们可以为它指定个显示宽度 M(1~255)，如 INT(5)，指定显示宽度为 5 个字符,如果没有给它指定显示宽度，MySQL 会为它指定一个默认值。显示宽度只用于显示，并不能 限制取值范围和占用空间，如：INT(3)会占用 4 个字节的存储空间，并且允许的最大值也不会是 999,而是 INT 整型所允许的最大值。</p>
<p>MySQL 有五种整型数据列类型，即 TINYINT，SMALLINT，MEDIUMINT，INT 和 BIGINT。它们之间的区别是取值范围不同，存储空间也各不相同。<br>在整型数据列后加上 UNSIGNED 属性可以禁止负数，取值从 0 开始。</p>
</blockquote>
<h2 id="varchar-5-中的-5-又代表什么"><a href="#varchar-5-中的-5-又代表什么" class="headerlink" title="varchar(5)中的 5 又代表什么?"></a>varchar(5)中的 5 又代表什么?</h2><p>这里的<code>5</code>就真的是字符串的长度了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`test1`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'id'</span>,<br>  <span class="hljs-string">`id2`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`id3`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">unsigned</span> zerofill <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`name1`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="hljs-number">17</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=latin1;<br></code></pre></td></tr></table></figure>

<p><img src="https://github.com/lyloou/img/raw/develop/z/20190718163004.png" alt></p>
]]></content>
      <tags>
        <tag>sql</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql必知必会</title>
    <url>/sql/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    <content><![CDATA[<blockquote>
<p>《MySQL 必知必会》——BenForta 著 刘晓霞译<br>表结构和数据源文件 <a href="http://forta.com/books/0672327120/" target="_blank" rel="noopener">http://forta.com/books/0672327120/</a></p>
</blockquote>
<h2 id="客户机-服务器软件"><a href="#客户机-服务器软件" class="headerlink" title="客户机-服务器软件"></a>客户机-服务器软件</h2><ul>
<li>服务器部分是负责所有数据访问和处理的一个软件。</li>
<li>客户机是与用户打交道的软件。<br>例如，如果你请求一个按字母顺序列出的产品表，则客户机软件通过网络提交该请求给服务器软件。<br>服务器软件处理这个请求，根据需要过滤、丢弃和排序数据；然后把结果送回到你的客户机软件。</li>
</ul>
<ul>
<li>服务器软件为 MySQL DBMS。</li>
<li>客户机软件可以是 MySQL 提供的工具、脚本语言（如 Perl）、Web 应用开发语言（如 ASP、ColdFusion、JSP 和 PHP）、<br>程序设计语言（如 C、C++、Java）等。</li>
</ul>
<h2 id="SHOW"><a href="#SHOW" class="headerlink" title="SHOW"></a>SHOW</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">DATABASES</span>;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLES</span>;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">COLUMNS</span> <span class="hljs-keyword">FROM</span> customers;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> crashcouse;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> customers;<br></code></pre></td></tr></table></figure>

<h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>SELECT 子句及其顺序 p88</p>
<table>
<thead>
<tr>
<th>子句</th>
<th>说明</th>
<th>是否必须使用</th>
</tr>
</thead>
<tbody><tr>
<td>SELECT</td>
<td>要返回的列或表达式</td>
<td>是</td>
</tr>
<tr>
<td>FROM</td>
<td>从中检索数据的表</td>
<td>仅在从表中选择数据时使用</td>
</tr>
<tr>
<td>WHERE</td>
<td>行级过滤</td>
<td>否</td>
</tr>
<tr>
<td>GROUP BY</td>
<td>分组说明</td>
<td>仅在按组计算聚集时使用</td>
</tr>
<tr>
<td>HAVING</td>
<td>组级过滤</td>
<td>否</td>
</tr>
<tr>
<td>ORDER BY</td>
<td>输出排序顺序</td>
<td>否</td>
</tr>
<tr>
<td>LIMIT</td>
<td>要检索的行数</td>
<td>否</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products; <span class="hljs-comment"># 检索多列</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> products;  <span class="hljs-comment"># 除非确实需要表中的每个列，否则最好不要使用`*`通配符，检索不需要的列通常会降低检索和应用程序的性能。</span><br></code></pre></td></tr></table></figure>

<h3 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> vend_id <span class="hljs-keyword">FROM</span> products;  <span class="hljs-comment"># DISTINCT 表示只返回唯一不同的行，用法是直接放在列名前，注意不能使用DISTINCT</span><br>                                        <span class="hljs-comment"># DISTINCT 应用于所有列而不是前置它的列。</span><br>                                        <span class="hljs-comment"># 可以通过 LEFT JOIN + IN 的方式：</span><br></code></pre></td></tr></table></figure>

<h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">5</span>;     <span class="hljs-comment"># 返回前5行；类似 LIMIT 0,5</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">5</span>, <span class="hljs-number">10</span>; <span class="hljs-comment"># 返回从第5行（包括5）开始的10条数据； 注意下标从0开始。</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-number">5</span>; <span class="hljs-comment"># 返回从第5行开始的10行</span><br></code></pre></td></tr></table></figure>

<h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><p>关系数据设计理论认为，如果不明确规定排序，则不应该假定检索出的数据的顺序有意义。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name;<br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_price;  <span class="hljs-comment"># 可以用非检索的列来排序</span><br><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_price,prod_name;  <span class="hljs-comment"># 多列检索</span><br><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_price,prod_name <span class="hljs-keyword">DESC</span>;  <span class="hljs-comment"># 反序 （默认是ASC——升序）</span><br><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_price <span class="hljs-keyword">DESC</span>,prod_name;  <span class="hljs-comment"># 注意和上面的区别；</span><br><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_price <span class="hljs-keyword">DESC</span>,prod_name <span class="hljs-keyword">DESC</span>;  <span class="hljs-comment"># DESC 关键字只应用到直接位于其前面的列名</span><br><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_price <span class="hljs-keyword">DESC</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>;    <span class="hljs-comment"># 找到最昂贵的物品；</span><br>                                                     <span class="hljs-comment"># ORDER BY 位于 FROM 之后，LIMIT 位于 ORDER BY 之后；</span><br></code></pre></td></tr></table></figure>

<h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_price = <span class="hljs-number">2.50</span>;<br><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_price &gt;= <span class="hljs-number">2.50</span>;<br><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_price <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">5</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SELECT</span> cust_id <span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">WHERE</span> cust_email <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure>

<p><em>子句操作符</em></p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>在指定的两个值之间</td>
</tr>
</tbody></table>
<p><em><code>AND</code> &amp; <code>OR</code></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_price, prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> vend_id = <span class="hljs-number">1003</span> <span class="hljs-keyword">AND</span> prod_price &lt;= <span class="hljs-number">10</span>; <span class="hljs-comment"># 逻辑与</span><br><span class="hljs-keyword">SELECT</span> vend_id, prod_id, prod_price, prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> vend_id = <span class="hljs-number">1003</span> <span class="hljs-keyword">OR</span> vend_id = <span class="hljs-number">1002</span>; <span class="hljs-comment"># 逻辑或</span><br></code></pre></td></tr></table></figure>

<p>当<code>AND</code>和<code>OR</code>在一起时，在处理<code>OR</code>之前，优先处理<code>AND</code>操作符。解决办法是使用<code>()</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> vend_id = <span class="hljs-number">1002</span> <span class="hljs-keyword">OR</span> vend_id = <span class="hljs-number">1003</span> <span class="hljs-keyword">AND</span> prod_price &gt;= <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> (vend_id = <span class="hljs-number">1002</span> <span class="hljs-keyword">OR</span> vend_id = <span class="hljs-number">1003</span>) <span class="hljs-keyword">AND</span> prod_price &gt;= <span class="hljs-number">10</span>;<br><span class="hljs-comment"># 使用圆括号没有什么坏处，它能消除歧义</span><br></code></pre></td></tr></table></figure>

<p><em><code>IN</code></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name,prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1002</span>, <span class="hljs-number">1003</span>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name;<br></code></pre></td></tr></table></figure>

<p><code>IN</code>的功能与<code>OR</code>相当，且有更多的优点：</p>
<ul>
<li>在使用长的合法选项清单时，<code>IN</code>操作符的语法更清楚且更直观。</li>
<li>在使用<code>IN</code>时，计算的次序更容易管理（因为使用的操作符更少）</li>
<li><code>IN</code>操作符一般比<code>OR</code>操作符清单执行的更快。</li>
<li><code>IN</code>的最大优点是可以包含其他<code>SELECT</code>语句，使得能够更容易动态地建立<code>WHERE</code>子句。</li>
</ul>
<p><code>NOT</code>，在<code>WHERE</code>子句中用来否定后跟条件的关键字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name, prod_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1002</span>, <span class="hljs-number">1003</span>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name;<br></code></pre></td></tr></table></figure>

<p><code>NOT</code>可以和<code>IN</code>、<code>BETWEEN</code>、<code>EXISTS</code>子句结合使用，对结果取反。</p>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'jet%'</span>; <span class="hljs-comment"># 检索任意以jet起头的词</span><br><span class="hljs-keyword">SELECT</span> prod_id, prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%anvil%'</span>; <span class="hljs-comment"># 检索任意位置包含文本anvil的值</span><br><span class="hljs-keyword">SELECT</span> prod_id, prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'_ ton anvil'</span>; <span class="hljs-comment"># 与%可以匹配任意字符不一样,</span><br>                                                                            <span class="hljs-comment"># _ 总是匹配一个字符，不能多也不能少</span><br></code></pre></td></tr></table></figure>

<p><code>%</code>通配符不能匹配值为<code>NULL</code>的行。<br>使用通配符的技巧：</p>
<ul>
<li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li>
<li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li>
<li>仔细注意通配符的位置。如果放错了地方，可能不会返回想要的数据。</li>
</ul>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-string">'1000'</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name;<br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-string">'.000'</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name; <span class="hljs-comment"># `.`匹配任意一个字符</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-built_in">BINARY</span> <span class="hljs-string">'JetPack .000'</span>; <span class="hljs-comment"># 默认不匹配大小写, 使用 BINARY 来区分</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-string">'1000|2000|3000'</span>; <span class="hljs-comment"># 进行OR匹配</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-string">'[123] ton'</span>; <span class="hljs-comment"># 匹配任意几个字符, 指定一组用[和]括起来的字符</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-string">'1|2|3 ton'</span>; <span class="hljs-comment"># 区别于上面的[123] ton,这里匹配的是1, 2, 3 ton</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-string">'[1-5] ton'</span>; <span class="hljs-comment"># 匹配范围</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-string">'\\.'</span>; <span class="hljs-comment"># 匹配特殊字符, 需要使用转义符</span><br>                                                             <span class="hljs-comment"># Mysql要求两个反斜杠(Mysql自己解释一个,正则表达式库解释一个)</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-string">'[:alnum:]'</span>; <span class="hljs-comment"># 匹配字符类,更多参考p58</span><br><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_name REGEXP <span class="hljs-string">'\\([0-9] sticks?\\)'</span>; <span class="hljs-comment"># sticks? 匹配stick和sticks</span><br></code></pre></td></tr></table></figure>

<p>重复元字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>0 个或多个匹配</td>
</tr>
<tr>
<td>+</td>
<td>1 个或多个匹配(等于{1,})</td>
</tr>
<tr>
<td>?</td>
<td>0 个或 1 个匹配(等于{0,1})</td>
</tr>
<tr>
<td>{n}</td>
<td>指定数目的匹配</td>
</tr>
<tr>
<td>{n,}</td>
<td>不少于指定数目的匹配</td>
</tr>
<tr>
<td>{n,m}</td>
<td>匹配数目的范围(m 不超过 255)</td>
</tr>
</tbody></table>
<p>定位元字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>文本的开始</td>
</tr>
<tr>
<td>$</td>
<td>文本的结尾</td>
</tr>
<tr>
<td>[[:&lt;:]]</td>
<td>词的开始</td>
</tr>
<tr>
<td>[[:&gt;:]]</td>
<td>词的结尾</td>
</tr>
</tbody></table>
<p><code>^</code> 有两种用法，在集合中（用<code>[</code>和<code>]</code>定义），用它来否定该集合，否则，用来指串的开始。</p>
<p>简单的正则表达示测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-string">'hello'</span> REGEXP <span class="hljs-string">'[a-zA-Z]'</span> <span class="hljs-comment"># 验证字符是否符合正则</span><br></code></pre></td></tr></table></figure>

<p>条件符合时结果为 1，条件不符合时结果为 0；</p>
<h3 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">Concat</span>(vend_name, <span class="hljs-string">' ('</span>, vend_country, <span class="hljs-string">')'</span>) <span class="hljs-keyword">FROM</span> vendors <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name; <span class="hljs-comment"># 拼接字段Concatenate, 将值连接到一起构成单个值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">Concat</span>(vend_name, <span class="hljs-string">' ('</span>, vend_country, <span class="hljs-string">')'</span>) <span class="hljs-keyword">AS</span> vend_title <span class="hljs-keyword">FROM</span> vendors <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name; <span class="hljs-comment"># 别名alias</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">Concat</span>(<span class="hljs-keyword">RTrim</span>(vend_name), <span class="hljs-string">' ('</span>, <span class="hljs-keyword">RTrim</span>(vend_country), <span class="hljs-string">')'</span>) <span class="hljs-keyword">AS</span> vend_title <span class="hljs-keyword">FROM</span> vendors <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name; <span class="hljs-comment"># 去除左边LTrim(), 右边RTrim(), 两边Trim()的空格</span><br></code></pre></td></tr></table></figure>

<p>MySQL 算术操作符</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
</tr>
</tbody></table>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name, <span class="hljs-keyword">Upper</span>(vend_name) <span class="hljs-keyword">AS</span> vend_name_upcase <span class="hljs-keyword">FROM</span> vendors <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact <span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Soundex</span>(cust_contact) = <span class="hljs-keyword">Soundex</span>(<span class="hljs-string">'Y. Lie'</span>); <span class="hljs-comment"># 比较发音字符</span><br></code></pre></td></tr></table></figure>

<p>常用文本处理函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Left()</td>
<td>返回串左边的字符</td>
</tr>
<tr>
<td>Length()</td>
<td>返回串的长度</td>
</tr>
<tr>
<td>Locate()</td>
<td>找出串的一个子串</td>
</tr>
<tr>
<td>Lower()</td>
<td>将串转换为小写</td>
</tr>
<tr>
<td>LTrim()</td>
<td>去除串左边的空格</td>
</tr>
<tr>
<td>Right()</td>
<td>返回串右边的字符</td>
</tr>
<tr>
<td>RTrim()</td>
<td>去除串右边的空格</td>
</tr>
<tr>
<td>Soundex()</td>
<td>返回串的 SOUNDEX 值</td>
</tr>
<tr>
<td>SubString()</td>
<td>返回子串的字符</td>
</tr>
<tr>
<td>Upper()</td>
<td>将串转换为大写</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_id, order_num <span class="hljs-keyword">FROM</span> orders <span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">Date</span>(order_date) = <span class="hljs-string">'2005-09-01'</span>;<br><span class="hljs-keyword">SELECT</span> cust_id, order_num <span class="hljs-keyword">FROM</span> orders <span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">Date</span>(order_date) <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">'2005-09-01'</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">'2005-09-30'</span>;<br><span class="hljs-keyword">SELECT</span> cust_id, order_num <span class="hljs-keyword">FROM</span> orders <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Year</span>(order_date) = <span class="hljs-string">'2005'</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">Month</span>(order_date) = <span class="hljs-string">'09'</span>;<br></code></pre></td></tr></table></figure>

<p>常用日期和时间处理函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>AddDate()</td>
<td>增加一个日期（天、周等）</td>
</tr>
<tr>
<td>AddTime()</td>
<td>增加一个时间</td>
</tr>
<tr>
<td>CurDate()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>CurTime()</td>
<td>返回当前日间</td>
</tr>
<tr>
<td>Date()</td>
<td>返回日期时间的日期部分</td>
</tr>
<tr>
<td>DateDiff()</td>
<td>计算两个日期之差</td>
</tr>
<tr>
<td>Date_Add()</td>
<td>高度灵活的日期运算函数</td>
</tr>
<tr>
<td>Date_Format()</td>
<td>返回一个格式化的日期或时间串</td>
</tr>
<tr>
<td>Day()</td>
<td>返回一个日期的天数部分</td>
</tr>
<tr>
<td>DayOfWeek()</td>
<td>对于一个日期，返回对应的星期几</td>
</tr>
<tr>
<td>Hour()</td>
<td>返回一个时间的小时部分</td>
</tr>
<tr>
<td>Minute()</td>
<td>返回一个时间的分钟部分</td>
</tr>
<tr>
<td>Month()</td>
<td>返回一个日期的月数部分</td>
</tr>
<tr>
<td>Now()</td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td>Second()</td>
<td>返回一个时间的秒部分</td>
</tr>
<tr>
<td>Time()</td>
<td>返回一个日期的时间部分</td>
</tr>
<tr>
<td>Year()</td>
<td>返回一个日期的年份部分</td>
</tr>
</tbody></table>
<h3 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price <span class="hljs-keyword">FROM</span> products; <span class="hljs-comment"># AVG函数只作用于单个列,为了获得多个列的平均值,必须使用多个AVG函数</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> vend_id=<span class="hljs-number">1003</span>;<br>                                                   <span class="hljs-comment"># AVG 忽略列值为NULL的行</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> num_cust <span class="hljs-keyword">FROM</span> customers; <span class="hljs-comment"># 对表中的所有行计数, 不论是否为NULL</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(cust_email) <span class="hljs-keyword">AS</span> num_cust <span class="hljs-keyword">FROM</span> customers; <span class="hljs-comment"># 对特定的列计数,忽略NULL值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MAX</span>(prod_price) <span class="hljs-keyword">AS</span> max_price <span class="hljs-keyword">FROM</span> products; <span class="hljs-comment"># 找出最大值     ,忽略NULL值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MIN</span>(prod_price) <span class="hljs-keyword">AS</span> min_price <span class="hljs-keyword">FROM</span> products; <span class="hljs-comment"># 找出最小值     ,忽略NULL值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">SUM</span>(quantity) <span class="hljs-keyword">AS</span> items_ordered <span class="hljs-keyword">FROM</span> orderitems <span class="hljs-keyword">WHERE</span> order_num = <span class="hljs-number">20005</span>; <span class="hljs-comment"># 指定列求和</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">SUM</span>(quantity*item_price) <span class="hljs-keyword">AS</span> total_price <span class="hljs-keyword">FROM</span> orderitems <span class="hljs-keyword">WHERE</span> order_num = <span class="hljs-number">20005</span>; <span class="hljs-comment"># 合计计算值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">DISTINCT</span> prod_price) <span class="hljs-keyword">AS</span> avg_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> vend_id = <span class="hljs-number">1003</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">ALL</span> prod_price) <span class="hljs-keyword">AS</span> avg_price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> vend_id = <span class="hljs-number">1003</span>; <span class="hljs-comment"># 默认AVG(ALL)</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> num_items, <span class="hljs-keyword">MIN</span>(prod_price) <span class="hljs-keyword">AS</span> price_min, <span class="hljs-keyword">MAX</span>(prod_price) <span class="hljs-keyword">AS</span> price_max, <span class="hljs-keyword">AVG</span>(prod_price) <span class="hljs-keyword">AS</span> price_avg<br><span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure>

<p>聚集函数用来汇总数据。MySQL 支持一系列聚集函数，可以用多种方法使用它们以返回所需的结果。<br>这些函数是高效设计的，它们返回结果一般比你在自己的客户机应用程序中计算要快得多。</p>
<h3 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id, <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> num_prods <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id;<br><span class="hljs-keyword">SELECT</span> cust_id, <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> orders <span class="hljs-keyword">FROM</span> orders <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> cust_id <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">COUNT</span>(*) &gt;=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">SELECT</span> cust_id, <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> orders <span class="hljs-keyword">FROM</span> orders <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> cust_id <span class="hljs-keyword">HAVING</span> orders &gt;=<span class="hljs-number">2</span>; <span class="hljs-comment"># 第三条</span><br><span class="hljs-keyword">SELECT</span> vend_id, <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> num_prods <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> prod_price &gt;= <span class="hljs-number">10</span><br>       <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id <span class="hljs-keyword">HAVING</span> num_prods &gt;=<span class="hljs-number">2</span>; <span class="hljs-comment"># WHERE 和 HAVING 的区别, WHERE在数据分组前进行过滤,HAVING在数据分组后进行过滤,</span><br>                                              <span class="hljs-comment"># WHERE 排除的行不包括在分组中</span><br><span class="hljs-keyword">SELECT</span> order_num, <span class="hljs-keyword">SUM</span>(quantity*item_price) <span class="hljs-keyword">AS</span> ordertotal <span class="hljs-keyword">FROM</span> orderitems <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> order_num <span class="hljs-keyword">HAVING</span> ordertotal &gt;=<span class="hljs-number">50</span>;<br><span class="hljs-keyword">SELECT</span> order_num, <span class="hljs-keyword">SUM</span>(quantity*item_price) <span class="hljs-keyword">AS</span> ordertotal <span class="hljs-keyword">FROM</span> orderitems <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> order_num <span class="hljs-keyword">HAVING</span> ordertotal &gt;=<span class="hljs-number">50</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ordertotal; <span class="hljs-comment"># 对总计订单价格排序</span><br></code></pre></td></tr></table></figure>

<p><code>GROUP BY</code>重要规定</p>
<ul>
<li><code>GROUP BY</code> 子句可以包含任意数目。这使得能对分组进行嵌套，为数据分组提供更细致的控制。</li>
<li>如果在<code>GROUP BY</code>子句中嵌套了分组，数据将在最后规定的分组上进行汇总换句话说，在建立分组时，指定的所有列都一起计算<br>（所以不能从个别的列取回数据）。</li>
<li><code>GROUP BY</code> 子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）。<br>如果在 SELECT 中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。不能使用别名。 // 这个不对吧，譬如上面的第三条语句。版本升级？</li>
<li>除聚集计算语句外，SELECT 语句中的每个列都必须在 GROUP BY 子句中给出。</li>
<li>如果分组列中具有 NULL 值，则 NULL 将作为一个分组返回。如果列中有多行 NULL 值它们将分为一组。</li>
<li>GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前。</li>
</ul>
<h3 id="子查询和联结"><a href="#子查询和联结" class="headerlink" title="子查询和联结"></a>子查询和联结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> cust_id<br>                  <span class="hljs-keyword">FROM</span> orders<br>                  <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                      <span class="hljs-keyword">FROM</span> orderitems<br>                                      <span class="hljs-keyword">WHERE</span> prod_id = <span class="hljs-string">'TNT2'</span>)); <span class="hljs-comment"># 方法1 子查询 p92</span><br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> customers.cust_id = orders.cust_id<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> orderitems <span class="hljs-keyword">ON</span> orders.order_num = orderitems.order_num<br><span class="hljs-keyword">WHERE</span> orderitems.prod_id = <span class="hljs-string">'TNT2'</span>; <span class="hljs-comment"># 方法2 外查询</span><br><br><span class="hljs-keyword">SELECT</span> cust_name,<br>       cust_state,<br>       (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*)<br>        <span class="hljs-keyword">FROM</span> orders<br>        <span class="hljs-keyword">WHERE</span> orders.cust_id = customers.cust_id) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cust_name; <span class="hljs-comment"># 有必要完全限定列名, 即: table名.filed名</span><br><br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> customers, orders, orderitems<br><span class="hljs-keyword">WHERE</span> customers.cust_id = orders.cust_id<br>  <span class="hljs-keyword">AND</span> orderitems.order_num = orders.order_num<br>  <span class="hljs-keyword">AND</span> prod_id = <span class="hljs-string">'TNT2'</span>; <span class="hljs-comment"># 方法3 内部查询 p105</span><br><br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> customers.cust_id = orders.cust_id<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> orderitems <span class="hljs-keyword">ON</span> orders.order_num = orderitems.order_num<br><span class="hljs-keyword">WHERE</span> orderitems.prod_id = <span class="hljs-string">'TNT2'</span>; <span class="hljs-comment"># 方法4 内部查询 INNER JOIN p104</span><br>                                 <span class="hljs-comment"># ANSI SQL 规范首选INNER JOIN 语法.对比WHERE子句,明确要使用联结条件, 性能更佳</span><br><br><span class="hljs-keyword">SELECT</span> p1.prod_id, p1.prod_name<br><span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">AS</span> p1, products <span class="hljs-keyword">AS</span> p2<br><span class="hljs-keyword">WHERE</span> p1.vend_id = p2.vend_id<br>  <span class="hljs-keyword">AND</span> p2.prod_id = <span class="hljs-string">'DTNTR'</span>; <span class="hljs-comment"># 自联结  对比子查询, 有时候处理自联结远比处理子查询快的多</span><br><br><span class="hljs-keyword">SELECT</span> c.*, o.order_num, o.order_date,<br>       oi.prod_id, oi.quantity, oi.item_price<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">AS</span> c, orders <span class="hljs-keyword">AS</span> o, orderitems <span class="hljs-keyword">AS</span> oi<br><span class="hljs-keyword">WHERE</span> c.cust_id = o.cust_id<br>  <span class="hljs-keyword">AND</span> oi.order_num = o.order_num<br>  <span class="hljs-keyword">AND</span> prod_id = <span class="hljs-string">'FB'</span>;  <span class="hljs-comment"># 自然联结 排除多次出现, 全每个列只返回一次</span><br>                       <span class="hljs-comment"># 系统不完成这项工作, 由你自己完成它</span><br>                       <span class="hljs-comment"># 一般是对表使用通配符 (SELECT *), 对所有其他表的列使用明确的子集来完成</span><br><br><span class="hljs-keyword">SELECT</span> customers.cust_id, orders.order_num<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> orders<br> <span class="hljs-keyword">ON</span> customers.cust_id = orders.cust_id; <span class="hljs-comment"># 外部联结 和内部联结不同的是，外部联结还包括没有关联行的行。</span><br>                                        <span class="hljs-comment"># 相对的还有 RIGHT OUT JOIN ，究竟使用哪一种纯粹是根据方便而定</span><br>                                        <span class="hljs-comment"># 注意：LEFT JOIN 等同于 LEFT OUTER JOIN  —— https://stackoverflow.com/questions/406294/left-join-vs-left-outer-join-in-sql-server</span><br><br><span class="hljs-keyword">SELECT</span> customers.cust_name,<br>       customers.cust_id,<br>       <span class="hljs-keyword">COUNT</span>(orders.order_num) <span class="hljs-keyword">AS</span> num_ord<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> orders<br><span class="hljs-keyword">ON</span> customers.cust_id = orders.cust_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> customers.cust_id; <span class="hljs-comment"># 带聚集函数的联结, 按客户分组；</span><br>                            <span class="hljs-comment"># 其中 INNER JOIN 可以换成 LEFT JOIN，查找到订单为0的客户</span><br></code></pre></td></tr></table></figure>

<p>使用联结的要点：</p>
<ul>
<li>注意所使用的联结类型。一般我们使用内部联结，但使用外部联结也是有效的。</li>
<li>保证使用正确的联结条件，否则将返回不正确的数据。</li>
<li>应该总是提供联结条件，否则会得出笛卡尔积。</li>
<li>在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障排除更为简单。</li>
</ul>
<h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id, prod_id, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> prod_price &lt;= <span class="hljs-number">5</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> vend_id, prod_id, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1001</span>, <span class="hljs-number">1002</span>);<br><br><span class="hljs-keyword">SELECT</span> vend_id, prod_id, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> prod_price &lt;= <span class="hljs-number">5</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> vend_id, prod_id, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1001</span>, <span class="hljs-number">1002</span>); <span class="hljs-comment"># 使用 UNION ALL 不排除重复的行</span><br><br><span class="hljs-keyword">SELECT</span> vend_id, prod_id, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> prod_price &lt;= <span class="hljs-number">5</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> vend_id, prod_id, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1001</span>, <span class="hljs-number">1002</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_id, prod_price; <span class="hljs-comment"># 使用 UNION查询，只能使用一条ORDER BY 子句，必须出现在最后一条SELECT语句之后。但实际上是对所有结果排序。</span><br></code></pre></td></tr></table></figure>

<p><code>UNION</code>规则</p>
<ul>
<li>UNION 必须由两条或两条以上的 SELECT 语句组成，语句之间用关键字 UNION 分隔（因此，如果组合 4 条 SELECT 语句，将要使用 3 个 UNION 关键字）</li>
<li>UNION 中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</li>
<li>列数据类型必须兼容：类型不必完全相同，但必须是 DBMS 可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。</li>
</ul>
<h3 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">'rabbit'</span>);<br><br><span class="hljs-keyword">SELECT</span> note_text, <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">'rabbit'</span>) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">rank</span><br><span class="hljs-keyword">FROM</span> productnotes; <span class="hljs-comment"># 演示排序如何工作（等级越高，越靠前）</span><br><br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">'anvils'</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">QUERY</span> EXPANSION);<br><br><span class="hljs-keyword">SELECT</span> note_text<br><span class="hljs-keyword">FROM</span> productnotes<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">'heavy -rope*'</span> <span class="hljs-keyword">IN</span> <span class="hljs-built_in">BOOLEAN</span> <span class="hljs-keyword">MODE</span>);<br><br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">'+rabbit +bait'</span> <span class="hljs-keyword">IN</span> <span class="hljs-built_in">BOOLEAN</span> <span class="hljs-keyword">MODE</span>);<br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">'rabbit bait'</span> <span class="hljs-keyword">IN</span> <span class="hljs-built_in">BOOLEAN</span> <span class="hljs-keyword">MODE</span>);<br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">'"rabbit bait"'</span> <span class="hljs-keyword">IN</span> <span class="hljs-built_in">BOOLEAN</span> <span class="hljs-keyword">MODE</span>);<br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">'&gt;rabbit &lt;carrot'</span> <span class="hljs-keyword">IN</span> <span class="hljs-built_in">BOOLEAN</span> <span class="hljs-keyword">MODE</span>);<br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">'+safe +(&lt;combination)'</span> <span class="hljs-keyword">IN</span> <span class="hljs-built_in">BOOLEAN</span> <span class="hljs-keyword">MODE</span>);<br></code></pre></td></tr></table></figure>

<p>MySQL 中，最常用的两个引擎为 MyISAM 和 InnoDB，MyISAM 引擎支持全文本搜索。<br>不要在导入数据时使用 FULLTEXT，应该首先导入数据，然后再修改表，定义 FULLTEXT。</p>
<p>全文本布尔操作符</p>
<table>
<thead>
<tr>
<th>布尔操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>包含，词必须存在</td>
</tr>
<tr>
<td>-</td>
<td>排除，词必须不出现</td>
</tr>
<tr>
<td>&gt;</td>
<td>包含，而且增加等级值</td>
</tr>
<tr>
<td>&lt;</td>
<td>包含，且减少等级值</td>
</tr>
<tr>
<td>()</td>
<td>把词组成子表达式（允许这些子表达式作为一个组实包含、排除、排列等）</td>
</tr>
<tr>
<td>~</td>
<td>取消一个词的排序值</td>
</tr>
<tr>
<td>*</td>
<td>词尾的通配符</td>
</tr>
<tr>
<td>“”</td>
<td>定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）</td>
</tr>
</tbody></table>
<h2 id="插入-amp-更新-amp-删除"><a href="#插入-amp-更新-amp-删除" class="headerlink" title="插入 &amp; 更新 &amp; 删除"></a>插入 &amp; 更新 &amp; 删除</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers(cust_name,<br>  cust_contact,<br>  cust_email,<br>  cust_address,<br>  cust_city,<br>  cust_state,<br>  cust_zip,<br>  cust_country)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'Pep E.LaPew'</span>,<br>  <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">'100 Main Street'</span>,<br>  <span class="hljs-string">'Los Angeles'</span>,<br>  <span class="hljs-string">'CA'</span>,<br>  <span class="hljs-string">'90046'</span>,<br>  <span class="hljs-string">'USA'</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers(cust_name,<br>  cust_address,<br>  cust_city,<br>  cust_state,<br>  cust_zip,<br>  cust_country)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'Pep E. Lapwe'</span>,<br><span class="hljs-string">'100 Main Street'</span>,<br><span class="hljs-string">'Los Angeles'</span>,<br><span class="hljs-string">'CA'</span>,<br><span class="hljs-string">'90046'</span>,<br><span class="hljs-string">'USA'</span>),<br>(<span class="hljs-string">'M. Martian'</span>,<br><span class="hljs-string">'42 Galaxy Way'</span>,<br><span class="hljs-string">'New York'</span>,<br><span class="hljs-string">'NY'</span>,<br><span class="hljs-string">'11213'</span>,<br><span class="hljs-string">'USA'</span>); <span class="hljs-comment"># 一次插入多条数据：单条INSERT语句处理多个插入比使用多条INSERT语句快。</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers(cust_name,<br>  cust_address,<br>  cust_city,<br>  cust_state,<br>  cust_zip,<br>  cust_country)<br><span class="hljs-keyword">SELECT</span> cust_name,<br>       cust_address,<br>       cust_city,<br>       cust_state,<br>       cust_zip,<br>       cust_country<br><span class="hljs-keyword">FROM</span> custnew; <span class="hljs-comment"># 插入检索出的数据；</span><br>              <span class="hljs-comment"># 不一定要求一列名匹配，但是列要互相对应：第一列对第一列，第二列对第二列。</span><br></code></pre></td></tr></table></figure>

<p>总是使用列的列表：即便表的结构改变，INSERT 语句仍能正确工作。<br>省略列，须满足以下某个条件：</p>
<ul>
<li>该列定义为允许 NULL 值（无值或空值）</li>
<li>在表定义中给出默认值。这表示如果不给出值，将使用默认值。</li>
</ul>
<p>如果系统的数据检索是最重要的，可以降低 INSERT、UPDATE、DELETE 的优先级来提高整体性能。<br><code>INSERT LOW PRIORITY INTO</code></p>
<h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> customers<br><span class="hljs-keyword">SET</span> cust_email = <span class="hljs-string">'elmer@fudd.com'</span><br><span class="hljs-keyword">WHERE</span> cust_id = <span class="hljs-number">10005</span>; <span class="hljs-comment"># 务必指定 WHERE子句，否则更新所有行。</span><br><br><span class="hljs-keyword">UPDATE</span> customers <span class="hljs-keyword">SET</span> cust_email = <span class="hljs-literal">NULL</span> <span class="hljs-keyword">WHERE</span> cust_id = <span class="hljs-number">10005</span>; <span class="hljs-comment"># 删除某个列的值，可设置它为NULL(前提是可以为NULL)</span><br></code></pre></td></tr></table></figure>

<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id = <span class="hljs-number">10006</span>; <span class="hljs-comment"># 务必指定 WHERE子句，否则删除所有行。</span><br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> customers; <span class="hljs-comment"># 删除所有用户（逐行删除）</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> customers; <span class="hljs-comment"># 删除所有用户，更快的删除（删除表并重新创建表）</span><br></code></pre></td></tr></table></figure>

<p>更新和删除的指导原则</p>
<ul>
<li>除非确实打算更新和删除每一行，否则绝对不要使用不带 WHERE 子句的 UPDATE 或 DELETE 语句；</li>
<li>保证每个表都有主键，尽可能像 WHERE 子句那样使用它（可以指定各主键、多个值或值的范围）；</li>
<li>在对 UPDATE 或 DELETE 使用 WHERE 子句前，应该先用 SELECT 进行测试，保证它过滤的是正确的记录，以防编写的 WHERE 子句不正确。</li>
<li>使用强制实施引用完整性的数据库，这样 MySQL 将不允许删除具有与其他表相关联的数据的行。</li>
</ul>
<h2 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> customers<br>(<br>  cust_id       <span class="hljs-built_in">int</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  cust_name     <span class="hljs-built_in">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  cust_address  <span class="hljs-built_in">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-literal">NULL</span>,<br>  cust_city     <span class="hljs-built_in">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-literal">NULL</span>,<br>  cust_state    <span class="hljs-built_in">char</span>(<span class="hljs-number">5</span>)   <span class="hljs-literal">NULL</span>,<br>  cust_zip      <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>)  <span class="hljs-literal">NULL</span>,<br>  cust_country  <span class="hljs-built_in">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-literal">NULL</span>,<br>  cust_contact  <span class="hljs-built_in">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-literal">NULL</span>,<br>  cust_email    <span class="hljs-built_in">char</span>(<span class="hljs-number">50</span>)  <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (cust_id)<br>) <span class="hljs-keyword">ENGINE</span> = <span class="hljs-keyword">InnoDB</span>; <span class="hljs-comment"># 适当的格式缩进以便阅读和编辑</span><br>                   <span class="hljs-comment"># 试图给NOT NULL的列插入NULL（该列无值），将返回错误，插入失败</span><br>                   <span class="hljs-comment"># 每个表只允许一个AUTO_INCREMENT列，而且它必须被索引（如，使它成为主键）</span><br>                   <span class="hljs-comment"># `SELECT last_insert_id()`来获取最后一个AUTO_INCREMENT值。</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> customers<br>(cust_id       <span class="hljs-built_in">int</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT); <span class="hljs-comment"># 仅在表名不存在时创建</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> orderitems<br>(<br>  order_num   <span class="hljs-built_in">int</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> ,<br>  order_item  <span class="hljs-built_in">int</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> ,<br>  prod_id     <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> ,<br>  quantity    <span class="hljs-built_in">int</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>,<br>  item_price  <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> ,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (order_num, order_item)<br>) <span class="hljs-keyword">ENGINE</span> = <span class="hljs-keyword">InnoDB</span>; <span class="hljs-comment"># 由多个列组成的主键，以逗号分隔。</span><br>                   <span class="hljs-comment"># 默认值不可为函数，只支持常量</span><br></code></pre></td></tr></table></figure>

<p>引擎：</p>
<ul>
<li>InnoDB 是一个可靠的事务处理引擎，它不支持全文本搜索。</li>
<li>MEMORY 在功能等同于 MyISAM，但由于数据存储在内在（不是磁盘）中，速度很快（特别适合于临时表）</li>
<li>MyISAM 是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。</li>
</ul>
<p>外键不能跨引擎，即使用一个引擎的表不能引用具有使用不同引擎的表的外键。<br>使用哪个引擎，依赖于需要什么样的特性；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> vendors<br><span class="hljs-keyword">ADD</span> vend_phone <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>); <span class="hljs-comment"># 添加一个列</span><br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> vendors<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> vend_phone; <span class="hljs-comment"># 删除列</span><br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> orderitems<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> fk_orderitems_orders<br><span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (order_num) <span class="hljs-keyword">REFERENCES</span> orders (order_num); <span class="hljs-comment"># ALTER TABLE常见的用途是定义外键。</span><br><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> customers2; <span class="hljs-comment"># 删除表</span><br><br><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> customers2 <span class="hljs-keyword">TO</span> customers; <span class="hljs-comment"># 重命名表</span><br><br><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> backup_customers <span class="hljs-keyword">TO</span> customers,<br>             backup_vendors <span class="hljs-keyword">TO</span> vendors,<br>             backup_products <span class="hljs-keyword">TO</span> products; <span class="hljs-comment"># 对多个表重命名</span><br></code></pre></td></tr></table></figure>

<h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><p><em>常见视图应用</em></p>
<ul>
<li>重用 SQL 语句</li>
<li>简化复杂 SQL 操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</li>
<li>使用表的组成部分而不是整个表。</li>
<li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li>
<li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li>
</ul>
<p><em>视图的规则和限制</em></p>
<ul>
<li>与表一样，视图必须唯一命名（视图名不能重复或与表名相同）</li>
<li>对于可以创建的视图数目没有限制。</li>
<li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li>
<li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图</li>
<li>ORDER BY 可以用在视图中，但如果从该视图检索数据的 SELECT 语句中也含有 ORDER BY， 那么该视图中的 ORDER BY 将被覆盖。</li>
<li>视图不能索引，也不能有关联的触发器或默认值。</li>
<li>视图可以和表一起使用。例如，编写一条联结表和视图的 SELECT 语句。</li>
</ul>
<p><em>视图的创建</em></p>
<ul>
<li>视图用 CREATE VIEW 语句来创建。</li>
<li>使用<code>SHOW CREATE VIEW viewname;</code> 来查看创建视图的语句。</li>
<li>用 DROP 删除视图，其语法为<code>DROP VIEW viewname;</code></li>
<li>更新视图时，可以先用 DROP 再用 CREATE，也可以直接用<code>CREATE OR REPLACE VIEW</code>。如果更新的视图不存在，则第 1 条语句会创建一个视图；<br>如果要更新的视图存在，则第 2 条更新的语句会替换原有视图。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> productcustomers <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact, prod_id<br><span class="hljs-keyword">FROM</span> customers, orders, orderitems<br><span class="hljs-keyword">WHERE</span> customers.cust_id = orders.cust_id<br>    <span class="hljs-keyword">AND</span> orderitems.order_num = orders.order_num; <span class="hljs-comment"># 创建视图</span><br><br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> productcustomers<br><span class="hljs-keyword">WHERE</span> prod_id = <span class="hljs-string">'TNT2'</span>;    <span class="hljs-comment"># 查询视图</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> vendorlocations <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">Concat</span>(<span class="hljs-keyword">RTrim</span>(vend_name), <span class="hljs-string">' ('</span>, <span class="hljs-keyword">RTrim</span>(vend_country), <span class="hljs-string">')'</span>)<br>    <span class="hljs-keyword">AS</span> vend_title<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name; <span class="hljs-comment"># 创建重新格式化的视图</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> vendorlocations;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> customeremaillist <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> cust_id, cust_name, cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_email <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment"># 创建过滤条件的视图</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> customeremaillist;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> orderitemsexpanded <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> order_num,<br>       prod_id,<br>       quantity,<br>       item_price,<br>       quantity*item_price <span class="hljs-keyword">AS</span> expanded_price<br><span class="hljs-keyword">FROM</span> orderitems;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> orderitemsexpanded <span class="hljs-keyword">WHERE</span> order_num = <span class="hljs-number">20005</span>;<br></code></pre></td></tr></table></figure>

<p><em>视图定义在以下操作不可更新</em></p>
<ul>
<li>分组（使用 GROUPING 和 HAVING）</li>
<li>联结</li>
<li>子查询</li>
<li>并</li>
<li>聚集函数（Min(), Cust(), Sum()等）</li>
<li>DISTINCT</li>
<li>导出（计算）列</li>
</ul>
<p>视图的主要作用在于数据检索，而不用于更新（INSERT、UPDATE 和 DELETE）</p>
<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p><em>为什么使用存储过程</em></p>
<ul>
<li>通过把处理封装在容易使用的单元中，简化复杂的操作。</li>
<li>由于不要求反复建立一系列处理步骤，这保证了数据的完整性。<br>如果所有开发人员和应用程序都使用同一存储过程，则所使用的代码都是相同的。防止错误，保证了数据的一致性。</li>
<li>简化对变动的管理。如果表名、列名、或业务逻辑有变化，只需要更改存储过程的代码。使用这的人员甚至不需要知道这些变化。<br>这一点的延伸就是安全性。通过存储过程限制对基础数据的访问减少了数据讹误的机会。</li>
<li>提高性能。因为使用在座过程比使用单独的 SQL 语句要快。</li>
<li>存在一些只能用在单个请求中的 MySQL 元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码。</li>
</ul>
<p>换句话说，使用存储过程有 3 个主要好处：简单、安全、高性能。</p>
<p>另外也有一些缺陷：</p>
<ul>
<li>存储过程的编写比 SQL 语句复杂，编写存储过程概要更高的技能，更丰富的经验。</li>
<li>由于数据库管理员限制，可能只有使用的权限，没有创建的权限。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> productpricing(<br>  <span class="hljs-keyword">OUT</span> pl <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">OUT</span> ph <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">OUT</span> pa <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">Min</span>(prod_price)<br>  <span class="hljs-keyword">INTO</span> pl<br>  <span class="hljs-keyword">FROM</span> products;<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MAX</span>(prod_price)<br>  <span class="hljs-keyword">INTO</span> ph<br>  <span class="hljs-keyword">FROM</span> products;<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(prod_price)<br>  <span class="hljs-keyword">INTO</span> pa<br>  <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">END</span>; <span class="hljs-comment"># 存储过程的创建</span><br>     <span class="hljs-comment"># 参数中的IN：传递数据给存储过程</span><br>     <span class="hljs-comment"># 参数中的OUT：从存储过程传出</span><br>     <span class="hljs-comment"># 参数中的INOUT：对存储过程传入传出</span><br><br><span class="hljs-keyword">CALL</span> productpricing(@pricelow, @pricehigh, @priceaverage); <span class="hljs-comment"># 调用存储过程</span><br><br><span class="hljs-keyword">SELECT</span> @pricelow; <span class="hljs-comment"># 检索结果</span><br><span class="hljs-keyword">SELECT</span> @pricehigh;<br><span class="hljs-keyword">SELECT</span> @priceaverage;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> productpricing; <span class="hljs-comment"># 删除存储过程，如果不存在会产生错误</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> productpricing; <span class="hljs-comment"># 删除存储过程</span><br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> productpricing; <span class="hljs-comment"># 检查存储过程</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-keyword">STATUS</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'productpricing'</span>; <span class="hljs-comment"># 限制过程状态结果</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>mysql 命令行客户机的分隔符：<br>mysql 命令行实用程序使用<code>;</code>作为分隔符<br>默认 mysql 语句也使用<code>;</code>作为分隔符<br>解决冲突的办法是临时更改命令行实用程序的语句分隔符</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">DELIMITER //<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> productpricing()<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">Avg</span>(prod_price) <span class="hljs-keyword">AS</span> priceaverage<br>    <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">END</span> //<br>DELIMITER ;<br></code></pre></td></tr></table></figure>

<p>考虑这个场景。你需要获得与以前一样的订单合计，但需要对合计增加营业税，不过只针对某些顾客。<br>那么，你需要做下面几件事情：</p>
<ul>
<li>获得合计（与以前一样）；</li>
<li>把营业税有条件地添加到合计；</li>
<li>返回合计（带或不带税）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- Name: order total</span><br><span class="hljs-comment">-- Parameters: onumber = order number</span><br><span class="hljs-comment">--             taxable = 0 if not taxable, 1 if taxable</span><br><span class="hljs-comment">--             ototal = order total variable</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> ordertotal(<br>  <span class="hljs-keyword">IN</span> onumber <span class="hljs-built_in">INT</span>,<br>  <span class="hljs-keyword">IN</span> taxable <span class="hljs-built_in">BOOLEAN</span>,<br>  <span class="hljs-keyword">OUT</span> ototal <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">8</span>, <span class="hljs-number">2</span>)<br>) <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'Obtain order total, optionally adding tax'</span><br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-comment">-- Declare variable for total</span><br>  <span class="hljs-keyword">DECLARE</span> total <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br>  <span class="hljs-comment">-- Decliare tax percentage</span><br>  <span class="hljs-keyword">DECLARE</span> taxrate <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">6</span>;<br><br>  <span class="hljs-comment">-- Get the order total</span><br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">Sum</span>(item_price*quantity)<br>  <span class="hljs-keyword">FROM</span> orderitems<br>  <span class="hljs-keyword">WHERE</span> order_num = onumber<br>  <span class="hljs-keyword">INTO</span> total;<br><br>  <span class="hljs-comment">-- Is this taxable?</span><br>  IF taxable THEN   <span class="hljs-comment"># 不可使用 ELSEIF THEN、ELSE子句</span><br>  <span class="hljs-keyword">SELECT</span> total+(total/<span class="hljs-number">100</span>*taxrate) <span class="hljs-keyword">INTO</span> total;<br>  <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><br>  <span class="hljs-comment">-- And finally, save to out variable</span><br>  <span class="hljs-keyword">SELECT</span> total <span class="hljs-keyword">INTO</span> ototal;<br><span class="hljs-keyword">END</span>;<br><br><span class="hljs-keyword">CALL</span> ordertotal(<span class="hljs-number">20005</span>, <span class="hljs-number">0</span>, @total);<br><span class="hljs-keyword">SELECT</span> @total;<br><span class="hljs-keyword">CALL</span> ordertotal(<span class="hljs-number">20005</span>, <span class="hljs-number">1</span>, @total);<br><span class="hljs-keyword">SELECT</span> @total;<br></code></pre></td></tr></table></figure>

<h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>MySQL 游标只能用于存储过程。</p>
<p>使用游标的步骤：</p>
<ul>
<li>在能够使用游标前，必须声明（定义）它。这个过程实际上没有检索数据，它只是定义要使用的 SELECT 语句。</li>
<li>一旦声明后，必须打开游标以供使用。这个过程用前面定义的 SELECT 语句把数据实际检索出来。</li>
<li>对于填有数据的游标，根据需要取出（检索）各行。</li>
<li>在结束游标使用时，必须关闭游标。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> processorders()<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-comment">-- Declare local variables</span><br>  <span class="hljs-keyword">DECLARE</span> done <span class="hljs-built_in">BOOLEAN</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">DECLARE</span> o <span class="hljs-built_in">INT</span>;<br>  <span class="hljs-keyword">DECLARE</span> t <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>  <span class="hljs-comment">-- Declare the cursor</span><br>  <span class="hljs-keyword">DECLARE</span> ordernumbers <span class="hljs-keyword">CURSOR</span><br>  <span class="hljs-keyword">FOR</span><br>  <span class="hljs-keyword">SELECT</span> order_num <span class="hljs-keyword">FROM</span> orders;<br>  <span class="hljs-comment">-- Declare continue handler</span><br>  <span class="hljs-keyword">DECLARE</span> CONTINUE <span class="hljs-keyword">HANDLER</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SQLSTATE</span> <span class="hljs-string">'02000'</span> <span class="hljs-keyword">SET</span> done=<span class="hljs-number">1</span>; <span class="hljs-comment"># SQLSTATE '02000'是一个未找到条件。</span><br><br>  <span class="hljs-comment">-- Create a table to store the results</span><br>  <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> ordertotals(order_num <span class="hljs-built_in">INT</span>, total <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">8</span>, <span class="hljs-number">2</span>));<br><br>  <span class="hljs-comment">-- Open the cursor</span><br>  OPEN ordernumbers;<br><br>  <span class="hljs-comment">-- Loop through all rows</span><br>  REPEAT<br>    <span class="hljs-comment">-- Get order number</span><br>    FETCH ordernumbers INTO o;<br><br>    <span class="hljs-comment">-- Get the total for this order</span><br>    <span class="hljs-keyword">CALL</span> ordertotal(o, <span class="hljs-number">1</span>, t);<br><br>    <span class="hljs-comment">-- Insert order and total into ordertotals</span><br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ordertotals(order_num, total) <span class="hljs-keyword">VALUES</span>(o, t);<br><br>    <span class="hljs-comment">-- End of loop</span><br>  UNTIL done  <span class="hljs-keyword">END</span> <span class="hljs-keyword">REPEAT</span>;<br><br>  <span class="hljs-comment">-- Close the cursor</span><br>  CLOSE ordernumbers;<br><span class="hljs-keyword">END</span>;  <span class="hljs-comment"># 使用游标将Fetch的数据存储到表中</span><br><br><span class="hljs-keyword">CALL</span> processorders(); <span class="hljs-comment"># 调用</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> ordertotals;<br></code></pre></td></tr></table></figure>

<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器，在表发生一些更改时，自动处理一些事情。<br>MySQL 触发器只支持<code>UPDATE</code>、<code>DELETE</code>、<code>INSERT</code>。<br>创建触发器，需要给出 4 条信息：</p>
<ul>
<li>唯一的触发器名；</li>
<li>触发器关联的表；</li>
<li>触发器应该响应的活动（DELETE、INSERT 或 UPDATE）</li>
<li>触发器何时执行（处理之前或之后）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># http://www.cnblogs.com/duhuo/p/4655957.html</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> newproduct <span class="hljs-keyword">AFTER</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> products<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">'Product added'</span> <span class="hljs-keyword">INTO</span> @msg; <span class="hljs-comment"># 创建触发器</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> products (prod_id, vend_id, prod_name, prod_price, prod_desc) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'Lou'</span>, <span class="hljs-number">1002</span>, <span class="hljs-string">'TNT 5'</span>, <span class="hljs-number">20</span>, <span class="hljs-string">'TNT 5, yellow, pack of 100 sticks'</span>);<br><span class="hljs-keyword">SELECT</span> @msg;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> newproduct; <span class="hljs-comment"># 删除触发器</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> deleteorder <span class="hljs-keyword">BEFORE</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> orders<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> archive_orders(order_num, order_date, cust_id)<br>    <span class="hljs-keyword">VALUES</span>(OLD.order_num, OLD.order_date, OLD.cust_id); <span class="hljs-comment"># 删除前先存档</span><br><span class="hljs-keyword">END</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> updatevendor <span class="hljs-keyword">BEFORE</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">ON</span> vendors<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span> <span class="hljs-keyword">SET</span> NEW.vend_state = <span class="hljs-keyword">Upper</span>(New.vend_state); <span class="hljs-comment"># 更新前先转换为大写（数据净化）</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>只有表支持触发器，视图不支持</p>
</blockquote>
<blockquote>
<p>每个表支持 6 个触发器（每条 INSERT、UPDATE、DELETE 的之前和之后）</p>
</blockquote>
<blockquote>
<p>如果 BEFORE 触发器失败，则 MySQL 将不执行请求的操作。<br>此外，如果 BEFORE 触发器或语句本身失败，MySQL 将不执行 AFTER 触发器（如是有的话）</p>
</blockquote>
<blockquote>
<p>触发器一个非常有意义的使用是创建审计跟踪。使用触发器，把更改记录到另外一个表非常容易。</p>
</blockquote>
<h2 id="管理事务"><a href="#管理事务" class="headerlink" title="管理事务"></a>管理事务</h2><p>事务处理（transaction processing） 可以用来维护数据库的完整性，它保证成批的 MySQL 操作要么完全执行，要么完全不执行。</p>
<p>MyISAM 引擎不支持事务，InnoDB 支持事务。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> ordertotals;<br><span class="hljs-keyword">START</span> <span class="hljs-keyword">TRANSACTION</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CONSISTENT</span> <span class="hljs-keyword">SNAPSHOT</span> ;  <span class="hljs-comment"># 标识事务开始</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> ordertotals;<br><span class="hljs-keyword">ROLLBACK</span> ; <span class="hljs-comment"># 只能在一个事务处理内使用（在执行一条START TANASACTION之后）</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> ordertotals;<br><br><span class="hljs-keyword">START</span> <span class="hljs-keyword">TRANSACTION</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CONSISTENT</span> <span class="hljs-keyword">SNAPSHOT</span> ;  <span class="hljs-comment"># 标识事务开始</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> orderitems <span class="hljs-keyword">WHERE</span> order_num = <span class="hljs-number">20007</span>;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> orders <span class="hljs-keyword">WHERE</span> order_num = <span class="hljs-number">20007</span>;<br><span class="hljs-keyword">COMMIT</span>; <span class="hljs-comment"># 提交事务</span><br><br><span class="hljs-keyword">SAVEPOINT</span> delete1; <span class="hljs-comment"># 保留点</span><br><span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> delete1; <span class="hljs-comment"># 回滚到保留点</span><br><br><span class="hljs-keyword">SET</span> AUTOCOMMIT = <span class="hljs-number">0</span>; <span class="hljs-comment"># 设置不自动提交</span><br></code></pre></td></tr></table></figure>

<h2 id="全球化和本地化"><a href="#全球化和本地化" class="headerlink" title="全球化和本地化"></a>全球化和本地化</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> ; <span class="hljs-comment"># 查看字符集</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">COLLATION</span> ; <span class="hljs-comment"># 查看校对, 以latin1为例，许多校对出现两次，一次区分大小写（由_cs表示）， 一次不区分（由_ci表示）</span><br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VARIABLES</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'character%'</span>;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VARIABLES</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'collation%'</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable<br>(<br>  columnn1 <span class="hljs-built_in">INT</span>,<br>  columnn2 <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>)<br>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> hebrew<br>  <span class="hljs-keyword">COLLATE</span> hebrew_general_ci; <span class="hljs-comment"># 给表指定字符集和校对</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable<br>(<br>  columnn1 <span class="hljs-built_in">INT</span>,<br>  columnn2 <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>),<br>  columnn3 <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> latin1 <span class="hljs-keyword">COLLATE</span> latin1_general_ci <span class="hljs-comment"># 给特定的列指定字符集和校对</span><br>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> hebrew<br>  <span class="hljs-keyword">COLLATE</span> hebrew_general_ci;<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> lastname, firstname <span class="hljs-keyword">COLLATE</span> latin1_general_cs;<br>   <span class="hljs-comment"># 校对在对用`ORDER BY`子句检索出来的数据排序时起重要的作用（如是否忽略大小写）。</span><br></code></pre></td></tr></table></figure>

<h2 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h2><p>MySQL 的用户账号和信息存储在名为 mysql 的 MySQL 数据库中。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">USE</span> mysql;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> name_lou <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'password_lou'</span>; <span class="hljs-comment"># 创建用户</span><br><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">USER</span> name_lou <span class="hljs-keyword">TO</span> lou; <span class="hljs-comment"># 更改名</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> lou; <span class="hljs-comment"># 删除账号</span><br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GRANTS</span> <span class="hljs-keyword">FOR</span> lou; <span class="hljs-comment"># 查看已经有的权限</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> goods.* <span class="hljs-keyword">TO</span> lou; <span class="hljs-comment"># 授予goods数据库的所有表的SELECT权限</span><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> goods.* <span class="hljs-keyword">FROM</span> lou; <span class="hljs-comment"># 撤销权限</span><br><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> goods.* <span class="hljs-keyword">TO</span> lou; <span class="hljs-comment"># 简化多次授权，使用逗号分隔</span><br><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-keyword">FOR</span> lou = <span class="hljs-keyword">Password</span>(<span class="hljs-string">'new_password'</span>); <span class="hljs-comment"># 更改口令；</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> = <span class="hljs-keyword">Password</span>(<span class="hljs-string">'new_password'</span>); <span class="hljs-comment"># 更改自己的口令；</span><br></code></pre></td></tr></table></figure>

<p><em>GRANT 和 REVOKE 可在几个层次上控制访问权限</em></p>
<ul>
<li>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</li>
<li>整个数据库，使用 ON database.*;</li>
<li>特定的表，使用 ON database.table;</li>
<li>特定的列；</li>
<li>特定的存储过程；</li>
<li>详细看 p202</li>
</ul>
<h2 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h2><p>从以下几个角度考虑</p>
<ul>
<li><p>备份数据<br>备份前使用<code>FLUSH TABLE</code></p>
</li>
<li><p>表问题分析和检查</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ANALYZE</span> <span class="hljs-keyword">TABLE</span> orders;<br><span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">TABLE</span> orders, orderitems;<br></code></pre></td></tr></table></figure>

<ul>
<li><p>诊断启动问题<br>使用命令行选项，<code>--help</code>、<code>--safe-mode</code>、<code>--verbose</code></p>
</li>
<li><p>查看日志文件<br><a href="https://stackoverflow.com/questions/5441972/how-to-see-log-files-in-mysql" target="_blank" rel="noopener">https://stackoverflow.com/questions/5441972/how-to-see-log-files-in-mysql</a></p>
</li>
</ul>
<h2 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h2><ul>
<li>一般来说，关键的生产 DBMS 应该运行在自己的专用服务器上。</li>
<li>MySQL 是用一系列默认设置预先配置的，这些设置开始通常是很好的。但过一段时间后你可能需要调整内在分配、缓冲区大小等。<br>（为查看当前设置，可使用 SHOW VARIABLES; 和 SHOW STATUS;）</li>
<li>MySQL 是一个多用户多线程的 DBMS，换言之，它经常同时执行多个任务。<br>如果这些任务中的某个执行缓慢，则所有请求都会执行缓慢。<br>如果你遇到显著的性能不良，可使用<code>SHOW PROCESSLIST</code>显示所有活动进程（以及它们的线程 ID 和执行时间）。<br>你还可以用 KILL 命令终结某个特定的进程（使用这个命令需要作为管理员登录）。</li>
<li>总是有不止一种方法编写同一条 SELECT 语句。应该试验联结、并、子查询等，找出最佳的方法。</li>
<li>使用 EXPANIN 语句让 MySQL 解释它将如何执行一条 SELECT 语句。</li>
<li>一般来说，存储过程执行得比一条一条地执行其中的各条 MySQL 语句快。</li>
<li>应该总是使用正确的数据类型。</li>
<li>决不要检索比需求还要多的数据。换言之，不要用<code>SELECT *</code>（除非你真正需要每个列）。</li>
<li>有的操作（包括 INSERT）支持一个可靠的 DELAYED 关键字，如果使用它，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作。</li>
<li>在导入数据时，应该关闭自动提交。你可能还想删除索引（包括 FULLTEXT 索引），然后在导入完成后再重建它们。</li>
<li>必须索引数据库以改善数据检索的性能确定索引什么不是一件微不足道的任务，需要分析使用的 SELECT 语句以找出重复的 WHERE 和 ORDER BY 子句。<br>如果一个简单的 WHERE 子句返回结果所花的时间太长，则可以断定其中使用的列（或几个列）就是需要索引的对象。</li>
<li>你的 SELECT 语句中有一系列复杂的 OR 条件吗？通过使用多条 SELECT 语句和连接它们的 UNION 语句，你能看到极大的性能改进。</li>
<li>索引改善数据的性能，但损害数据插入、删除和更新的性能。<br>如果你有一些表，它们收集数据且不经常被搜索，则在有必要之前不要索引它们。（索引可根据需要添加和删除）</li>
<li>LIKE 很慢。一般来说，最好是使用 FULLTEXT 而不是 LIKE。</li>
<li>数据库是不断变化的实体。一组优化良好的表一会儿后可能就面目全非了。由于表的使用和内容的更改，理想的优化和配置也会改变。</li>
<li>最重要的规则就是，每条规则在某些条件下都会被打破。</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>何时使用单引号？单引号用来限定字符串。如果将值与串类型的列进行比较，则需要限定引号。用来与数值列进行比较的值不需要引号。</li>
<li>SQL 是不区分大小写的。</li>
<li>SQL 语句以<code>;</code>结束。</li>
<li>SQL 语句中的空格会被忽略，将 SQL 语句分成多行更容易阅读和调试；</li>
</ul>
]]></content>
      <tags>
        <tag>sql</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis面试题</title>
    <url>/sql/redis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><a href="https://support.huaweicloud.com/dcs_faq/dcs-faq-0805001.html" target="_blank" rel="noopener">大Key/热Key分析/整库扫描_分布式缓存服务 DCS_常见问题_华为云</a></p>
<h1 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>rdb：指定时间点上生成的数据集快照</p>
<p>优点：</p>
<ol>
<li>保存某个时间点上的数据；</li>
<li>文件紧凑，恢复快；方便传输</li>
<li>父进程不受 IO 影响，是从父进程中 fork 一份出来备份的；</li>
</ol>
<p>缺点：</p>
<ol>
<li>可能造成备份期间的数据丢失；</li>
<li>fork 过程可能比较耗时（数据集大时，消耗的 CPU 可能导致无法响应客户端）</li>
</ol>
<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>aof：所有写操作命令（redis 协议），恢复时执行这些命令<br>优点：</p>
<ol>
<li>灵活配置 fsync 策略；1）无 fsync；2）每秒一次；3）每次写入都 fsync；（就算发生了故障也是 1 秒，性能也不错；fsync 在后台线程执行）</li>
<li>对 aof 日志文件只进行追加操作；</li>
<li>文件变大时，会进行重写；</li>
<li>以 redis 协议写入日志，易读和修复（flushall）</li>
</ol>
<p>缺点：</p>
<ol>
<li>相对 rdb，体积更大；</li>
<li>fsync 策略可能会比 rdb 慢</li>
<li>个别 bug</li>
</ol>
<p>总结：<br>如果想要非常高的安全性，可以结合 rdb 和 aof 同时使用；在重启的时候，会优先使用 aof 来恢复数据（aof 更完整）；</p>
<p>其他：<br>rdb: 默认存入到 dumb.rdb 文件中；<br>RDB 手动备份：<br>SAVE：阻塞主进程，此时客户端无法连接；<br>BGSAVE：fork 一个子线程，不阻塞主进程，客户端依然可以连接；完成后通知主进程，子进程退出；<br>可以设置多少秒内有多少变动时触发备份</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   Will save the DB if both the given number of seconds and the given</span><br><span class="hljs-comment">#   number of write operations against the DB occurred.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   In the example below the behaviour will be to save:</span><br><span class="hljs-comment">#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="hljs-comment">#   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="hljs-comment">#   after 60 sec if at least 10000 keys changed</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   <span class="hljs-doctag">Note:</span> you can disable saving completely by commenting out all "save" lines.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   It is also possible to remove all the previously configured save</span><br><span class="hljs-comment">#   points by adding a save directive with a single empty string argument</span><br><span class="hljs-comment">#   like in the following example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   save ""</span><br><span class="hljs-comment"># 时间窗口M和改动的键个数N，每当时间M内改动的键个数大于N时，则触发快照备份。</span><br>save 900 1<br>save 300 10<br>save 60 10000<br></code></pre></td></tr></table></figure>

<p>AOF 重写：<br>bgrewrite 可以用来重写，重新生成一个文件，此文件只包含当前数据集需要的最少的指令（因为是 append 的方式 ，对同一个 key 进行操作也会追加多次指令）</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.csdn.net/is_zhoufeng/article/details/10210353" target="_blank" rel="noopener">redis 持久化与备份策略_is_zhoufeng 的专栏-CSDN 博客</a></li>
<li><a href="https://www.cnblogs.com/rayong/p/6791330.html" target="_blank" rel="noopener">Redis Save 与 BGSAVE 的区别 - Ray 雷 - 博客园</a></li>
</ul>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/sql/redis/</url>
    <content><![CDATA[<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">sudo apt <span class="hljs-keyword">update</span><br>sudo apt <span class="hljs-keyword">install</span> redis-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-18-04" target="_blank" rel="noopener">How To Install and Secure Redis on Ubuntu 18.04 | DigitalOcean</a></li>
</ul>
<p><strong>安装时出现 Errors were encountered while processing: redis-server 的问题</strong></p>
<blockquote>
<p>You should probably alter the redis.conf file to force it to use IPv4 if it supports that mode only and then maybe you could run it without IPv6.<br><a href="https://unix.stackexchange.com/questions/351668/cannot-install-redis-server" target="_blank" rel="noopener">apt - Cannot install redis server - Unix &amp; Linux Stack Exchange</a> &gt; <a href="https://unix.stackexchange.com/a/501785" target="_blank" rel="noopener">https://unix.stackexchange.com/a/501785</a></p>
</blockquote>
<p><strong>单机安装 ubuntu</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">wget -v http://download.redis.io/releases/redis-5.0.5.tar.gz<br>apt install build-essential tcl<br>mkdir /var/redis-standalone<br>make install PREFIX=/var/redis-standalone MALLOC=libc<br>cp ./redis.conf /var/redis-standalone<br><span class="hljs-built_in">cd</span> /var/redis-standalone<br>./bin/redis-server ./redis.conf<br></code></pre></td></tr></table></figure>

<p><strong>单机安装 centos</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">yum install wget -y<br>wget https://download.redis.io/releases/redis-5.0.8.tar.gz<br>tar -zxf redis-5.0.8.tar.gz<br>yum install gcc -y<br><span class="hljs-built_in">cd</span> redis-5.0.8<br>make &amp;&amp; make install<br><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/bin/<br>cp ~/redis-5.0.8/redis.conf .<br>redis-server redis.conf<br></code></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://www.jianshu.com/p/88636a819802" target="_blank" rel="noopener">Redis-主从复制与 Sentinel - 简书</a><br><img src="http://img.hb.aicdn.com/047fcbdf9c84f15fb0b2b28eb74a7409304c200418489-i4oOmX_fw658" alt="主从复制"></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/4006324/how-to-atomically-delete-keys-matching-a-pattern-using-redis" target="_blank" rel="noopener">How to atomically delete keys matching a pattern using Redis</a></p>
</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><code class="hljs dos">EVAL "return redis.<span class="hljs-keyword">call</span>('<span class="hljs-built_in">del</span>', unpack(redis.<span class="hljs-keyword">call</span>('keys', ARGV[<span class="hljs-number">1</span>])))" <span class="hljs-number">0</span> prefix:*<br></code></pre></td></tr></table></figure>

<h2 id="set-password"><a href="#set-password" class="headerlink" title="set password"></a>set password</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo vim /etc/redis/redis.conf<br><span class="hljs-comment"># find and uncomment line : # requirepass foobared</span><br><br><span class="hljs-comment"># then restart server</span><br>systemctl restart redis-server<br></code></pre></td></tr></table></figure>

<h2 id="redis-过期策略及定期策略配置-bobozai86-的博客-CSDN-博客-redis-过期策略-配置文件"><a href="#redis-过期策略及定期策略配置-bobozai86-的博客-CSDN-博客-redis-过期策略-配置文件" class="headerlink" title="redis 过期策略及定期策略配置_bobozai86 的博客-CSDN 博客_redis 过期策略 配置文件"></a><a href="https://blog.csdn.net/bobozai86/article/details/112299322" target="_blank" rel="noopener">redis 过期策略及定期策略配置_bobozai86 的博客-CSDN 博客_redis 过期策略 配置文件</a></h2><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><br>redis 过期策略<br>redis 过期策略是：定期删除+惰性删除。<br>所谓定期删除，指的是 redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 key，检查其是否过期，如果过期就删除。<br>假设 redis 里放了 10w 个 key，都设置了过期时间，你每隔几百毫秒，就检查 10w 个 key，那 redis 基本上就死了，cpu 负载会很高的，消耗在你的检查过期 key 上了。注意，这里可不是每隔 100ms 就遍历所有的设置过期时间的 key，那样就是一场性能上的灾难。实际上 redis 是每隔 100ms 随机抽取一些 key 来检查和删除的。<br><br>但是问题是，定期删除可能会导致很多过期 key 到了时间并没有被删除掉，那咋整呢？所以就是惰性删除了。这就是说，在你获取某个 key 的时候，redis 会检查一下 ，这个 key 如果设置了过期时间那么是否过期了？如果过期了此时就会删除，不会给你返回任何东西。<br>获取 key 的时候，如果此时 key 已经过期，就删除，不会返回任何东西。<br>但是实际上这还是有问题的，如果定期删除漏掉了很多过期 key，然后你也没及时去查，也就没走惰性删除，此时会怎么样？如果大量过期 key 堆积在内存里，导致 redis 内存块耗尽了，咋整？<br>答案是：走内存淘汰机制。<br><br>内存淘汰机制<br>redis 内存淘汰机制有以下几个：<br>• noeviction: 当内存不足以容纳新写入数据时，新写入操作会报错，这个一般没人用吧，实在是太恶心了。<br>• allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。<br>• allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个 key，这个一般没人用吧，为啥要随机，肯定是把最近最少使用的 key 给干掉啊。<br>• volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 key（这个一般不太合适）。<br>• volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 key。<br>• volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 key 优先移除。<br></code></pre></td></tr></table></figure>

<p><a href="https://help.aliyun.com/document_detail/142171.html" target="_blank" rel="noopener">调整 Redis 定期任务的执行频率</a></p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群</title>
    <url>/sql/redis-cluster/</url>
    <content><![CDATA[<h1 id="docker-搭建-redis-伪集群"><a href="#docker-搭建-redis-伪集群" class="headerlink" title="docker 搭建 redis 伪集群"></a>docker 搭建 redis 伪集群</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://juejin.im/post/6844903809005649927" target="_blank" rel="noopener">Docker Redis 5.0 集群（cluster）搭建 - 掘金</a></li>
<li><a href="https://www.cnblogs.com/mafly/p/redis_cluster.html" target="_blank" rel="noopener">Redis 集群搭建详细指南 - Mafly - 博客园</a></li>
</ul>
<h2 id="创建网段"><a href="#创建网段" class="headerlink" title="创建网段"></a>创建网段</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">docker network create redis-net<br>docker network ls<br>docker inspect redis-net<br></code></pre></td></tr></table></figure>

<h2 id="模板配置-redis-cluster-tmpl"><a href="#模板配置-redis-cluster-tmpl" class="headerlink" title="模板配置 redis-cluster.tmpl"></a>模板配置 redis-cluster.tmpl</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">port <span class="hljs-variable">$&#123;PORT&#125;</span><br>protected-mode no<br>cluster-enabled yes<br>cluster-config-file nodes.conf<br>cluster-node-timeout 5000<br>cluster-announce-ip 172.20.0.1<br>cluster-announce-port <span class="hljs-variable">$&#123;PORT&#125;</span><br>cluster-announce-bus-port 1<span class="hljs-variable">$&#123;PORT&#125;</span><br>appendonly yes<br></code></pre></td></tr></table></figure>

<h2 id="根据模板批量创建配置文件"><a href="#根据模板批量创建配置文件" class="headerlink" title="根据模板批量创建配置文件"></a>根据模板批量创建配置文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> `seq 6000 6005`; <span class="hljs-keyword">do</span> \<br>  mkdir -p ./<span class="hljs-variable">$&#123;port&#125;</span>/conf \<br>  &amp;&amp; PORT=<span class="hljs-variable">$&#123;port&#125;</span> envsubst &lt; ./redis-cluster.tmpl &gt; ./<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf \<br>  &amp;&amp; mkdir -p ./<span class="hljs-variable">$&#123;port&#125;</span>/data; \<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>

<h2 id="批量运行-注意修改目录"><a href="#批量运行-注意修改目录" class="headerlink" title="批量运行(注意修改目录)"></a>批量运行(注意修改目录)</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> `seq 6000 6005`; <span class="hljs-keyword">do</span> \<br>docker run -d -ti -p <span class="hljs-variable">$&#123;port&#125;</span>:<span class="hljs-variable">$&#123;port&#125;</span> -p 1<span class="hljs-variable">$&#123;port&#125;</span>:1<span class="hljs-variable">$&#123;port&#125;</span> \<br>-v /root/w/cluster/redis-cluster/<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf:/usr/<span class="hljs-built_in">local</span>/etc/redis/redis.conf \<br>-v /root/w/cluster/redis-cluster/<span class="hljs-variable">$&#123;port&#125;</span>/data:/data \<br>--restart always --name redis-<span class="hljs-variable">$&#123;port&#125;</span> --net redis-net \<br>--sysctl net.core.somaxconn=1024 redis:5.0.3 redis-server /usr/<span class="hljs-built_in">local</span>/etc/redis/redis.conf; \<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>

<h2 id="运行和查看"><a href="#运行和查看" class="headerlink" title="运行和查看"></a>运行和查看</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it redis-6000 bash<br>redis-cli --cluster create 172.20.0.1:6000 172.20.0.1:6001 172.20.0.1:6002 172.20.0.1:6003 172.20.0.1:6004 172.20.0.1:6005 --cluster-replicas 1<br><br><span class="hljs-comment"># 连接客户端，查看主从信息</span><br>redis-cli -c -p 6000<br>redis&gt; keys *<br>redis&gt; info replication<br></code></pre></td></tr></table></figure>

<h2 id="开放防火墙"><a href="#开放防火墙" class="headerlink" title="开放防火墙"></a>开放防火墙</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> `seq 7000 7005`; <span class="hljs-keyword">do</span> \<br>  firewall-cmd --zone=public --add-port=<span class="hljs-variable">$&#123;port&#125;</span>/tcp --permanent<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment">#重新载入</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure>

<h2 id="停止和移除"><a href="#停止和移除" class="headerlink" title="停止和移除"></a>停止和移除</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 暂停容器并删除容器</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> `seq 6000 6005`; <span class="hljs-keyword">do</span> \<br>  docker stop redis-<span class="hljs-variable">$&#123;port&#125;</span>;<br>  docker rm redis-<span class="hljs-variable">$&#123;port&#125;</span>;<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql常见操作</title>
    <url>/sql/sql%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法：CONCAT(str1,str2,…)</span><br><span class="hljs-comment">-- 返回结果为连接参数产生的字符串。</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">concat</span>(<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>);<br><span class="hljs-comment">-- 如有任何一个参数为NULL ，则返回值为 NULL。</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">concat</span>(<span class="hljs-string">'a'</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">'b'</span>);<br><br><br><br><span class="hljs-comment">-- 语法：CONCAT_WS(separator,str1,str2,…)</span><br><span class="hljs-comment">-- CONCAT_WS，表示 CONCAT With Separator</span><br><span class="hljs-comment">-- 如果分隔符为 NULL，则结果为 NULL。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CONCAT_WS</span>(<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">-- 函数会忽略任何分隔符参数后的 NULL 值。这是和MySQL中concat函数不同的地方、concat_ws函数在执行的时候，不会因为NULL值而返回NULL。（这点很重要）</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CONCAT_WS</span>(<span class="hljs-string">','</span>,<span class="hljs-string">'First name'</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-string">'Last Name'</span>);<br></code></pre></td></tr></table></figure>

<p><strong>GROUP_CONCAT 只有一列时如何拼接</strong></p>
<blockquote>
<p>完整的语法如下：group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’])（分隔符默认逗号）</p>
</blockquote>
<p>示例<br><img src="http://cdn.lyloou.com/img/sql%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C-2021-08-25-10-49-37.png" alt="sql常见操作-2021-08-25-10-49-37"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>, <span class="hljs-keyword">GROUP_CONCAT</span>(<span class="hljs-keyword">id</span> SEPARATOR <span class="hljs-string">','</span>) ids <span class="hljs-keyword">FROM</span> <span class="hljs-string">`user`</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>, <span class="hljs-keyword">GROUP_CONCAT</span>(<span class="hljs-keyword">id</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">desc</span> SEPARATOR <span class="hljs-string">','</span>)ids <span class="hljs-keyword">FROM</span> <span class="hljs-string">`user`</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>

<p><img src="http://cdn.lyloou.com/img/sql%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C-2021-08-25-10-50-11.png" alt="sql常见操作-2021-08-25-10-50-11"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 获取某列的组合</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(<span class="hljs-keyword">id</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">desc</span> SEPARATOR <span class="hljs-string">','</span>)ids <span class="hljs-keyword">FROM</span> <span class="hljs-string">`user`</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">''</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(<span class="hljs-keyword">DISTINCT</span> nickname  <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> nickname  <span class="hljs-keyword">desc</span>  SEPARATOR <span class="hljs-string">','</span>)nickname <span class="hljs-keyword">FROM</span> <span class="hljs-string">`user`</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">''</span>;<br></code></pre></td></tr></table></figure>

<p><img src="http://cdn.lyloou.com/img/sql%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C-2021-08-25-10-56-01.png" alt="sql常见操作-2021-08-25-10-56-01"><br><img src="http://cdn.lyloou.com/img/sql%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C-2021-08-25-10-58-34.png" alt="sql常见操作-2021-08-25-10-58-34"></p>
<ul>
<li><a href="https://www.cnblogs.com/zhming26/p/6382995.html" target="_blank" rel="noopener">mysql 中 concat 和 group_concat()的用法 - zhming - 博客园</a></li>
<li><a href="https://www.cnblogs.com/goloving/p/7576440.html" target="_blank" rel="noopener">模糊搜索：concat 各种函数详解、like 操作符、通配符 - 古兰精 - 博客园</a></li>
</ul>
<h2 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>SUBSTRING_INDEX(SUBSTRING_INDEX(<span class="hljs-string">'7654,7698,7782,7788'</span>,<span class="hljs-string">','</span>,help_topic_id+<span class="hljs-number">1</span>),<span class="hljs-string">','</span>,<span class="hljs-number">-1</span>) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">num</span><br><span class="hljs-keyword">FROM</span><br>mysql.help_topic<br><span class="hljs-keyword">WHERE</span><br>help_topic_id &lt; <span class="hljs-keyword">LENGTH</span>(<span class="hljs-string">'7654,7698,7782,7788'</span>)-<span class="hljs-keyword">LENGTH</span>(<span class="hljs-keyword">REPLACE</span>(<span class="hljs-string">'7654,7698,7782,7788'</span>,<span class="hljs-string">','</span>,<span class="hljs-string">''</span>))+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<p><a href="https://www.shuzhiduo.com/A/x9J2vlNWJ6/" target="_blank" rel="noopener">mysql 字符串拆分实现 split 功能</a><br><a href="https://blog.csdn.net/pjymyself/article/details/81668157" target="_blank" rel="noopener">MySQL——字符串拆分（含分隔符的字符串截取）_逗比的小博客-CSDN 博客_mysql 字符串分割</a></p>
<h2 id="查询某个字段的值出现多于-1-次的"><a href="#查询某个字段的值出现多于-1-次的" class="headerlink" title="查询某个字段的值出现多于 1 次的"></a>查询某个字段的值出现多于 1 次的</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>,flow_id, <span class="hljs-keyword">COUNT</span>(flow_id) <span class="hljs-keyword">FROM</span> orders <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> flow_id <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">count</span>(flow_id)&gt;<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>

<h2 id="是否为空"><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> weight <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure>

<h2 id="获取最大值-最小值"><a href="#获取最大值-最小值" class="headerlink" title="获取最大值/最小值"></a>获取最大值/最小值</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 最小值</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(column_name) <span class="hljs-keyword">from</span> table_name;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">num</span> <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">num</span>;<br><br><span class="hljs-comment"># 最大值</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(column_name) <span class="hljs-keyword">from</span> table_name;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">num</span> <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">num</span> <span class="hljs-keyword">desc</span>;<br><br><span class="hljs-comment"># 获取最大值所在行</span><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> final_amount = (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MAX</span>(final_amount)<br>					   <span class="hljs-keyword">FROM</span> orders);<br></code></pre></td></tr></table></figure>

<p>参考资料</p>
<ul>
<li><a href="http://www.111cn.net/database/mssqlserver/42437.htm" target="_blank" rel="noopener">sql 中 max()和 min()取最大值和最小值语句</a></li>
</ul>
<h2 id="判断记录是否存在-不存在则插入存在则更新的场景"><a href="#判断记录是否存在-不存在则插入存在则更新的场景" class="headerlink" title="判断记录是否存在,不存在则插入存在则更新的场景"></a><a href="https://my.oschina.net/iceman/blog/53735" target="_blank" rel="noopener">判断记录是否存在,不存在则插入存在则更新的场景</a></h2><p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`clients2`</span> (<br>  <span class="hljs-string">`client_id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-string">`client_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`client_type`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`client_id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">6</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8<br></code></pre></td></tr></table></figure>

<p>不存在则插入存在则更新的场景</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 如果表中不存在则插入指定值，如果存在则给`client_type`增加1</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> clients (clients.<span class="hljs-string">`client_id`</span>, clients.<span class="hljs-string">`client_name`</span>, clients.<span class="hljs-string">`client_type`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">"Lou12"</span>, <span class="hljs-number">3</span>) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DUPLICATE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-keyword">UPDATE</span> clients.<span class="hljs-string">`client_type`</span>=clients.<span class="hljs-string">`client_type`</span>+<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>

<p><a href="https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html</a></p>
<h2 id="插入或更新时的-NULL-字段处理"><a href="#插入或更新时的-NULL-字段处理" class="headerlink" title="插入或更新时的 NULL 字段处理"></a>插入或更新时的 NULL 字段处理</h2><p>想法来自【小白】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 如果待插入的数据不为NULL，则改变原来的为新值</span><br><span class="hljs-keyword">SET</span> @title = <span class="hljs-string">'新标题234'</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> goods (goods_id,title) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">9934</span>,<span class="hljs-keyword">IFNULL</span>(@title,<span class="hljs-string">''</span>)) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DUPLICATE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-keyword">UPDATE</span> title=<span class="hljs-keyword">IF</span>(<span class="hljs-keyword">VALUES</span>(title)=<span class="hljs-string">''</span>,title,<span class="hljs-keyword">VALUES</span>(title));<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> goods <span class="hljs-keyword">WHERE</span> goods_id  =<span class="hljs-number">9934</span>;<br><br><span class="hljs-comment"># 如果待插入的数据为NULL，则不改变原来的</span><br><span class="hljs-keyword">SET</span> @title = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> goods (goods_id,title) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">9934</span>,<span class="hljs-keyword">IFNULL</span>(@title,<span class="hljs-string">''</span>)) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DUPLICATE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-keyword">UPDATE</span> title=<span class="hljs-keyword">IF</span>(<span class="hljs-keyword">VALUES</span>(title)=<span class="hljs-string">''</span>,title,<span class="hljs-keyword">VALUES</span>(title));<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> goods <span class="hljs-keyword">WHERE</span> goods_id  =<span class="hljs-number">9934</span>;<br></code></pre></td></tr></table></figure>

<h2 id="和-0-做比较避免出现负值"><a href="#和-0-做比较避免出现负值" class="headerlink" title="和 0 做比较避免出现负值"></a>和 0 做比较避免出现负值</h2><p><a href="https://bbs.csdn.net/topics/392371054" target="_blank" rel="noopener">https://bbs.csdn.net/topics/392371054</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 和0做比较避免出现负值</span><br><span class="hljs-keyword">update</span> products <span class="hljs-keyword">set</span> stocks=<span class="hljs-keyword">greatest</span>(stocks<span class="hljs-number">-10</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">where</span> product_id=<span class="hljs-number">55635</span><br><br><span class="hljs-keyword">UPDATE</span> goods <span class="hljs-keyword">AS</span> g <span class="hljs-keyword">SET</span> stock = <span class="hljs-keyword">greatest</span>((<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">SUM</span>(stocks) <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">AS</span> p <span class="hljs-keyword">WHERE</span> p.<span class="hljs-string">`goods_id`</span> = g.<span class="hljs-string">`goods_id`</span>), <span class="hljs-number">0</span>) <span class="hljs-keyword">WHERE</span>  goods_id=<span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure>

<h2 id="没有时插入或存在时忽略"><a href="#没有时插入或存在时忽略" class="headerlink" title="没有时插入或存在时忽略"></a>没有时插入或存在时忽略</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">IGNORE</span> <span class="hljs-keyword">INTO</span> task_link (user_id, task_id) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">20021413</span>, <span class="hljs-number">50000</span>)<br></code></pre></td></tr></table></figure>

<h2 id="duplicate-entry-for-key"><a href="#duplicate-entry-for-key" class="headerlink" title="duplicate entry for key"></a>duplicate entry for key</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(<span class="hljs-keyword">id</span>),user_id,task_id,<span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> cnt <span class="hljs-keyword">FROM</span> task_link <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id,task_id <span class="hljs-keyword">having</span> cnt &gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> task_link <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">100</span>,<span class="hljs-number">137</span>,<span class="hljs-number">131</span>,<span class="hljs-number">138</span>,<span class="hljs-number">136</span>,<span class="hljs-number">125</span>,<span class="hljs-number">124</span>);<br></code></pre></td></tr></table></figure>

<h2 id="依据两个字段来更新或插入表的其他字段"><a href="#依据两个字段来更新或插入表的其他字段" class="headerlink" title="依据两个字段来更新或插入表的其他字段"></a>依据两个字段来更新或插入表的其他字段</h2><ol>
<li><p>要先为这两个字段添加一个组合的唯一索引；<br><img src="https://github.com/lyloou/img/raw/develop/z/20190708173423.png" alt></p>
</li>
<li><p>使用语句来更新或插入</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> task_bonus_user (user_id,task_id,task_bonus_id) <span class="hljs-keyword">values</span> (?,?,?)<br>             <span class="hljs-keyword">on</span> <span class="hljs-keyword">duplicate</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">update</span> task_bonus_id = <span class="hljs-keyword">values</span>(task_bonus_id)<br></code></pre></td></tr></table></figure>

<h2 id="去除小数点和后面的-0"><a href="#去除小数点和后面的-0" class="headerlink" title="去除小数点和后面的 0"></a>去除小数点和后面的 0</h2><p><a href="https://blog.csdn.net/strggle_bin/article/details/78135071" target="_blank" rel="noopener">MySQL 去掉字符串前后或中间的某一字符串_strggle_bin 的博客-CSDN 博客_mysql 去掉前两个字符</a></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">UPDATE</span> cc_brief_video_author <span class="hljs-keyword">SET</span> user_id = TRIM(<span class="hljs-keyword">TRAILING</span> <span class="hljs-string">'.0'</span> <span class="hljs-keyword">from</span> user_id)<br></code></pre></td></tr></table></figure>

<h2 id="删除重复的关键词"><a href="#删除重复的关键词" class="headerlink" title="删除重复的关键词"></a>删除重复的关键词</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">from</span> cc_brief_keyword_v2 <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<br>	<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">min</span>(<span class="hljs-keyword">id</span>) <span class="hljs-keyword">FROM</span> cc_brief_keyword_v2 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> keyword <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">count</span>(keyword) &gt; <span class="hljs-number">1</span><br>)<br><span class="hljs-keyword">and</span><br>keyword <span class="hljs-keyword">in</span> (<br> <span class="hljs-keyword">SELECT</span> keyword <span class="hljs-keyword">FROM</span> cc_brief_keyword_v2 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> keyword <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">count</span>(keyword) &gt; <span class="hljs-number">1</span><br>)<br></code></pre></td></tr></table></figure>

<h2 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h2><p>如果是记录表，且不对外提供查询操作可以这样处理。</p>
<p>快速备份的方案，具体操作如下：</p>
<ol>
<li><p>创建一个和 order_info 一样的新表（表结构、索引）。<br>– 执行 DDL 语句<br>create table order_info_new like order_info;</p>
</li>
<li><p>修改 order_info 的表名为 order_info_20220101，用日期做后缀方便以后查询<br>– 执行 DDL 语句<br>alter table order_info rename to order_info_20220101;</p>
</li>
<li><p>修改 order_info_new 为 order_info。<br>– 执行 DDL 语句<br>alter table order_info_new rename to order_info;</p>
</li>
</ol>
<h2 id="获取表结构"><a href="#获取表结构" class="headerlink" title="获取表结构"></a>获取表结构</h2><p><a href="https://blog.csdn.net/zhezhebie/article/details/108258387" target="_blank" rel="noopener">mysql 获取所有的表结构及备注_阳水平的博客-CSDN 博客_mysql 获取表备注</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 获取所有表信息</span><br><span class="hljs-keyword">SELECT</span><br>    *<br><span class="hljs-keyword">FROM</span><br>    information_schema.<span class="hljs-string">`TABLES`</span><br><span class="hljs-keyword">WHERE</span><br>    TABLE_SCHEMA = (<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 获取所有表名和备注</span><br><span class="hljs-keyword">SELECT</span><br>    TABLE_NAME 表名,<br>    TABLE_COMMENT 备注<br><span class="hljs-keyword">FROM</span><br>    information_schema.<span class="hljs-string">`TABLES`</span><br><span class="hljs-keyword">WHERE</span><br>    TABLE_SCHEMA = (<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 获取所有的表结构及备注</span><br><span class="hljs-keyword">SELECT</span><br>    TABLE_SCHEMA <span class="hljs-keyword">AS</span> <span class="hljs-string">'库名'</span>,<br>    TABLE_NAME <span class="hljs-keyword">AS</span> <span class="hljs-string">'表名'</span>,<br>    COLUMN_NAME <span class="hljs-keyword">AS</span> <span class="hljs-string">'列名'</span>,<br>    ORDINAL_POSITION <span class="hljs-keyword">AS</span> <span class="hljs-string">'列的排列顺序'</span>,<br>    COLUMN_DEFAULT <span class="hljs-keyword">AS</span> <span class="hljs-string">'默认值'</span>,<br>    IS_NULLABLE <span class="hljs-keyword">AS</span> <span class="hljs-string">'是否为空'</span>,<br>    DATA_TYPE <span class="hljs-keyword">AS</span> <span class="hljs-string">'数据类型'</span>,<br>    CHARACTER_MAXIMUM_LENGTH <span class="hljs-keyword">AS</span> <span class="hljs-string">'字符最大长度'</span>,<br>    NUMERIC_PRECISION <span class="hljs-keyword">AS</span> <span class="hljs-string">'数值精度(最大位数)'</span>,<br>    NUMERIC_SCALE <span class="hljs-keyword">AS</span> <span class="hljs-string">'小数精度'</span>,<br>    COLUMN_TYPE <span class="hljs-keyword">AS</span> <span class="hljs-string">'列类型'</span>,<br>    COLUMN_KEY <span class="hljs-string">'KEY'</span>,<br>    EXTRA <span class="hljs-keyword">AS</span> <span class="hljs-string">'额外说明'</span>,<br>    COLUMN_COMMENT <span class="hljs-keyword">AS</span> <span class="hljs-string">'注释'</span><br><span class="hljs-keyword">FROM</span><br>    information_schema.<span class="hljs-string">`COLUMNS`</span><br><span class="hljs-keyword">WHERE</span><br>    TABLE_SCHEMA = (<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    TABLE_NAME,<br>    ORDINAL_POSITION;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>【Sql】常见问题列表</title>
    <url>/sql/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>解决思路就是：避免同时操作数据；</p>
<ul>
<li><a href="https://www.cnblogs.com/zejin2008/p/5262751.html" target="_blank" rel="noopener">Mysql 并发时经典常见的死锁原因及解决方法 - 泽锦 - 博客园</a></li>
</ul>
<p>首先我们执行<br><code>show engine innodb status\G;</code><br>查看死锁情况，也可以<br><code>mysql -u root -p --execute=&quot;show engine innodb status \G&quot;&gt; c:/mysql.log</code><br>把死锁信息输出到本地磁盘，查看起来比较方便<br><a href="https://blog.csdn.net/weixin_38250126/article/details/70053222" target="_blank" rel="noopener">mysql 死锁分析 - 那片天空！那片海！ - CSDN 博客</a></p>
<p><strong>例如：</strong></p>
<p>通过定位死锁的数据库： <code>show engine \G</code>，发现一个统计任务、一个改价任务，同时修改同一个端口的内容，导致死锁。</p>
<p>解决方法：将两个任务的时间错开，改价的为每分钟的 0 秒触发；统计的为每两分钟的 30 秒触发；</p>
<h2 id="日志文件被删除后，无法正常启动"><a href="#日志文件被删除后，无法正常启动" class="headerlink" title="日志文件被删除后，无法正常启动"></a>日志文件被删除后，无法正常启动</h2><p>通过<code>systemctl status mariadb.service</code>来查看缺少什么文件，创建对应的即可，<br>如果是权限问题，把外层的文件夹修改下权限 <code>/var/log/mysql</code>。<br>然后重启： <code>systemctl restart mariadb.service</code></p>
<h2 id="Authentication-plugin-‘caching-sha2-password’-cannot-be-loaded"><a href="#Authentication-plugin-‘caching-sha2-password’-cannot-be-loaded" class="headerlink" title="Authentication plugin ‘caching_sha2_password’ cannot be loaded"></a>Authentication plugin ‘caching_sha2_password’ cannot be loaded</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">use</span> mysql;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">'12345678'</span>;<br><span class="hljs-keyword">select</span> Host,<span class="hljs-keyword">user</span>,<span class="hljs-keyword">plugin</span>,Authentication_string <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/u010358168/article/details/81253744" target="_blank" rel="noopener">完美解决 ERROR2059(HY000):Authenticationplugincaching<em>sha2_passwordcannotbeloaded 问题</em>小洋人最 happy 的专栏-CSDN 博客_error2059</a></p>
<h2 id="不可重复读和幻读的区别"><a href="#不可重复读和幻读的区别" class="headerlink" title="不可重复读和幻读的区别"></a>不可重复读和幻读的区别</h2><ul>
<li>脏读：读取未提交的数据；</li>
<li>不可重复读（update）：前后多次读取，数据内容不一致；</li>
<li>幻读（insert、delete）：前后多次读取，数据总量不一致；</li>
</ul>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1450773" target="_blank" rel="noopener">快速理解脏读、不可重复读、幻读和 MVCC - 云+社区 - 腾讯云</a><br>(1) 不可重复读是读取了其他事务更改的数据，针对 update 操作<br>解决：使用行级锁，锁定该行，事务 A 多次读取操作完成后才释放该锁，这个时候才允许其他事务更改刚才的数据。<br>(2) 幻读是读取了其他事务新增的数据，针对 insert 和 delete 操作<br>解决：使用表级锁，锁定整张表，事务 A 多次读取数据总量之后才释放该锁，这个时候才允许其他事务新增数据。</li>
</ul>
<h4 id="SELECT-IN-子查询-太慢问题"><a href="#SELECT-IN-子查询-太慢问题" class="headerlink" title="SELECT IN(子查询)太慢问题"></a>SELECT IN(子查询)太慢问题</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> third_video_iqiyi <span class="hljs-keyword">WHERE</span>  v_id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">SELECT</span> v_id <span class="hljs-keyword">FROM</span> third_video_iqiyi <span class="hljs-keyword">WHERE</span> v_id &lt; <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98_20220608185021_2022-06-08-18-50-22.png" alt="常见问题_20220608185021_2022-06-08-18-50-22"><br>在表的整体数据量大的情况下，上面的 sql 基本无法执行。</p>
<ul>
<li><p><a href="https://blog.csdn.net/youbl/article/details/113696590" target="_blank" rel="noopener">生产慢查询记录：MySQL IN 子查询导致的慢查询_北亮bl的博客-CSDN博客</a><br><img src="https://raw.githubusercontent.com/lyloou/img/develop/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98_20220608185524_2022-06-08-18-55-24.png" alt="常见问题_20220608185524_2022-06-08-18-55-24"></p>
</li>
<li><p><a href="https://www.cnblogs.com/wxw16/p/6105624.html" target="_blank" rel="noopener">深入理解MySql子查询IN的执行和优化 - wuxiwei - 博客园</a></p>
</li>
<li><p><a href="https://www.365seal.com/y/AZvgXQL3Va.html" target="_blank" rel="noopener">MySQL子查询慢现象的解决</a><br><img src="https://raw.githubusercontent.com/lyloou/img/develop/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98_20220608185226_2022-06-08-18-52-27.png" alt="常见问题_20220608185226_2022-06-08-18-52-27"></p>
</li>
</ul>
<p>优化方案</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> third_video_iqiyi a ,(<span class="hljs-keyword">SELECT</span> v_id <span class="hljs-keyword">FROM</span> third_video_iqiyi <span class="hljs-keyword">WHERE</span> v_id &lt; <span class="hljs-number">10</span>) b <span class="hljs-keyword">WHERE</span> a.v_id = b.v_id;<br></code></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98_20220608184956_2022-06-08-18-49-57.png" alt="常见问题_20220608184956_2022-06-08-18-49-57"></p>
]]></content>
      <tags>
        <tag>sql</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql设计</title>
    <url>/sql/sql%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>2019-05-28 16:52:57</p>
<h2 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h2><blockquote>
<p><a href="https://www.cnblogs.com/linjiqin/archive/2012/04/01/2428695.html" target="_blank" rel="noopener">数据库设计三大范式 - Ruthless - 博客园</a></p>
</blockquote>
<ol>
<li>确保每列保持原子性（维度：单元格）<br>所有字段都是不可分解的原子值。如【地址】这个属性，如果要经常用到【城市】这个部分，那么要将【地址】分解成【省份】、【城市】、【详细地址】等多个字段存储。</li>
<li>确保表中的每列都和主键有关（维度：一行）<br>在第 1 条的基础上，确保数据库表中的每一列都和主键有关，而不是只与主键的某一部分相关（主要针对联合主键）。<br>如子订单表中的【子订单 ID】和【商品 ID】构成联合主键。在这个表中，“商品名称，单位，商品价格”等信息不与该联合主键有关，而只是与【商品 ID】有关，不应该存储这些字段。<br>如果需要这些字段，可以从商品表中获取</li>
<li>确保表中的每列都和主键列直接有关，而不是间接相关（维度：表）<br>在一个表中存储了，在另一个表中存储外键就可以了，不要再重复添加其他字段。<br>如在订单表中添加【客户 ID】即可，不要再添加客户名称、联系方式等（这些字段已经存在于客户表中）</li>
</ol>
<blockquote>
<p>范式是用来学习和参考的，设计的时候得具体问题具体对待。例如，在访问并发量大的情况下，也会采用反范式来设计提高数据库的响应能力。</p>
</blockquote>
<p><a href="https://www.cnblogs.com/liuxiaowei/p/7163537.html" target="_blank" rel="noopener">浅谈 Mysql 表设计规范 - 刘小伟 - 博客园</a></p>
<h2 id="用-BTree-还是-HASH"><a href="#用-BTree-还是-HASH" class="headerlink" title="用 BTree 还是 HASH"></a>用 BTree 还是 HASH</h2><p><a href="https://www.cnblogs.com/bonelee/p/6224698.html" target="_blank" rel="noopener">B+树索引和哈希索引的区别——我在想全文搜索引擎为啥不用 hash 索引而非得使用 B+呢？ - bonelee - 博客园</a><br><a href="https://blog.csdn.net/ochangwen/article/details/54024063" target="_blank" rel="noopener">MySQL BTree 索引和 hash 索引的区别 - ChangWen 的博客 - CSDN 博客</a></p>
<p><strong>hash</strong>:hash 索引在 mysql 比较少用,他以把数据的索引以 hash 形式组织起来,因此当查找某一条记录的时候,速度非常快.<br>但是因为是 hash 结构,每个键只对应一个值,而且是散列的方式分布.所以他并不支持范围查找和排序等功能.</p>
<p><strong>B+树</strong>:b+tree 是 mysql 使用最频繁的一个索引数据结构,数据结构以平衡树的形式来组织,<br>因为是树型结构,所以更适合用来处理排序,范围查找等功能.相对 hash 索引,B+树在查找单条记录的速度虽然比不上 hash 索引,但是因为更适合排序等操作,所以他更受用户的欢迎.毕竟不可能只对数据库进行单条记录的操作.</p>
<ul>
<li><a href="https://blog.csdn.net/leyangjun/article/details/42461879" target="_blank" rel="noopener">Mysql 主键索引、唯一索引、普通索引、全文索引、组合索引的区别 - 乐杨俊浅谈 LAMP - CSDN 博客</a></li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> 每列都为保持原子性（地址精确到省、城市）<br><span class="hljs-number">2.</span> 每列都和主键有关（主要针对复合主键）<br><span class="hljs-number">3.</span> 每列都和主键列直接相关<br></code></pre></td></tr></table></figure>

<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>Mysql 各种索引区别：<br>普通索引：最基本的索引，没有任何限制<br>唯一索引：与”普通索引”类似，不同的就是：索引列的值必须唯一，但允许有空值。<br>主键索引：它 是一种特殊的唯一索引，不允许有空值。<br>全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时好空间。<br>组合索引：为了更多的提高 mysql 效率可建立组合索引，遵循”最左前缀“原则。</p>
<ul>
<li><a href="https://blog.csdn.net/leyangjun/article/details/42461879" target="_blank" rel="noopener">Mysql 主键索引、唯一索引、普通索引、全文索引、组合索引的区别 - 乐杨俊浅谈 LAMP - CSDN 博客</a></li>
</ul>
<h2 id="分表处理的实现方法"><a href="#分表处理的实现方法" class="headerlink" title="分表处理的实现方法"></a>分表处理的实现方法</h2><ul>
<li><a href="https://blog.csdn.net/rongwenbin/article/details/40341965" target="_blank" rel="noopener">MySQL 分表处理的实现方法(按月份分的表) - rongwenbin 的专栏 - CSDN 博客</a></li>
<li><a href="https://raising.iteye.com/blog/2294673" target="_blank" rel="noopener">数据量大的表的分表方案 以及 跨（同类型的）表查询遇上分组时需要注意的点 - Try My Best 尽力而为 - ITeye 博客</a></li>
<li><a href="http://database.51cto.com/art/201809/583857.htm" target="_blank" rel="noopener">MySQL 分库分表，写得太好了！ - 51CTO.COM</a></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查找</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-string">`money_histories`</span> <span class="hljs-keyword">WHERE</span> user_id = <span class="hljs-number">20022253</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-string">`money_histories_201905`</span> <span class="hljs-keyword">WHERE</span> user_id = <span class="hljs-number">20022253</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-string">`money_histories_201906`</span> <span class="hljs-keyword">WHERE</span> user_id = <span class="hljs-number">20022253</span><br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.cnblogs.com/joylee/p/7513038.html" target="_blank" rel="noopener">学会数据库读写分离、分表分库——用Mycat，这一篇就够了！ - IT米粉 - 博客园</a></li>
<li><a href="http://www.mycat.io/" target="_blank" rel="noopener">| MYCAT官方网站—开源分布式数据库中间件</a><br><a href="http://www.mycat.io/document/Mycat_V1.6.0.pdf" target="_blank" rel="noopener">http://www.mycat.io/document/Mycat_V1.6.0.pdf</a></li>
</ul>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql表设计</title>
    <url>/sql/%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">类型</th>
<th align="right">长度</th>
<th align="center">小数点</th>
<th align="center">不是 null</th>
<th align="right">默认值</th>
<th align="center">虚拟</th>
<th align="center">键</th>
<th align="left">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">bigint</td>
<td align="right">20</td>
<td align="center">0</td>
<td align="center">notnull</td>
<td align="right"></td>
<td align="center"></td>
<td align="center">key</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">money</td>
<td align="left">decimal</td>
<td align="right">10</td>
<td align="center">2</td>
<td align="center">notnull</td>
<td align="right">0.00</td>
<td align="center"></td>
<td align="center"></td>
<td align="left">和钱相关的</td>
</tr>
<tr>
<td align="left">gmt_create</td>
<td align="left">datetime</td>
<td align="right">0</td>
<td align="center">0</td>
<td align="center"></td>
<td align="right">current_timestamp</td>
<td align="center"></td>
<td align="center"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">gmt_modified</td>
<td align="left">datetime</td>
<td align="right">0</td>
<td align="center">0</td>
<td align="center"></td>
<td align="right">current_timestamp</td>
<td align="center"></td>
<td align="center"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">is_disabled</td>
<td align="left">tinyint</td>
<td align="right">1</td>
<td align="center">0</td>
<td align="center"></td>
<td align="right"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">是与否相关的，都用 tinyint</td>
</tr>
<tr>
<td align="left">name</td>
<td align="left">varchar</td>
<td align="right">64</td>
<td align="center">0</td>
<td align="center"></td>
<td align="right"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">和名称有关的，长度可选 32、64、123</td>
</tr>
<tr>
<td align="left">intro</td>
<td align="left">text</td>
<td align="right">0</td>
<td align="center">0</td>
<td align="center"></td>
<td align="right"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">比较长的文本，用 text 类型</td>
</tr>
<tr>
<td align="left">start_time</td>
<td align="left">timestamp</td>
<td align="right">0</td>
<td align="center">0</td>
<td align="center"></td>
<td align="right"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">需要的时间要很精确，用 timestamp 类型</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>主从复制和读写分离</title>
    <url>/sql/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%92%8C%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>环境介绍</p>
<table>
<thead>
<tr>
<th>环境&amp;软件</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>虚拟机 virtualbox</td>
<td>6.1</td>
</tr>
<tr>
<td>服务器 ubuntu</td>
<td>18.04</td>
</tr>
<tr>
<td>数据库 mysql</td>
<td>5.7.32</td>
</tr>
</tbody></table>
<p>服务架构图</p>
<table>
<thead>
<tr>
<th>机器名称</th>
<th>IP</th>
<th>角色</th>
<th>权限和作用</th>
</tr>
</thead>
<tbody><tr>
<td>master1</td>
<td>192.168.56.15</td>
<td>数据库 master</td>
<td>可读写、主库</td>
</tr>
<tr>
<td>slave1</td>
<td>192.168.56.16</td>
<td>数据库 Slave</td>
<td>只读、从库</td>
</tr>
<tr>
<td>slave2</td>
<td>192.168.56.17</td>
<td>数据库 Slave</td>
<td>只读、从库</td>
</tr>
<tr>
<td>master2</td>
<td>192.168.56.25</td>
<td>数据库 master</td>
<td>可读写、主库</td>
</tr>
<tr>
<td>slave3</td>
<td>192.168.56.26</td>
<td>数据库 Slave</td>
<td>只读、从库</td>
</tr>
<tr>
<td>slave4</td>
<td>192.168.56.27</td>
<td>数据库 Slave</td>
<td>只读、从库</td>
</tr>
</tbody></table>
<h2 id="bin-log-配置-amp-relay-log-配置"><a href="#bin-log-配置-amp-relay-log-配置" class="headerlink" title="bin_log 配置 &amp; relay_log 配置"></a>bin_log 配置 &amp; relay_log 配置</h2><p>vi /etc/mysql/mysql.conf.d/mysqld.cnf</p>
<h2 id="修改-uuid"><a href="#修改-uuid" class="headerlink" title="修改 uuid"></a>修改 uuid</h2><p>show variables like ‘%server_uuid%’;</p>
<p>通过 <code>select @@datadir</code> 找到 msyql 的数据目录在哪，在这个目录下会有一个 auto.cnf 的文件，修改里面的内容，然后重启即可解决。<br>vi /var/lib/mysql/auto.cnf<br>service mysql restart</p>
<h2 id="开启同步配置"><a href="#开启同步配置" class="headerlink" title="开启同步配置"></a>开启同步配置</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在master上运行，记录下file名称和position</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">master</span> <span class="hljs-keyword">status</span>;<br><span class="hljs-keyword">change</span> <span class="hljs-keyword">master</span> <span class="hljs-keyword">to</span> master_host=<span class="hljs-string">'192.168.56.15'</span>,master_port=<span class="hljs-number">3306</span>,master_user=<span class="hljs-string">'root'</span>,master_password=<span class="hljs-string">'root'</span>,master_log_file=<span class="hljs-string">'mysql-bin.000018'</span>,master_log_pos=<span class="hljs-number">1731</span>;<br><br><span class="hljs-keyword">change</span> <span class="hljs-keyword">master</span> <span class="hljs-keyword">to</span> master_host=<span class="hljs-string">'192.168.56.25'</span>,master_port=<span class="hljs-number">3306</span>,master_user=<span class="hljs-string">'root'</span>,master_password=<span class="hljs-string">'root'</span>,master_log_file=<span class="hljs-string">'mysql-bin.000024'</span>,master_log_pos=<span class="hljs-number">154</span>;<br><br><span class="hljs-keyword">start</span> <span class="hljs-keyword">slave</span>; <span class="hljs-comment">-- 开启从模式</span><br><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">slave</span> <span class="hljs-keyword">status</span>; <span class="hljs-comment">-- 查看slave状态</span><br><span class="hljs-keyword">stop</span> <span class="hljs-keyword">slave</span>; <span class="hljs-comment">-- 关闭从模式</span><br></code></pre></td></tr></table></figure>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>https://gitee.com/lagouedu/alltestfile/raw/master/MySQL/MySQL%E4%B8%8B%E4%BD%9C%E4%B8%9A.pdf

作业资料说明：
1、提供资料：说明文档，代码，验证及讲解视频。
2、讲解内容包含：题目分析、实现思路、环境介绍。
3、说明文档包含：
l  环境介绍涉及的各个软件的版本
l  介绍各个机器对应角色&amp;作用&amp;ip地址

4、效果视频验证：
l  集群环境
* 6台
* 主master1负责写，从slave1 slave2负责读
* 主master2负责写，从slave3 slave4负责读

l  代码
* 主要类&amp;方法&amp;参数&amp;返回值及代码行标注注释
* 基于user_id对c_order表进⾏数据分⽚
* 基于master1和master2主从集群实现读写分离

l  运行效果
* 项目各个类作用介绍，重点代码进行介绍，启动
* 演示基于user_id对c_order表进⾏数据分⽚，基于master1和master2主从集群实现读写分离
* 添加数据，通过Navicat展示数据分片成功，通过代码控制台真实sql展示数据分别在master1和master2进行写入
* 查询数据，通过代码控制台真实sql展示数据是通过4个从节点查询的</code></pre><h2 id="验证资料"><a href="#验证资料" class="headerlink" title="验证资料"></a>验证资料</h2><p><a href="../验证资料/Readme.md">作业讲解视频地址</a></p>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>环境介绍<br>|环境&amp;软件| 版本|<br>|—|—|<br>|虚拟机 virtualbox|6.1|<br>|服务器 ubuntu | 18.04|<br>|数据库 mysql | 5.7.32|</p>
<p>服务架构图</p>
<table>
<thead>
<tr>
<th>机器名称</th>
<th>IP</th>
<th>角色</th>
<th>权限和作用</th>
</tr>
</thead>
<tbody><tr>
<td>master1</td>
<td>192.168.56.15</td>
<td>数据库 master</td>
<td>可读写、主库</td>
</tr>
<tr>
<td>slave1</td>
<td>192.168.56.16</td>
<td>数据库 Slave</td>
<td>只读、从库</td>
</tr>
<tr>
<td>slave2</td>
<td>192.168.56.17</td>
<td>数据库 Slave</td>
<td>只读、从库</td>
</tr>
<tr>
<td>master2</td>
<td>192.168.56.25</td>
<td>数据库 master</td>
<td>可读写、主库</td>
</tr>
<tr>
<td>slave3</td>
<td>192.168.56.26</td>
<td>数据库 Slave</td>
<td>只读、从库</td>
</tr>
<tr>
<td>slave4</td>
<td>192.168.56.27</td>
<td>数据库 Slave</td>
<td>只读、从库</td>
</tr>
</tbody></table>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lyloou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>practice-mysql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>practice-mysql<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- c_order_0 c_order_1</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`c_order_0`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-string">`is_del`</span> <span class="hljs-built_in">bit</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> b<span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否被删除'</span>,<br>  <span class="hljs-string">`user_id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'用户id'</span>,<br>  <span class="hljs-string">`company_id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'公司id'</span>,<br>  <span class="hljs-string">`publish_user_id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'B端⽤户id'</span>,<br>  <span class="hljs-string">`position_id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'职位ID'</span>,<br>  <span class="hljs-string">`resume_type`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'简历类型：0附件 1在线'</span>,<br>  <span class="hljs-string">`status`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'投递状态投递状态WAIT-待处理理 AUTO_FILTER-⾃自动过滤 PREPARE_CONTACT-待沟通 REFUSE-拒绝ARRANGE_INTERVIEW-通知⾯面试'</span>,<br>  <span class="hljs-string">`create_time`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建时间'</span>,<br>  <span class="hljs-string">`update_time`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'处理理时间'</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>),<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`index_userId_positionId`</span> (<span class="hljs-string">`user_id`</span>,<span class="hljs-string">`position_id`</span>),<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`idx_userId_operateTime`</span> (<span class="hljs-string">`user_id`</span>,<span class="hljs-string">`update_time`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">551043954997460994</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4;<br></code></pre></td></tr></table></figure>

<p><strong>sharding jdbc 配置</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 显示sql语句</span><br><span class="hljs-attr">spring.shardingsphere.props.sql.show</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-comment">#数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.names</span>=master1,slave1,slave2,master2,slave3,slave4<br><br><span class="hljs-attr">spring.shardingsphere.datasource.master1.type</span>=com.zaxxer.hikari.HikariDataSource<br><span class="hljs-attr">spring.shardingsphere.datasource.master1.driver-class-name</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">spring.shardingsphere.datasource.master1.jdbc-url</span>=jdbc:mysql://<span class="hljs-number">192.168</span>.<span class="hljs-number">56.15</span>:<span class="hljs-number">3306</span>/lagou?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf-<span class="hljs-number">8</span>&amp;useSSL=<span class="hljs-literal">false</span><br><span class="hljs-attr">spring.shardingsphere.datasource.master1.username</span>=root<br><span class="hljs-attr">spring.shardingsphere.datasource.master1.password</span>=root<br><br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.type</span>=com.zaxxer.hikari.HikariDataSource<br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.driver-class-name</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.jdbc-url</span>=jdbc:mysql://<span class="hljs-number">192.168</span>.<span class="hljs-number">56.16</span>:<span class="hljs-number">3306</span>/lagou?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf-<span class="hljs-number">8</span>&amp;useSSL=<span class="hljs-literal">false</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.username</span>=root<br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.password</span>=root<br><br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.type</span>=com.zaxxer.hikari.HikariDataSource<br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.driver-class-name</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.jdbc-url</span>=jdbc:mysql://<span class="hljs-number">192.168</span>.<span class="hljs-number">56.17</span>:<span class="hljs-number">3306</span>/lagou?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf-<span class="hljs-number">8</span>&amp;useSSL=<span class="hljs-literal">false</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.username</span>=root<br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.password</span>=root<br><br><span class="hljs-attr">spring.shardingsphere.datasource.master2.type</span>=com.zaxxer.hikari.HikariDataSource<br><span class="hljs-attr">spring.shardingsphere.datasource.master2.driver-class-name</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">spring.shardingsphere.datasource.master2.jdbc-url</span>=jdbc:mysql://<span class="hljs-number">192.168</span>.<span class="hljs-number">56.25</span>:<span class="hljs-number">3306</span>/lagou?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf-<span class="hljs-number">8</span>&amp;useSSL=<span class="hljs-literal">false</span><br><span class="hljs-attr">spring.shardingsphere.datasource.master2.username</span>=root<br><span class="hljs-attr">spring.shardingsphere.datasource.master2.password</span>=root<br><br><span class="hljs-attr">spring.shardingsphere.datasource.slave3.type</span>=com.zaxxer.hikari.HikariDataSource<br><span class="hljs-attr">spring.shardingsphere.datasource.slave3.driver-class-name</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">spring.shardingsphere.datasource.slave3.jdbc-url</span>=jdbc:mysql://<span class="hljs-number">192.168</span>.<span class="hljs-number">56.26</span>:<span class="hljs-number">3306</span>/lagou?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf-<span class="hljs-number">8</span>&amp;useSSL=<span class="hljs-literal">false</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave3.username</span>=root<br><span class="hljs-attr">spring.shardingsphere.datasource.slave3.password</span>=root<br><br><span class="hljs-attr">spring.shardingsphere.datasource.slave4.type</span>=com.zaxxer.hikari.HikariDataSource<br><span class="hljs-attr">spring.shardingsphere.datasource.slave4.driver-class-name</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">spring.shardingsphere.datasource.slave4.jdbc-url</span>=jdbc:mysql://<span class="hljs-number">192.168</span>.<span class="hljs-number">56.27</span>:<span class="hljs-number">3306</span>/lagou?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf-<span class="hljs-number">8</span>&amp;useSSL=<span class="hljs-literal">false</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave4.username</span>=root<br><span class="hljs-attr">spring.shardingsphere.datasource.slave4.password</span>=root<br><br><span class="hljs-comment">#分库分表</span><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.c_order.database-strategy.inline.sharding-column</span>=company_id<br><span class="hljs-attr">spring.shardingsphere.sharding.tables.c_order.database-strategy.inline.algorithm-expression</span>=master$-&gt;&#123;company_id%<span class="hljs-number">2</span> + <span class="hljs-number">1</span>&#125;<br><span class="hljs-attr">spring.shardingsphere.sharding.tables.c_order.actual-data-nodes</span>=master$-&gt;&#123;<span class="hljs-number">1</span>..<span class="hljs-number">2</span>&#125;.c_order_$-&gt;&#123;<span class="hljs-number">0</span>..<span class="hljs-number">1</span>&#125;<br><span class="hljs-attr">spring.shardingsphere.sharding.tables.c_order.table-strategy.inline.sharding-column</span>=user_id<br><span class="hljs-attr">spring.shardingsphere.sharding.tables.c_order.table-strategy.inline.algorithm-expression</span>=c_order_$-&gt;&#123;user_id % <span class="hljs-number">2</span>&#125;<br><span class="hljs-attr">spring.shardingsphere.sharding.tables.c_order.key-generator.column</span>=id<br><span class="hljs-attr">spring.shardingsphere.sharding.tables.c_order.key-generator.type</span>=SNOWFLAKE<br><br><span class="hljs-comment">#读写分离</span><br><span class="hljs-attr">spring.shardingsphere.sharding.master-slave-rules.master1.master-data-source-name</span>=master1<br><span class="hljs-attr">spring.shardingsphere.sharding.master-slave-rules.master1.slave-data-source-names</span>=slave1, slave2<br><span class="hljs-attr">spring.shardingsphere.sharding.master-slave-rules.master2.master-data-source-name</span>=master2<br><span class="hljs-attr">spring.shardingsphere.sharding.master-slave-rules.master2.slave-data-source-names</span>=slave3, slave4<br></code></pre></td></tr></table></figure>

<p><strong>测试</strong><br>测试添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@Repeat</span>(value = <span class="hljs-number">100</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span> </span>&#123;<br>    Random random = <span class="hljs-keyword">new</span> Random();<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> companyId = random.nextInt(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> userId = random.nextInt(<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">final</span> Date now = <span class="hljs-keyword">new</span> Date();<br>    <span class="hljs-keyword">final</span> COrder cOrder = <span class="hljs-keyword">new</span> COrder();<br>    cOrder.setIsDel(<span class="hljs-keyword">false</span>);<br>    cOrder.setUserId(userId);<br>    cOrder.setCompanyId(companyId);<br>    cOrder.setPublishUserId(<span class="hljs-number">10</span>);<br>    cOrder.setPositionId(<span class="hljs-number">100</span>);<br>    cOrder.setResumeType(userId % <span class="hljs-number">2</span>);<br>    cOrder.setStatus(<span class="hljs-string">"AUTO_FILTER"</span>);<br>    cOrder.setCreateTime(now);<br>    cOrder.setUpdateTime(now);<br>    cOrderRepository.save(cOrder);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/.io//image-20201230150829936.png" alt="image-20201230150829936"></p>
<p>测试查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFind</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> List&lt;COrder&gt; allByUserId = cOrderRepository.findAllByUserId(<span class="hljs-number">24</span>);<br>    System.out.println(allByUserId);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/.io//image-20201230151141903.png" alt="image-20201230151141903"></p>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库理论</title>
    <url>/sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h2><p>第一范式：消除属性值可再分（非原子的）；<br>第二范式：消除非主属性对候选键的部分依赖。<br>第三范式：消除非主属性对候选键的传递依赖。<br>BC 范式：消除主属性对候选键的部分依赖和传递依赖。</p>
<p><img src="http://cdn.lyloou.com/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA-2021-09-09-14-08-58.png" alt="数据库理论-2021-09-09-14-08-58"></p>
<p><strong>分析</strong></p>
<blockquote>
<p>假设有属性集：{A、B、C、D、E、J}<br>依赖集 {A-&gt;B, A-&gt;C, C-&gt;D, AJ-&gt;E}</p>
</blockquote>
<ul>
<li>候选键：<code>AJ</code></li>
<li>主属性：<code>A、J</code></li>
<li>非主属性：<code>B、C、D、E</code></li>
</ul>
<ul>
<li><code>AJ</code>是主属性，B 可以通过<code>A</code>确定，存在<code>非主属性对候选键的部分依赖</code>；<code>AJ-&gt;E</code>这个关系拆分后，可满足<code>第二范式</code>；</li>
<li><code>A-&gt;C，C-&gt;D</code>，存在<code>非主属性对候选键的传递依赖</code>；<code>C-D</code> 拆分后满足<code>第三范式</code>；</li>
</ul>
<p>对于 BC 范式，可以从下面图来理解<br><img src="http://cdn.lyloou.com/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA-2021-09-09-14-19-18.png" alt="数据库理论-2021-09-09-14-19-18"></p>
<p>例题（答案：C、A）：<br><img src="http://cdn.lyloou.com/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA-2021-09-09-14-20-23.png" alt="数据库理论-2021-09-09-14-20-23"></p>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql配置和安装</title>
    <url>/sql/%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="linux-安装-mariadb"><a href="#linux-安装-mariadb" class="headerlink" title="linux 安装 mariadb"></a>linux 安装 mariadb</h2><ul>
<li><p>打开 <a href="https://downloads.mariadb.org/mariadb/repositories/" target="_blank" rel="noopener">https://downloads.mariadb.org/mariadb/repositories/</a></p>
</li>
<li><p>查看自己的版本号，选择对应的 version</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">lsb_release -a<br></code></pre></td></tr></table></figure>

<ul>
<li>添加源</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get install software-properties-common<br>sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8<br>sudo add-apt-repository <span class="hljs-string">'deb [arch=amd64,arm64,ppc64el] http://mirrors.neusoft.edu.cn/mariadb/repo/10.4/ubuntu bionic main'</span><br></code></pre></td></tr></table></figure>

<ul>
<li>更新和安装</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt update<br>sudo apt install mariadb-server<br></code></pre></td></tr></table></figure>

<ul>
<li>查看安装状态</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">systemctl status mariadb<br></code></pre></td></tr></table></figure>

<ul>
<li>查看 mysql version</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mysql -V<br></code></pre></td></tr></table></figure>

<p><a href="https://linuxize.com/post/how-to-install-mariadb-on-ubuntu-18-04/" target="_blank" rel="noopener">https://linuxize.com/post/how-to-install-mariadb-on-ubuntu-18-04/</a></p>
<h2 id="uninstall-mariadb"><a href="#uninstall-mariadb" class="headerlink" title="uninstall mariadb"></a>uninstall mariadb</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">apt-get remove --purge mysql*<br>apt-get remove --purge mysql<br>apt-get remove --purge mariadb<br>apt-get remove --purge mariadb*<br>apt-get --purge remove mariadb-server<br>apt-get --purge remove python-software-properties<br></code></pre></td></tr></table></figure>

<h2 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h2><p><a href="https://linuxize.com/post/how-to-reset-a-mysql-root-password/" target="_blank" rel="noopener">How to reset a MySQL root password | Linuxize</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">systemctl <span class="hljs-keyword">stop</span> mysql<br><br>sudo mysqld_safe <span class="hljs-comment">--skip-grant-tables &amp;</span><br><br>mysql -u root<br><br><span class="hljs-keyword">FLUSH</span> <span class="hljs-keyword">PRIVILEGES</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'lyloou06'</span>;<br><span class="hljs-comment">-- SET PASSWORD FOR 'root'@'localhost' = PASSWORD('MY_NEW_PASSWORD');</span><br><span class="hljs-keyword">UPDATE</span> mysql.user <span class="hljs-keyword">SET</span> <span class="hljs-keyword">Password</span>=<span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">'rebate@2020'</span>) <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">User</span>=<span class="hljs-string">'root'</span>;<br><span class="hljs-keyword">FLUSH</span> <span class="hljs-keyword">PRIVILEGES</span>;<br><br><span class="hljs-comment">-- restart</span><br>mysqladmin -u root -p shutdown<br>sudo systemctl <span class="hljs-keyword">start</span> mariadb<br><br><span class="hljs-comment">-- login again</span><br>mysql -u root -p<br></code></pre></td></tr></table></figure>

<h3 id="外网登录常见问题"><a href="#外网登录常见问题" class="headerlink" title="外网登录常见问题"></a>外网登录常见问题</h3><p>Q: ERROR 2003 (HY000): Can’t connect to MySQL server on (111 “Connection refused”)<br>A: <a href="https://blog.csdn.net/ssj901217/article/details/74490803" target="_blank" rel="noopener">mysql 远程连接数据库报 111 错误 - ssj901217 的博客 - CSDN 博客</a></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">vi /etc/mysql/my.cnf<br>找到<br>[mysqld]<br>bind-address            = <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>注释掉bind-address<br>重启 mysql, systemctl restart mysql;<br></code></pre></td></tr></table></figure>

<p>Q: ERROR 1130 (HY000): Host is not allowed to connect to this MariaDB server<br>A: <a href="https://blog.csdn.net/HJULKK/article/details/52563044" target="_blank" rel="noopener">解决 MySQL ERROR 1130 (HY000): Host ‘XXXX’ is not allowed to connect to this MySQL server - HJULKK 的专栏 - CSDN 博客</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">mysql -u root -p<br><span class="hljs-keyword">use</span> mysql;<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host = <span class="hljs-string">'%'</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> = <span class="hljs-string">'root'</span>;<br><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<br><span class="hljs-keyword">select</span> host, <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br>quit<br><span class="hljs-comment">-- 步骤2：重启mysql,</span><br>systemctl restart mysql;<br></code></pre></td></tr></table></figure>

<p>Q: <a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost" target="_blank" rel="noopener">mysql - ERROR 1698 (28000): Access denied for user ‘root’@’localhost’ - Stack Overflow</a><br>A: see below code</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">sudo service mysql restart<br>sudo mysql <span class="hljs-comment"># logs in automatically into MariaDB</span><br><span class="hljs-keyword">use</span> mysql;<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">plugin</span>=<span class="hljs-string">''</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">'your_user_name'</span>;<br><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<br>exit;<br>sudo service mysql restart <span class="hljs-comment"># restarts the mysql service</span><br></code></pre></td></tr></table></figure>

<p><a href="https://javen.blog.csdn.net/article/details/70949596#comments_15461007" target="_blank" rel="noopener">Centos7.3 安装 Mysql5.7 并修改初始密码_酷玩时刻-By Javen-CSDN 博客_centos7 修改 mysql 密码</a></p>
<h2 id="linux-安装-mysql"><a href="#linux-安装-mysql" class="headerlink" title="linux 安装 mysql"></a>linux 安装 mysql</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt-get update<br>sudo apt-get install mysql-server<br>sudo mysql_secure_installation<br></code></pre></td></tr></table></figure>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04?comment=53320" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04?comment=53320</a><br>If it occurs error because of broken MySQL package on Ubuntu 16.04. Just do this trick</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Purge all MySQL packages</span><br>sudo apt purge mysql*<br>sudo rm -rf /var/lib/mysql<br>sudo rm -rf /etc/mysql<br><br><span class="hljs-comment"># Reinstall MySQL</span><br>sudo apt install mysql-server mysql-client<br></code></pre></td></tr></table></figure>

<p><strong>centos</strong></p>
<p><a href="https://developer.aliyun.com/article/654596" target="_blank" rel="noopener">CentOS 7 - 安装 MySQL 5.7-阿里云开发者社区</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 添加Mysql5.7仓库</span><br>sudo rpm -ivh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm<br><br><span class="hljs-comment"># 确认Mysql仓库成功添加</span><br>sudo yum repolist all | grep mysql | grep enabled<br><span class="hljs-comment"># 开始安装</span><br>sudo yum -y install mysql-community-server<br><br><span class="hljs-comment"># 启动Mysql</span><br>sudo systemctl start mysqld<br><br><span class="hljs-comment"># 系统启动时自动启动</span><br>sudo systemctl <span class="hljs-built_in">enable</span> mysqld<br><br><span class="hljs-comment"># 查看启动状态</span><br>sudo systemctl status mysqld<br><br><span class="hljs-comment"># CentOS上的root默认密码可以在文件/var/log/mysqld.log找到，通过下面命令可以打印出来</span><br>cat /var/<span class="hljs-built_in">log</span>/mysqld.log | grep -i <span class="hljs-string">'temporary password'</span><br><br><span class="hljs-comment"># 执行下面命令进行安全设置，这个命令会进行设置root密码设置，移除匿名用户，禁止root用户远程连接等</span><br>mysql_secure_installation<br></code></pre></td></tr></table></figure>

<p>解决：conflicts between attempted installs of MariaDB-common</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">yum shell<br>remove mariadb-libs<br></code></pre></td></tr></table></figure>

<p>由于 5.7 版本在安装的时候就设置好了，不需要额外设置，但是 5.6 版本建议从安全角度完善下，运行官方脚本即可</p>
<pre><code>设置 root 密码
禁止 root 账号远程登录
禁止匿名账号（anonymous）登录
删除测试库
是否确认修改</code></pre><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><ul>
<li>端口：3306</li>
</ul>
<h2 id="其它软件"><a href="#其它软件" class="headerlink" title="其它软件"></a>其它软件</h2><ul>
<li>mycli</li>
</ul>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul>
<li>[How To Install MySQL on Ubuntu 16.04](error 1045 access denied for user using password no)</li>
<li><a href="https://stackoverflow.com/questions/10299148/mysql-error-1045-28000-access-denied-for-user-billlocalhost-using-passw" target="_blank" rel="noopener">MySQL ERROR 1045 (28000): Access denied for user ‘bill’@’localhost’ (using password: YES) - Stack Overflow</a></li>
</ul>
<h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建用户</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">'bob'</span>@<span class="hljs-string">'%'</span><br>    <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'password'</span>;<br><br><span class="hljs-comment">-- 授权1</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <br>    <span class="hljs-keyword">ON</span> *.*<br>    <span class="hljs-keyword">TO</span> <span class="hljs-string">'bob'</span>@<span class="hljs-string">'%'</span><br>    <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;<br><br><span class="hljs-comment">-- 授权2</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> databasename.tablename <span class="hljs-keyword">TO</span> <span class="hljs-string">'username'</span>@<span class="hljs-string">'host'</span>;<br><br><span class="hljs-comment">-- 修改密码</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-keyword">FOR</span> <span class="hljs-string">'bob'</span>@<span class="hljs-string">'%'</span> = <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">'bob'</span>);<br><br><span class="hljs-comment">-- 刷新</span><br><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure>

<p><a href="https://dev.mysql.com/doc/refman/8.0/en/creating-accounts.html" target="_blank" rel="noopener">MySQL :: MySQL 8.0 Reference Manual :: 6.2.8 Adding Accounts, Assigning Privileges, and Dropping Accounts</a></p>
<p><a href="https://serverfault.com/questions/186057/mysql-creating-a-user-that-can-connect-from-multiple-hosts" target="_blank" rel="noopener">networking - MySQL: creating a user that can connect from multiple hosts - Server Fault</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">mysql root@120.123.232.2:mysql&gt; GRANT all PRIVILEGES ON *.* to <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span>;<br>(1133, <span class="hljs-string">"Can't find any matching row in the user table"</span>)<br><br>mysql root@120.123.232.2:mysql&gt; GRANT all PRIVILEGES ON *.* to <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span> IDENTIFIED by <span class="hljs-string">'localhost'</span>;<br>Query OK, 0 rows affected<br>Time: 0.002s<br><br>grant all privileges on testDB.* to <span class="hljs-string">'test'</span>@<span class="hljs-string">'1.1.1.1'</span>identified by <span class="hljs-string">'pswd'</span>;<br></code></pre></td></tr></table></figure>

<h2 id="mac-install-mariadb"><a href="#mac-install-mariadb" class="headerlink" title="mac install mariadb"></a>mac install mariadb</h2><ul>
<li><a href="https://mariadb.com/resources/blog/installing-mariadb-10-1-16-on-mac-os-x-with-homebrew/" target="_blank" rel="noopener">Installing MariaDB 10.1.16 on Mac OS X with Homebrew | MariaDB</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">xcode-select –install<br>ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”<br>brew doctor<br><br>brew update<br>brew info mariadb<br>brew install mariadb<br>mysql_install_db<br>mysql.server start<br>mysql_secure_installation<br>mysql -u root -p<br></code></pre></td></tr></table></figure>

<h2 id="mysql-创建数据库-添加用户-用户授权实操方法"><a href="#mysql-创建数据库-添加用户-用户授权实操方法" class="headerlink" title="mysql 创建数据库,添加用户,用户授权实操方法"></a>mysql 创建数据库,添加用户,用户授权实操方法</h2><p><a href="https://www.jb51.net/article/172998.htm" target="_blank" rel="noopener">https://www.jb51.net/article/172998.htm</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建名称为“testdb”数据库，并设定编码集为utf8</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> testdb <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> testdb <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci;<br><br> <span class="hljs-comment">--创建了一个名为：test 密码为：1234 的用户</span><br> <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">'test'</span>@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'1234'</span>;<br> <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">'rebate'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'rebate1234'</span>;<br><span class="hljs-comment">-- 注意：</span><br><span class="hljs-comment">-- 此处的"localhost"，是指该用户只能在本地登录，不能在另外一台机器上远程登录。如果想远程登录的话，将"localhost"改为"%"，表示在任何一台电脑上都可以登录。也可以指定某台机器可以远程登录。</span><br><br><span class="hljs-comment">--查询用户</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> mysql.user;<br><br><span class="hljs-comment">--删除用户“test”</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">test</span>@localhost ;<br><span class="hljs-comment">--若创建的用户允许任何电脑登陆，删除用户如下</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">test</span>@<span class="hljs-string">'%'</span>;<br><br><br><span class="hljs-comment">--方法1，密码实时更新；修改用户“test”的密码为“1122”</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">test</span> =<span class="hljs-keyword">password</span>(<span class="hljs-string">'1122'</span>);<br><span class="hljs-comment">--方法2，需要刷新；修改用户“test”的密码为“1234”</span><br><span class="hljs-keyword">update</span> mysql.user <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>(<span class="hljs-string">'1234'</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">'test'</span><br><span class="hljs-comment">--刷新</span><br><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<br><br><br><span class="hljs-comment">--授予用户test通过外网IP对数据库“testdb”的全部权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> rebate.* <span class="hljs-keyword">to</span> <span class="hljs-string">'test'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'1234'</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> rebate.* <span class="hljs-keyword">to</span> rebate@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'rebate1234'</span>;<br><br><span class="hljs-comment">--刷新权限</span><br><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<br><br><span class="hljs-comment">--授予用户“test”通过外网IP对于该数据库“testdb”中表的创建、修改、删除权限,以及表数据的增删查改权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span>,<span class="hljs-keyword">alter</span>,<span class="hljs-keyword">drop</span>,<span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span>,<span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> testdb.* <span class="hljs-keyword">to</span> <span class="hljs-keyword">test</span>@<span class="hljs-string">'%'</span>;<br><br><span class="hljs-keyword">GRANT</span> process <span class="hljs-keyword">ON</span> . <span class="hljs-keyword">TO</span> <span class="hljs-string">'test'</span>@<span class="hljs-string">'%'</span>;<br><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<br><br><span class="hljs-comment">--查看用户“test”</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">grants</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">test</span>;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">grants</span> <span class="hljs-keyword">for</span> rebate;<br></code></pre></td></tr></table></figure>

<h2 id="简易版本"><a href="#简易版本" class="headerlink" title="简易版本"></a>简易版本</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> db_movie <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">'admin'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123456'</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> db_movie.* <span class="hljs-keyword">to</span> <span class="hljs-string">'admin'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123456'</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> db_movie.* <span class="hljs-keyword">to</span> <span class="hljs-string">'admin'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123456'</span>;<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span>,<span class="hljs-keyword">alter</span>,<span class="hljs-keyword">drop</span>,<span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span>,<span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> db_movie.* <span class="hljs-keyword">to</span> <span class="hljs-string">'admin'</span>@<span class="hljs-string">'%'</span>;<br><span class="hljs-keyword">GRANT</span> process <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'admin'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123456'</span>;<br><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<br><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">grants</span> <span class="hljs-keyword">for</span> db_movie;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 的生命周期</title>
    <url>/ssm/Spring%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h4 id="Spring-的生命周期"><a href="#Spring-的生命周期" class="headerlink" title="Spring 的生命周期"></a>Spring 的生命周期</h4><ol>
<li>实例化（Instanctiation）</li>
<li>属性填充（Populate）</li>
<li>初始化（Initialization）</li>
<li>销毁（Destruction）</li>
</ol>
<blockquote>
<p>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/1b022eef-895d-4f8e-bd1b-a67bd8740a74_20211217114231733_9c8c98.png" alt="img"><br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/d0cd34bf-96d8-4a56-ae66-e41c3bac6c5d_20211216114015327_6687b3.jpg" alt="img"></p>
</blockquote>
<h6 id="1-实例化"><a href="#1-实例化" class="headerlink" title="1. 实例化"></a>1. 实例化</h6><p>判断是否存在方法覆盖，如果有，使用 JDK 的反射机制来实例化。<br>如果没有，使用 CGLib 技术实例化。<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/d4ee5cad-5b5e-440a-8a3f-865cf5f10ab3_20211217114246020_9bdc78.png" alt="img"></p>
<h6 id="2-属性填充"><a href="#2-属性填充" class="headerlink" title="2.属性填充"></a>2.属性填充</h6><p>分为：按名称填充、和按类型填充<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/37667b6c-c43d-48ad-b7ce-e7d3123ed12c_20211216114015366_6bdf8b.png" alt="img"></p>
<h6 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h6><ol>
<li>Aware 相关回调</li>
<li>初始化前置处理</li>
<li>初始化</li>
<li>初始化后置处理</li>
</ol>
<blockquote>
<p>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#initializeBean<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/ca4cb8e0-2c87-4d94-9db6-eaa6f38d4665_20211216114015353_f375f6.png" alt="img"></p>
</blockquote>
<h6 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h6><p>从容器中，移除 beanName<br>调用 DesposableBean.distroy 接口<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/faefd2dc-114c-4dbb-9850-99598310a635_20211217114256213_243b26.png" alt="img"></p>
<h6 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h6><ul>
<li><p>附件 1：Spring 生命周期-创建和初始化.pdf</p>
</li>
<li><p><a href="https://0f9de7f3.wiz06.com/wapp/pages/view/share/s/0fDuvP3SO4QS2Hb3sP2Di0ai1Gi4xr0PNQk-2VJor-2R5iil" target="_blank" rel="noopener">Spring 源码解析</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>锁</title>
    <url>/sql/%E9%94%81/</url>
    <content><![CDATA[<ul>
<li><a href="https://serverfault.com/questions/36260/how-can-i-show-mysql-locks" target="_blank" rel="noopener">How can I show mysql locks? - Server Fault</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">SHOW FULL PROCESSLIST;<br><br>show open tables <span class="hljs-built_in">where</span> In_Use &gt; 0 ;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/ssm/mybatis/</url>
    <content><![CDATA[<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><p><a href="http://www.mybatis.org/spring/factorybean.html" target="_blank" rel="noopener">mybatis-spring – MyBatis-Spring | SqlSessionFactoryBean</a></p>
<blockquote>
<p>In normal MyBatis-Spring usage, you will not need to use SqlSessionFactoryBean or the corresponding SqlSessionFactory directly. Instead, the session factory will be injected into MapperFactoryBeans or other DAOs that extend SqlSessionDaoSupport .</p>
</blockquote>
</li>
<li><p><a href="https://blog.csdn.net/techbirds_bao/article/details/9235547" target="_blank" rel="noopener">Myibatis 和 spring(mvc)的集成 - CSDN 博客</a></p>
</li>
</ul>
<h2 id="nested-exception-is-org-apache-ibatis-reflection-ReflectionException-There-is-no-getter-for-property-named"><a href="#nested-exception-is-org-apache-ibatis-reflection-ReflectionException-There-is-no-getter-for-property-named" class="headerlink" title="nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named"></a>nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named</h2><p>2020-01-02 19:01:21 [WARN] ExceptionHandlerExceptionResolver:194 - Resolved [org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named ‘is_disabled’ in ‘class com.lyloou.flow.model.flow.Flow’]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 错误的</span><br><span class="hljs-meta">@Update</span>(<span class="hljs-string">"insert into flow (day,item,is_disabled,is_archived) values (#&#123;day&#125;,#&#123;item&#125;,#&#123;is_disabled&#125;,#&#123;is_archived&#125;) on duplicate key update"</span> +<br>            <span class="hljs-string">" item=values(item),is_disabled=values(is_disabled),is_archived=values(is_archived)"</span>)<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertOrUpdateFlow</span><span class="hljs-params">(Flow flow)</span></span>;<br><br><span class="hljs-comment">// 正确的</span><br><span class="hljs-meta">@Update</span>(<span class="hljs-string">"insert into flow (day,item,is_disabled,is_archived) values (#&#123;day&#125;,#&#123;item&#125;,#&#123;isDisabled&#125;,#&#123;isArchived&#125;) on duplicate key update"</span> +<br>            <span class="hljs-string">" item=values(item),is_disabled=values(is_disabled),is_archived=values(is_archived)"</span>)<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertOrUpdateFlow</span><span class="hljs-params">(Flow flow)</span></span>;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flow</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> Date gmtCreate;<br><br>    <span class="hljs-keyword">private</span> Date gmtModified;<br><br>    <span class="hljs-keyword">private</span> String day;<br><br>    <span class="hljs-keyword">private</span> String item;<br><br>    <span class="hljs-keyword">private</span> Boolean isArchived;<br><br>    <span class="hljs-keyword">private</span> Boolean isDisabled;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight md"><table><tr><td class="code"><pre><code class="hljs md">2020-01-02 19:01:21 [WARN] ExceptionHandlerExceptionResolver:194 - Resolved [org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'is_disabled' in 'class com.lyloou.flow.model.flow.Flow']<br><br>答案：因为解决的时候用到的是 <span class="hljs-code">`flow.isDisabled`</span> 属性，因为传递的是 <span class="hljs-code">`flow.is_disabled`</span> 所以不行<br></code></pre></td></tr></table></figure>

<h2 id="按照输入-id-顺序来返回数据"><a href="#按照输入-id-顺序来返回数据" class="headerlink" title="按照输入 id 顺序来返回数据"></a>按照输入 id 顺序来返回数据</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryOrderedAuthorByauthorIds"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"BaseResultMap"</span>&gt;</span><br>  select * from video_author a<br>  where a.user_id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"authorIds"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">","</span> <span class="hljs-attr">open</span>=<span class="hljs-string">"("</span> <span class="hljs-attr">close</span>=<span class="hljs-string">")"</span>&gt;</span><br>      #&#123;item&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>  and a.user_status=0<br>  -- 按照输入的顺序来返回排序<br>  order by field(a.user_id,<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"authorIds"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">","</span>&gt;</span><br>      #&#123;item&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>  )<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="自动填充字段"><a href="#自动填充字段" class="headerlink" title="自动填充字段"></a>自动填充字段</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Person.java</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors</span>(chain = <span class="hljs-keyword">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@TableId</span>(type = IdType.AUTO)<br>    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"实体ID"</span>)<br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"创建时间"</span>)<br>    <span class="hljs-meta">@TableField</span>(fill = FieldFill.INSERT)<br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"更新时间"</span>)<br>    <span class="hljs-meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)<br>    <span class="hljs-keyword">private</span> Date updatedTime;<br><br>    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"创建人"</span>)<br>    <span class="hljs-meta">@TableField</span>(value = <span class="hljs-string">"creator"</span>, fill = FieldFill.INSERT)<br>    <span class="hljs-keyword">private</span> String creator;<br><br>    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"修改人"</span>)<br>    <span class="hljs-meta">@TableField</span>(value = <span class="hljs-string">"modifier"</span>, fill = FieldFill.INSERT_UPDATE)<br>    <span class="hljs-keyword">private</span> String modifier;<br>&#125;<br><br><span class="hljs-comment">// MybatisObjectHandler.java</span><br><span class="hljs-comment">// [自动填充功能 | MyBatis-Plus](https://baomidou.com/guide/auto-fill-metainfo.html)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        Integer userId = AuthenticationService.getUserId();<br>        <span class="hljs-keyword">if</span> (userId != <span class="hljs-keyword">null</span>) &#123;<br>            Stream.of(<span class="hljs-string">"createdBy"</span>, <span class="hljs-string">"updatedBy"</span>, <span class="hljs-string">"modifier"</span>, <span class="hljs-string">"creator"</span>)<br>                    .forEach(s -&gt; setFieldValIfNull(s, userId.toString(), metaObject));<br>        &#125;<br><br>        Stream.of(<span class="hljs-string">"createdTime"</span>, <span class="hljs-string">"updatedTime"</span>)<br>                .forEach(s -&gt; setFieldValIfNull(s, <span class="hljs-keyword">new</span> Date(), metaObject));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValIfNull</span><span class="hljs-params">(String field, Object fieldVal, MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Object value = getFieldValByName(field, metaObject);<br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-keyword">null</span>) &#123;<br>            setFieldValByName(field, fieldVal, metaObject);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-comment">//更新时 需要填充字段</span><br>        Stream.of(<span class="hljs-string">"updatedTime"</span>)<br>                .forEach(s -&gt; setFieldValIfNull(s, <span class="hljs-keyword">new</span> Date(), metaObject));<br>        setFieldValByName(<span class="hljs-string">"updatedTime"</span>, <span class="hljs-keyword">new</span> Date(), metaObject);<br>        Integer userId = AuthenticationService.getUserId();<br>        <span class="hljs-keyword">if</span> (userId != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//更新时填充的字段</span><br>            Stream.of(<span class="hljs-string">"updatedBy"</span>, <span class="hljs-string">"modifier"</span>)<br>                    .forEach(s -&gt; setFieldValIfNull(s, userId.toString(), metaObject));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="mybatis-深入理解-一-之-与-区别以及-sql-预编译-SegmentFault-思否"><a href="#mybatis-深入理解-一-之-与-区别以及-sql-预编译-SegmentFault-思否" class="headerlink" title="mybatis 深入理解(一)之 # 与 $ 区别以及 sql 预编译 - SegmentFault 思否"></a><a href="https://segmentfault.com/a/1190000004617028" target="_blank" rel="noopener">mybatis 深入理解(一)之 # 与 $ 区别以及 sql 预编译 - SegmentFault 思否</a></h2><p>mybatis 中使用 sqlMap 进行 sql 查询时，经常需要动态传递参数，例如我们需要根据用户的姓名来筛选用户时，sql 如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = "ruhua";<br></code></pre></td></tr></table></figure>

<p>上述 sql 中，我们希望 name 后的参数 “ruhua” 是动态可变的，即不同的时刻根据不同的姓名来查询用户。在 sqlMap 的 xml 文件中使用如下的 sql 可以实现动态传递参数 name：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = #&#123;<span class="hljs-type">name</span>&#125;;<br></code></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">'$&#123;name&#125;'</span>;<br></code></pre></td></tr></table></figure>

<p>对于上述这种查询情况来说，使用 #{ } 和 ${ } 的结果是相同的，但是在某些情况下，我们只能使用二者其一。</p>
<h2 id="‘-’-与-‘-’"><a href="#‘-’-与-‘-’" class="headerlink" title="‘#’ 与 ‘$’"></a>‘#’ 与 ‘$’</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><strong>动态 SQL</strong> 是 mybatis 的强大特性之一，也是它优于其他 ORM 框架的一个重要原因。mybatis 在对 sql 语句进行预编译之前，会对 sql 进行动态解析，解析为一个 BoundSql 对象，也是在此处对动态 SQL 进行处理的。</p>
<p>在动态 SQL 解析阶段， #{ } 和 ${ } 会有不同的表现：</p>
<blockquote>
<p><strong>#{ } 解析为一个 JDBC 预编译语句（prepared statement）的参数标记符。</strong></p>
</blockquote>
<p>例如，sqlMap 中如下的 sql 语句</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = #&#123;<span class="hljs-type">name</span>&#125;;<br></code></pre></td></tr></table></figure>

<p>解析为：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = ?;<br></code></pre></td></tr></table></figure>

<p>一个 #{ } 被解析为一个参数占位符 <code>?</code> 。</p>
<p>而，</p>
<blockquote>
<p><strong>${ } 仅仅为一个纯碎的 string 替换，在动态 SQL 解析阶段将会进行变量替换</strong></p>
</blockquote>
<p>例如，sqlMap 中如下的 sql</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">'$&#123;name&#125;'</span>;<br></code></pre></td></tr></table></figure>

<p>当我们传递的参数为 “ruhua” 时，上述 sql 的解析为：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = "ruhua";<br></code></pre></td></tr></table></figure>

<p>预编译之前的 SQL 语句已经不包含变量 name 了。</p>
<p>综上所得， ${ } 的变量的替换阶段是在动态 SQL 解析阶段，而 #{ }的变量的替换是在 DBMS 中。</p>
<h3 id="用法-tips"><a href="#用法-tips" class="headerlink" title="用法 tips"></a>用法 tips</h3><blockquote>
<p>1、能使用 #{ } 的地方就用 #{ }</p>
</blockquote>
<p>首先这是为了性能考虑的，相同的预编译 sql 可以重复利用。</p>
<p>其次，<strong>${ } 在预编译之前已经被变量替换了，这会存在 sql 注入问题</strong>。例如，如下的 sql，</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> $&#123;tableName&#125; <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = #&#123;<span class="hljs-type">name</span>&#125;<br></code></pre></td></tr></table></figure>

<p>假如，我们的参数 tableName 为 <code>user; delete user; --</code>，那么 SQL 动态解析阶段之后，预编译之前的 sql 将变为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>; <span class="hljs-keyword">delete</span> <span class="hljs-keyword">user</span>; <span class="hljs-comment">-- where name = ?;</span><br></code></pre></td></tr></table></figure>

<p><code>--</code> 之后的语句将作为注释，不起作用，因此本来的一条查询语句偷偷的包含了一个删除表数据的 SQL！</p>
<blockquote>
<p>2、表名作为变量时，必须使用 ${ }</p>
</blockquote>
<p>这是因为，表名是字符串，使用 sql 占位符替换字符串时会带上单引号 <code>&#39;&#39;</code>，这会导致 sql 语法错误，例如：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> #&#123;tableName&#125; <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = #&#123;<span class="hljs-type">name</span>&#125;;<br></code></pre></td></tr></table></figure>

<p>预编译之后的 sql 变为：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> ? <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = ?;<br></code></pre></td></tr></table></figure>

<p>假设我们传入的参数为 tableName = “user” , name = “ruhua”，那么在占位符进行变量替换后，sql 语句变为</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">'user'</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">'ruhua'</span>;<br></code></pre></td></tr></table></figure>

<p>上述 sql 语句是存在语法错误的，表名不能加单引号 <code>&#39;&#39;</code>（注意，反引号 ``是可以的）。</p>
<h2 id="sql-预编译"><a href="#sql-预编译" class="headerlink" title="sql 预编译"></a>sql 预编译</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p>sql 预编译指的是数据库驱动在发送 sql 语句和参数给 DBMS 之前对 sql 语句进行编译，这样 DBMS 执行 sql 时，就不需要重新编译。</p>
</blockquote>
<h3 id="为什么需要预编译"><a href="#为什么需要预编译" class="headerlink" title="为什么需要预编译"></a>为什么需要预编译</h3><p>JDBC 中使用对象 PreparedStatement 来抽象预编译语句，使用预编译</p>
<ol>
<li><strong>预编译阶段可以优化 sql 的执行</strong>。<br>预编译之后的 sql 多数情况下可以直接执行，DBMS 不需要再次编译，越复杂的 sql，编译的复杂度将越大，预编译阶段可以合并多次操作为一个操作。</li>
<li><strong>预编译语句对象可以重复利用</strong>。<br>把一个 sql 预编译后产生的 PreparedStatement 对象缓存下来，下次对于同一个 sql，可以直接使用这个缓存的 PreparedState 对象。</li>
</ol>
<p>mybatis 默认情况下，将对所有的 sql 进行预编译。</p>
<h3 id="mysql-预编译源码解析"><a href="#mysql-预编译源码解析" class="headerlink" title="mysql 预编译源码解析"></a>mysql 预编译源码解析</h3><p>mysql 的预编译源码在 <code>com.mysql.jdbc.ConnectionImpl</code> 类中，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> synchronized java.sql.PreparedStatement prepareStatement(String sql,<br>            int resultSetType, int resultSetConcurrency) throws SQLException &#123;<br>        checkClosed();<br><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> Create warnings if can't create results of the given</span><br>        <span class="hljs-comment">// type or concurrency</span><br>        <span class="hljs-comment">//</span><br>        PreparedStatement pStmt = <span class="hljs-literal">null</span>;<br><br>        boolean canServerPrepare = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">// 不同的数据库系统对sql进行语法转换</span><br>        String nativeSql = getProcessEscapeCodesForPrepStmts() ? nativeSQL(sql): sql;<br><br>        <span class="hljs-comment">// 判断是否可以进行服务器端预编译</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.useServerPreparedStmts &amp;&amp; getEmulateUnsupportedPstmts()) &#123;<br>            canServerPrepare = canHandleAsServerPreparedStatement(nativeSql);<br>        &#125;<br><br>        <span class="hljs-comment">// 如果可以进行服务器端预编译</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.useServerPreparedStmts &amp;&amp; canServerPrepare) &#123;<br><br>            <span class="hljs-comment">// 是否缓存了PreparedStatement对象</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getCachePreparedStatements()) &#123;<br>                synchronized (<span class="hljs-keyword">this</span>.serverSideStatementCache) &#123;<br><br>                    <span class="hljs-comment">// 从缓存中获取缓存的PreparedStatement对象</span><br>                    pStmt = (com.mysql.jdbc.ServerPreparedStatement)<span class="hljs-keyword">this</span>.serverSideStatementCache.remove(sql);<br><br>                    <span class="hljs-keyword">if</span> (pStmt != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">// 缓存中存在对象时对原 sqlStatement 进行参数清空等</span><br>                        ((com.mysql.jdbc.ServerPreparedStatement)pStmt).setClosed(<span class="hljs-literal">false</span>);<br>                        pStmt.clearParameters();<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (pStmt == <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-comment">// 如果缓存中不存在，则调用服务器端(数据库)进行预编译</span><br>                            pStmt = ServerPreparedStatement.getInstance(getLoadBalanceSafeProxy(), nativeSql,<br>                                    <span class="hljs-keyword">this</span>.database, resultSetType, resultSetConcurrency);<br>                            <span class="hljs-keyword">if</span> (sql.length() &lt; getPreparedStatementCacheSqlLimit()) &#123;<br>                                ((com.mysql.jdbc.ServerPreparedStatement)pStmt).isCached = <span class="hljs-literal">true</span>;<br>                            &#125;<br><br>                            <span class="hljs-comment">// 设置返回类型以及并发类型</span><br>                            pStmt.setResultSetType(resultSetType);<br>                            pStmt.setResultSetConcurrency(resultSetConcurrency);<br>                        &#125; <span class="hljs-keyword">catch</span> (SQLException sqlEx) &#123;<br>                            <span class="hljs-comment">// Punt, if necessary</span><br>                            <span class="hljs-keyword">if</span> (getEmulateUnsupportedPstmts()) &#123;<br>                                pStmt = (PreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="hljs-literal">false</span>);<br><br>                                <span class="hljs-keyword">if</span> (sql.length() &lt; getPreparedStatementCacheSqlLimit()) &#123;<br>                                    <span class="hljs-keyword">this</span>.serverSideStatementCheckCache.put(sql, <span class="hljs-built_in">Boolean</span>.FALSE);<br>                                &#125;<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-keyword">throw</span> sqlEx;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-comment">// 未启用缓存时，直接调用服务器端进行预编译</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    pStmt = ServerPreparedStatement.getInstance(getLoadBalanceSafeProxy(), nativeSql,<br>                            <span class="hljs-keyword">this</span>.database, resultSetType, resultSetConcurrency);<br><br>                    pStmt.setResultSetType(resultSetType);<br>                    pStmt.setResultSetConcurrency(resultSetConcurrency);<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException sqlEx) &#123;<br>                    <span class="hljs-comment">// Punt, if necessary</span><br>                    <span class="hljs-keyword">if</span> (getEmulateUnsupportedPstmts()) &#123;<br>                        pStmt = (PreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="hljs-literal">false</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">throw</span> sqlEx;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 不支持服务器端预编译时调用客户端预编译（不需要数据库 connection ）</span><br>            pStmt = (PreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="hljs-literal">false</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> pStmt;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>流程图如下所示：</p>
<p><img src="https://segmentfault.com/img/bVtwuY" alt="图片描述"></p>
<h2 id="mybatis-之-sql-动态解析以及预编译源码"><a href="#mybatis-之-sql-动态解析以及预编译源码" class="headerlink" title="mybatis 之 sql 动态解析以及预编译源码"></a>mybatis 之 sql 动态解析以及预编译源码</h2><h3 id="mybatis-sql-动态解析"><a href="#mybatis-sql-动态解析" class="headerlink" title="mybatis sql 动态解析"></a>mybatis sql 动态解析</h3><p>mybatis 在调用 connection 进行 sql 预编译之前，会对 sql 语句进行动态解析，动态解析主要包含如下的功能：</p>
<ul>
<li>占位符的处理</li>
<li>动态 sql 的处理</li>
<li>参数类型校验</li>
</ul>
<p>mybatis 强大的动态 SQL 功能的具体实现就在此。动态解析涉及的东西太多，以后再讨论。</p>
<h2 id="批量处理示例（修复歌手名称）"><a href="#批量处理示例（修复歌手名称）" class="headerlink" title="批量处理示例（修复歌手名称）"></a>批量处理示例（修复歌手名称）</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fixSongSingleName</span><span class="hljs-params">()</span> </span>&#123;<br>     <span class="hljs-comment">// 从0开始</span><br>     <span class="hljs-keyword">int</span> id = <span class="hljs-number">0</span>;<br>     <span class="hljs-comment">// 每次查询100条</span><br>     <span class="hljs-keyword">int</span> limit = <span class="hljs-number">100</span>;<br>     List&lt;CcMusicInfoEntity&gt; list;<br>     <span class="hljs-keyword">do</span> &#123;<br>         list = ccMusicInfoMapper.queryListByLastIdWithLimit(id, limit);<br>         <span class="hljs-keyword">if</span> (CollUtil.isEmpty(list)) &#123;<br>             <span class="hljs-keyword">break</span>;<br>         &#125;<br><br>         <span class="hljs-comment">// 记录下一次的开始的id</span><br>         id = list.get(list.size() - <span class="hljs-number">1</span>).getId();<br><br>         <span class="hljs-comment">// 找到需要更新的实体</span><br>         <span class="hljs-keyword">final</span> List&lt;CcMusicInfoEntity&gt; needUpdateList = list.stream()<br>                 .filter(Objects::nonNull)<br>                 .filter(it -&gt; SingerNameUtil.isContainCombinedSeparator(it.getSingerName()))<br>                 .collect(Collectors.toList());<br><br>         <span class="hljs-comment">// 在db中更新实体</span><br>         <span class="hljs-keyword">if</span> (CollUtil.isNotEmpty(needUpdateList)) &#123;<br>             <span class="hljs-keyword">final</span> List&lt;String&gt; originSingerNameList = needUpdateList.stream().map(CcMusicInfoEntity::getSingerName).collect(Collectors.toList());<br>             updateSongSingerInfo(needUpdateList);<br><br>             Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(needUpdateList.size());<br>             <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; needUpdateList.size(); i++) &#123;<br>                 <span class="hljs-keyword">final</span> CcMusicInfoEntity entity = needUpdateList.get(i);<br>                 <span class="hljs-keyword">final</span> String originSingerName = originSingerNameList.get(i);<br>                 map.put(entity.getId(), StrUtil.format(<span class="hljs-string">"更新前:&#123;&#125;，更新后:&#123;&#125;"</span>, originSingerName, entity.getSingerName()));<br>             &#125;<br>             logger.info(StrUtil.format(<span class="hljs-string">"fixSongSingleName 本次更新数量，&#123;&#125;，修改数据：&#123;&#125;"</span>, needUpdateList.size(), map));<br>         &#125;<br>         logger.info(<span class="hljs-string">"fixSongSingleName: 本次更新到ID，"</span> + id);<br>         <span class="hljs-comment">// break;</span><br>     &#125; <span class="hljs-keyword">while</span> (CollUtil.isNotEmpty(list));<br>     logger.info(<span class="hljs-string">"fixSongSingleName: 本次更新完成"</span>);<br> &#125;<br><br> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateSongSingerInfo</span><span class="hljs-params">(List&lt;MusicInfoEntity&gt; needUpdateList)</span> </span>&#123;<br>     List&lt;MusicInfoEntity&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(needUpdateList.size());<br>     <span class="hljs-keyword">for</span> (MusicInfoEntity entity : needUpdateList) &#123;<br>         <span class="hljs-keyword">final</span> String originSingerName = entity.getSingerName();<br>         <span class="hljs-keyword">final</span> String calculateSingerName = SingerNameUtil.calculate(originSingerName);<br><br>         <span class="hljs-comment">// 一样的情况，不用处理</span><br>         <span class="hljs-keyword">if</span> (Objects.equals(originSingerName, calculateSingerName)) &#123;<br>             <span class="hljs-keyword">continue</span>;<br>         &#125;<br>         MusicInfoEntity newCcMusicInfoEntity = <span class="hljs-keyword">new</span> MusicInfoEntity();<br>         newCcMusicInfoEntity.setId(entity.getId());<br>         newCcMusicInfoEntity.setLastUpdateDate(<span class="hljs-keyword">new</span> Date());<br>         newCcMusicInfoEntity.setSingerName(calculateSingerName);<br>         list.add(newCcMusicInfoEntity);<br>     &#125;<br>     <span class="hljs-keyword">if</span> (CollUtil.isNotEmpty(list)) &#123;<br>         musicInfoMapper.updateByList(list);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure>

<p><strong>批量查询：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// MusicInfoMapper.java</span><br><span class="hljs-function">List&lt;MusicInfoEntity&gt; <span class="hljs-title">queryListByLastIdWithLimit</span><span class="hljs-params">(@Param(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id, @<span class="hljs-title">Param</span><span class="hljs-params">(<span class="hljs-string">"limit"</span>)</span> <span class="hljs-keyword">int</span> limit)</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateByList</span><span class="hljs-params">(List&lt;MusicInfoEntity&gt; list)</span></span>;<br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MusicInfoMapper.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryListByLastIdWithLimit"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"BaseResultMap"</span>&gt;</span><br>    SELECT<br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">"Base_Column_List"</span> /&gt;</span><br>    FROM t_music_info a<br>    where a.id &gt; #&#123;id&#125; limit #&#123;limit&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>批量插入：</strong></p>
<p><a href="https://blog.csdn.net/chijiaodaxie/article/details/50210337" target="_blank" rel="noopener">mysql 一条语句 update 多条记录_chijiaodaxie 的博客-CSDN 博客_mysql update 多条数据</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    原文链接：https://blog.csdn.net/u013506626/article/details/121229892 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateByList"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"object"</span>&gt;</span><br>    update music_info<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">"set"</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">","</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">"singer_name=case"</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">"end,"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"list"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"index"</span>&gt;</span><br>                WHEN id=#&#123;item.id&#125; THEN #&#123;item.singerName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">"last_update_date=case"</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">"end,"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"list"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"index"</span>&gt;</span><br>                WHEN id=#&#123;item.id&#125; THEN #&#123;item.lastUpdateDate&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><br>    WHERE id IN<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"list"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">open</span>=<span class="hljs-string">"("</span> <span class="hljs-attr">close</span>=<span class="hljs-string">")"</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">","</span>&gt;</span><br>        #&#123;item.id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要深入探究了 mybatis 对 #{ } 和 ${ }的不同处理方式，并了解了 sql 预编译。</p>
<h2 id="Mybatis-Mapper-xml-继承机制-SegmentFault-思否"><a href="#Mybatis-Mapper-xml-继承机制-SegmentFault-思否" class="headerlink" title="Mybatis Mapper.xml 继承机制 - SegmentFault 思否"></a><a href="https://segmentfault.com/a/1190000012470056" target="_blank" rel="noopener">Mybatis Mapper.xml 继承机制 - SegmentFault 思否</a></h2><h2 id="mybatis-中大于等于小于等于的写法"><a href="#mybatis-中大于等于小于等于的写法" class="headerlink" title="mybatis 中大于等于小于等于的写法"></a><a href="https://blog.csdn.net/xuanzhangran/article/details/60329357" target="_blank" rel="noopener">mybatis 中大于等于小于等于的写法</a></h2><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">第一种写法（1）：<br><br>原符号       &lt;        &lt;=      &gt;       &gt;=       &amp;        '        "<br>替换符号    &amp;lt;    &amp;lt;=   &amp;gt;    &amp;gt;=   &amp;amp;   &amp;apos;  &amp;quot;<br>例如：sql如下：<br>create_date_time &amp;gt;= #&#123;startTime&#125; and  create_date_time &amp;lt;= #&#123;endTime&#125;<br><br>第二种写法（2）：<br>大于等于<br>&lt;![CDATA[ &gt;= ]]&gt;<br>小于等于<br>&lt;![CDATA[ &lt;= ]]&gt;<br>例如：sql如下：<br>create_date_time &lt;![CDATA[ &gt;= ]]&gt; #&#123;startTime&#125; and  create_date_time &lt;![CDATA[ &lt;= ]]&gt; #&#123;endTime&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>sql</tag>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud</title>
    <url>/ssm/spring-cloud/</url>
    <content><![CDATA[<h2 id="spring-cloud-和-spring-boot-版本不对应时，会无法启动"><a href="#spring-cloud-和-spring-boot-版本不对应时，会无法启动" class="headerlink" title="spring cloud 和 spring boot 版本不对应时，会无法启动"></a>spring cloud 和 spring boot 版本不对应时，会无法启动</h2><figure class="highlight roboconf"><table><tr><td class="code"><pre><code class="hljs roboconf">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat<br>    at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:156) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]<br>    at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:140) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at com.eureka.EurekaServerApplication.main(EurekaServerApplication.java:21) [classes/:na]<br>Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat<br>    at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.&lt;init&gt;(TomcatWebServer.java:88) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:438) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:191) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:180) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:153) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]<br>    ... 7 common frames omitted<br>Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'traceFilterRegistration' defined in class path resource [org/springframework/cloud/netflix/eureka/server/EurekaServerAutoConfiguration.class]: Unsatisfied dependency expressed through method 'traceFilterRegistration' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'javax.servlet.Filter' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: &#123;@<span class="hljs-attribute">org.springframework.beans.factory.annotation.Qualifier(value=httpTraceFilter)&#125;</span><br><span class="hljs-attribute">    at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java</span>:787) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.ConstructorResolver</span><span class="hljs-variable">.instantiateUsingFactoryMethod</span>(ConstructorResolver<span class="hljs-variable">.java</span>:528) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.AbstractAutowireCapableBeanFactory</span><span class="hljs-variable">.instantiateUsingFactoryMethod</span>(AbstractAutowireCapableBeanFactory<span class="hljs-variable">.java</span>:1338) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.AbstractAutowireCapableBeanFactory</span><span class="hljs-variable">.createBeanInstance</span>(AbstractAutowireCapableBeanFactory<span class="hljs-variable">.java</span>:1177) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.AbstractAutowireCapableBeanFactory</span><span class="hljs-variable">.doCreateBean</span>(AbstractAutowireCapableBeanFactory<span class="hljs-variable">.java</span>:557) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.AbstractAutowireCapableBeanFactory</span><span class="hljs-variable">.createBean</span>(AbstractAutowireCapableBeanFactory<span class="hljs-variable">.java</span>:517) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.AbstractBeanFactory</span><span class="hljs-variable">.lambda</span>$doGetBean$0(AbstractBeanFactory<span class="hljs-variable">.java</span>:323) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.AbstractBeanFactory</span>$$Lambda$171/204684384<span class="hljs-variable">.getObject</span>(Unknown Source) ~[na:na]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.DefaultSingletonBeanRegistry</span><span class="hljs-variable">.getSingleton</span>(DefaultSingletonBeanRegistry<span class="hljs-variable">.java</span>:222) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.AbstractBeanFactory</span><span class="hljs-variable">.doGetBean</span>(AbstractBeanFactory<span class="hljs-variable">.java</span>:321) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.AbstractBeanFactory</span><span class="hljs-variable">.getBean</span>(AbstractBeanFactory<span class="hljs-variable">.java</span>:207) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.web</span><span class="hljs-variable">.servlet</span><span class="hljs-variable">.ServletContextInitializerBeans</span><span class="hljs-variable">.getOrderedBeansOfType</span>(ServletContextInitializerBeans<span class="hljs-variable">.java</span>:211) ~[spring-boot-2.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:2.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.web</span><span class="hljs-variable">.servlet</span><span class="hljs-variable">.ServletContextInitializerBeans</span><span class="hljs-variable">.getOrderedBeansOfType</span>(ServletContextInitializerBeans<span class="hljs-variable">.java</span>:202) ~[spring-boot-2.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:2.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.web</span><span class="hljs-variable">.servlet</span><span class="hljs-variable">.ServletContextInitializerBeans</span><span class="hljs-variable">.addServletContextInitializerBeans</span>(ServletContextInitializerBeans<span class="hljs-variable">.java</span>:96) ~[spring-boot-2.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:2.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.web</span><span class="hljs-variable">.servlet</span><span class="hljs-variable">.ServletContextInitializerBeans</span>.&lt;init&gt;(ServletContextInitializerBeans<span class="hljs-variable">.java</span>:85) ~[spring-boot-2.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:2.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.web</span><span class="hljs-variable">.servlet</span><span class="hljs-variable">.context</span><span class="hljs-variable">.ServletWebServerApplicationContext</span><span class="hljs-variable">.getServletContextInitializerBeans</span>(ServletWebServerApplicationContext<span class="hljs-variable">.java</span>:253) ~[spring-boot-2.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:2.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.web</span><span class="hljs-variable">.servlet</span><span class="hljs-variable">.context</span><span class="hljs-variable">.ServletWebServerApplicationContext</span><span class="hljs-variable">.selfInitialize</span>(ServletWebServerApplicationContext<span class="hljs-variable">.java</span>:227) ~[spring-boot-2.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:2.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.web</span><span class="hljs-variable">.servlet</span><span class="hljs-variable">.context</span><span class="hljs-variable">.ServletWebServerApplicationContext</span>$$Lambda$386/305651902<span class="hljs-variable">.onStartup</span>(Unknown Source) ~[na:na]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.web</span><span class="hljs-variable">.embedded</span><span class="hljs-variable">.tomcat</span><span class="hljs-variable">.TomcatStarter</span><span class="hljs-variable">.onStartup</span>(TomcatStarter<span class="hljs-variable">.java</span>:53) ~[spring-boot-2.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:2.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.StandardContext</span><span class="hljs-variable">.startInternal</span>(StandardContext<span class="hljs-variable">.java</span>:5135) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.util</span><span class="hljs-variable">.LifecycleBase</span><span class="hljs-variable">.start</span>(LifecycleBase<span class="hljs-variable">.java</span>:183) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.ContainerBase</span>$StartChild<span class="hljs-variable">.call</span>(ContainerBase<span class="hljs-variable">.java</span>:1384) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.ContainerBase</span>$StartChild<span class="hljs-variable">.call</span>(ContainerBase<span class="hljs-variable">.java</span>:1374) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at java<span class="hljs-variable">.util</span><span class="hljs-variable">.concurrent</span><span class="hljs-variable">.FutureTask</span><span class="hljs-variable">.run</span>(FutureTask<span class="hljs-variable">.java</span>:266) ~[na:1.8.0_25]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.tomcat</span><span class="hljs-variable">.util</span><span class="hljs-variable">.threads</span><span class="hljs-variable">.InlineExecutorService</span><span class="hljs-variable">.execute</span>(InlineExecutorService<span class="hljs-variable">.java</span>:75) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at java<span class="hljs-variable">.util</span><span class="hljs-variable">.concurrent</span><span class="hljs-variable">.AbstractExecutorService</span><span class="hljs-variable">.submit</span>(AbstractExecutorService<span class="hljs-variable">.java</span>:134) ~[na:1.8.0_25]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.ContainerBase</span><span class="hljs-variable">.startInternal</span>(ContainerBase<span class="hljs-variable">.java</span>:909) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.StandardHost</span><span class="hljs-variable">.startInternal</span>(StandardHost<span class="hljs-variable">.java</span>:841) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.util</span><span class="hljs-variable">.LifecycleBase</span><span class="hljs-variable">.start</span>(LifecycleBase<span class="hljs-variable">.java</span>:183) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.ContainerBase</span>$StartChild<span class="hljs-variable">.call</span>(ContainerBase<span class="hljs-variable">.java</span>:1384) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.ContainerBase</span>$StartChild<span class="hljs-variable">.call</span>(ContainerBase<span class="hljs-variable">.java</span>:1374) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at java<span class="hljs-variable">.util</span><span class="hljs-variable">.concurrent</span><span class="hljs-variable">.FutureTask</span><span class="hljs-variable">.run</span>(FutureTask<span class="hljs-variable">.java</span>:266) ~[na:1.8.0_25]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.tomcat</span><span class="hljs-variable">.util</span><span class="hljs-variable">.threads</span><span class="hljs-variable">.InlineExecutorService</span><span class="hljs-variable">.execute</span>(InlineExecutorService<span class="hljs-variable">.java</span>:75) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at java<span class="hljs-variable">.util</span><span class="hljs-variable">.concurrent</span><span class="hljs-variable">.AbstractExecutorService</span><span class="hljs-variable">.submit</span>(AbstractExecutorService<span class="hljs-variable">.java</span>:134) ~[na:1.8.0_25]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.ContainerBase</span><span class="hljs-variable">.startInternal</span>(ContainerBase<span class="hljs-variable">.java</span>:909) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.StandardEngine</span><span class="hljs-variable">.startInternal</span>(StandardEngine<span class="hljs-variable">.java</span>:262) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.util</span><span class="hljs-variable">.LifecycleBase</span><span class="hljs-variable">.start</span>(LifecycleBase<span class="hljs-variable">.java</span>:183) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.StandardService</span><span class="hljs-variable">.startInternal</span>(StandardService<span class="hljs-variable">.java</span>:421) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.util</span><span class="hljs-variable">.LifecycleBase</span><span class="hljs-variable">.start</span>(LifecycleBase<span class="hljs-variable">.java</span>:183) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.StandardServer</span><span class="hljs-variable">.startInternal</span>(StandardServer<span class="hljs-variable">.java</span>:930) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.util</span><span class="hljs-variable">.LifecycleBase</span><span class="hljs-variable">.start</span>(LifecycleBase<span class="hljs-variable">.java</span>:183) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.startup</span><span class="hljs-variable">.Tomcat</span><span class="hljs-variable">.start</span>(Tomcat<span class="hljs-variable">.java</span>:459) ~[tomcat-embed-core-9.0.27<span class="hljs-variable">.jar</span>:9.0.27]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.web</span><span class="hljs-variable">.embedded</span><span class="hljs-variable">.tomcat</span><span class="hljs-variable">.TomcatWebServer</span><span class="hljs-variable">.initialize</span>(TomcatWebServer<span class="hljs-variable">.java</span>:107) ~[spring-boot-2.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:2.2.1<span class="hljs-variable">.RELEASE</span>]<br>    ... 12 common frames omitted<br>Caused by: org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.NoSuchBeanDefinitionException</span>: No qualifying bean of type 'javax<span class="hljs-variable">.servlet</span><span class="hljs-variable">.Filter</span>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: &#123;@org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.annotation</span><span class="hljs-variable">.Qualifier</span>(value=httpTraceFilter)&#125;<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.DefaultListableBeanFactory</span><span class="hljs-variable">.raiseNoMatchingBeanFound</span>(DefaultListableBeanFactory<span class="hljs-variable">.java</span>:1695) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.DefaultListableBeanFactory</span><span class="hljs-variable">.doResolveDependency</span>(DefaultListableBeanFactory<span class="hljs-variable">.java</span>:1253) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.DefaultListableBeanFactory</span><span class="hljs-variable">.resolveDependency</span>(DefaultListableBeanFactory<span class="hljs-variable">.java</span>:1207) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.ConstructorResolver</span><span class="hljs-variable">.resolveAutowiredArgument</span>(ConstructorResolver<span class="hljs-variable">.java</span>:874) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    at org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.beans</span><span class="hljs-variable">.factory</span><span class="hljs-variable">.support</span><span class="hljs-variable">.ConstructorResolver</span><span class="hljs-variable">.createArgumentArray</span>(ConstructorResolver<span class="hljs-variable">.java</span>:778) ~[spring-beans-5.2.1<span class="hljs-variable">.RELEASE</span><span class="hljs-variable">.jar</span>:5.2.1<span class="hljs-variable">.RELEASE</span>]<br>    ... 54 common frames omitted<br></code></pre></td></tr></table></figure>

<p>查看 spring 官方对应关系和官方文档</p>
<p>spring 官方对应关系：<a href="https://start.spring.io/actuator/info" target="_blank" rel="noopener">https://start.spring.io/actuator/info</a></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">"Finchley.M2"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.0.M3 and &lt;2.0.0.M5"</span>,<br><span class="hljs-string">"Finchley.M3"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.0.M5 and &lt;=2.0.0.M5"</span>,<br><span class="hljs-string">"Finchley.M4"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.0.M6 and &lt;=2.0.0.M6"</span>,<br><span class="hljs-string">"Finchley.M5"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.0.M7 and &lt;=2.0.0.M7"</span>,<br><span class="hljs-string">"Finchley.M6"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.0.RC1 and &lt;=2.0.0.RC1"</span>,<br><span class="hljs-string">"Finchley.M7"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.0.RC2 and &lt;=2.0.0.RC2"</span>,<br><span class="hljs-string">"Finchley.M9"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.0.RELEASE and &lt;=2.0.0.RELEASE"</span>,<br><span class="hljs-string">"Finchley.RC1"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.1.RELEASE and &lt;2.0.2.RELEASE"</span>,<br><span class="hljs-string">"Finchley.RC2"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.2.RELEASE and &lt;2.0.3.RELEASE"</span>,<br><span class="hljs-string">"Finchley.SR4"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.3.RELEASE and &lt;2.0.999.BUILD-SNAPSHOT"</span>,<br><span class="hljs-string">"Finchley.BUILD-SNAPSHOT"</span>: <span class="hljs-string">"Spring Boot &gt;=2.0.999.BUILD-SNAPSHOT and &lt;2.1.0.M3"</span>,<br><span class="hljs-string">"Greenwich.M1"</span>: <span class="hljs-string">"Spring Boot &gt;=2.1.0.M3 and &lt;2.1.0.RELEASE"</span>,<br><span class="hljs-string">"Greenwich.SR6"</span>: <span class="hljs-string">"Spring Boot &gt;=2.1.0.RELEASE and &lt;2.1.16.BUILD-SNAPSHOT"</span>,<br><span class="hljs-string">"Greenwich.BUILD-SNAPSHOT"</span>: <span class="hljs-string">"Spring Boot &gt;=2.1.16.BUILD-SNAPSHOT and &lt;2.2.0.M4"</span>,<br><span class="hljs-string">"Hoxton.SR6"</span>: <span class="hljs-string">"Spring Boot &gt;=2.2.0.M4 and &lt;2.3.2.BUILD-SNAPSHOT"</span>,<br><span class="hljs-string">"Hoxton.BUILD-SNAPSHOT"</span>: <span class="hljs-string">"Spring Boot &gt;=2.3.2.BUILD-SNAPSHOT and &lt;2.4.0.M1"</span>,<br><span class="hljs-string">"2020.0.0-SNAPSHOT"</span>: <span class="hljs-string">"Spring Boot &gt;=2.4.0.M1"</span><br></code></pre></td></tr></table></figure>

<p>官方文档：<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud</a></p>
<ul>
<li><a href="https://www.cnblogs.com/koudaiyoutang/p/11995137.html" target="_blank" rel="noopener">springboot 和 springcloud 版本冲突问题 - Alice 口袋有糖 - 博客园</a></li>
</ul>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Mvc</title>
    <url>/ssm/spring-mvc/</url>
    <content><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/.io//mvc_flow.png" alt="mvc 流程"></p>
<h2 id="处理器是如何-JSON-转换成-Java-对象"><a href="#处理器是如何-JSON-转换成-Java-对象" class="headerlink" title="处理器是如何 JSON 转换成 Java 对象"></a>处理器是如何 JSON 转换成 Java 对象</h2><p>使用的是 HttpMessageConverter 机制<br>在这个接口里面有 5 个方法，canRead, canWrite, write, read, getSupportMediaTypes<br>在发起 http 请求的时候，先读取 HTTP 请求的请求体；<br>然后在 HttpMessageConverter 众多实例中（由 Spring MVC 组织成一条链存放）根据 canRead 方法来判断实例能否转换，<br>这样就找到了 MappingJackson2HttpMessageConverter 实例了，<br>接着执行 read 方法，将请求体转换成 Java 对象。<br><a href="https://m.imooc.com/collector/read/62" target="_blank" rel="noopener">https://m.imooc.com/collector/read/62</a></p>
<h2 id="IDEA-配置-tomcat"><a href="#IDEA-配置-tomcat" class="headerlink" title="IDEA 配置 tomcat"></a>IDEA 配置 tomcat</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/202203021514358.png" alt="202203021514358"><br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/202203021515228.png" alt="202203021515228"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://iamsaurabh.wordpress.com/2017/02/11/configure-a-spring-mvc-project-with-intellij-idea/" target="_blank" rel="noopener">Configure a Spring MVC Project with Intellij IDEA | In My Own Write</a></li>
<li><a href="https://www.jianshu.com/p/bae8f30300c5" target="_blank" rel="noopener">Maven + Spring mvc 配置 webApp</a></li>
<li><a href="https://github.com/lyloou/spring-mvc-simple-demo" target="_blank" rel="noopener">spring-mvc-simple-demo</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础</title>
    <url>/ssm/spring/</url>
    <content><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><figure class="highlight oxygene"><table><tr><td class="code"><pre><code class="hljs oxygene">Bean的完整生命周期经历了各种方法调用，这些方法可以划分为以下几类：<br><br><span class="hljs-number">1</span>、Bean自身的方法　　：　　这个包括了Bean本身调用的方法和通过配置文件中&lt;bean&gt;的init-<span class="hljs-function"><span class="hljs-keyword">method</span>和<span class="hljs-title">destroy</span>-<span class="hljs-title">method</span>指定的方法</span><br><span class="hljs-function"></span><br><span class="hljs-function">2、<span class="hljs-title">Bean</span>级生命周期接口方法　　：　　这个包括了<span class="hljs-title">BeanNameAware</span>、<span class="hljs-title">BeanFactoryAware</span>、<span class="hljs-title">InitializingBean</span>和<span class="hljs-title">DiposableBean</span>这些接口的方法</span><br><span class="hljs-function"></span><br><span class="hljs-function">3、容器级生命周期接口方法　　：　　这个包括了<span class="hljs-title">InstantiationAwareBeanPostProcessor</span> 和 <span class="hljs-title">BeanPostProcessor</span> 这两个接口实现，一般称它们的实现类为“后处理器”。</span><br><span class="hljs-function"></span><br><span class="hljs-function">4、工厂后处理器接口方法　　：　　这个包括了<span class="hljs-title">AspectJWeavingEnabler</span>, <span class="hljs-title">ConfigurationClassPostProcessor</span>, <span class="hljs-title">CustomAutowireConfigurer</span>等等非常有用的工厂后处理器　　接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。</span><br></code></pre></td></tr></table></figure>

<h2 id="AOP-切面的几种通知"><a href="#AOP-切面的几种通知" class="headerlink" title="AOP 切面的几种通知"></a>AOP 切面的几种通知</h2><p><img src="http://cdn.lyloou.com/img/spring-2021-08-24-18-40-42.png" alt="spring-2021-08-24-18-40-42"></p>
<p><a href="https://www.cnblogs.com/zrtqsk/p/3735273.html" target="_blank" rel="noopener">Spring Bean 的生命周期（非常详细） - Chandler Qian - 博客园</a></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>版本问题：<br>例如：<code>4.0.0.RELEASE</code>版本对 Component 和 ComponentScan 支持不好，<br>而<code>4.3.2.RELEASE</code>是支持很好的。</p>
<h2 id="sprring-boot-测试"><a href="#sprring-boot-测试" class="headerlink" title="sprring boot 测试"></a>sprring boot 测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith</span>(SpringRunner<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><br>@Profile("dev")<br><span class="hljs-meta">@SpringBootTest</span>(classes = ApiTvApplication<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><br><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">class</span> <span class="hljs-title">DemoServiceImplTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    DemoServiceImpl demoService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot</title>
    <url>/ssm/springboot/</url>
    <content><![CDATA[<p>maven: <a href="http://wiki.jikexueyuan.com/project/maven/" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/maven/</a><br>spring: <a href="https://wiki.jikexueyuan.com/project/spring" target="_blank" rel="noopener">https://wiki.jikexueyuan.com/project/spring</a></p>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>注解仅仅是对类加上了一些元信息，如果不使用反射等 API 对其进行探测、处理，和不加注解没有任何区别。<br><a href="https://course.tianmaying.com/web-development+form-validation#" target="_blank" rel="noopener">https://course.tianmaying.com/web-development+form-validation#</a></p>
<p>任何一个标注了@Bean 的方法，其返回值将作为一个 bean 定义注册到 Spring 的 IoC 容器，方法名将默认成该 bean 定义的 id。<br><a href="http://tengj.top/2017/03/09/springboot3/" target="_blank" rel="noopener">http://tengj.top/2017/03/09/springboot3/</a></p>
<p>Spring Boot 常用注解（一） - 声明 Bean 的注解 - CSDN 博客<br><a href="https://blog.csdn.net/lipinganq/article/details/79155072" target="_blank" rel="noopener">https://blog.csdn.net/lipinganq/article/details/79155072</a></p>
<h2 id="JOOQ"><a href="#JOOQ" class="headerlink" title="JOOQ"></a>JOOQ</h2><p><a href="https://www.jooq.org/doc/3.10/manual/" target="_blank" rel="noopener">https://www.jooq.org/doc/3.10/manual/</a></p>
<p>JOOQ 3.8.2 使用 教程：从入门到提高<br><a href="https://amao12580.github.io/post/2016/04/JOOQ-from-entry-to-improve/" target="_blank" rel="noopener">https://amao12580.github.io/post/2016/04/JOOQ-from-entry-to-improve/</a></p>
<h2 id="spring-boot-devtools"><a href="#spring-boot-devtools" class="headerlink" title="spring-boot-devtools"></a>spring-boot-devtools</h2><p>Spring Boot 1.3 has introduced devtools, a module to improve the development-time experience when working on Spring Boot applications. To enable it, just add the following dependency to your project:<br>(<a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/usage.html" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/maven-plugin/usage.html</a>)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>When devtools is running, it detects change when you recompile your application and automatically refreshes it. This works for not only resources but code as well. It also provides a LiveReload server so that it can automatically trigger a browser refresh whenever things change.<br>Devtools can also be configured to only refresh the browser whenever a static resource has changed (and ignore any change in the code). Just include the following property in your project:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.devtools.remote.restart.enabled</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">   _____<br>  /  _  \__  _  __ ____   __________   _____   ____<br> /  /_\  \ \/ \/ // __ \ /  ___/  _ \ /     \_/ __ \<br>/    |    \     /\  ___/ \___ (  &lt;_&gt; )  Y Y  \  ___/<br>\____|__  /\/\_/  \___  &gt;____  &gt;____/|__|_|  /\___  &gt;<br>        \/            \/     \/            \/     \/<br><br>// spring banner<br>// file name: src/main/resources/banner.txt<br>// design by http://patorjk.com/software/taag<br>// [18-SpringBoot——核心-基本配置 - https://github.com/Wang-Jun-Chao - CSDN博客](https://blog.csdn.net/DERRANTCM/article/details/77284924)<br></code></pre></td></tr></table></figure>

<h2 id="下面这两种有什么区别呢"><a href="#下面这两种有什么区别呢" class="headerlink" title="下面这两种有什么区别呢"></a>下面这两种有什么区别呢</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 2  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>参照<a href="https://www.cnblogs.com/maohuidong/p/11507362.html" target="_blank" rel="noopener">spring.profiles.active=@profiles.active@的含义 - 毛会懂 - 博客园</a><br>在动态配置环境的过程中，如果用了 2（新建项目时自动生成的） 而没有用 1，就会导致报一个错误<br>@profiles.active@ IllegalStateException: Failed to load property source from spring.profile.active</p>
<h2 id="参数验证"><a href="#参数验证" class="headerlink" title="参数验证"></a>参数验证</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// controller</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Api</span>(tags = <span class="hljs-string">"[管理后台]-[放映厅]-片单管理API"</span>)<br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/playlist"</span>)<br><span class="hljs-meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="hljs-meta">@Autowired</span>))<br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlaylistController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseController</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-meta">@ApiOperation</span>(value = <span class="hljs-string">"列出片单"</span>, notes = <span class="hljs-string">"根据参数列出符合要求的片单"</span>)<br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"list"</span>)<br>    <span class="hljs-keyword">public</span> ResultMsg&lt;PageInfo&lt;PlaylistCo&gt;&gt; listPlaylist(<span class="hljs-meta">@Valid</span> PlaylistListQry qry) &#123;<br>        <span class="hljs-keyword">return</span> renderSuccessData(playlistAdminService.listPlaylistByPage(qry));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// PlaylistListQry.java</span><br><span class="hljs-meta">@EqualsAndHashCode</span>(callSuper = <span class="hljs-keyword">true</span>)<br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel</span>(value = <span class="hljs-string">"列出片单列表参数实体"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlaylistListQry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CommonCommand</span> </span>&#123;<br><br>    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"放映状态"</span>)<br>    <span class="hljs-keyword">private</span> Integer playStatus;<br><br>    <span class="hljs-meta">@NotNull</span>(message = <span class="hljs-string">"页码不能为空"</span>) <span class="hljs-meta">@Min</span>(value = <span class="hljs-number">1</span>, message = <span class="hljs-string">"页码要大于0"</span>)<br>    Integer pageNo;<br><br>    <span class="hljs-meta">@NotNull</span>(message = <span class="hljs-string">"每页大小不能为空"</span>) <span class="hljs-meta">@Min</span>(value = <span class="hljs-number">1</span>, message = <span class="hljs-string">"每页大小要大于0"</span>)<br>    Integer pageSize;<br>&#125;<br><br><span class="hljs-comment">// 错误统一处理</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-meta">@Order</span>(value = Ordered.HIGHEST_PRECEDENCE)<br><span class="hljs-meta">@Slf</span>4j<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;<br>    <span class="hljs-meta">@ExceptionHandler</span>(ValidationException<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><br><span class="hljs-class">    @<span class="hljs-title">ResponseBody</span></span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">ResponseVO</span> <span class="hljs-title">handle</span>(<span class="hljs-title">ValidationException</span> <span class="hljs-title">exception</span>) </span>&#123;<br>        String message = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ConstraintViolationException) &#123;<br>            ConstraintViolationException exs = (ConstraintViolationException) exception;<br><br>            Set&lt;ConstraintViolation&lt;?&gt;&gt; violations = exs.getConstraintViolations();<br>            <span class="hljs-keyword">for</span> (ConstraintViolation&lt;?&gt; item : violations) &#123;<br>                <span class="hljs-comment">//打印验证不通过的信息</span><br>                message = item.getMessage();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 处理实体字段验证不通过异常</span><br>        <span class="hljs-keyword">if</span>( exception <span class="hljs-keyword">instanceof</span>  MethodArgumentNotValidException)&#123;<br>          message = getDefaultMessageStr((MethodArgumentNotValidException) e);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseVO.buildIllegalMsg(message);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getDefaultMessageStr</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> </span>&#123;<br>        BindingResult result = e.getBindingResult();<br>        <span class="hljs-keyword">final</span> List&lt;FieldError&gt; fieldErrors = result.getFieldErrors();<br>        String defaultMessageStr = <span class="hljs-string">""</span>;<br>        <span class="hljs-keyword">if</span> (!CollectionUtil.isEmpty(fieldErrors)) &#123;<br>            <span class="hljs-keyword">final</span> List&lt;String&gt; msgList = fieldErrors.stream().map(FieldError::getDefaultMessage)<br>                    .collect(Collectors.toList());<br>            defaultMessageStr = StrUtil.join(<span class="hljs-string">", "</span>, msgList);<br>        &#125;<br>        <span class="hljs-keyword">return</span> defaultMessageStr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="分页处理"><a href="#分页处理" class="headerlink" title="分页处理"></a>分页处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// controller</span><br>  <span class="hljs-meta">@ApiOperation</span>(value = <span class="hljs-string">"列出片单"</span>, notes = <span class="hljs-string">"根据参数列出符合要求的片单"</span>)<br>  <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"list"</span>)<br>  <span class="hljs-keyword">public</span> ResultMsg&lt;PageInfo&lt;PlaylistCo&gt;&gt; listPlaylist(<span class="hljs-meta">@Valid</span> PlaylistListQry qry) &#123;<br>    <span class="hljs-keyword">return</span> renderSuccessData(playlistAdminService.listPlaylistByPage(qry));<br>  &#125;<br><span class="hljs-comment">// serviceImpl</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PageInfo&lt;PlaylistCo&gt; <span class="hljs-title">listPlaylistByPage</span><span class="hljs-params">(PlaylistListQry qry)</span> </span>&#123;<br>        List&lt;PlaylistCo&gt; playlistCoList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">// https://pagehelper.github.io/docs/howtouse/</span><br>        <span class="hljs-comment">// https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/en/HowToUse.md</span><br>        <span class="hljs-comment">// com.github.pagehelper.PageHelper</span><br>        PageHelper.startPage(qry.getPageNo(), qry.getPageSize());<br>        <span class="hljs-comment">// 根据状态获取片单</span><br>        <span class="hljs-keyword">final</span> List&lt;PlaylistEntity&gt; playlistEntityList = playlistService.lambdaQuery()<br>                .eq(qry.getPlayStatus() != <span class="hljs-keyword">null</span>, PlaylistEntity::getPlayStatus, qry.getPlayStatus())<br>                .eq(PlaylistEntity::getDeleted, DeleteType.NOT_DELETE.getCode())<br>                .eq(PlaylistEntity::getCheckStatus, CheckStatusType.APPROVED.getCode())<br>                .list();<br><br>        <span class="hljs-keyword">if</span> (playlistEntityList.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> PageHelpUtils.getPageInfoFromView(playlistEntityList, playlistCoList);<br>        &#125;<br>        <span class="hljs-comment">// 转换片单实体</span><br>        playlistCoList = playlistEntityList.stream().map(playlistConvertor::toCo).collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> PageHelpUtils.getPageInfoFromView(playlistEntityList, playlistCoList);<br>    &#125;<br><span class="hljs-comment">// [Mybatis3.4.x技术内幕（二十）：PageHelper分页插件源码及原理剖析 - 祖大俊的个人页面 - OSCHINA - 中文开源技术交流社区](https://my.oschina.net/zudajun/blog/745232)</span><br><span class="hljs-comment">// PageHelpUtils.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageHelpUtils</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换数据list为带分页格式</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataList 数据list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> pageinfo格式的数据list</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">PageInfo&lt;T&gt; <span class="hljs-title">getPageInfo</span><span class="hljs-params">(List&lt;T&gt; dataList)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PageInfo&lt;T&gt;(dataList);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换数据list为带分页格式，并替换数据为viewlist</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sourceDataList 数据库对应list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> viewList       展现层list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 带分页格式的展现层list</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"all"</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">PageInfo&lt;T&gt; <span class="hljs-title">getPageInfoFromView</span><span class="hljs-params">(List sourceDataList, List&lt;T&gt; viewList)</span> </span>&#123;<br>        PageInfo pageInfo = <span class="hljs-keyword">new</span> PageInfo(sourceDataList);<br>        pageInfo.setList(viewList);<br>        <span class="hljs-keyword">return</span> pageInfo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"code"</span>: <span class="hljs-string">"00000"</span>,<br>  <span class="hljs-attr">"msg"</span>: <span class="hljs-string">"success"</span>,<br>  <span class="hljs-attr">"data"</span>: &#123;<br>    <span class="hljs-attr">"total"</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">"list"</span>: [<br>      &#123;<br>        <span class="hljs-attr">"id"</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">"roomId"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"playlistName"</span>: <span class="hljs-string">"片单2"</span>,<br>        <span class="hljs-attr">"playStatus"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"memo"</span>: <span class="hljs-string">"备注"</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">"id"</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">"roomId"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"playlistName"</span>: <span class="hljs-string">"片单3"</span>,<br>        <span class="hljs-attr">"playStatus"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"memo"</span>: <span class="hljs-string">"备注"</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">"id"</span>: <span class="hljs-number">4</span>,<br>        <span class="hljs-attr">"roomId"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"playlistName"</span>: <span class="hljs-string">"片单4"</span>,<br>        <span class="hljs-attr">"playTime"</span>: <span class="hljs-string">"2021-03-18 17:53:38"</span>,<br>        <span class="hljs-attr">"playStatus"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"checkStatus"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"checkTime"</span>: <span class="hljs-string">"2021-03-25 16:18:56"</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">"id"</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-attr">"roomId"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"playlistName"</span>: <span class="hljs-string">"片单5"</span>,<br>        <span class="hljs-attr">"playStatus"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"memo"</span>: <span class="hljs-string">"备注"</span><br>      &#125;<br>    ],<br>    <span class="hljs-attr">"pageNum"</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">"pageSize"</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">"size"</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">"startRow"</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">"endRow"</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">"pages"</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">"prePage"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">"nextPage"</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">"isFirstPage"</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"isLastPage"</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">"hasPreviousPage"</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">"hasNextPage"</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"navigatePages"</span>: <span class="hljs-number">8</span>,<br>    <span class="hljs-attr">"navigatepageNums"</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    <span class="hljs-attr">"navigateFirstPage"</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">"navigateLastPage"</span>: <span class="hljs-number">3</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p><a href="https://www.javaer101.com/article/2490162.html" target="_blank" rel="noopener">RestTemplate 交换，未为带下划线的字段映射值 - Javaer101</a></p>
<p>使用 <code>@JsonProperty</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonProperty</span>(<span class="hljs-string">"Test_Id"</span>)<br><span class="hljs-keyword">private</span> String Test_Id; <span class="hljs-comment">// prefer rename to testId</span><br></code></pre></td></tr></table></figure>

<h2 id="CROS-跨域处理"><a href="#CROS-跨域处理" class="headerlink" title="CROS 跨域处理"></a>CROS 跨域处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CorsConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean&lt;CorsFilter&gt; <span class="hljs-title">corsFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        CorsConfiguration config = <span class="hljs-keyword">new</span> CorsConfiguration() &#123;&#123;<br>            setAllowCredentials(<span class="hljs-keyword">true</span>);<br>            addAllowedOrigin(<span class="hljs-string">"*"</span>);<br>            addAllowedHeader(<span class="hljs-string">"*"</span>);<br>            addAllowedMethod(<span class="hljs-string">"*"</span>);<br>        &#125;&#125;;<br><br>        <span class="hljs-keyword">final</span> CorsFilter corsFilter = <span class="hljs-keyword">new</span> CorsFilter(<span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource() &#123;&#123;<br>            registerCorsConfiguration(<span class="hljs-string">"/**"</span>, config);<br>        &#125;&#125;);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FilterRegistrationBean&lt;CorsFilter&gt;(corsFilter) &#123;&#123;<br>            setOrder(<span class="hljs-number">0</span>);<br>        &#125;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Spring-Boot-之-Enable-注解的工作原理-简书"><a href="#Spring-Boot-之-Enable-注解的工作原理-简书" class="headerlink" title="Spring-Boot 之@Enable*注解的工作原理 - 简书"></a><a href="https://www.jianshu.com/p/3da069bd865c" target="_blank" rel="noopener">Spring-Boot 之@Enable*注解的工作原理 - 简书</a></h2><h2 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">com.lyloou.*;<br>com.lyloou.**;<br></code></pre></td></tr></table></figure>

<p><code>**</code>匹配当前包和子包：如 com.lyloou 包下的Bean可以识别，com.lyloou.demo 也可以识别。<br>而<code>*</code>只能匹配子包：如 com.lyloou 包下的Bean识别不了。com.lyloou.demo下面的可以识别。</p>
<p><a href="https://blog.csdn.net/u012325167/article/details/75388990?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&utm_relevant_index=1" target="_blank" rel="noopener">关于component-scan中base-package包含通配符的问题探究_陈夏明的博客-CSDN博客_basepackages通配符</a></p>
<p><a href="https://blog.csdn.net/SunnyDay87/article/details/106391759" target="_blank" rel="noopener">Spring boot basePackages 通配符* 找不到Bean_小小一只の蜗牛的博客-CSDN博客_basepackages通配符</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Log</title>
    <url>/ssm/spring-log/</url>
    <content><![CDATA[<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- pom.xml --&gt;</span><br><span class="hljs-comment">&lt;!-- Logback --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- logback-spring.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">"60 seconds"</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">"false"</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>logback<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>	<span class="hljs-comment">&lt;!--输出到控制台 --&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"console"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>	<span class="hljs-comment">&lt;!--按天生成日志 --&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logFile"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span> /logs/spring-lovelist/%d&#123;yyyy-MM-dd&#125;/%d&#123;yyyy-MM-dd&#125;.%i.log <span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>200MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"info"</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"console"</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"logFile"</span> /&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Security</title>
    <url>/ssm/spring-security/</url>
    <content><![CDATA[<p><a href="http://www.iocoder.cn/Spring-Boot/Spring-Security/?self" target="_blank" rel="noopener">芋道 Spring Boot 安全框架 Spring Security 入门 | 芋道源码 —— 纯源码解析博客</a></p>
]]></content>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>【SSM】swagger相关</title>
    <url>/ssm/swagger/</url>
    <content><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>idea 插件：Swagger Tool - <a href="https://github.com/Pwhxbdk/swagger-tool" target="_blank" rel="noopener">https://github.com/Pwhxbdk/swagger-tool</a></p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#quick-annotation-overview" target="_blank" rel="noopener">Annotations 1.5.X · swagger-api/swagger-core Wiki</a></p>
<p><a href="https://juejin.cn/post/7038473995640897543" target="_blank" rel="noopener">Swagger 笔记之 Swagger 注解 - 掘金</a></p>
<p><a href="https://blog.csdn.net/u014231523/article/details/54562695" target="_blank" rel="noopener">SpringBoot 集成 springfox-swagger2 构建 restful API_兴国-为梦想而战-CSDN 博客_springboot springfox-swagger2</a></p>
<p><a href="https://blog.csdn.net/u014231523/article/details/76522486" target="_blank" rel="noopener">swagger2 常用注解说明_兴国-为梦想而战-CSDN 博客_swagger 常用注解</a></p>
<p><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md#data-types" target="_blank" rel="noopener">datatype 数据类型</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Jpa</title>
    <url>/ssm/springjpa/</url>
    <content><![CDATA[<h2 id="2-ddl-auto"><a href="#2-ddl-auto" class="headerlink" title="2. ddl-auto"></a>2. ddl-auto</h2><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2FYoungLee16%2Farticle%2Fdetails%2F88990763" target="_blank" rel="noopener">ddl-auto</a><br>自己手动测试下呗</p>
<p><img src="http://cdn.lyloou.com/img/4165335-be4de4bd296bbde2.png" alt="img"></p>
<p>ddl-auto 可取的值</p>
<p>1）spring.jpa.hibernate.ddl-auto=create<br>Hibernate: drop table if exists auth_user<br>Hibernate: create table auth_user (id bigint not null, account varchar(32), name varchar(32), pwd varchar(64), primary key (id)) engine=InnoDB<br>Hibernate 删掉已经存在表， 并重建表，恐怖！！！</p>
<ol>
<li>spring.jpa.hibernate.ddl-auto=create-drop</li>
</ol>
<p>Hibernate: drop table if exists auth_user<br>Hibernate: drop table if exists cardo<br>Hibernate: create table auth_user (id bigint not null, account varchar(32), name varchar(32), pwd varchar(64), primary key (id)) engine=InnoDB<br>Hibernate: create table cardo (id bigint not null, brand_id integer, brand_name varchar(16), primary key (id)) engine=InnoDB<br>…<br>Hibernate: drop table if exists auth_user<br>Hibernate: drop table if exists cardo</p>
<ol>
<li>spring.jpa.hibernate.ddl-auto=update<br>Hibernate: create table auth_user (id bigint not null, account varchar(32), name varchar(32), pwd varchar(64), primary key (id)) engine=InnoDB<br>Hibernate: create table cardo (id bigint not null, brand_id integer, brand_name varchar(16), primary key (id)) engine=InnoDB</li>
</ol>
<p>给 entity 类添加一个字段 others, 表也会自动同步添加一个字段 others.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = <span class="hljs-meta-string">"AUTH_USER"</span>)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDO</span> </span>&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Long</span> id;<br>    <span class="hljs-meta">@Column(length = 32)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Column(length = 32)</span><br>    <span class="hljs-keyword">private</span> String account;<br>    <span class="hljs-meta">@Column(length = 64)</span><br>    <span class="hljs-keyword">private</span> String pwd;<br>    <span class="hljs-meta">@Column(length = 255)</span><br>    <span class="hljs-keyword">private</span> String others;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>添加个字段 others<br>Hibernate: alter table auth_user add column others varchar(255)<br>给表添加了字段 others.</p>
<p>表添加一个字段， 对 entity 类有啥影响？<br>没有任何影响.<br>Hibernate: insert into auth_user (account, name, others, pwd, id) values (?, ?, ?, ?, ?)</p>
<p>不会校验 entity 中字段类型和表中对应的字段的类型是否匹配。</p>
<ol>
<li>spring.jpa.hibernate.ddl-auto=validate</li>
</ol>
<p>当表中字段 others 是 varchar 类型， 实体类 entity 的 others 是 Integer 类型，<br>类型不匹配报错：</p>
<p>Caused by: org.hibernate.tool.schema.spi.SchemaManagementException: Schema-validation: wrong column type encountered in column [others] in table [auth_user]; found [varchar (Types#VARCHAR)], but expecting [integer (Types#INTEGER)]</p>
<ol>
<li><p>spring.jpa.hibernate.ddl-auto=none<br>禁止 ddl</p>
</li>
<li><p>ddl-auto 不能同时指定多个属性， 只能在 create, create-drop, update, validate, none 中选择一个属性</p>
</li>
<li><p>总结：<br>一般选择 validate/update/none<br>绝对不能选 create, create-drop</p>
</li>
</ol>
<p>update 能帮助建表。</p>
<p>如果希望实体类发生改动而数据库表做出相应的更改且不破坏数据库现有的数据，要将 spring.jpa.hibernate.ddl-auto 属性值设置为 update</p>
<p>这里还有一点，就算把 ddl-auto 设置成 update 值，也不能识别对表结构的所有更改，往往只能识别出增加的字段，比如修改字段名，修改字段类型或者删除一个字段都是不能够识别的。</p>
<p>ddl-auto：create —-每次运行该程序，没有表格会新建表格，表内有数据会清空；<br>ddl-auto：create-drop —-每次程序结束的时候会清空表<br>ddl-auto：update —- 每次运行程序，没有表格会新建表格，表内有数据不会清空，只会更新<br>ddl-auto： validate —- 运行程序会校验数据与数据库的字段类型是否相同，不同会报错。</p>
<p>作者：BenjaminCool<br>链接：<a href="https://www.jianshu.com/p/bc509369b3a3" target="_blank" rel="noopener">https://www.jianshu.com/p/bc509369b3a3</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <tags>
        <tag>sql</tag>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring】加密</title>
    <url>/ssm/%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>shiro<br>sprint-security</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring面试題</title>
    <url>/ssm/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a><a href="https://m.imooc.com/collector/read/76" target="_blank" rel="noopener">面试题</a></h1><h2 id="Spring-MVC-的全流程是什么？"><a href="#Spring-MVC-的全流程是什么？" class="headerlink" title="Spring MVC 的全流程是什么？"></a>Spring MVC 的全流程是什么？</h2><p><img src="/.io//mvc_flow.png" alt="mvc_flow"><br><a href="https://m.imooc.com/collector/read/60" target="_blank" rel="noopener">https://m.imooc.com/collector/read/60</a></p>
<h2 id="在-Spring-MVC-中，为什么-RequestBody-可以从-JSON-转换出-Java-对象，而-ResponseBody-可以将控制器返回转换出-JSON-数据集？"><a href="#在-Spring-MVC-中，为什么-RequestBody-可以从-JSON-转换出-Java-对象，而-ResponseBody-可以将控制器返回转换出-JSON-数据集？" class="headerlink" title="在 Spring MVC 中，为什么 @RequestBody 可以从 JSON 转换出 Java 对象，而 @ResponseBody 可以将控制器返回转换出 JSON 数据集？"></a>在 Spring MVC 中，为什么 @RequestBody 可以从 JSON 转换出 Java 对象，而 @ResponseBody 可以将控制器返回转换出 JSON 数据集？</h2><p>HttpMessageConverter<T><br><a href="https://m.imooc.com/collector/read/62" target="_blank" rel="noopener">https://m.imooc.com/collector/read/62</a></T></p>
<h2 id="MyBatis-存在哪些组件，各个组件的生命周期是怎么样的，我们应该怎么使用它们？"><a href="#MyBatis-存在哪些组件，各个组件的生命周期是怎么样的，我们应该怎么使用它们？" class="headerlink" title="MyBatis 存在哪些组件，各个组件的生命周期是怎么样的，我们应该怎么使用它们？"></a>MyBatis 存在哪些组件，各个组件的生命周期是怎么样的，我们应该怎么使用它们？</h2><p>SqlSessionFactory<br>SqlSession<br>Mapper</p>
<p>Configuration<br>Plugin<br>TypeHandler<br>Alias</p>
<p><a href="https://m.imooc.com/collector/read/63" target="_blank" rel="noopener">https://m.imooc.com/collector/read/63</a></p>
<h2 id="MyBatis-的-TypeHandler-的作用是什么，我们应该如何使用它？"><a href="#MyBatis-的-TypeHandler-的作用是什么，我们应该如何使用它？" class="headerlink" title="MyBatis 的 TypeHandler 的作用是什么，我们应该如何使用它？"></a>MyBatis 的 TypeHandler 的作用是什么，我们应该如何使用它？</h2><p>实现从数据库和POJO之间的相互转换。</p>
<p>使用</p>
<ol>
<li>实现TypeHandler<T></T></li>
<li>注册到MyBatis上下文</li>
<li>在mapper的xml文件中使用：如<code>#{sex, typeHandler=com.imooc.ssm.typehandler.SexTypeHandler}</code></li>
</ol>
<p><a href="https://m.imooc.com/collector/read/65" target="_blank" rel="noopener">https://m.imooc.com/collector/read/65</a></p>
<h2 id="什么是-MyBatis-插件技术？我们应该如何开发-MyBatis-插件？"><a href="#什么是-MyBatis-插件技术？我们应该如何开发-MyBatis-插件？" class="headerlink" title="什么是 MyBatis 插件技术？我们应该如何开发 MyBatis 插件？"></a>什么是 MyBatis 插件技术？我们应该如何开发 MyBatis 插件？</h2><p>通过动态代理的方式来修改MyBatis的底层内容；<br>插件应用：如分页插件、性能分析插件</p>
<p>开发步骤：</p>
<ol>
<li>实现Inteceptor</li>
<li>在MyBatis上下文中注册</li>
</ol>
<p><a href="https://m.imooc.com/collector/read/66" target="_blank" rel="noopener">https://m.imooc.com/collector/read/66</a></p>
<h2 id="Spring-数据库事务机制是怎么样的？在什么时候-Spring-会回滚事务？"><a href="#Spring-数据库事务机制是怎么样的？在什么时候-Spring-会回滚事务？" class="headerlink" title="Spring 数据库事务机制是怎么样的？在什么时候 Spring 会回滚事务？"></a>Spring 数据库事务机制是怎么样的？在什么时候 Spring 会回滚事务？</h2><p>保证两个操作要么都成功，要么都失败。<br>Spring 数据库事务流程是通过Spring AOP实现的，而Spring AOP则是通过动态代理技术来实现的。</p>
<p>执行业务的过程中，如果发生异常且满足事务配置，则会回滚事务(rollback)。<br>如果一切正常或者异常是事务配置允许的，则会提交事务(commit)。</p>
<p><a href="https://m.imooc.com/collector/read/71" target="_blank" rel="noopener">https://m.imooc.com/collector/read/71</a></p>
<h2 id="我们是使用什么注解启用-Spring-数据库事务机制？"><a href="#我们是使用什么注解启用-Spring-数据库事务机制？" class="headerlink" title="我们是使用什么注解启用 Spring 数据库事务机制？"></a>我们是使用什么注解启用 Spring 数据库事务机制？</h2><p><code>@Transactional</code><br><a href="https://m.imooc.com/collector/read/71" target="_blank" rel="noopener">https://m.imooc.com/collector/read/71</a></p>
<h2 id="数据库隔离级别分为几个，分别是什么？"><a href="#数据库隔离级别分为几个，分别是什么？" class="headerlink" title="数据库隔离级别分为几个，分别是什么？"></a>数据库隔离级别分为几个，分别是什么？</h2><p>4个。</p>
<p>未提交读：Read uncommited<br>提交读：Read commit<br>可重复读：Repeatable read<br>序列化：Serializable<br><a href="https://m.imooc.com/collector/read/73" target="_blank" rel="noopener">https://m.imooc.com/collector/read/73</a></p>
<h2 id="各个隔离级别可能出现什么问题，请举详细实例？"><a href="#各个隔离级别可能出现什么问题，请举详细实例？" class="headerlink" title="各个隔离级别可能出现什么问题，请举详细实例？"></a>各个隔离级别可能出现什么问题，请举详细实例？</h2><table>
<thead>
<tr>
<th>隔离级别\现象</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>未提交读：Read uncommited</td>
<td>v</td>
<td>v</td>
<td>v</td>
</tr>
<tr>
<td>提交读：Read commit</td>
<td>x</td>
<td>v</td>
<td>v</td>
</tr>
<tr>
<td>可重复读：Repeatable read</td>
<td>x</td>
<td>x</td>
<td>v</td>
</tr>
<tr>
<td>序列化：Serializable</td>
<td>x</td>
<td>x</td>
<td>x</td>
</tr>
</tbody></table>
<p><a href="https://m.imooc.com/collector/read/73" target="_blank" rel="noopener">https://m.imooc.com/collector/read/73</a></p>
<h2 id="不可重复读和序列化两个隔离级别有什么区别？"><a href="#不可重复读和序列化两个隔离级别有什么区别？" class="headerlink" title="不可重复读和序列化两个隔离级别有什么区别？"></a>不可重复读和序列化两个隔离级别有什么区别？</h2><p>是否会出现幻读<br><a href="https://m.imooc.com/collector/read/73" target="_blank" rel="noopener">https://m.imooc.com/collector/read/73</a></p>
<h2 id="我们一般依据什么标准选择隔离级别？"><a href="#我们一般依据什么标准选择隔离级别？" class="headerlink" title="我们一般依据什么标准选择隔离级别？"></a>我们一般依据什么标准选择隔离级别？</h2><p>选择隔离级别主要从防止丢失更新和性能两方面来考虑<br><a href="https://m.imooc.com/collector/read/73" target="_blank" rel="noopener">https://m.imooc.com/collector/read/73</a></p>
<h2 id="一般企业用哪个隔离级别？默认的隔离级别是哪个？Oracle-和-MySQL-对隔离级别的支持情况如何？"><a href="#一般企业用哪个隔离级别？默认的隔离级别是哪个？Oracle-和-MySQL-对隔离级别的支持情况如何？" class="headerlink" title="一般企业用哪个隔离级别？默认的隔离级别是哪个？Oracle 和 MySQL 对隔离级别的支持情况如何？"></a>一般企业用哪个隔离级别？默认的隔离级别是哪个？Oracle 和 MySQL 对隔离级别的支持情况如何？</h2><p>一般企业用的是：<code>提交读：Read</code>这个级别，它适合在高并发的场景下使用。<br>默认的隔离级别是：<code>Isolation.DEFAULT</code>，Oracle和MySQL有不同的设置：Oracle使用的是<code>提交读：Read</code>，MySQL使用的是<code>可重复读：Repeatable</code></p>
<p>MySQL支持全部4个级别；<br>Oracle只支持<code>提交读：Read</code>和<code>序列化：Serializable</code>两个级别；</p>
<p><a href="https://m.imooc.com/collector/read/73" target="_blank" rel="noopener">https://m.imooc.com/collector/read/73</a></p>
<h2 id="Spring-数据库传播行为有几种？分别是什么？默认的是什么？"><a href="#Spring-数据库传播行为有几种？分别是什么？默认的是什么？" class="headerlink" title="Spring 数据库传播行为有几种？分别是什么？默认的是什么？"></a>Spring 数据库传播行为有几种？分别是什么？默认的是什么？</h2><p>7种<br><img src="/.io//propagation.jpg" alt="propagation"></p>
<p>默认的是<code>PROPAGATION_REQUIRED</code><br><a href="https://m.imooc.com/collector/read/74" target="_blank" rel="noopener">https://m.imooc.com/collector/read/74</a></p>
<h2 id="什么场景下使用-NESTED-事务传播行为？"><a href="#什么场景下使用-NESTED-事务传播行为？" class="headerlink" title="什么场景下使用 NESTED 事务传播行为？"></a>什么场景下使用 NESTED 事务传播行为？</h2><p>子事务方法采用独立的事务模式，如果子方法发生异常，也不回滚原方法事务方法的事务。<br>（对于支持保护点(savepoint)的数据库使用保护点，否则Spring就会创建新的数据库事务来运行它）</p>
<p><a href="https://m.imooc.com/collector/read/74" target="_blank" rel="noopener">https://m.imooc.com/collector/read/74</a></p>
<h2 id="NESTED-事务和-REQUIRES-NEW-两个传播行为有什么不同？"><a href="#NESTED-事务和-REQUIRES-NEW-两个传播行为有什么不同？" class="headerlink" title="NESTED 事务和 REQUIRES_NEW 两个传播行为有什么不同？"></a>NESTED 事务和 REQUIRES_NEW 两个传播行为有什么不同？</h2><p>首先NESTED是延续当前事务，NESTED只是回滚子方法执行过的SQL，而不是全局回滚，但是他不能重新设置事务的属性，<br>比如不能重新设置事务的隔离级别、超时时间和锁等。<br>而REQUESTS_NEW会重新建事务，我们可以重新设置事务的属性。<br><a href="https://m.imooc.com/collector/read/74" target="_blank" rel="noopener">https://m.imooc.com/collector/read/74</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>文件处理</title>
    <url>/ssm/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="返回图片思路-1"><a href="#返回图片思路-1" class="headerlink" title="返回图片思路 1"></a>返回图片思路 1</h2><p><a href="https://stackoverflow.com/questions/5690228/spring-mvc-how-to-return-image-in-responsebody" target="_blank" rel="noopener">Spring MVC: How to return image in @ResponseBody? - Stack Overflow</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/photo2"</span>, method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] testphoto() <span class="hljs-keyword">throws</span> IOException &#123;<br>    InputStream in = servletContext.getResourceAsStream(<span class="hljs-string">"/images/no_image.jpg"</span>);<br>    <span class="hljs-keyword">return</span> IOUtils.toByteArray(in);<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// JavaScript</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getcaptcha</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    url: <span class="hljs-string">'/api/user/getcaptcha'</span>,<br>    method: <span class="hljs-string">'get'</span>,<br>    responseType: <span class="hljs-string">'blob'</span>,<br>    params,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="返回图片思路-2"><a href="#返回图片思路-2" class="headerlink" title="返回图片思路 2"></a>返回图片思路 2</h2><p>将图片作为 base64 字符串返回，前端渲染 base64 即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 引入 hutool 的验证码功能</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCaptcha</span><span class="hljs-params">(String captchaKey)</span> </span>&#123;<br>    LineCaptcha lineCaptcha = CaptchaUtil.createLineCaptcha(<span class="hljs-number">160</span>, <span class="hljs-number">80</span>);<br>    String captchaCode = lineCaptcha.getCode();<br>    codeCache.set(captchaKey, captchaCode, Duration.ofMinutes(<span class="hljs-number">5</span>).getSeconds());<br>    <span class="hljs-keyword">return</span> lineCaptcha.getImageBase64Data();<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="spring-异步处理上传的文件时，自动删除问题"><a href="#spring-异步处理上传的文件时，自动删除问题" class="headerlink" title="spring 异步处理上传的文件时，自动删除问题"></a>spring 异步处理上传的文件时，自动删除问题</h2><ul>
<li><a href="https://segmentfault.com/a/1190000038544706" target="_blank" rel="noopener">上传文件异步处理注意事项 - SegmentFault 思否</a></li>
<li><a href="https://stackoverflow.com/questions/36565597/spring-async-file-upload-and-processing" target="_blank" rel="noopener">Spring async file upload and processing - Stack Overflow</a></li>
</ul>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring异常</title>
    <url>/ssm/%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="Java-lang-NoClassDefFoundError-com-fasterxml-jackson-databind-exc-InvalidDefinitionException"><a href="#Java-lang-NoClassDefFoundError-com-fasterxml-jackson-databind-exc-InvalidDefinitionException" class="headerlink" title="Java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/exc/InvalidDefinitionException"></a><a href="https://stackoverflow.com/questions/44718345/java-lang-noclassdeffounderror-com-fasterxml-jackson-databind-exc-invaliddefini/48566390" target="_blank" rel="noopener">Java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/exc/InvalidDefinitionException</a></h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- change jackson-databind version to 2.9.4 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="mysql运行报The-server-time-zone-value-‘OÐ¹u±e×¼E±¼a’-is-unrecognized-or-represents-more-than-one-time-z"><a href="#mysql运行报The-server-time-zone-value-‘OÐ¹u±e×¼E±¼a’-is-unrecognized-or-represents-more-than-one-time-z" class="headerlink" title="mysql运行报The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more than one time z"></a><a href="https://blog.csdn.net/yuxisanno139/article/details/80705332" target="_blank" rel="noopener">mysql运行报The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more than one time z</a></h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">"%time_zone"</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">time_zone</span>=<span class="hljs-string">"+8:00"</span><br></code></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.39<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="idea-Error-parsing-SQL-Mapper-Configuration-Cause-java-io-IOException-Could-not-find-resource"><a href="#idea-Error-parsing-SQL-Mapper-Configuration-Cause-java-io-IOException-Could-not-find-resource" class="headerlink" title="idea Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource"></a>idea Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource</h2><p><a href="https://blog.csdn.net/u010648555/article/details/70880425" target="_blank" rel="noopener">https://blog.csdn.net/u010648555/article/details/70880425</a><br>方案1：不将xml放到src目录下面，将xxxMapper.xml放到Maven构建的resource目录下面！<br>方案2：在Maven的pom文件中，添加下面代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio定制</title>
    <url>/tool/as/</url>
    <content><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>主要内容：<br>本文介绍了个人的 Android Studio 配置，包括主题、插件等；</p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul>
<li>编写 Android 代码；</li>
<li>写 hexo 上的文章；</li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li><p>!j</p>
<blockquote>
<p>Sublime Text 式的多处选择（Sublime Text Multi Selection）<br>描述：这个功能超级赞！该操作会识别当前选中字符串，选择下一个同样的字符串，并且添加一个光标。这意味着你可以在同一个文件里拥有多个光标，你可以同时在所有光标处输入任何东西。<br>快捷键：Ctrl + G(OS X)、Alt + Ｊ（Windows、Linux）</p>
</blockquote>
</li>
<li><p>!+insert</p>
<blockquote>
<p>列选择/块选择（Column Selection）<br>描述：正常选择时，当你向下选择时，会直接将当前行到行尾都选中，而块选择模式下，则是根据鼠标选中的矩形区域来选择。<br>调用：按住 Alt，然后拖动鼠标选择。<br>开启/关闭块选择：Menu → Edit → Column Selection Mode<br>快捷键：切换块选择模式：Cmd + Shift + 8(OS X)、Shift + Alt + Insert﻿(Windows/Linux);</p>
</blockquote>
</li>
<li><p>!q 上下文信息；</p>
</li>
<li><p>^!m 提取方法；</p>
</li>
<li><p>^!p 提取参数（window 快捷键冲突）；</p>
</li>
<li><p>^!n 内置(inline)，提取的反操作；</p>
</li>
<li><p>^+j 合并行和文本；</p>
</li>
<li><p>^!t 包裹代码（Surround With）；</p>
</li>
<li><p>^+delete 移除包裹代码（包裹代码的反操作）；</p>
</li>
<li><p>+F4 对当前打开的文件另起一个窗口打开；</p>
</li>
<li><p>^+insert: 选择最近复制的内容进行粘贴；</p>
</li>
<li><p>^+f: Find in Path</p>
</li>
<li><p>^+r: <a href="https://www.jetbrains.com/help/idea/find-and-replace-in-path.html" target="_blank" rel="noopener">Find and Replace in Path</a></p>
</li>
<li><p><img src="/.io//askey.png" alt="askey"></p>
</li>
<li><p><img src="/.io//askey2.png" alt="askey"></p>
</li>
</ul>
<h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><ul>
<li>Theme: Darcula</li>
<li>Font: Fira Code (Enable font ligatures), (14, 1.1)</li>
</ul>
<h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># basic</span><br>- .ignore<br>- CamelCase<br>- GsonFormat<br>- Json to Kotlin Class<br>- BugKotlinDocument<br>- Parcelable Code Generator​(<span class="hljs-keyword">for</span> kotlin)<br>- Markdown support<br>- BashSupport<br><br><span class="hljs-comment"># other</span><br>- Android ButtkerKnife Zelenzy<br>- Markdown Navigator<br>- MultiTypeTemplates<br>- Smalidea<br></code></pre></td></tr></table></figure>

<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul>
<li>Editor-&gt;General-&gt;Smart Keys</li>
<li>使用 Refector （style）的正确姿势：<br>将鼠标定位到要 refector 的标签中（不要选中任何代码），<br>然后右键 <code>Refector --&gt; Extract --&gt; Style...</code></li>
<li>通过 debug 的方式调试和查看数据值，而不是通过繁琐地打印日志；</li>
</ul>
<h2 id="提升-Gradle-编译速度"><a href="#提升-Gradle-编译速度" class="headerlink" title="提升 Gradle 编译速度"></a>提升 Gradle 编译速度</h2><ul>
<li>设置代理</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"># gradle.properties中添加<br># 举例ShadowSocket<br>systemProp.http.proxyHost=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>systemProp.http.proxyPort=<span class="hljs-number">8118</span><br>systemProp.https.proxyHost=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>systemProp.https.proxyPort=<span class="hljs-number">8118</span><br></code></pre></td></tr></table></figure>

<ul>
<li>设置中启用离线状态</li>
<li>启用守护进程</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"># gradle.properties中添加<br>org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=<span class="hljs-number">512</span>m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF<span class="hljs-number">-8</span><br>org.gradle.parallel=<span class="hljs-literal">true</span><br>org.gradle.daemon=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<ul>
<li>编译 SDK 使用 21 以上</li>
</ul>
<h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><ul>
<li><a href="http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/" target="_blank" rel="noopener">知道 Android 中 Gradle 的这些技巧，提升编译构建速度</a></li>
<li><a href="http://jaeger.itscoder.com/android/2016/02/14/android-studio-tips.html" target="_blank" rel="noopener">Android Studio 小技巧合集</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIwMzYwMTk1NA==&mid=2247485764&idx=1&sn=f816c73c1bc0d024d877f5f5371488b7&chksm=96cda809a1ba211faf50e83386c40d74bc71a24bd420f22cffda6a3d62a64ded6b5695a20d59&mpshare=1&scene=23&srcid=0717PkrJrg2LIqVFH25udp60&utm_medium=email&utm_source=gank.io#rd" target="_blank" rel="noopener">Android Studio 实用小技巧</a></li>
</ul>
<h2 id="logcat-color"><a href="#logcat-color" class="headerlink" title="logcat color"></a>logcat color</h2><p>search: Logcat</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">Assert: 9C27B0<br>Debug: 2196F3<br>Error: F44336<br>Info: 4CAF50<br>Warning: FFC107<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tool</tag>
        <tag>editor</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome定制</title>
    <url>/tool/chrome/</url>
    <content><![CDATA[<h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><p>更多的是为了搜索，所以可以不加分类的保存起来，有必要的话给书签添加关键字；<br>（除了少数常用的放在书签栏上之外）</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li>OneTab</li>
<li>直接访问(直接访问 Google 搜索结果。)</li>
<li>Markdown Preview Plus</li>
<li>cVim</li>
<li>Codota</li>
<li>AdBlock</li>
<li>Checker Plus for Gmail</li>
<li>Checker Plus for Calendar</li>
<li>crxMouse Chrome Gestures</li>
<li>Diigo Web Collector</li>
<li>Markdown Here</li>
<li>Markdown Preview Plus</li>
<li>Momentum</li>
<li>Octotree</li>
<li>夜景模式</li>
<li>Proxy SwitchyOmega</li>
</ul>
<h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li>Focus in console: Ctrl + `</li>
<li>清空屏幕: <code>Ctrl + L</code></li>
<li>清除已经声明的变量：<code>console.clear();</code></li>
</ul>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>进入调试模式： F12</p>
<p>JS 调试： 可以在 <code>Snippets</code> 里编写 Javascript 脚本，运行（Ctrl+Enter），和打断点调试</p>
]]></content>
      <tags>
        <tag>tool</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>图表</title>
    <url>/tool/chart/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://blog.csdn.net/w410589502/article/details/71168204" target="_blank" rel="noopener">流程图符号和用法 - 小小布的程序世界 - CSDN博客</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/c80b1099e61a" target="_blank" rel="noopener">流程图里的形状符号的代表意义 - 简书</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Autohotkey定制</title>
    <url>/tool/autohotkey/</url>
    <content><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>这里介绍了个人的 AutoHotKey 配置，包括它的便利性、用法说明等。在文章最后提供配置代码；</p>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">只要是可以编辑的地方，都用像<span class="hljs-keyword">vim</span>一样的规则控制光标。<br></code></pre></td></tr></table></figure>

<p>当我有了这样的想法时，我找到了<code>Autohotkey</code>。</p>
<p><strong>使用 Autohotkey 带来其他便利：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">* 一次按键，在浏览器中用指定搜索引擎搜索选中的文字。<br>* 一次按键，打开指定的某一个软件或同时打开几个软件。（开机后，一个按键打开所有必备软件）<br>* 一次按键，可以输入自定义的模板：例如输入`.dta`，就能达到输入`<span class="hljs-number">2017</span><span class="hljs-number">-01</span><span class="hljs-number">-11</span> <span class="hljs-number">18</span>:<span class="hljs-number">57</span>:<span class="hljs-number">55</span>`的效果。<br>* 一次按键，快速输入特殊符号（●、★、×、√ 等等）。<br></code></pre></td></tr></table></figure>

<h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p><strong>光标控制</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>光标左移一次：Alt+h<br><span class="hljs-bullet">* </span>光标右移一次：Alt+l<br><span class="hljs-bullet">* </span>光标上移一次：Alt+,<br><span class="hljs-bullet">* </span>光标下移一次：Alt+i<br><span class="hljs-bullet">* </span>光标置于行首：Alt+0<br><span class="hljs-bullet">* </span>光标置于行尾：Alt+4<br><span class="hljs-bullet">* </span>选中光标位置到行首的文字：Shift<span class="hljs-code">+Alt+</span>0<br><span class="hljs-bullet">* </span>选中光标位置到行尾的文字：Shift<span class="hljs-code">+Alt+</span>4<br><span class="hljs-bullet">* </span>删除右侧一个字符（同<span class="hljs-string">`Delete`按键）：Alt+'</span><br><span class="hljs-bullet">* </span>无论光标在当前行何处，新起一行：Shift+Enter<br></code></pre></td></tr></table></figure>

<p><strong>搜索</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>选中文字，用谷歌搜索：alt+g<br></code></pre></td></tr></table></figure>

<p><strong>导航标签</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>下一个标签：Alt+k<br><span class="hljs-bullet">* </span>上一个标签：Alt+j<br><span class="hljs-bullet">* </span>新建标签：Alt+t<br></code></pre></td></tr></table></figure>

<p><strong>控制窗口</strong><br>通过<code>MoveWindows.ahk</code>文件来启用。</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>按住alt键，左键拖拽窗口任意地方可以移动窗口；（非最大化模式）<br><span class="hljs-bullet">* </span>按住alt键，右键拖拽窗口，可以调整窗口的对象；（非最大化模式）<br></code></pre></td></tr></table></figure>

<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>通过<code>#Include, MoveWindows.ahk</code>，这种方式可以加载配置文件。<br>这样就不用将所有文件都写在一个配置文件，而是放在不同的文件中，然后通过<code>#Include, MoveWindows.ahk</code>来加载。<br>模块化管理，更容易变更。（有些设置好像不能生效，让我又改回去了）</p>
<h2 id="配置代码"><a href="#配置代码" class="headerlink" title="配置代码"></a>配置代码</h2><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#Include, Plugins/MoveWindows.ahk</span><br><br><span class="hljs-comment">#!p::suspend ;挂起所有autohotkey按键</span><br><span class="hljs-comment">#!o::Edit ;打开配置文件</span><br>Capslock::Enter ;大小写按键替换成Enter键<br><br><span class="hljs-comment">;LWin &amp; WheelUp::Send ^#&#123;left&#125;</span><br><span class="hljs-comment">;LWin &amp; WheelDown::Send ^#&#123;right&#125;</span><br><br><span class="hljs-comment">#m::WinMinimize, A ; 最小化当前窗口</span><br><span class="hljs-comment">#`::WinMinimize, A ; 最小化当前窗口</span><br><br><span class="hljs-comment">; 启动指定的bat文件（可以在bat文件中启动其他程序）</span><br><span class="hljs-comment">#a::run win_a</span><br><span class="hljs-comment">#c::run win_c</span><br><span class="hljs-comment">#g::run win_g</span><br><span class="hljs-comment">#q::run win_q</span><br><span class="hljs-comment">#s::run win_s</span><br><span class="hljs-comment">#t::run win_t</span><br><span class="hljs-comment">#w::run win_w</span><br><br><span class="hljs-comment">#n::run notepad</span><br><br><span class="hljs-comment">;光标方向控制</span><br>!i::Send &#123;up&#125; ;光标上移<br>!,::Send &#123;down&#125; ;光标下移<br>!h::Send &#123;left&#125; ;光标左移<br>!l::Send &#123;right&#125; ;光标右移<br>!4::Send, &#123;end&#125;  ;到行末<br>!0::Send, &#123;home&#125;  ;到行首<br><br><br><br><span class="hljs-comment">;编辑区域操作</span><br>Shift &amp; enter::send &#123;end&#125;&#123;enter&#125; ;下起一行<br>+^!h::send,+^&#123;left&#125; ;选中左移一个单词<br>+^!l::send,+^&#123;right&#125; ;选中右移一个单词<br>+!i::send,&#123;shiftdown&#125;&#123;up&#125; ;选中上移<br>+!,::send,&#123;shiftdown&#125;&#123;down&#125; ;选中下移<br>+!h::send,&#123;shiftdown&#125;&#123;left&#125; ;选中左移<br>+!l::send,&#123;shiftdown&#125;&#123;right&#125; ;选中右移<br>+!4::send,+&#123;end&#125; ;选中当前光标位置到行末<br>+!0::send,+&#123;home&#125; ;选中当前光标位置到行首<br><br><span class="hljs-comment">;复制当前行到剪切板</span><br>+!c::<br>send,&#123;home&#125;&#123;shiftdown&#125;&#123;end&#125;&#123;ShiftUp&#125;<br>Send,^c<br>Send, &#123;end&#125;<br>Return<br><br><br><br><span class="hljs-comment">;替换按键</span><br>!n::Send ^n ;新建<br>!w::Send ^w ;关闭<br>!v::Send ^v ;粘贴<br>!x::Send ^x ;剪切<br>!c::Send ^c ;复制<br>!s::Send ^s ;保存<br>!'::Send &#123;delete&#125; ;删除光标后面的一个字母或汉字<br><br><span class="hljs-comment">;特殊符号</span><br><span class="hljs-comment">;「</span><br>![::<br><span class="hljs-attr">clipboard</span> = 「<br>send ^v<br>return<br><br><span class="hljs-comment">;</span><br>!]::<br><span class="hljs-attr">clipboard</span> = 」<br>send ^v<br>return<br><br><span class="hljs-comment">;时间输入</span><br><span class="hljs-comment">;如：14:19:59</span><br>::.tt::<br><span class="hljs-attr">d</span> = %A_Hour%:%A_Min%:%A_Sec%<br><span class="hljs-attr">clipboard</span> = %d%<br>Send ^v<br>return<br><br><span class="hljs-comment">;如：2016.01.16</span><br>::.dd::<br><span class="hljs-attr">d</span> = %A_YYYY%.%A_MM%.%A_DD%<br><span class="hljs-attr">clipboard</span> = %d%<br>Send ^v<br>return<br><br><span class="hljs-comment">;如：2016-05-08 17:09:10</span><br>::.dta::<br><span class="hljs-attr">d</span> = %A_YYYY%-%A_MM%-%A_DD% %A_Hour%:%A_Min%:%A_Sec%<br><span class="hljs-attr">clipboard</span> = %d%<br>Send ^v<br>return<br><br><span class="hljs-comment">;如：[01.06 14:00]</span><br>::.dt::<br><span class="hljs-attr">d</span> =  [%A_MM%.%A_DD% %A_Hour%:%A_Min%]<br><span class="hljs-attr">clipboard</span> = %d%<br>Send ^v<br>return<br><br><br><span class="hljs-comment">;用google搜索</span><br>!g::<br>Send ^c<br>Run http://www.google.com/search?q=%clipboard%<br>return<br><br><br><span class="hljs-comment">;for chrome</span><br><span class="hljs-comment">#IfWinActive ahk_class Chrome_WidgetWin_1</span><br>!j::Send ^+&#123;Tab&#125;<br>!k::Send ^&#123;Tab&#125;<br>!t::Send ^t<br>return<br></code></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>！！！</strong> 如果要通过剪切板输出中文，不要将配置文件设置为 <code>UTF-8</code>,而是要设置为 <code>GBK</code>（坑了我好长时间呢）</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/ly1414725328/article/details/49641503" target="_blank" rel="noopener">【Tool】使用 Autohotkey - 木子楼的专栏 - CSDN 博客</a></li>
</ul>
]]></content>
      <tags>
        <tag>tool</tag>
        <tag>autohotkey</tag>
      </tags>
  </entry>
  <entry>
    <title>Cmder定置</title>
    <url>/tool/cmder/</url>
    <content><![CDATA[<h2 id="前导"><a href="#前导" class="headerlink" title="前导"></a>前导</h2><p>安装 git: d:/c/git<br>安装 cmder: d:/p/cmder</p>
<h2 id="user-aliases"><a href="#user-aliases" class="headerlink" title="user_aliases"></a>user_aliases</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">e.=explorer .<br>;gl=git <span class="hljs-built_in">log</span> --color --oneline  --all --graph --decorate  $*<br>gl=git lg<br>ls=ls --show-control-chars -F --color=auto $*<br>ll=ls -l<br><span class="hljs-built_in">pwd</span>=<span class="hljs-built_in">cd</span><br>clear=cls<br><span class="hljs-built_in">history</span>=cat <span class="hljs-string">"%CMDER_ROOT%\config\.history"</span><br><span class="hljs-built_in">unalias</span>=<span class="hljs-built_in">alias</span> /d <span class="hljs-variable">$1</span><br>vi=vim $*<br>cmderr=<span class="hljs-built_in">cd</span> /d <span class="hljs-string">"%CMDER_ROOT%"</span><br>cdt=<span class="hljs-built_in">cd</span> /d d:/t<br>cdw=<span class="hljs-built_in">cd</span> /d d:/w<br></code></pre></td></tr></table></figure>

<h2 id="Settings-gt-Startup-Environment"><a href="#Settings-gt-Startup-Environment" class="headerlink" title="Settings -&gt; Startup/Environment"></a>Settings -&gt; Startup/Environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">set</span> PATH=%ConEmuBaseDir%\Scripts;%PATH%<br><span class="hljs-built_in">set</span> LANG=zh_CN.UTF8<br><span class="hljs-built_in">set</span> HOME=D:\w\cmder<br><span class="hljs-built_in">set</span> http_proxy=http://127.0.0.1:1080<br><span class="hljs-built_in">set</span> https_proxy=http://127.0.0.1:1080<br></code></pre></td></tr></table></figure>

<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>模仿 terminal 终端的快捷键，<br>+^O: 水平分割<br>+^E: 垂直分割<br>+^P: 上一个终端<br>+^N: 下一个终端</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>solarized</p>
<h2 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h2><p><a href="https://segmentfault.com/a/1190000010304395" target="_blank" rel="noopener">cmder 别名设置和自定义 cmder 启动界面 - SegmentFault 思否</a></p>
<p>在 gitbash安装目录下的 <code>etc/bash.bashrc</code>中加入 alias 配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><br><br><span class="hljs-built_in">alias</span> e.=<span class="hljs-string">"explorer ."</span><br><span class="hljs-built_in">alias</span> gl=<span class="hljs-string">"git log --color --oneline  --all --graph --decorate  $*"</span><br><span class="hljs-built_in">alias</span> glh=<span class="hljs-string">"git lg | head"</span><br><span class="hljs-built_in">alias</span> gh=<span class="hljs-string">"git lg | head"</span><br><span class="hljs-built_in">alias</span> ls=<span class="hljs-string">"ls --show-control-chars -F --color=auto $*"</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">"ls -l"</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">pwd</span>=<span class="hljs-string">"cd"</span><br><span class="hljs-built_in">alias</span> clear=<span class="hljs-string">"cls"</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">unalias</span>=<span class="hljs-string">"alias /d <span class="hljs-variable">$1</span>"</span><br><span class="hljs-built_in">alias</span> vi=<span class="hljs-string">"vim $*"</span><br><span class="hljs-built_in">alias</span> cdt=<span class="hljs-string">"cd d:/t"</span><br><span class="hljs-built_in">alias</span> cdw=<span class="hljs-string">"cd d:/w"</span><br><span class="hljs-built_in">alias</span> cdc=<span class="hljs-string">"cd d:/c"</span><br><span class="hljs-built_in">alias</span> cdd=<span class="hljs-string">"cd C:/Users/lilou/Desktop"</span><br><span class="hljs-built_in">alias</span> cdwr=<span class="hljs-string">"cd d:/w/weex/mobile"</span><br><span class="hljs-built_in">alias</span> cdp=<span class="hljs-string">"cd d:/w/go/src/github.com/lyloou/pugo"</span><br><span class="hljs-built_in">alias</span> cdgo=<span class="hljs-string">"cd d:/w/go/src/"</span><br><span class="hljs-built_in">alias</span> vv=<span class="hljs-string">"d:/c/Vim/vim81/gvim.exe -p --remote-tab-silent $*"</span><br><span class="hljs-built_in">alias</span> mvnc=<span class="hljs-string">"mvn clean -Dmaven.test.skip"</span><br><span class="hljs-built_in">alias</span> mvncc=<span class="hljs-string">"mvn clean compile -Dmaven.test.skip"</span><br><span class="hljs-built_in">alias</span> mvncd=<span class="hljs-string">"mvn clean deploy -Dmaven.test.skip"</span><br><span class="hljs-built_in">alias</span> mvnci=<span class="hljs-string">"mvn clean install -Dmaven.test.skip"</span><br><br><span class="hljs-built_in">alias</span> ..=<span class="hljs-string">"cd .."</span><br><span class="hljs-built_in">alias</span> ...=<span class="hljs-string">"cd .. &amp;&amp; cd .."</span><br><span class="hljs-built_in">alias</span> www=<span class="hljs-string">"python -m SimpleHTTPServer 8000"</span><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Firefox</title>
    <url>/tool/firefox/</url>
    <content><![CDATA[<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li>Adblock Plus<blockquote>
<p>拦截广告</p>
</blockquote>
</li>
<li>Auto Tab Discard<blockquote>
<p>Auto Tab Discard a lightweight extension that uses the native method (tabs.discard) to unload or discard browser tabs which significantly reduces the memory footprint of your browser when many tabs are in use.</p>
</blockquote>
</li>
<li>Gesturefy<blockquote>
<p>Navigate, operate and browse faster with mouse gestures! A customizable mouse gesture add-on with a variety of different commands.</p>
</blockquote>
</li>
<li>HightlightAll<blockquote>
<p>Highlights all occurrences of the selected text.</p>
</blockquote>
</li>
<li>Markdown Link<blockquote>
<p>Generates a markdown link from title and URI of the current page. (alt + insert)</p>
</blockquote>
</li>
<li>Octotree<blockquote>
<p>Github code tree on steroids</p>
</blockquote>
</li>
<li>Proxy SwitchyOmega<blockquote>
<p>proxy setting</p>
</blockquote>
</li>
<li>Remove Redirect<blockquote>
<p>Remove intermediary pages that some pages use before redirecting to a final page.</p>
</blockquote>
</li>
<li>FeHelper<blockquote>
<p>FE 助手：JSON 工具、代码美化、代码压缩、二维码工具、网页定制工具、便签笔记，等等</p>
</blockquote>
</li>
<li>ScrollAnywhere<blockquote>
<p>Drag scrollbar with your middle mouse button anywhere on the page. Supports also “grab and drag” style and Momentum.</p>
</blockquote>
</li>
<li>Vimiue<blockquote>
<p>The Hacker’s Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.</p>
</blockquote>
</li>
</ul>
<h2 id="firefox-设置每次访问时检查缓存"><a href="#firefox-设置每次访问时检查缓存" class="headerlink" title="firefox 设置每次访问时检查缓存"></a>firefox 设置每次访问时检查缓存</h2><ol>
<li>在 firefox 的地址栏上输入 about:config 回车</li>
<li>找到 browser.cache.check_doc_frequency 选项，双击将</li>
<li>改成 1 保存即可。</li>
</ol>
<p>选项每个值都是什么含义的。请看下面的解释：<br>0: Once per session 每个进程一次 每次启动 Firefox 时检查<br>1: Each time 【开发人员强烈建议开这个】每次访问此页时检查<br>2: Never<br>3: When appropriate/automatically</p>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse配置</title>
    <url>/tool/eclipse/</url>
    <content><![CDATA[<h2 id="当光标移到到元素上，别处相同元素高亮显示"><a href="#当光标移到到元素上，别处相同元素高亮显示" class="headerlink" title="当光标移到到元素上，别处相同元素高亮显示"></a>当光标移到到元素上，别处相同元素高亮显示</h2><p>该功能默认是打开的，但是有时候莫名奇妙的会被关闭，这时候通过下面的方式可以启用该功能。</p>
<p>具体步骤是：<br>windows-&gt;preferences-&gt;java-&gt;editor-&gt;mark occurrences 勾选复选框</p>
<p>更改颜色:<br>window-&gt;preferences-&gt;General-&gt;editors-&gt;text Editor-&gt;Annotations<br>右边选择–&gt;Occurrence</p>
]]></content>
      <tags>
        <tag>tool</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom定制</title>
    <url>/tool/atom/</url>
    <content><![CDATA[<p>| <a href="https://my.oschina.net/oldfeel/blog/530233" target="_blank" rel="noopener">ubuntu 下 atom 禁用 alt+key 调出菜单</a></p>
<blockquote>
<p>打开 edit -&gt; preference -&gt; open config folder -&gt; init.coffee, 添加</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"># Get rid of the alt-menu shortcuts<br>atom.menu.template.forEach (t) -&gt;<br>  t.label = t.label.replace(<span class="hljs-string">"&amp;"</span>, <span class="hljs-string">""</span>)<br>atom.menu.update()<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tool</tag>
        <tag>editor</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea定制</title>
    <url>/tool/idea/</url>
    <content><![CDATA[<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li><p>GitToolBox</p>
</li>
<li><p>CamelCase</p>
</li>
<li><p>.ignore</p>
</li>
<li><p>GsonFormat</p>
</li>
<li><p>Markdown support</p>
</li>
<li><p>GO</p>
</li>
<li><p>Lombok plugin</p>
</li>
<li><p>Swagger Tools</p>
</li>
<li><p>Mybatisx</p>
</li>
<li><p>MybatisPlus</p>
</li>
<li><p>AceJump</p>
</li>
<li><p>Key promoter X</p>
</li>
<li><p>Alibaba Java Coding Guidelines</p>
</li>
<li><p>Database navigator</p>
</li>
<li><p>Rainbow Brackets</p>
</li>
<li><p>Past Images into Markdown</p>
</li>
<li><p>Free mybatis plugin</p>
</li>
<li><p>Packages</p>
</li>
<li><p><a href="https://www.hollischuang.com/archives/3220" target="_blank" rel="noopener">https://www.hollischuang.com/archives/3220</a></p>
</li>
</ul>
<h2 id="THEME"><a href="#THEME" class="headerlink" title="THEME"></a>THEME</h2><p>solarized</p>
<h2 id="取消折叠代码"><a href="#取消折叠代码" class="headerlink" title="取消折叠代码"></a>取消折叠代码</h2><p>Settings | Editor | General | Code Folding</p>
<ul>
<li><a href="https://stackoverflow.com/questions/49132093/intellij-idea-2018-1-disable-simple-comment-folding" target="_blank" rel="noopener">editor - Intellij IDEA 2018.1 - Disable simple comment folding - Stack Overflow</a></li>
</ul>
<h2 id="set-author-and-date"><a href="#set-author-and-date" class="headerlink" title="set author and date"></a>set author and date</h2><p>Settings -&gt; Editor -&gt; File and code templates -&gt; Includes -&gt; File Header</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> $&#123;USER&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> $&#123;YEAR&#125;/$&#123;MONTH&#125;/$&#123;DAY&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">keymap</span> <span class="hljs-attr">version</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"louva"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"Default for XWin"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"$Copy"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"ctrl c"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"ctrl insert"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt c"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"$Cut"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"ctrl x"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift delete"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt x"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"$Delete"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"delete"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt quote"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"$Paste"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"ctrl v"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift insert"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt v"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ActivateRunToolWindow"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt r"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"CloseContent"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"ctrl f4"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt w"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"CodeInspection.OnEditor"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"Console.Execute"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"Editor Copy"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt c"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"Editor Cut"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt x"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"Editor Delete"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt quote"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"Editor Paste"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt v"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorDown"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"down"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt comma"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorDownWithSelection"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift down"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt comma"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorLeft"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"left"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt h"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorLeftWithSelection"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift left"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt h"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorLineEnd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"end"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt 4"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorLineEndWithSelection"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift end"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt 4"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorLineStart"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"home"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt 0"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorLineStartWithSelection"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift home"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt 0"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorNextWordWithSelection"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift ctrl right"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift ctrl alt l"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorPreviousWordWithSelection"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift ctrl left"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift ctrl alt h"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorRight"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"right"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt l"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorRightWithSelection"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift right"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt l"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorSelectWord"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"ctrl w"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt w"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorUp"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"up"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt i"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"EditorUpWithSelection"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift up"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt i"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"NextSplitter"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt n"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"NextTab"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt right"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt equals"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"PopupHector"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"PrevSplitter"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt p"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"PreviousTab"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt left"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"alt minus"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ShowReformatFileDialog"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"Annotate"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"ctrl alt 0"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"SplitHorizontally"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt o"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"SplitVertically"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keyboard-shortcut</span> <span class="hljs-attr">first-keystroke</span>=<span class="hljs-string">"shift alt e"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"TabShiftActions.ShiftUp"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hg4idea.QPushAction"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keymap</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="IntelliJ-IDEA-change-open-with-associated-application-preference-Stack-Overflow"><a href="#IntelliJ-IDEA-change-open-with-associated-application-preference-Stack-Overflow" class="headerlink" title="IntelliJ IDEA: change open with (associated application) preference - Stack Overflow"></a><a href="https://stackoverflow.com/questions/44699658/intellij-idea-change-open-with-associated-application-preference" target="_blank" rel="noopener">IntelliJ IDEA: change open with (associated application) preference - Stack Overflow</a></h2><h2 id="java-doc-不自动格式化"><a href="#java-doc-不自动格式化" class="headerlink" title="java doc 不自动格式化"></a>java doc 不自动格式化</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">// <span class="hljs-doctag">@formatter</span>:off</span><br><span class="hljs-comment">  &#123;</span><br><span class="hljs-comment">    "a":"b"</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">// <span class="hljs-doctag">@formatter</span>:on</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/3375307/how-to-disable-code-formatting-for-some-part-of-the-code-using-comments" target="_blank" rel="noopener">intellij idea - How to disable code formatting for some part of the code using comments? - Stack Overflow</a></li>
</ul>
<h2 id="激活-spring-环境"><a href="#激活-spring-环境" class="headerlink" title="激活 spring 环境"></a>激活 spring 环境</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">-Dspring.profiles.active=dev<br></code></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/202201270913347.png" alt="202201270913347"></p>
<h2 id="Live-Templates"><a href="#Live-Templates" class="headerlink" title="Live Templates"></a>Live Templates</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">logd<br>log.info(<span class="hljs-string">"[<span class="hljs-variable">$CLASS_NAME</span><span class="hljs-variable">$</span>#<span class="hljs-variable">$METHOD_NAME</span><span class="hljs-variable">$</span>]: <span class="hljs-variable">$END</span><span class="hljs-variable">$</span>"</span>);<br><br>logi<br>log.info(<span class="hljs-string">"[<span class="hljs-variable">$CLASS_NAME</span><span class="hljs-variable">$</span>#<span class="hljs-variable">$METHOD_NAME</span><span class="hljs-variable">$</span>]: <span class="hljs-variable">$END</span><span class="hljs-variable">$</span>"</span>);<br><br>logw<br>log.warn(<span class="hljs-string">"[<span class="hljs-variable">$CLASS_NAME</span><span class="hljs-variable">$</span>#<span class="hljs-variable">$METHOD_NAME</span><span class="hljs-variable">$</span>]: <span class="hljs-variable">$END</span><span class="hljs-variable">$</span>"</span>, e);<br><br>loge<br>log.error(<span class="hljs-string">"[<span class="hljs-variable">$CLASS_NAME</span><span class="hljs-variable">$</span>#<span class="hljs-variable">$METHOD_NAME</span><span class="hljs-variable">$</span>]: <span class="hljs-variable">$END</span><span class="hljs-variable">$</span>"</span>, e);<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>tool</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Ngrok相关</title>
    <url>/tool/ngrok/</url>
    <content><![CDATA[<ul>
<li><a href="https://morongs.github.io/2016/12/28/dajian-ngrok/" target="_blank" rel="noopener">从零教你搭建ngrok服务</a></li>
</ul>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim定制</title>
    <url>/tool/vim/</url>
    <content><![CDATA[<h2 id="command-line-How-to-change-visudo-editor-from-nano-to-vim-Ask-Ubuntu"><a href="#command-line-How-to-change-visudo-editor-from-nano-to-vim-Ask-Ubuntu" class="headerlink" title="command line - How to change visudo editor from nano to vim? - Ask Ubuntu"></a><a href="https://askubuntu.com/questions/539243/how-to-change-visudo-editor-from-nano-to-vim/539265" target="_blank" rel="noopener">command line - How to change visudo editor from nano to vim? - Ask Ubuntu</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo update-alternatives --config editor<br></code></pre></td></tr></table></figure>

<h2 id="Ubuntu修改locale问题解决-Cannot-set-language-to-“zh-CN-utf-8”"><a href="#Ubuntu修改locale问题解决-Cannot-set-language-to-“zh-CN-utf-8”" class="headerlink" title="Ubuntu修改locale问题解决-Cannot set language to “zh_CN.utf-8”"></a>Ubuntu修改locale问题解决-Cannot set language to “zh_CN.utf-8”</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo dpkg-reconfigure locales<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-string">" Vim-Plug &#123;&#123;&#123;</span><br><span class="hljs-string">call plug#begin('~/.vim/plugged')</span><br><span class="hljs-string">Plug 'junegunn/vim-easy-align'</span><br><span class="hljs-string">Plug 'valloric/youcompleteme'</span><br><span class="hljs-string">Plug 'altercation/vim-colors-solarized'</span><br><span class="hljs-string">Plug 'https://github.com/junegunn/vim-github-dashboard.git'</span><br><span class="hljs-string">Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'</span><br><span class="hljs-string">Plug 'scrooloose/nerdtree', &#123;'on': 'NERDTreeToggle'&#125;</span><br><span class="hljs-string">Plug 'tpope/vim-fireplace', &#123;'for': 'clojure'&#125;</span><br><span class="hljs-string">Plug 'rdnetto/YCM-Generator', &#123;'branch': 'stable'&#125;</span><br><span class="hljs-string">Plug 'fatih/vim-go', &#123;'tag': '*'&#125;</span><br><span class="hljs-string">Plug 'nsf/gocode', &#123;'tag': 'v.20150303', 'rtp':'vim'&#125;</span><br><span class="hljs-string">call plug#end()</span><br><span class="hljs-string">"</span> &#125;&#125;&#125;<br><br><span class="hljs-string">" General &#123;&#123;&#123;</span><br><span class="hljs-string">set nocompatible   </span><br><span class="hljs-string">set nobackup</span><br><span class="hljs-string">set noswapfile</span><br><span class="hljs-string">set history=1024</span><br><span class="hljs-string">set autochdir</span><br><span class="hljs-string">set whichwrap=b,s,&lt;,&gt;,[,]</span><br><span class="hljs-string">set nobomb</span><br><span class="hljs-string">set backspace=indent,eol,start whichwrap+=&lt;,&gt;,[,]</span><br><span class="hljs-string">set clipboard+=unnamed "</span> Vim的默认寄存器和系统剪贴板共享<br><span class="hljs-built_in">set</span> winaltkeys=no<br><span class="hljs-string">" &#125;&#125;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">"</span> GUI &#123;&#123;&#123;<br><span class="hljs-string">"colorscheme tomorrow-night</span><br><span class="hljs-string">set cursorline</span><br><span class="hljs-string">set hlsearch</span><br><span class="hljs-string">set incsearch</span><br><span class="hljs-string">set number</span><br><span class="hljs-string">set splitbelow</span><br><span class="hljs-string">set splitright</span><br><span class="hljs-string">"</span><span class="hljs-built_in">set</span> guifont=Inconsolata:h20<br><span class="hljs-string">" &#125;&#125;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">"</span> Format &#123;&#123;&#123;<br><span class="hljs-built_in">set</span> autoindent<br><span class="hljs-built_in">set</span> smartindent<br><span class="hljs-built_in">set</span> tabstop=4<br><span class="hljs-built_in">set</span> expandtab<br><span class="hljs-built_in">set</span> softtabstop=4<br><span class="hljs-string">"set foldmethod=indent</span><br><span class="hljs-string">set shiftwidth=4</span><br><span class="hljs-string">set ls=2</span><br><span class="hljs-string">syntax on</span><br><span class="hljs-string">"</span> &#125;&#125;&#125;<br><br><span class="hljs-string">" Keymap &#123;&#123;&#123;</span><br><span class="hljs-string">let mapleader="</span>,<span class="hljs-string">"</span><br><span class="hljs-string"></span><br><span class="hljs-string">"</span> 标签操作<br>map &lt;leader&gt;tn :tabnew&lt;cr&gt;<br>map &lt;leader&gt;tc :tabclose&lt;cr&gt;<br>map &lt;leader&gt;th :tabp&lt;cr&gt;<br>map &lt;leader&gt;tl :tabn&lt;cr&gt;<br><br><span class="hljs-string">" 移动分割窗口</span><br><span class="hljs-string">nmap &lt;C-j&gt; &lt;C-w&gt;j</span><br><span class="hljs-string">nmap &lt;C-k&gt; &lt;C-w&gt;k</span><br><span class="hljs-string">nmap &lt;C-h&gt; &lt;C-w&gt;h</span><br><span class="hljs-string">nmap &lt;C-l&gt; &lt;C-w&gt;l </span><br><span class="hljs-string"></span><br><span class="hljs-string">"</span> &#125;&#125;&#125;<br><span class="hljs-built_in">set</span> completeopt-=preview<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>tool</tag>
        <tag>editor</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualbox定制</title>
    <url>/tool/virtualbox/</url>
    <content><![CDATA[<h2 id="How-to-SSH-to-a-VirtualBox-guest-externally-through-a-host"><a href="#How-to-SSH-to-a-VirtualBox-guest-externally-through-a-host" class="headerlink" title="How to SSH to a VirtualBox guest externally through a host?"></a><a href="https://stackoverflow.com/questions/5906441/how-to-ssh-to-a-virtualbox-guest-externally-through-a-host" target="_blank" rel="noopener">How to SSH to a VirtualBox guest externally through a host?</a></h2><h3 id="plan-1"><a href="#plan-1" class="headerlink" title="plan 1"></a>plan 1</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">The best way <span class="hljs-keyword">to</span> login <span class="hljs-keyword">to</span> a guest Linux VirtualBox VM is<span class="hljs-built_in"> port </span>forwarding. By default, you should have one<span class="hljs-built_in"> interface </span>already which is using NAT. Then go <span class="hljs-keyword">to</span> the<span class="hljs-built_in"> Network settings </span><span class="hljs-keyword">and</span> click the<span class="hljs-built_in"> Port </span>Forwarding button. <span class="hljs-builtin-name">Add</span> a new Rule:<br>`Host<span class="hljs-built_in"> port </span>3022, guest<span class="hljs-built_in"> port </span>22, name ssh, other left blank.`<br></code></pre></td></tr></table></figure>
<h3 id="plan-2"><a href="#plan-2" class="headerlink" title="plan 2"></a>plan 2</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">Change the adapter<span class="hljs-built_in"> type </span><span class="hljs-keyword">in</span> VirtualBox <span class="hljs-keyword">to</span> bridged, <span class="hljs-keyword">and</span> <span class="hljs-builtin-name">set</span> the guest <span class="hljs-keyword">to</span> use DHCP <span class="hljs-keyword">or</span> <span class="hljs-builtin-name">set</span> a static<span class="hljs-built_in"> IP address </span>outside of the bounds of DHCP. This will cause the Virtual Machine <span class="hljs-keyword">to</span> act like a normal guest on your home network. You can then<span class="hljs-built_in"> port </span>forward.<br></code></pre></td></tr></table></figure>

<h2 id="Virtualbox虚拟机Ubuntu共享文件夹设置-自动挂载-CSDN博客"><a href="#Virtualbox虚拟机Ubuntu共享文件夹设置-自动挂载-CSDN博客" class="headerlink" title="Virtualbox虚拟机Ubuntu共享文件夹设置 自动挂载 - CSDN博客"></a><a href="http://blog.csdn.net/taochangchang/article/details/12918537" target="_blank" rel="noopener">Virtualbox虚拟机Ubuntu共享文件夹设置 自动挂载 - CSDN博客</a></h2><ol>
<li>run <code>autorun.sh</code></li>
<li>reboot</li>
<li>name shared folder<blockquote>
<p>点击”设备(Devices)” -&gt; 共享文档夹(Shared Folders)菜单，添加一个共享文档夹，选项固定和临时是指该文档夹是否是持久的。共享名能够任取一个自己喜欢的，比如”gongxiang”，尽量使用英文名称。</p>
</blockquote>
</li>
<li>mount dir<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">sudo mkdir /mnt/<span class="hljs-keyword">shared</span><br>sudo mount -t vboxsf gongxiang /mnt/<span class="hljs-keyword">shared</span><br></code></pre></td></tr></table></figure></li>
<li>add to auto mount<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">// add to file: `/etc/fstab`</span><br>gongxiang /mnt/<span class="hljs-keyword">shared</span> vboxsf rw,gid=username,uid=username,<span class="hljs-built_in">auto</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-comment">// 以上的 vboxsf 是群组名称 username 是你的 用户名 就是 /home/下的文件夹名称/mnt/shared 是挂载目录</span><br></code></pre></td></tr></table></figure></li>
<li>umount<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">sudo umount -f /mnt/<span class="hljs-keyword">shared</span><br></code></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>字体定制</title>
    <url>/tool/font/</url>
    <content><![CDATA[<h2 id="monoca"><a href="#monoca" class="headerlink" title="monoca"></a><a href="https://github.com/todylu/monaco.ttf" target="_blank" rel="noopener">monoca</a></h2><h2 id="FiraCode"><a href="#FiraCode" class="headerlink" title="FiraCode"></a><a href="https://github.com/tonsky/FiraCode" target="_blank" rel="noopener">FiraCode</a></h2><p><a href="https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager" target="_blank" rel="noopener">https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo apt install fonts-firacode<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>tool</tag>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode定制</title>
    <url>/tool/vscode/</url>
    <content><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>同时选中所有匹配的 Ctrl+Shift+L</li>
<li>回退上一个光标操作 Ctrl+U</li>
<li>移动到定义处：F12 （或者：win+alt+left click）</li>
<li>找到所有的引用：Shift+F12</li>
</ul>
<h2 id="Snippets-in-Visual-Studio-Code"><a href="#Snippets-in-Visual-Studio-Code" class="headerlink" title="Snippets in Visual Studio Code"></a><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">Snippets in Visual Studio Code</a></h2><h2 id="配置编辑器的显示语言（菜单、控制台等）"><a href="#配置编辑器的显示语言（菜单、控制台等）" class="headerlink" title="配置编辑器的显示语言（菜单、控制台等）"></a>配置编辑器的显示语言（菜单、控制台等）</h2><ol>
<li>Ctrl+Shift+P</li>
<li>Cofingure Language</li>
<li><a href="https://code.visualstudio.com/docs/getstarted/locales" target="_blank" rel="noopener">https://code.visualstudio.com/docs/getstarted/locales</a></li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li>Git Blame</li>
<li>beautify</li>
<li>vscode-icons</li>
<li>gitignore</li>
<li>vscode-wechat</li>
<li>code runner<ul>
<li><a href="https://www.cnblogs.com/clemente/archive/2018/12/clemente/p/10056838.html" target="_blank" rel="noopener">解决 VS Code 使用 code runner 开发 Python 乱码问题 - clemente - 博客园</a></li>
</ul>
</li>
<li>vetur</li>
<li>auto rename tag</li>
</ul>
<h2 id="setting-json"><a href="#setting-json" class="headerlink" title="setting.json"></a>setting.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"editor.fontSize"</span>: <span class="hljs-number">15</span>,<br>  <span class="hljs-attr">"editor.fontFamily"</span>: <span class="hljs-string">"Fira Code, Monaco, Consolas, 'Courier New', monospace"</span>,<br>  <span class="hljs-attr">"editor.fontLigatures"</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">"files.autoGuessEncoding"</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">"java.errors.incompleteClasspath.severity"</span>: <span class="hljs-string">"ignore"</span>,<br>  <span class="hljs-attr">"window.menuBarVisibility"</span>: <span class="hljs-string">"default"</span>,<br>  <span class="hljs-attr">"workbench.activityBar.visible"</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">"terminal.integrated.shell.windows"</span>: <span class="hljs-string">"D:\\c\\git\\bin\\bash.exe"</span>,<br><br>  <span class="hljs-attr">"window.openFoldersInNewWindow"</span>: <span class="hljs-string">"on"</span>,<br>  <span class="hljs-attr">"files.autoSave"</span>: <span class="hljs-string">"afterDelay"</span>,<br>  <span class="hljs-attr">"files.autoSaveDelay"</span>: <span class="hljs-number">2000</span>,<br>  <span class="hljs-attr">"window.zoomLevel"</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">"editor.minimap.enabled"</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">"workbench.editor.enablePreview"</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 控制编辑器是否在滚动时使用动画</span><br>  <span class="hljs-attr">"editor.smoothScrolling"</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 总是隐藏打开的文件</span><br>  <span class="hljs-attr">"explorer.openEditors.visible"</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">"window.title"</span>: <span class="hljs-string">"$&#123;rootName&#125;$&#123;separator&#125;$&#123;activeEditorLong&#125;"</span>,<br>  <span class="hljs-attr">"workbench.iconTheme"</span>: <span class="hljs-string">"vscode-icons"</span>,<br>  <span class="hljs-attr">"editor.accessibilitySupport"</span>: <span class="hljs-string">"off"</span>,<br>  <span class="hljs-attr">"files.eol"</span>: <span class="hljs-string">"\n"</span>,<br>  <span class="hljs-attr">"window.enableMenuBarMnemonics"</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">"[markdown]"</span>: &#123;<br>    <span class="hljs-attr">"editor.quickSuggestions"</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">"editor.tabCompletion"</span>: <span class="hljs-string">"on"</span>,<br>  <span class="hljs-attr">"vetur.format.defaultFormatter"</span>: &#123;<br>    <span class="hljs-attr">"html"</span>: <span class="hljs-string">"prettier"</span>,<br>    <span class="hljs-attr">"css"</span>: <span class="hljs-string">"prettier"</span>,<br>    <span class="hljs-attr">"postcss"</span>: <span class="hljs-string">"prettier"</span>,<br>    <span class="hljs-attr">"scss"</span>: <span class="hljs-string">"prettier"</span>,<br>    <span class="hljs-attr">"less"</span>: <span class="hljs-string">"prettier"</span>,<br>    <span class="hljs-attr">"js"</span>: <span class="hljs-string">"prettier"</span>,<br>    <span class="hljs-attr">"ts"</span>: <span class="hljs-string">"prettier"</span>,<br>    <span class="hljs-attr">"stylus"</span>: <span class="hljs-string">"stylus-supremacy"</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="keybindings-json"><a href="#keybindings-json" class="headerlink" title="keybindings.json"></a>keybindings.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 将键绑定放入此文件中以覆盖默认值</span><br>[<br>  <span class="hljs-comment">// =======&gt; 方向</span><br>  <span class="hljs-comment">// 上</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+i"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorUp"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 下</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+,"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorDown"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 左</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+h"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorLeft"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 右</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+l"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorRight"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 开始</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+0"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorHome"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 结束</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+4"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorEnd"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// =======&gt; 选择</span><br>  <span class="hljs-comment">// 选中-上</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"shift+alt+i"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorUpSelect"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 选中-下</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"shift+alt+,"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorDownSelect"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 选中-左</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"shift+alt+h"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorLeftSelect"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 选中-右</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"shift+alt+l"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorRightSelect"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 选中-开始</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"shift+alt+0"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorHomeSelect"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 选中-结束</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"shift+alt+4"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorEndSelect"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 选中-左（单词）</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+shift+alt+h"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorWordStartLeftSelect"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 选中-右（单词）</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+shift+alt+l"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorWordEndRightSelect"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 扩选</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+w"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"editor.action.smartSelect.grow"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 缩选</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+shift+w"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"editor.action.smartSelect.shrink"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// =======&gt; 编辑</span><br>  <span class="hljs-comment">// 复制</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+c"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"editor.action.clipboardCopyAction"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus"</span><br>  &#125;,<br>  <span class="hljs-comment">// 粘贴</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+v"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"editor.action.clipboardPasteAction"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus &amp;&amp; !editorReadonly"</span><br>  &#125;,<br>  <span class="hljs-comment">// save</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+s"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.files.save"</span><br>  &#125;,<br>  <span class="hljs-comment">// 删除</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+'"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"deleteRight"</span>,<br>    <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus &amp;&amp; !editorReadonly"</span><br>  &#125;,<br>  <span class="hljs-comment">// =======&gt; 导航</span><br>  <span class="hljs-comment">// 标签-左</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+j"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.previousEditor"</span><br>  &#125;,<br>  <span class="hljs-comment">// 标签-右</span><br>  &#123;<br>    <span class="hljs-attr">"key"</span>: <span class="hljs-string">"alt+k"</span>,<br>    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.nextEditor"</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure>

<h2 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h2><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-comment">// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and</span><br>  <span class="hljs-comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br>  <span class="hljs-comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the</span><br>  <span class="hljs-comment">// same ids are connected.</span><br>  <span class="hljs-comment">// Example:</span><br>  <span class="hljs-attr">"Add hexo header"</span>: &#123;<br>    <span class="hljs-attr">"prefix"</span>: <span class="hljs-string">"head"</span>,<br>    <span class="hljs-attr">"body"</span>: [<br>      <span class="hljs-string">"---"</span>,<br>      <span class="hljs-string">"title: $&#123;1:undefined&#125;"</span>,<br>      <span class="hljs-string">"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"</span>,<br>      <span class="hljs-string">"toc: true"</span>,<br>      <span class="hljs-string">"comments: true"</span>,<br>      <span class="hljs-string">"tags:"</span>,<br>      <span class="hljs-string">"  - $&#123;2:undefined&#125;"</span>,<br>      <span class="hljs-string">"---"</span><br>    ],<br>    <span class="hljs-attr">"description"</span>: <span class="hljs-string">"Add hexo header"</span><br>  &#125;,<br>  <span class="hljs-attr">"Add hexo image url"</span>: &#123;<br>    <span class="hljs-attr">"prefix"</span>: <span class="hljs-string">"img"</span>,<br>    <span class="hljs-attr">"body"</span>: [<br>      <span class="hljs-string">"![$&#123;1:this is an image&#125;](https://github.com/lyloou/img/raw/develop/z/$&#123;2:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE$CURRENT_HOUR$CURRENT_MINUTE$CURRENT_SECOND.png&#125;)"</span><br>    ],<br>    <span class="hljs-attr">"description"</span>: <span class="hljs-string">"Add hexo image url"</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tool</tag>
        <tag>editor</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/tool/markdown/</url>
    <content><![CDATA[<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">| name       | age |<br>| ---------- | --- |<br>| LearnShare | 12  |<br>| Mike       | 32  |<br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">name</th>
<th align="left">age</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LearnShare</td>
<td align="left">12</td>
</tr>
<tr>
<td align="left">Mike</td>
<td align="left">32</td>
</tr>
</tbody></table>
<ul>
<li>第二行的破折线，至少需要 3 个。</li>
</ul>
<h2 id="实现换行"><a href="#实现换行" class="headerlink" title="实现换行"></a>实现换行</h2><p>在一段文字的后面添加两个空格<br>自动就换行了。</p>
<h2 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h2><ul>
<li><a href="https://guo365.github.io/study/Markdown.html#41" target="_blank" rel="noopener">Markdown 语法整理</a></li>
</ul>
<h2 id="将-GitBook-转成-PDF-或者-EPUB-格式电子书-简书"><a href="#将-GitBook-转成-PDF-或者-EPUB-格式电子书-简书" class="headerlink" title="将 GitBook 转成 PDF 或者 EPUB 格式电子书 - 简书"></a><a href="https://www.jianshu.com/p/7d192b650874" target="_blank" rel="noopener">将 GitBook 转成 PDF 或者 EPUB 格式电子书 - 简书</a></h2>]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman</title>
    <url>/tool/postman/</url>
    <content><![CDATA[<h2 id="设置-Header-中的-token"><a href="#设置-Header-中的-token" class="headerlink" title="设置 Header 中的 token"></a>设置 Header 中的 token</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">pm.test(<span class="hljs-string">"Status code is 200"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  pm.response.to.have.status(<span class="hljs-number">200</span>);<br>&#125;);<br><br><span class="hljs-keyword">var</span> r = <span class="hljs-built_in">JSON</span>.parse(responseBody);<br><br><span class="hljs-keyword">var</span> token = r.data.token;<br><span class="hljs-built_in">console</span>.log(token);<br><br>pm.globals.unset(<span class="hljs-string">"LoginToken"</span>);<br><br>pm.globals.set(<span class="hljs-string">"LoginToken"</span>, <span class="hljs-string">"Bearer:"</span> + token);<br></code></pre></td></tr></table></figure>

<h2 id="如何使用-Postman-对接口参数进行签名"><a href="#如何使用-Postman-对接口参数进行签名" class="headerlink" title="如何使用 Postman 对接口参数进行签名"></a><a href="http://autuan.top/2019/08/28/how-to-sign-params-by-postman/" target="_blank" rel="noopener">如何使用 Postman 对接口参数进行签名</a></h2><p>在 <code>Pre-request Script</code> 选项卡中添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取当前的请求路径</span><br><span class="hljs-keyword">var</span> url = pm.request.url;<br><br><span class="hljs-comment">// 获取环境变量</span><br><span class="hljs-keyword">const</span> client = pm.environment.get(<span class="hljs-string">"client"</span>);<br><span class="hljs-keyword">const</span> reqVersion = pm.environment.get(<span class="hljs-string">"reqVersion"</span>);<br><span class="hljs-keyword">const</span> sign = pm.environment.get(<span class="hljs-string">"reqVersion"</span>);<br><br><span class="hljs-comment">// 将必填参数拼接到路径上</span><br>url = url + <span class="hljs-string">"&amp;client="</span> + client + <span class="hljs-string">"&amp;reqVersion="</span> + reqVersion + <span class="hljs-string">"&amp;sign="</span> + sign;<br><br><span class="hljs-comment">// 重写url</span><br>pm.request.url = url;<br></code></pre></td></tr></table></figure>

<h2 id="SHA256-签名示例"><a href="#SHA256-签名示例" class="headerlink" title="SHA256 签名示例"></a>SHA256 签名示例</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取当前的请求路径</span><br><span class="hljs-keyword">var</span> url = pm.request.url;<br><br><span class="hljs-comment">// 配置参数</span><br><span class="hljs-keyword">let</span> activeId = <span class="hljs-string">"2197"</span>;<br><span class="hljs-keyword">let</span> awardId = <span class="hljs-number">10266</span>;<br><span class="hljs-keyword">let</span> cOpenId = <span class="hljs-string">"aaaa"</span>;<br><span class="hljs-keyword">let</span> MAC = <span class="hljs-string">"001a9a000000"</span>;<br><span class="hljs-keyword">let</span> cUDID = <span class="hljs-string">"23320005"</span>;<br><span class="hljs-keyword">let</span> accessToken = <span class="hljs-string">"bbb"</span>;<br><span class="hljs-keyword">let</span> cChip = <span class="hljs-string">"ccc"</span>;<br><span class="hljs-keyword">let</span> cEmmcCID = <span class="hljs-string">"ddd"</span>;<br><span class="hljs-keyword">let</span> cModel = <span class="hljs-string">"eee"</span>;<br><br><span class="hljs-comment">// 签名</span><br><span class="hljs-keyword">let</span> signStr = <span class="hljs-string">`MAC=<span class="hljs-subst">$&#123;MAC&#125;</span>&amp;accessToken=<span class="hljs-subst">$&#123;accessToken&#125;</span>&amp;cChip=<span class="hljs-subst">$&#123;cChip&#125;</span>&amp;cEmmcCID=<span class="hljs-subst">$&#123;cEmmcCID&#125;</span>&amp;cModel=<span class="hljs-subst">$&#123;cModel&#125;</span>&amp;cOpenId=<span class="hljs-subst">$&#123;cOpenId&#125;</span>&amp;cUDID=<span class="hljs-subst">$&#123;cUDID&#125;</span>&amp;id=<span class="hljs-subst">$&#123;activeId&#125;</span>&amp;source=wechat`</span>;<br><span class="hljs-keyword">var</span> sign = CryptoJS.SHA256(signStr).toString();<br><br><span class="hljs-comment">// 将必填参数拼接到路径上</span><br>url = <span class="hljs-string">`<span class="hljs-subst">$&#123;url&#125;</span>?activeId=<span class="hljs-subst">$&#123;activeId&#125;</span>&amp;awardId=<span class="hljs-subst">$&#123;awardId&#125;</span>&amp;cOpenId=<span class="hljs-subst">$&#123;cOpenId&#125;</span>&amp;MAC=<span class="hljs-subst">$&#123;MAC&#125;</span>&amp;cUDID=<span class="hljs-subst">$&#123;cUDID&#125;</span>&amp;accessToken=<span class="hljs-subst">$&#123;accessToken&#125;</span>&amp;&amp;token=<span class="hljs-subst">$&#123;sign&#125;</span>`</span>;<br><br><span class="hljs-comment">// 重写url</span><br>pm.request.url = url;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统使用技巧</title>
    <url>/windows/%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="如何复制-Windows-单文件夹里的-200-万个小文件？而且电脑不卡（Robocopy）-小众软件"><a href="#如何复制-Windows-单文件夹里的-200-万个小文件？而且电脑不卡（Robocopy）-小众软件" class="headerlink" title="如何复制 Windows 单文件夹里的 200 万个小文件？而且电脑不卡（Robocopy） - 小众软件"></a><a href="https://www.appinn.com/windows-robocopy/" target="_blank" rel="noopener">如何复制 Windows 单文件夹里的 200 万个小文件？而且电脑不卡（Robocopy） - 小众软件</a></h2><p>Robocopy<br>语法 robocopy <source> <destination> [<file>[ …]] [<options>]</options></file></destination></p>
<p>例如，若要将名为 yearly-report 的文件从 c:\reports 复制到文件共享 \ \ marketing\videos ，同时启用多线程以实现更高性能的 (使用 /mt 参数) 并且在 (与 /z 参数) 中断的情况下重启传输的功能，请键入：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">robocopy <span class="hljs-string">c:</span>\reports <span class="hljs-string">'\\marketing\videos'</span> yearly-report.mov <span class="hljs-regexp">/mt /</span>z<br></code></pre></td></tr></table></figure>

<p><a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/robocopy" target="_blank" rel="noopener">robocopy | Microsoft Docs</a></p>
<h2 id="Create-Windows-service-from-executable-Stack-Overflow"><a href="#Create-Windows-service-from-executable-Stack-Overflow" class="headerlink" title="Create Windows service from executable - Stack Overflow"></a><a href="https://stackoverflow.com/questions/3582108/create-windows-service-from-executable" target="_blank" rel="noopener">Create Windows service from executable - Stack Overflow</a></h2><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">sc.exe create &lt;<span class="hljs-keyword">new</span><span class="hljs-type">_service_name</span>&gt; binPath= <span class="hljs-string">"&lt;path_to_the_service_executable&gt;"</span><br></code></pre></td></tr></table></figure>

<h2 id="新建以-开头的文件"><a href="#新建以-开头的文件" class="headerlink" title="新建以.开头的文件"></a>新建以<code>.</code>开头的文件</h2><p>例如：<code>.gitignore</code></p>
<ol>
<li>右键新建文本文件</li>
<li>重命名：<code>.gitignore.</code>， 没错最后面需要那个<code>.</code>，否则无法保存</li>
<li>回车保存。</li>
</ol>
<h2 id="远程控制设备"><a href="#远程控制设备" class="headerlink" title="远程控制设备"></a>远程控制设备</h2><p>运行命令：<code>mstsc</code></p>
<ul>
<li><a href="http://www.ittribalwo.com/article/2600.html" target="_blank" rel="noopener">mstsc 命令远程控制桌面使用方法及设置讲解</a></li>
</ul>
<h2 id="解决路由冲突"><a href="#解决路由冲突" class="headerlink" title="解决路由冲突"></a>解决路由冲突</h2><ul>
<li><code>ipconfig /release</code> 释放端口</li>
<li><code>ipconfig /renew</code> 重新连接</li>
</ul>
<h2 id="Does-Windows-have-the-ln-s-or-equivalent"><a href="#Does-Windows-have-the-ln-s-or-equivalent" class="headerlink" title="Does Windows have the ln -s or equivalent?"></a><a href="https://superuser.com/questions/182553/does-windows-have-the-ln-s-or-equivalent" target="_blank" rel="noopener">Does Windows have the ln -s or equivalent?</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">// To create a symbolic link named MyDocs from the root directory to the \Users\User1\Documents directory, <span class="hljs-built_in">type</span>:<br>mklink /d MyDocs D:/t<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">Q: mklink 你没有足够的权限执行此操作。<br>A: 以管理员的身份运行`cmd.exe`, https://answers.microsoft.com/zh-hans/windows/forum/windows_10-files-winpc/win10/8df12869-96f4-4cd1-a914-355e908a6015<br></code></pre></td></tr></table></figure>

<figure class="highlight bat"><table><tr><td class="code"><pre><code class="hljs bat"><span class="hljs-comment">@REM e.g.</span><br><span class="hljs-built_in">cd</span> /d <span class="hljs-variable">%USERPROFILE%</span><br><br><span class="hljs-comment">@REM  dir</span><br>mklink /d ".IntelliJIdea2019.<span class="hljs-number">2</span>" "D:/d/.IntelliJIdea2018.<span class="hljs-number">1</span>"<br>mklink /d ".AndroidStudio3.<span class="hljs-number">5</span>" "D:/d/.AndroidStudio3.<span class="hljs-number">5</span>"<br>mklink /d ".gradle" "D:/d/.gradle"<br>mklink /d ".m2" "D:/d/.m2";<br>mklink /d ".ssh" "D:/d/.ssh";<br>mklink /d ".vim" "D:/d/.vim";<br>mklink /d ".vscode" "D:/d/.vscode"<br>mklink /d "Navicat" "D:/d/Navicat"<br><br><span class="hljs-comment">@REM file</span><br>mklink ".gitconfig" "D:/d/.gitconfig"<br>mklink ".minttyrc" "D:/d/.minttyrc"<br>mklink ".npmrc" "D:/d/.npmrc"<br>mklink ".bashrc" "D:/d/.bashrc"<br></code></pre></td></tr></table></figure>

<h2 id="如何删除-WINDOWS-BT（临时-windows-安装文件）"><a href="#如何删除-WINDOWS-BT（临时-windows-安装文件）" class="headerlink" title="如何删除$WINDOWS.~BT（临时 windows 安装文件）"></a><a href="https://jingyan.baidu.com/article/f0e83a25a691ae22e59101c1.html" target="_blank" rel="noopener">如何删除$WINDOWS.~BT（临时 windows 安装文件）</a></h2><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">- C盘右键属性<br>- 选择“常规”---“磁盘清理”<br>- 在“磁盘清理”对话框里找到并点击“清理系统文件”<br>- 程序对系统进行清理文件扫描，稍微耐心等待片刻。<br>- 找到“临时Windows安装文件”，并打勾，在描述中可以看到这些文件是安装过程中留下的，可以安全删除<br>- 点击确定，耐心等待清理完成即可<br></code></pre></td></tr></table></figure>

<p>如果上面方法不行，进入 pe 直接删除。</p>
<h2 id="关闭系统更新——Windows-10-1803-如何彻底禁用自动更新"><a href="#关闭系统更新——Windows-10-1803-如何彻底禁用自动更新" class="headerlink" title="关闭系统更新——Windows 10 1803 如何彻底禁用自动更新"></a>关闭系统更新——<a href="http://www.mmxf.net/archives/1479.html" target="_blank" rel="noopener">Windows 10 1803 如何彻底禁用自动更新</a></h2><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">打开注册表编辑器，找到下面的键值：<br><br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\UsoSvc<br><br>找到“Start”，将值修改为4<br></code></pre></td></tr></table></figure>

<h2 id="cmd-运行命令后，自动关闭-cmd-黑窗口"><a href="#cmd-运行命令后，自动关闭-cmd-黑窗口" class="headerlink" title="cmd 运行命令后，自动关闭 cmd 黑窗口"></a>cmd 运行命令后，自动关闭 cmd 黑窗口</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-keyword">if</span> <span class="hljs-string">"%1"</span> == <span class="hljs-string">"h"</span> goto begin<br>mshta vbscript:createobject(<span class="hljs-string">"wscript.shell"</span>).run(<span class="hljs-string">""</span><span class="hljs-string">"%~nx0"</span><span class="hljs-string">" h"</span>,0)(window.close)&amp;&amp;<span class="hljs-built_in">exit</span><br>:begin<br>D:\c\Redis-x64-5.0.10\redis-server.exe<br></code></pre></td></tr></table></figure>

<h2 id="占用查询端口的-pid-查询"><a href="#占用查询端口的-pid-查询" class="headerlink" title="占用查询端口的 pid 查询"></a>占用查询端口的 pid 查询</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">netstat -ano<span class="hljs-string">|findstr "</span><span class="hljs-number">9097</span><span class="hljs-string">"</span><br></code></pre></td></tr></table></figure>

<h2 id="关闭对应-pid-管理员权限"><a href="#关闭对应-pid-管理员权限" class="headerlink" title="关闭对应 pid(管理员权限)"></a>关闭对应 pid(管理员权限)</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">taskkill -F -PID <span class="hljs-number">6832</span><br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/tianjun2012/article/details/79806760" target="_blank" rel="noopener">windows10 下关闭端口占用_tianjun2012 的专栏-CSDN 博客</a></p>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows重装后完善步骤</title>
    <url>/windows/step/</url>
    <content><![CDATA[<p>安装软件</p>
<ul>
<li>sougou</li>
<li>tim</li>
<li>wps</li>
<li>wechat</li>
<li>firefox</li>
<li>chrome</li>
<li>vscode</li>
</ul>
<p>软件配置</p>
<ul>
<li>7-zip</li>
<li>pic</li>
<li>vim</li>
</ul>
<p>环境变量</p>
<p>配置软链接</p>
<p>设置字体</p>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows环境变量</title>
    <url>/windows/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>ANDROID_HOME=D:\c\android\sdk<br>ANDROID_NDK_ROOT=D:\c\android\ndk\android-ndk-r14<br>PATH=D:\c\android\studio\gradle\gradle-4.4\bin;D:\c\android\ndk\android-ndk-r14;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>CLASSPATH=.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;<br>JAVA_HOME=D:\c\java\jdk1.8.0<br>PATH=%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>GOROOT=D:\c\go<br>GOPATH=D:\w\go<br>PATH=%GOROOT%\bin;%GOPATH%\bin;</p>
<h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>D:\c\python\Scripts;<br>D:\c\python;<br>D:\p\shortcut;<br>D:\c\nodejs;<br>D:\c\mingw64\bin;<br>D:\c\apache-maven-3.5.0\bin;<br>D:\c\Apache24\bin;<br>D:\c\git\bin;<br>D:\c\git;</p>
<h2 id="Paht-all"><a href="#Paht-all" class="headerlink" title="Paht-all"></a>Paht-all</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;D:\c\android\studio\gradle\gradle-4.4\bin;D:\c\android\ndk\android-ndk-r14;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;%GOROOT%\bin;%GOPATH%\bin;D:\c\python\Scripts\;D:\c\python\;D:\p\shortcut;D:\c\nodejs;D:\c\mingw64\bin;D:\c\apache-maven-3.5.0\bin;D:\c\Apache24\bin;D:\c\git\bin;D:\c\git;D:\c\pgadmin\runtime;C:\p\TortoiseSVN\bin;D:\c\java\spring-2.0.5.RELEASE/bin;D:\c\git\mingw64\bin;D:\c\LoadRunner\strawberry-perl\perl\bin;D:\c\jmeter\apache-jmeter-5.0\bin<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>【Windows】win11相关</title>
    <url>/windows/win11/</url>
    <content><![CDATA[<h2 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h2><h2 id="关闭弹性滚动"><a href="#关闭弹性滚动" class="headerlink" title="关闭弹性滚动"></a>关闭弹性滚动</h2><p>进入：<code>edge://flags/</code></p>
<p>disable <code>Microsoft Edge scrolling personality</code></p>
<h2 id="恢复-win10-桌面右键菜单"><a href="#恢复-win10-桌面右键菜单" class="headerlink" title="恢复 win10 桌面右键菜单"></a>恢复 win10 桌面右键菜单</h2><p><a href="https://blog.csdn.net/admans/article/details/121302883" target="_blank" rel="noopener">Win11 恢复 Win10 经典右键菜单 亲测有效_admans 的专栏-CSDN 博客_win11 换回 win10 右键</a></p>
<p>管理员权限运行</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><code class="hljs bat">reg.exe add "HKCU\Software\Classes\CLSID\&#123;<span class="hljs-number">86</span>ca1aa0-<span class="hljs-number">34</span>aa-<span class="hljs-number">4</span>e8b-a509-<span class="hljs-number">50</span>c905bae2a2&#125;\InprocServer32" /f /ve<br></code></pre></td></tr></table></figure>

<p>重启资源管理器：<br><code>taskkill /f /im explorer.exe&amp;&amp;explorer.exe</code></p>
<blockquote>
<p><a href="https://zhidao.baidu.com/question/1365850274792601979.html?qbl=relate_question_2" target="_blank" rel="noopener">cmd /c taskkill /f /im explorer.exe&amp;&amp;explorer.exe 这命令什么意思_百度知道</a></p>
</blockquote>
<p>恢复 win11</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><code class="hljs bat">reg.exe delete "HKCU\Software\Classes\CLSID\&#123;<span class="hljs-number">86</span>ca1aa0-<span class="hljs-number">34</span>aa-<span class="hljs-number">4</span>e8b-a509-<span class="hljs-number">50</span>c905bae2a2&#125;\InprocServer32" /va /f<br></code></pre></td></tr></table></figure>

<p>其它方案：startAllback 软件</p>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统安装</title>
    <url>/windows/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>（以 win7 家庭版为例）</p>
<ul>
<li>购买获取产品密钥；</li>
<li>依据产品密钥获得 iso 系统镜像文件；<a href="https://www.microsoft.com/zh-cn/software-download/windows7" target="_blank" rel="noopener">下载 Windows 7 光盘映像（ISO 文件）</a></li>
<li>制作 winPE；</li>
<li>硬盘格式化和分区；</li>
<li>安装系统；</li>
<li>再次输入产品密钥激活；</li>
</ul>
<h2 id="必备软件安装；"><a href="#必备软件安装；" class="headerlink" title="必备软件安装；"></a>必备软件安装；</h2><ul>
<li>7-zip 压缩工具</li>
<li>wps 办公软件</li>
<li>搜狗输入法（拼音 || 五笔）</li>
</ul>
<h2 id="制作-winPE"><a href="#制作-winPE" class="headerlink" title="制作 winPE"></a>制作 winPE</h2><ul>
<li>微 Pe： <a href="http://www.wepe.com.cn/" target="_blank" rel="noopener">http://www.wepe.com.cn/</a></li>
<li>老毛桃： <a href="http://www.laomaotao.org/" target="_blank" rel="noopener">http://www.laomaotao.org/</a></li>
<li>大白菜： <a href="http://www.bigbaicai.com/" target="_blank" rel="noopener">http://www.bigbaicai.com/</a></li>
</ul>
<h2 id="雨林木风"><a href="#雨林木风" class="headerlink" title="雨林木风"></a>雨林木风</h2><ul>
<li>下载 iso 镜像（里面包含 GHO 和 EXE 文件）；</li>
<li>将 iso 镜像拷贝到制作好 PE 的 U 盘里；</li>
<li>启动 PE 后，装载 iso，双击盘符里的 EXE 文件；</li>
</ul>
<h2 id="镜像地址"><a href="#镜像地址" class="headerlink" title="镜像地址"></a>镜像地址</h2><p><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></p>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows软件</title>
    <url>/windows/%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><p><a href="https://autohotkey.com/" target="_blank" rel="noopener">autohotkey</a><br><a href="https://www.voidtools.com/" target="_blank" rel="noopener">everything</a><br><a href="https://github.com/shadowsocks" target="_blank" rel="noopener">shadowsocks</a><br><a href="https://zh.snipaste.com/" target="_blank" rel="noopener">snipaste</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># http://www.xeylon.com/docker/114.html</span><br>docker run -d -p 5800:5800/tcp -p 5800:5800/udp jpacg/shadowsocksr -s 0.0.0.0 -p 5800 -k 密码 -m aes-256-cfb<br></code></pre></td></tr></table></figure>

<p><a href="https://tzrgaga.github.io/2017/04/12/forward-socks-by-privoxy/" target="_blank" rel="noopener">privoxy-Windows 下使用 Privoxy 转换 socks5 代理为 Http 代理</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># vi Privoxy/config.txt</span><br><span class="hljs-comment"># 底部加入一行：</span><br>forward-socks5 / 0.0.0.0:1080 .<br></code></pre></td></tr></table></figure>

<p><a href="https://sourceforge.net/projects/qttabbar/files/" target="_blank" rel="noopener">qttabbar</a><br>FreeCommander XE</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini">过滤： *<br>程序： D:\p\WinMerge\WinMergeU.exe<br></code></pre></td></tr></table></figure>

<p><a href="http://www.7-zip.org/" target="_blank" rel="noopener">7-zip</a><br>chrome<br>金山词霸<br>xmind<br><a href="http://www.irfanview.com/" target="_blank" rel="noopener">irfanview</a><br>virtualbox<br><a href="http://eyefoo.com/" target="_blank" rel="noopener">eyefoo</a><br>wiz<br>wps<br>f.lux<br>ccleaner<br>tim<br>qqpcmgr<br>listary<br>ev 录屏<br>potplayer<br>ditto<br>v2ray</p>
<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>cmder<br>git<br>android studio<br>idea<br>visual studio code<br>fiddler<br>mariaDB<br>hedisql<br>java<br>apache<br>go<br>nodejs<br>python<br>gvim<br>emacs<br>typora</p>
<h2 id="Windows-下搭建-FTP-服务器"><a href="#Windows-下搭建-FTP-服务器" class="headerlink" title="Windows 下搭建 FTP 服务器"></a>Windows 下搭建 FTP 服务器</h2><p><a href="https://blog.csdn.net/EXLsunshine/article/details/29181465" target="_blank" rel="noopener">https://blog.csdn.net/EXLsunshine/article/details/29181465</a><br>注意关闭防火墙</p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>win+数字： 将软件锁定到任务栏后，通过这个快捷键可以快速打开（切换）软件；</p>
<h3 id="Create-Windows-service-from-executable"><a href="#Create-Windows-service-from-executable" class="headerlink" title="Create Windows service from executable"></a><a href="https://stackoverflow.com/questions/3582108/create-windows-service-from-executable" target="_blank" rel="noopener">Create Windows service from executable</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sc.exe create &lt;new_service_name&gt; binPath= <span class="hljs-string">"&lt;path_to_the_service_executable&gt;"</span><br>sc.exe delete &lt;service name&gt;<br><span class="hljs-comment"># Use NSSM( the non-Sucking Service Manager ) to run a .BAT or any .EXE file as a service.</span><br><span class="hljs-comment"># http://nssm.cc/</span><br></code></pre></td></tr></table></figure>

<h3 id="bat2exe"><a href="#bat2exe" class="headerlink" title="bat2exe"></a>bat2exe</h3><ul>
<li><a href="https://sourceforge.net/projects/bat-to-exe/?source=typ_redirect" target="_blank" rel="noopener">https://sourceforge.net/projects/bat-to-exe/?source=typ_redirect</a></li>
</ul>
<p>mobaxterm<br><a href="https://mobaxterm.mobatek.net/plugins.html" target="_blank" rel="noopener">https://mobaxterm.mobatek.net/plugins.html</a></p>
<h2 id="NetSetMan-5-0-16-年老牌工具更新，快速切换网卡-IP-地址、网关、DNS-工具-Windows-小众软件"><a href="#NetSetMan-5-0-16-年老牌工具更新，快速切换网卡-IP-地址、网关、DNS-工具-Windows-小众软件" class="headerlink" title="NetSetMan 5.0 - 16 年老牌工具更新，快速切换网卡 IP 地址、网关、DNS 工具[Windows] - 小众软件"></a><a href="https://www.appinn.com/netsetman-5/" target="_blank" rel="noopener">NetSetMan 5.0 - 16 年老牌工具更新，快速切换网卡 IP 地址、网关、DNS 工具[Windows] - 小众软件</a></h2><h2 id="stnkl-EverythingToolbar-Everything-integration-for-the-Windows-taskbar"><a href="#stnkl-EverythingToolbar-Everything-integration-for-the-Windows-taskbar" class="headerlink" title="stnkl/EverythingToolbar: Everything integration for the Windows taskbar."></a><a href="https://github.com/stnkl/EverythingToolbar" target="_blank" rel="noopener">stnkl/EverythingToolbar: Everything integration for the Windows taskbar.</a></h2><h2 id="Microsoft-PowerToys-Microsoft-Docs"><a href="#Microsoft-PowerToys-Microsoft-Docs" class="headerlink" title="Microsoft PowerToys | Microsoft Docs"></a><a href="https://docs.microsoft.com/zh-cn/windows/powertoys/" target="_blank" rel="noopener">Microsoft PowerToys | Microsoft Docs</a></h2><h2 id="wubiLex-WIN10-五笔助手-发现频道-小众软件官方论坛"><a href="#wubiLex-WIN10-五笔助手-发现频道-小众软件官方论坛" class="headerlink" title="wubiLex (WIN10 五笔助手) - 发现频道 - 小众软件官方论坛"></a><a href="https://meta.appinn.net/t/topic/15637" target="_blank" rel="noopener">wubiLex (WIN10 五笔助手) - 发现频道 - 小众软件官方论坛</a></h2><h2 id="复制到系统剪切板"><a href="#复制到系统剪切板" class="headerlink" title="复制到系统剪切板"></a>复制到系统剪切板</h2><p><a href="https://stackoverflow.com/a/49536965" target="_blank" rel="noopener">https://stackoverflow.com/a/49536965</a></p>
<blockquote>
<p>cat file | clip.exe</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env sh</span><br><br><span class="hljs-comment"># 获取tag名称：dev_2110221510</span><br>time=$(date <span class="hljs-string">"+%y%m%d%H%M"</span>)<br>t_tag=<span class="hljs-string">"dev_<span class="hljs-variable">$&#123;time&#125;</span>"</span><br><br><span class="hljs-comment"># 复制tag到系统剪切板</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;t_tag&#125;</span> | clip.exe<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"TAG: <span class="hljs-variable">$&#123;t_tag&#125;</span> copied."</span><br><br><span class="hljs-comment"># 打标签</span><br>git tag <span class="hljs-variable">$&#123;t_tag&#125;</span><br>git push origin <span class="hljs-variable">$&#123;t_tag&#125;</span><br><br><span class="hljs-comment"># 打开Jenkins网页</span><br>start http://jenkins.lyloou.com<br></code></pre></td></tr></table></figure>

<h2 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h2><p><a href="https://www.jianshu.com/p/d7bf3f9da6db" target="_blank" rel="noopener">Typora + PicGo-Core + Custom Command 实现上传图片到图床 - 简书</a><br><a href="https://juejin.cn/post/6990295227915468831" target="_blank" rel="noopener">PicGo 插件 - 掘金</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"picBed"</span>: &#123;<br>    <span class="hljs-attr">"current"</span>: <span class="hljs-string">"github"</span>,<br>    <span class="hljs-attr">"uploader"</span>: <span class="hljs-string">"github"</span>,<br>    <span class="hljs-attr">"github"</span>: &#123;<br>      <span class="hljs-attr">"repo"</span>: <span class="hljs-string">"lyloou/img"</span>,<br>      <span class="hljs-attr">"token"</span>: <span class="hljs-string">"xxx"</span>,<br>      <span class="hljs-attr">"path"</span>: <span class="hljs-string">"img/"</span>,<br>      <span class="hljs-attr">"customUrl"</span>: <span class="hljs-string">""</span>,<br>      <span class="hljs-attr">"branch"</span>: <span class="hljs-string">"develop"</span><br>    &#125;,<br>    <span class="hljs-attr">"gitee"</span>: &#123;<br>      <span class="hljs-attr">"repo"</span>: <span class="hljs-string">"lyloou/image"</span>,<br>      <span class="hljs-attr">"branch"</span>: <span class="hljs-string">"master"</span>,<br>      <span class="hljs-attr">"token"</span>: <span class="hljs-string">"xxx"</span>,<br>      <span class="hljs-attr">"path"</span>: <span class="hljs-string">"v1"</span>,<br>      <span class="hljs-attr">"customPath"</span>: <span class="hljs-string">""</span>,<br>      <span class="hljs-attr">"customUrl"</span>: <span class="hljs-string">""</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">"picgoPlugins"</span>: &#123;<br>    <span class="hljs-attr">"picgo-plugin-autocopy"</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"picgo-plugin-gitee-uploader"</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"picgo-plugin-rename-file"</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"picgo-plugin-github-plus"</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">"picgo-plugin-rename-file"</span>: &#123;<br>    <span class="hljs-attr">"format"</span>: <span class="hljs-string">"&#123;origin&#125;_&#123;y&#125;&#123;m&#125;&#123;d&#125;&#123;h&#125;&#123;i&#125;&#123;s&#125;&#123;ms&#125;_&#123;rand:6&#125;"</span><br>  &#125;,<br>  <span class="hljs-attr">"picgo-plugin-gitee-uploader"</span>: &#123;<br>    <span class="hljs-attr">"lastSync"</span>: <span class="hljs-string">"2021-12-15 06:31:21"</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="edge"><a href="#edge" class="headerlink" title="edge"></a>edge</h2><p><a href="https://bbs.ihei5.com/thread-1182663-1-1.html" target="_blank" rel="noopener">怎么关闭 Microsoft edge 浏览器双指左右滑动前后翻页的手势？<em>电脑软硬件</em>爱黑武论坛</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">Overscroll <span class="hljs-built_in">history</span> navigation (<span class="hljs-built_in">disable</span>)<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>【Windows】系统优化</title>
    <url>/windows/%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.xia1ge.com/compattelrunner-exe.html" target="_blank" rel="noopener">解决 Windows 10 的 CompatTelRunner.exe 占用磁盘高的方法 – 下 1 个好软件</a></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 禁用以下服务 (win+r --&gt; services.msc)</span><br>Diagnostic Policy Service<br>Diagnostic Service Host<br></code></pre></td></tr></table></figure>

<p>2.右键点开”这台电脑”，点”管理”，点”服务和应用程序”点”服务”，在右边框里把”superfetch”、”windows search”、”windows search”、”HomeGroupProvider”的启动类型设置成”禁用”<br>3.from 知乎：通过注册表（regedit）定位并修改了 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\UnistoreSvc 等类似项的 start 值为 4，unistack 服务就不会开机运行，空闲时的硬盘占用下来了。</p>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】K选择问题</title>
    <url>/%E7%AE%97%E6%B3%95/K%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>K 选择问题：给出 N 个数，找出其中第 K 小的元素。</p>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><p>暴力法：<br>时间复杂度：O(K x N)</p>
<h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h2><p>二分法：<br>时间复杂度：O(N)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * K选择问题：给出N个数，找出其中第K小的元素。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">K</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 1 2 3 4 5 6 7 8 9</span><br>        test(getList1());<br><br>        System.out.println(<span class="hljs-string">"-----"</span>);<br><br>        <span class="hljs-comment">// 7 8 11 22 33 44 55 66 99</span><br>        test(getList2());<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(List&lt;Integer&gt; list)</span> </span>&#123;<br>        System.out.printf(<span class="hljs-string">"第%s小的元素是%s%n"</span>, <span class="hljs-number">3</span>, getNumK(list, <span class="hljs-number">3</span>));<br>        System.out.printf(<span class="hljs-string">"第%s小的元素是%s%n"</span>, <span class="hljs-number">2</span>, getNumK(list, <span class="hljs-number">2</span>));<br>        System.out.printf(<span class="hljs-string">"第%s小的元素是%s%n"</span>, <span class="hljs-number">1</span>, getNumK(list, <span class="hljs-number">1</span>));<br>        System.out.printf(<span class="hljs-string">"第%s小的元素是%s%n"</span>, <span class="hljs-number">5</span>, getNumK(list, <span class="hljs-number">5</span>));<br>        System.out.printf(<span class="hljs-string">"第%s小的元素是%s%n"</span>, <span class="hljs-number">8</span>, getNumK(list, <span class="hljs-number">8</span>));<br>        System.out.printf(<span class="hljs-string">"第%s小的元素是%s%n"</span>, <span class="hljs-number">9</span>, getNumK(list, <span class="hljs-number">9</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title">getList1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title">getList2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-number">33</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二分法：找一个枢轴，比枢轴小的放到s1，比枢轴大的放到s2，</span><br><span class="hljs-comment">     * 如果： k == s1.size+1，说明枢轴就是要找的元素（+1表示枢轴所在的位置）</span><br><span class="hljs-comment">     * 如果： k &lt; s1.size+1，说明要找的元素在s1中</span><br><span class="hljs-comment">     * 否则：要找的元素在 s2 中（注意要将枢轴元素加回到s2中，因为有可能正好是这个枢轴元素）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list 列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> k    第k小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回第k小的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">getNumK</span><span class="hljs-params">(List&lt;Integer&gt; list, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (list.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (list.size() &lt; k) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">1</span> &amp;&amp; k == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> list.get(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        List&lt;Integer&gt; s1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        List&lt;Integer&gt; s2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">int</span> p = list.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-keyword">final</span> Integer a = list.get(i);<br>            <span class="hljs-keyword">if</span> (a &lt; p) &#123;<br>                s1.add(a);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                s2.add(a);<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span> (k == s1.size() + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (k &lt; s1.size() + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> getNumK(s1, k);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            s1.add(p);<br>            <span class="hljs-keyword">return</span> getNumK(s2, k - s1.size());<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//~ output:</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 第3小的元素是3</span><br><span class="hljs-comment"> 第2小的元素是2</span><br><span class="hljs-comment"> 第1小的元素是1</span><br><span class="hljs-comment"> 第5小的元素是5</span><br><span class="hljs-comment"> 第8小的元素是8</span><br><span class="hljs-comment"> 第9小的元素是9</span><br><span class="hljs-comment"> -----</span><br><span class="hljs-comment"> 第3小的元素是11</span><br><span class="hljs-comment"> 第2小的元素是8</span><br><span class="hljs-comment"> 第1小的元素是7</span><br><span class="hljs-comment"> 第5小的元素是33</span><br><span class="hljs-comment"> 第8小的元素是66</span><br><span class="hljs-comment"> 第9小的元素是99</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 问题修复</title>
    <url>/windows/%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h2 id="修复移动硬盘”文件或目录损坏且无法读取”-小叶白龙博客"><a href="#修复移动硬盘”文件或目录损坏且无法读取”-小叶白龙博客" class="headerlink" title="修复移动硬盘”文件或目录损坏且无法读取”-小叶白龙博客"></a><a href="http://www.xiaoyebailong.com/index.php/2009/09/01/514.htm" target="_blank" rel="noopener">修复移动硬盘”文件或目录损坏且无法读取”-小叶白龙博客</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">chkdsk C: /f<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】正则表达式匹配</title>
    <url>/%E7%AE%97%E6%B3%95/jz19-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h2 id="剑指-Offer-第-19-题-正则表达式匹配"><a href="#剑指-Offer-第-19-题-正则表达式匹配" class="headerlink" title="剑指 Offer 第 19 题-正则表达式匹配"></a>剑指 Offer 第 19 题-正则表达式匹配</h2><p>请实现一个函数用来匹配包括’.’和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（包含 0 次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。</p>
<p>例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab*a”均不匹配</p>
<p>数据范围:</p>
<ul>
<li>1.str 可能为空，且只包含从 a-z 的小写字母。</li>
<li>2.pattern 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 <em>，无连续的 ‘</em>‘。</li>
<li>3.1 &lt;= str.length &lt;= 20</li>
<li>4.1 &lt;= pattern.length &lt;= 30</li>
</ul>
<p>要求：空间复杂度 O(1)O(1)，时间复杂度 O(n)O(n)</p>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><p>在原数组上，移动下标，合并边界</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 描述</span><br><span class="hljs-comment"> * 请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但是与"aa.a"和"ab*a"均不匹配</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 数据范围:</span><br><span class="hljs-comment"> * 1.str 可能为空，且只包含从 a-z 的小写字母。</span><br><span class="hljs-comment"> * 2.pattern 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 *，无连续的 '*'。</span><br><span class="hljs-comment"> * 3.1 &lt;= str.length &lt;= 20</span><br><span class="hljs-comment"> * 4.1 &lt;= pattern.length &lt;= 30</span><br><span class="hljs-comment"> * 要求：空间复杂度 O(1)O(1)，时间复杂度 O(n)O(n)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz19_1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jz19_1 jz19 = <span class="hljs-keyword">new</span> Jz19_1();<br>        jz19.test(<span class="hljs-string">"Test22"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*a"</span>, <span class="hljs-keyword">false</span>);<br><br>        jz19.test(<span class="hljs-string">"Test01"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">""</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test02"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test03"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">"."</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test04"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">"c*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test05"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test06"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"a."</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test07"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">""</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test08"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"."</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test09"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"ab*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test10"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"ab*a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test11"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test12"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">"a*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test13"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test14"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">"."</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test15"</span>, <span class="hljs-string">"ab"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test16"</span>, <span class="hljs-string">"ab"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test17"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"aa*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test18"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"aa.a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test19"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"a.a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test20"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">".a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test21"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"a*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test22"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test23"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*ac*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test24"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*a*c*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test25"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test26"</span>, <span class="hljs-string">"aab"</span>, <span class="hljs-string">"c*a*b"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test27"</span>, <span class="hljs-string">"aaca"</span>, <span class="hljs-string">"ab*a*c*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test28"</span>, <span class="hljs-string">"aaba"</span>, <span class="hljs-string">"ab*a*c*a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test29"</span>, <span class="hljs-string">"bbbba"</span>, <span class="hljs-string">".*a*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test30"</span>, <span class="hljs-string">"bcbbabab"</span>, <span class="hljs-string">".*a*a"</span>, <span class="hljs-keyword">false</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(String testName, String str, String pattern, <span class="hljs-keyword">boolean</span> expired)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (match(str, pattern) == expired) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.printf(<span class="hljs-string">"%s 结果不对\n"</span>, testName);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">match</span><span class="hljs-params">(String str, String pattern)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 串和模式为空的判断</span><br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span> &amp;&amp; pattern == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span> || pattern == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 转换为char数组</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] strArr = str.toCharArray();<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] patternArr = pattern.toCharArray();<br>        <span class="hljs-keyword">int</span> strIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> patternIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 进入递归</span><br>        <span class="hljs-keyword">return</span> matchCore(strArr, strIndex, patternArr, patternIndex);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matchCore</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] strArr, <span class="hljs-keyword">int</span> strIndex, <span class="hljs-keyword">char</span>[] patternArr, <span class="hljs-keyword">int</span> patternIndex)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 模式匹配到最后了，就可以决定串是否匹配</span><br>        <span class="hljs-keyword">if</span> (isEnd(patternArr, patternIndex)) &#123;<br>            <span class="hljs-keyword">return</span> isEnd(strArr, strIndex);<br>        &#125;<br><br>        <span class="hljs-comment">// 如果串的第一个字符不存在，</span><br>        <span class="hljs-comment">// 假如串是「aa」，模式是「aaa*」</span><br>        <span class="hljs-comment">// 可以向下进行，判断模式串是不是「.*」或「a*」</span><br><br>        <span class="hljs-comment">// 如果串的第一个字符存在</span><br>        <span class="hljs-comment">// 判断串的第一个字符是否和模式的第一个字符匹配</span><br>        <span class="hljs-keyword">boolean</span> firstMatch = !isEnd(strArr, strIndex) &amp;&amp; (<br>                patternArr[patternIndex] == <span class="hljs-string">'.'</span> || patternArr[patternIndex] == strArr[strIndex]);<br><br>        <span class="hljs-comment">// 判断模式的第二个字符是不是「*」</span><br>        <span class="hljs-keyword">if</span> ((patternIndex + <span class="hljs-number">1</span> &lt; patternArr.length) &amp;&amp; (patternArr[patternIndex + <span class="hljs-number">1</span>] == <span class="hljs-string">'*'</span>)) &#123;<br>            <span class="hljs-comment">// 模式串右移2位 或 字符串移动1</span><br>            <span class="hljs-keyword">return</span> matchCore(strArr, strIndex, patternArr, patternIndex + <span class="hljs-number">2</span>) ||<br>                    (firstMatch &amp;&amp; matchCore(strArr, strIndex + <span class="hljs-number">1</span>, patternArr, patternIndex));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> firstMatch &amp;&amp; matchCore(strArr, strIndex + <span class="hljs-number">1</span>, patternArr, patternIndex + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> END = <span class="hljs-string">'\0'</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEnd</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] arr, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> END == indexArr(arr, index);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span> <span class="hljs-title">indexArr</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] arr, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &lt; arr.length) &#123;<br>            <span class="hljs-keyword">return</span> arr[index];<br>        &#125;<br>        <span class="hljs-keyword">return</span> END;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h2><p>在原数组上，移动下标，列出详细的边界</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz19_2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jz19_2 jz19 = <span class="hljs-keyword">new</span> Jz19_2();<br>        jz19.test(<span class="hljs-string">"Test22"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*a"</span>, <span class="hljs-keyword">false</span>);<br><br>        jz19.test(<span class="hljs-string">"Test01"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">""</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test02"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test03"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">"."</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test04"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">"c*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test05"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test06"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"a."</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test07"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">""</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test08"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"."</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test09"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"ab*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test10"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"ab*a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test11"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test12"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">"a*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test13"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test14"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">"."</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test15"</span>, <span class="hljs-string">"ab"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test16"</span>, <span class="hljs-string">"ab"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test17"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"aa*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test18"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"aa.a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test19"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"a.a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test20"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">".a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test21"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"a*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test22"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test23"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*ac*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test24"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*a*c*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test25"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test26"</span>, <span class="hljs-string">"aab"</span>, <span class="hljs-string">"c*a*b"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test27"</span>, <span class="hljs-string">"aaca"</span>, <span class="hljs-string">"ab*a*c*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test28"</span>, <span class="hljs-string">"aaba"</span>, <span class="hljs-string">"ab*a*c*a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test29"</span>, <span class="hljs-string">"bbbba"</span>, <span class="hljs-string">".*a*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test30"</span>, <span class="hljs-string">"bcbbabab"</span>, <span class="hljs-string">".*a*a"</span>, <span class="hljs-keyword">false</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(String testName, String str, String pattern, <span class="hljs-keyword">boolean</span> expired)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (match(str, pattern) == expired) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.printf(<span class="hljs-string">"%s 结果不对\n"</span>, testName);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">match</span><span class="hljs-params">(String str, String pattern)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 串和模式为空的判断</span><br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span> &amp;&amp; pattern == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span> || pattern == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 转换为char数组</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] strArr = str.toCharArray();<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] patternArr = pattern.toCharArray();<br>        <span class="hljs-keyword">int</span> strIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> patternIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 进入递归</span><br>        <span class="hljs-keyword">return</span> matchCore(strArr, strIndex, patternArr, patternIndex);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matchCore</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] strArr, <span class="hljs-keyword">int</span> strIndex, <span class="hljs-keyword">char</span>[] patternArr, <span class="hljs-keyword">int</span> patternIndex)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 1. 串或模式边界的判断</span><br>        <span class="hljs-comment">// 串和模式都匹配到最后了: ("", "")</span><br>        <span class="hljs-keyword">if</span> (isEnd(strArr, strIndex) &amp;&amp; isEnd(patternArr, patternIndex)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 模式已经匹配到最后了，串还有: ("a", "")</span><br>        <span class="hljs-keyword">if</span> (!isEnd(strArr, strIndex) &amp;&amp; isEnd(patternArr, patternIndex)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 3. 串已经匹配到最后了，模式还有</span><br>        <span class="hljs-keyword">if</span> (isEnd(strArr, strIndex) &amp;&amp; !isEnd(patternArr, patternIndex)) &#123;<br>            <span class="hljs-comment">// 串已经匹配到最后了，模式还有情况1("", ".*")</span><br>            <span class="hljs-keyword">if</span> (!isEnd(patternArr, patternIndex + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">return</span> matchCore(strArr, strIndex, patternArr, patternIndex + <span class="hljs-number">2</span>);<br>            &#125;<br>            <span class="hljs-comment">// 串已经匹配到最后了，情况2 ("", ".")、("", "a")、("", "..")</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 4. 模式和串都还有</span><br><br>        <span class="hljs-comment">// 提前校验一下 patternIndex+1</span><br>        <span class="hljs-comment">// 4.1 下一个模式字符没有了（"a", "."）、（"a", "a"）、（"aa", "a"）</span><br>        <span class="hljs-keyword">if</span> (isEnd(patternArr, patternIndex + <span class="hljs-number">1</span>)) &#123;<br>            <span class="hljs-comment">// 下一个串字符是否还有</span><br>            <span class="hljs-keyword">if</span> (!isEnd(strArr, strIndex + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 比较当前的串和模式字符</span><br>            <span class="hljs-keyword">return</span> patternArr[patternIndex] == <span class="hljs-string">'.'</span> || patternArr[patternIndex] == strArr[strIndex];<br>        &#125;<br><br>        <span class="hljs-comment">// 4.2 pattern的第2个字符不为*</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> secondPatternChar = patternArr[patternIndex + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> ((secondPatternChar != <span class="hljs-string">'*'</span>)) &#123;<br>            <span class="hljs-comment">// 4.2.1 比较串和模式的第一个字符，第一个模式字符是「.」，或串和模式相等，则匹配下一个字符</span><br>            <span class="hljs-keyword">if</span> (patternArr[patternIndex] == <span class="hljs-string">'.'</span> || patternArr[patternIndex] == strArr[strIndex]) &#123;<br>                <span class="hljs-keyword">return</span> matchCore(strArr, strIndex + <span class="hljs-number">1</span>, patternArr, patternIndex + <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// 4.2.2 否则直接不匹配</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (patternArr[patternIndex] == <span class="hljs-string">'.'</span> || patternArr[patternIndex] == strArr[strIndex]) &#123;<br>            <span class="hljs-comment">// 4.3 pattern的第2个字符为「*」，如：(aa, a*)</span><br>            <span class="hljs-comment">// 模式串右移2位 或 字符串移动1</span><br>            <span class="hljs-keyword">return</span> matchCore(strArr, strIndex, patternArr, patternIndex + <span class="hljs-number">2</span>) ||<br>                    <span class="hljs-comment">// matchCore(strArr, strIndex + 1, patternArr, patternIndex + 2) ||</span><br>                    matchCore(strArr, strIndex + <span class="hljs-number">1</span>, patternArr, patternIndex);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> matchCore(strArr, strIndex, patternArr, patternIndex + <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> END = <span class="hljs-string">'\0'</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEnd</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] arr, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> END == indexArr(arr, index);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span> <span class="hljs-title">indexArr</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] arr, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &lt; arr.length) &#123;<br>            <span class="hljs-keyword">return</span> arr[index];<br>        &#125;<br>        <span class="hljs-keyword">return</span> END;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="方法-3"><a href="#方法-3" class="headerlink" title="方法 3"></a>方法 3</h2><p>拆出新数组，合并边界</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz19_3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jz19_3 jz19 = <span class="hljs-keyword">new</span> Jz19_3();<br>        jz19.test(<span class="hljs-string">"Test22"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*a"</span>, <span class="hljs-keyword">false</span>);<br><br>        jz19.test(<span class="hljs-string">"Test01"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">""</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test02"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test03"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">"."</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test04"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">"c*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test05"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test06"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"a."</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test07"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">""</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test08"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"."</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test09"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"ab*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test10"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"ab*a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test11"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test12"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">"a*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test13"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test14"</span>, <span class="hljs-string">"aa"</span>, <span class="hljs-string">"."</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test15"</span>, <span class="hljs-string">"ab"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test16"</span>, <span class="hljs-string">"ab"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test17"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"aa*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test18"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"aa.a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test19"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"a.a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test20"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">".a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test21"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"a*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test22"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test23"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*ac*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test24"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">"ab*a*c*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test25"</span>, <span class="hljs-string">"aaa"</span>, <span class="hljs-string">".*"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test26"</span>, <span class="hljs-string">"aab"</span>, <span class="hljs-string">"c*a*b"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test27"</span>, <span class="hljs-string">"aaca"</span>, <span class="hljs-string">"ab*a*c*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test28"</span>, <span class="hljs-string">"aaba"</span>, <span class="hljs-string">"ab*a*c*a"</span>, <span class="hljs-keyword">false</span>);<br>        jz19.test(<span class="hljs-string">"Test29"</span>, <span class="hljs-string">"bbbba"</span>, <span class="hljs-string">".*a*a"</span>, <span class="hljs-keyword">true</span>);<br>        jz19.test(<span class="hljs-string">"Test30"</span>, <span class="hljs-string">"bcbbabab"</span>, <span class="hljs-string">".*a*a"</span>, <span class="hljs-keyword">false</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(String testName, String str, String pattern, <span class="hljs-keyword">boolean</span> expired)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (match(str, pattern) == expired) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.printf(<span class="hljs-string">"%s 结果不对\n"</span>, testName);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">match</span><span class="hljs-params">(String str, String pattern)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 串和模式为空的判断</span><br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span> &amp;&amp; pattern == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span> || pattern == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 转换为char数组</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] strArr = str.toCharArray();<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] patternArr = pattern.toCharArray();<br>        <span class="hljs-comment">// 进入递归</span><br>        <span class="hljs-keyword">return</span> matchCore(strArr, patternArr);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matchCore</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] strArr, <span class="hljs-keyword">char</span>[] patternArr)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 模式到最后了，看串是否还有（没有则匹配，有则不匹配）</span><br>        <span class="hljs-keyword">if</span> (isEmptyArr(patternArr)) &#123;<br>            <span class="hljs-keyword">return</span> isEmptyArr(strArr);<br>        &#125;<br><br>        <span class="hljs-comment">// 串的第一个字符存在，且模式的第一个字符匹配串的第一个字符</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> firstMatch = !isEmptyArr(strArr) &amp;&amp;<br>                (patternArr[<span class="hljs-number">0</span>] == <span class="hljs-string">'.'</span> || patternArr[<span class="hljs-number">0</span>] == strArr[<span class="hljs-number">0</span>]);<br><br>        <span class="hljs-comment">// 模式串第2位为*</span><br>        <span class="hljs-keyword">if</span> (patternArr.length &gt;= <span class="hljs-number">2</span> &amp;&amp; patternArr[<span class="hljs-number">1</span>] == <span class="hljs-string">'*'</span>) &#123;<br>            <span class="hljs-comment">// 不论第一个是否匹配，模式串后移2位</span><br>            <span class="hljs-keyword">return</span> matchCore(strArr, subArr(<span class="hljs-number">2</span>, patternArr)) ||<br>                    <span class="hljs-comment">// 或者，如果第一个匹配，串后移一位</span><br>                    (firstMatch &amp;&amp; matchCore(subArr(<span class="hljs-number">1</span>, strArr), patternArr));<br>        &#125;<br><br>        <span class="hljs-comment">// 其它情况，要求第一个匹配，且后面的也匹配</span><br>        <span class="hljs-keyword">return</span> firstMatch &amp;&amp; matchCore(subArr(<span class="hljs-number">1</span>, strArr), subArr(<span class="hljs-number">1</span>, patternArr));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmptyArr</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> arr == <span class="hljs-keyword">null</span> || arr.length == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span>[] subArr(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">char</span>[] arr) &#123;<br>        <span class="hljs-keyword">return</span> Arrays.copyOfRange(arr, start, arr.length);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】机器人运动范围</title>
    <url>/%E7%AE%97%E6%B3%95/jz13-%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</url>
    <content><![CDATA[<h2 id="剑指-Offer-第-13-题-机器人运动范围"><a href="#剑指-Offer-第-13-题-机器人运动范围" class="headerlink" title="剑指 Offer 第 13 题-机器人运动范围"></a>剑指 Offer 第 13 题-机器人运动范围</h2><p>地上有一个 rows 行和 cols 列的方格。坐标从 [0,0] 到 [rows-1,cols-1] 。一个机器人从坐标 [0,0] 的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于 threshold 的格子。 例如，当 threshold 为 18 时，机器人能够进入方格 [35,37] ，因为 3+5+3+7 = 18。但是，它不能进入方格 [35,38] ，因为 3+5+3+8 = 19 。请问该机器人能够达到多少个格子？</p>
<h2 id="错误案例"><a href="#错误案例" class="headerlink" title="错误案例"></a>错误案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz13_1_wrong</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(movingCount(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        System.out.println(movingCount(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br>        System.out.println(movingCount(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>));<br>        System.out.println(movingCount(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>));<br>        System.out.println(movingCount(<span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br>        System.out.println(movingCount(<span class="hljs-number">18</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>));<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 错误的解法：题目要求，每次只能向左、右、上、下移动。下面的代码没考虑这个，导致跨越的格也存在，会多算</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> threshold, <span class="hljs-keyword">int</span> rows, <span class="hljs-keyword">int</span> cols)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (rows == <span class="hljs-number">0</span> || cols == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rows; i++) &#123;<br><br>            <span class="hljs-comment">// 如果i本身就不满足，就不用向后走了</span><br>            <span class="hljs-keyword">if</span> (!reachable(i, <span class="hljs-number">0</span>, threshold)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; cols; j++) &#123;<br><br>                <span class="hljs-comment">// 如易j本身就不满足，就不用向后走了</span><br>                <span class="hljs-keyword">if</span> (!reachable(<span class="hljs-number">0</span>, j, threshold)) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 根据 threshold，判断 (i,j) 是否可达</span><br>                <span class="hljs-keyword">if</span> (reachable(i, j, threshold)) &#123;<br>                    count++;<br>                    System.out.printf(<span class="hljs-string">"(%d,%d)%n"</span>, i, j);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">reachable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> threshold)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> sum = getSum(i) + getSum(j);<br>        <span class="hljs-keyword">return</span> sum &lt;= threshold;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (a &gt; <span class="hljs-number">0</span>) &#123;<br>            sum += a % <span class="hljs-number">10</span>;<br>            a = a / <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="正确的-DFS-遍历"><a href="#正确的-DFS-遍历" class="headerlink" title="正确的 DFS 遍历"></a>正确的 DFS 遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz13_2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_2().movingCount(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_2().movingCount(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_2().movingCount(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_2().movingCount(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_2().movingCount(<span class="hljs-number">18</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_2().movingCount(<span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br>    &#125;<br><br><br>    <span class="hljs-keyword">int</span> movingCount = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * DFS 遍历</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> threshold, <span class="hljs-keyword">int</span> rows, <span class="hljs-keyword">int</span> cols)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (rows == <span class="hljs-number">0</span> || cols == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        movingCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">boolean</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[rows][cols];<br>        dfs(arr, rows, cols, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, threshold);<br>        <span class="hljs-keyword">return</span> movingCount;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 模板：</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 检查下标</span><br><span class="hljs-comment">     * 检查是否被访问过，或者是否满足当前匹配条件</span><br><span class="hljs-comment">     * 检查是否满足返回结果条件</span><br><span class="hljs-comment">     * 标记</span><br><span class="hljs-comment">     * 进入下下一步递归</span><br><span class="hljs-comment">     * 回溯</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>[][] arr, <span class="hljs-keyword">int</span> rows, <span class="hljs-keyword">int</span> cols, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> threshold)</span> </span>&#123;<br>        <span class="hljs-comment">// 检查下标</span><br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= rows || j &gt;= cols) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 检查是否被访问过</span><br>        <span class="hljs-keyword">if</span> (arr[i][j]) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 检查是否满足条件</span><br>        <span class="hljs-keyword">if</span> (!reachable(i, j, threshold)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        arr[i][j] = <span class="hljs-keyword">true</span>;<br>        movingCount++;<br><br>        <span class="hljs-comment">// 下一个</span><br>        dfs(arr, rows, cols, i + <span class="hljs-number">1</span>, j, threshold); <span class="hljs-comment">// 右</span><br>        dfs(arr, rows, cols, i, j + <span class="hljs-number">1</span>, threshold); <span class="hljs-comment">// 下</span><br>        dfs(arr, rows, cols, i - <span class="hljs-number">1</span>, j, threshold); <span class="hljs-comment">// 左</span><br>        dfs(arr, rows, cols, i, j - <span class="hljs-number">1</span>, threshold); <span class="hljs-comment">// 上</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">reachable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> threshold)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> sum = getSum(i) + getSum(j);<br>        <span class="hljs-keyword">return</span> sum &lt;= threshold;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (a &gt; <span class="hljs-number">0</span>) &#123;<br>            sum += a % <span class="hljs-number">10</span>;<br>            a = a / <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="正确的-BFS-遍历"><a href="#正确的-BFS-遍历" class="headerlink" title="正确的 BFS 遍历"></a>正确的 BFS 遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz13_3</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_3().movingCount(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_3().movingCount(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_3().movingCount(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_3().movingCount(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_3().movingCount(<span class="hljs-number">18</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_3().movingCount(<span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br>    &#125;<br><br><br>    <span class="hljs-comment">// 用栈来实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> threshold, <span class="hljs-keyword">int</span> rows, <span class="hljs-keyword">int</span> cols)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (rows == <span class="hljs-number">0</span> || cols == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> movingCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">boolean</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[rows][cols];<br><br>        Stack&lt;Pair&lt;Integer, Integer&gt;&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-comment">// 第一个入栈</span><br>        stack.push(<span class="hljs-keyword">new</span> Pair&lt;&gt;(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            <span class="hljs-comment">// 出栈，标记</span><br>            <span class="hljs-keyword">final</span> Pair&lt;Integer, Integer&gt; pop = stack.pop();<br>            <span class="hljs-keyword">final</span> Integer x = pop.getKey();<br>            <span class="hljs-keyword">final</span> Integer y = pop.getValue();<br>            arr[x][y] = <span class="hljs-keyword">true</span>;<br>            movingCount++;<br><br>            <span class="hljs-comment">// 并将周围入栈（检测边界和条件）</span><br><br>            <span class="hljs-comment">// 右</span><br>            <span class="hljs-keyword">if</span> (border(x + <span class="hljs-number">1</span>, y, rows, cols) &amp;&amp; reachable(x + <span class="hljs-number">1</span>, y, threshold) &amp;&amp; !arr[x + <span class="hljs-number">1</span>][y]) &#123;<br>                stack.push(<span class="hljs-keyword">new</span> Pair&lt;&gt;(x + <span class="hljs-number">1</span>, y));<br>                arr[x + <span class="hljs-number">1</span>][y] = <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 下</span><br>            <span class="hljs-keyword">if</span> (border(x, y + <span class="hljs-number">1</span>, rows, cols) &amp;&amp; reachable(x, y + <span class="hljs-number">1</span>, threshold) &amp;&amp; !arr[x][y + <span class="hljs-number">1</span>]) &#123;<br>                stack.push(<span class="hljs-keyword">new</span> Pair&lt;&gt;(x, y + <span class="hljs-number">1</span>));<br>                arr[x][y + <span class="hljs-number">1</span>] = <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 左</span><br>            <span class="hljs-keyword">if</span> (border(x - <span class="hljs-number">1</span>, y, rows, cols) &amp;&amp; reachable(x - <span class="hljs-number">1</span>, y, threshold) &amp;&amp; !arr[x - <span class="hljs-number">1</span>][y]) &#123;<br>                stack.push(<span class="hljs-keyword">new</span> Pair&lt;&gt;(x - <span class="hljs-number">1</span>, y));<br>                arr[x - <span class="hljs-number">1</span>][y] = <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 上</span><br>            <span class="hljs-keyword">if</span> (border(x, y - <span class="hljs-number">1</span>, rows, cols) &amp;&amp; reachable(x, y - <span class="hljs-number">1</span>, threshold) &amp;&amp; !arr[x][y - <span class="hljs-number">1</span>]) &#123;<br>                stack.push(<span class="hljs-keyword">new</span> Pair&lt;&gt;(x, y - <span class="hljs-number">1</span>));<br>                arr[x][y - <span class="hljs-number">1</span>] = <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> movingCount;<br>    &#125;<br><br>     <span class="hljs-comment">// 检查边界</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">border</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> rows, <span class="hljs-keyword">int</span> cols)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; rows &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; cols;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查是否可达</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">reachable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> threshold)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> sum = getSum(i) + getSum(j);<br>        <span class="hljs-keyword">return</span> sum &lt;= threshold;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取数字自身之和</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (a &gt; <span class="hljs-number">0</span>) &#123;<br>            sum += a % <span class="hljs-number">10</span>;<br>            a = a / <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pair</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>&gt; </span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> K key;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> V value;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> key;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pair</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.key = key;<br>            <span class="hljs-keyword">this</span>.value = value;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="正确的-BFS-遍历（优化）"><a href="#正确的-BFS-遍历（优化）" class="headerlink" title="正确的 BFS 遍历（优化）"></a>正确的 BFS 遍历（优化）</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz13_4</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_4().movingCount(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_4().movingCount(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_4().movingCount(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_4().movingCount(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_4().movingCount(<span class="hljs-number">18</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> Jz13_4().movingCount(<span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br>    &#125;<br><br><br>    <span class="hljs-comment">// BFS遍历：用栈来实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> threshold, <span class="hljs-keyword">int</span> rows, <span class="hljs-keyword">int</span> cols)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (rows == <span class="hljs-number">0</span> || cols == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> movingCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">boolean</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[rows][cols];<br><br>        Stack&lt;Pair&lt;Integer, Integer&gt;&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-comment">// 将第一个入栈</span><br>        stack.push(<span class="hljs-keyword">new</span> Pair&lt;&gt;(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-comment">// 方向组合，newX=dirs[i], newY=dirs[i+1]，分别对应【左（-1，0）、下（0，1）、右（1，0）、上（0，-1）】</span><br>        <span class="hljs-keyword">int</span>[] dirs = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            <span class="hljs-comment">// 出栈，标记</span><br>            <span class="hljs-keyword">final</span> Pair&lt;Integer, Integer&gt; pop = stack.pop();<br>            <span class="hljs-keyword">final</span> Integer x = pop.getKey();<br>            <span class="hljs-keyword">final</span> Integer y = pop.getValue();<br><br>            <span class="hljs-comment">// 设置为true，表示访问过了，不可重复访问</span><br>            arr[x][y] = <span class="hljs-keyword">true</span>;<br>            movingCount++;<br><br>            <span class="hljs-comment">// 并将周围入栈（检测边界和条件）</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dirs.length; i++) &#123;<br>                <span class="hljs-keyword">int</span> newX = dirs[i];<br>                <span class="hljs-keyword">int</span> newY = dirs[i + <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (border(newX, newY, rows, cols) &amp;&amp; reachable(newX, newY, threshold) &amp;&amp; !arr[newX][newY]) &#123;<br>                    stack.push(<span class="hljs-keyword">new</span> Pair&lt;&gt;(newX, newY));<br>                    arr[newX][newY] = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> movingCount;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查边界</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">border</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> rows, <span class="hljs-keyword">int</span> cols)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; rows &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; cols;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查是否可达</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">reachable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> threshold)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> sum = getSum(i) + getSum(j);<br>        <span class="hljs-keyword">return</span> sum &lt;= threshold;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取数字自身之和</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (a &gt; <span class="hljs-number">0</span>) &#123;<br>            sum += a % <span class="hljs-number">10</span>;<br>            a = a / <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pair</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>&gt; </span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> K key;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> V value;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> key;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pair</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.key = key;<br>            <span class="hljs-keyword">this</span>.value = value;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】奇数位于偶数前面</title>
    <url>/%E7%AE%97%E6%B3%95/jz21-%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="剑指-Offer-第-21-题-奇数位于偶数前面"><a href="#剑指-Offer-第-21-题-奇数位于偶数前面" class="headerlink" title="剑指 Offer 第 21 题-奇数位于偶数前面"></a>剑指 Offer 第 21 题-奇数位于偶数前面</h2><p><a href="https://www.nowcoder.com/practice/ef1f53ef31ca408cada5093c8780f44b" target="_blank" rel="noopener">https://www.nowcoder.com/practice/ef1f53ef31ca408cada5093c8780f44b</a></p>
<p>描述</p>
<p>输入一个长度为 n 整数数组，数组里面不含有相同的元素，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前面部分，所有的偶数位于数组的后面部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>
<p>数据范围：0 &lt;= n &lt;= 50000，数组中每个数的值 0 &lt;= val &lt;= 100000</p>
<p>要求：时间复杂度 O(n)O(n)，空间复杂度 O(n)O(n)</p>
<p>进阶：时间复杂度 O(n^2)O(n )，空间复杂度 O(1)O(1)</p>
<h2 id="方法-1-枚举法"><a href="#方法-1-枚举法" class="headerlink" title="方法 1 - 枚举法"></a>方法 1 - 枚举法</h2><p>创建一个新的数组，分两次遍历数组并添加到新数组中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz21_1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(Arrays.toString(reOrderArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;)));<br>        System.out.println(Arrays.toString(reOrderArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;)));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] reOrderArray(<span class="hljs-keyword">int</span>[] array) &#123;<br>        <span class="hljs-keyword">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array.length];<br><br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> odd : array) &#123;<br>            <span class="hljs-keyword">if</span> (odd % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                result[index++] = odd;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> even : array) &#123;<br>            <span class="hljs-keyword">if</span> (even % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                result[index++] = even;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="方法-2-冒泡法"><a href="#方法-2-冒泡法" class="headerlink" title="方法 2 - 冒泡法"></a>方法 2 - 冒泡法</h2><p>找到下一个奇数位置，冒泡到前面来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz21_2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(Arrays.toString(reOrderArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;)));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] reOrderArray(<span class="hljs-keyword">int</span>[] array) &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br><br>            <span class="hljs-comment">// 当前位置是否是奇数</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> odd = array[i] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">// 当前位置是奇数，进入下一轮</span><br>            <span class="hljs-keyword">if</span> (odd) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 下一个奇数位置</span><br>            <span class="hljs-keyword">int</span> nextOddIndex = -<span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">// 当前是偶数</span><br>            <span class="hljs-comment">// 找到下一个奇数位置</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; array.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (array[j] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                    nextOddIndex = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 如果后面没有奇数了，可以直接退出了</span><br>            <span class="hljs-keyword">if</span> (nextOddIndex == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> array;<br>            &#125;<br><br>            <span class="hljs-comment">// 存在奇数，下一个奇数冒泡到当前偶数所在的位置</span><br>            bubble(array, i, nextOddIndex);<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubble</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> currentIndex, <span class="hljs-keyword">int</span> nextOddIndex)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (currentIndex &lt; nextOddIndex) &#123;<br>            swap(array, nextOddIndex - <span class="hljs-number">1</span>, nextOddIndex);<br>            nextOddIndex = nextOddIndex - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> tmp = array[i];<br>        array[i] = array[j];<br>        array[j] = tmp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="策略化版本"><a href="#策略化版本" class="headerlink" title="策略化版本"></a>策略化版本</h2><p>输入一个长度为 n 整数数组，数组里面不含有相同的元素，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前面部分，所有的偶数位于数组的后面部分<br>（注意，区别于前面的版本，这里不需要保证奇数和奇数，偶数和偶数之间的相对位置不变。）</p>
<p>另外添加了其它的策略：偶数在前、能被 3 整除的在前。</p>
<p>这个做法，能够灵活适配新的类似的要求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz21_3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"奇数排在前面"</span>);<br>        System.out.println(Arrays.toString(reOrderArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;, Jz21_3::isOdd)));<br>        System.out.println(Arrays.toString(reOrderArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;, Jz21_3::isOdd)));<br><br>        System.out.println(<span class="hljs-string">"偶数排在前面"</span>);<br>        System.out.println(Arrays.toString(reOrderArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;, Jz21_3::isEven)));<br>        System.out.println(Arrays.toString(reOrderArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;, Jz21_3::isEven)));<br><br>        System.out.println(<span class="hljs-string">"能被3整除的在前面"</span>);<br>        System.out.println(Arrays.toString(reOrderArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;, Jz21_3::isThreeTime)));<br>        System.out.println(Arrays.toString(reOrderArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;, Jz21_3::isThreeTime)));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] reOrderArray(<span class="hljs-keyword">int</span>[] array, Predicate&lt;Integer&gt; predicate) &#123;<br><br>        <span class="hljs-keyword">if</span> (array == <span class="hljs-keyword">null</span> || array.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> array;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = array.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; predicate.test(array[left])) &#123;<br>                left++;<br>            &#125;<br><br>            <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; !predicate.test(array[right])) &#123;<br>                right--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>                swap(array, left, right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOdd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEven</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isThreeTime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> tmp = array[i];<br>        array[i] = array[j];<br><br>        array[j] = tmp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【安全-算法】常见安全算法</title>
    <url>/%E5%AE%89%E5%85%A8/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="MD5（MD5-Message-Digest-Algorithm"><a href="#MD5（MD5-Message-Digest-Algorithm" class="headerlink" title="MD5（MD5 Message-Digest Algorithm)"></a>MD5（MD5 Message-Digest Algorithm)</h2><p>消息摘要算法</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>不可逆</li>
<li>输入不室长，输出定长的128-bits（用32个16进制字符表示）</li>
</ul>
<h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/cbbfed12-d2a2-42d2-a5ad-26e6c72612fa_20211220152522726_3266a3.png" alt="img"></p>
<h4 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h4><p>用于各种程序语言中，以确保资料传递无误（摘要）。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/MD5" target="_blank" rel="noopener">MD5 - 维基百科，自由的百科全书</a></li>
</ul>
<h2 id="SHA-Secure-Hash-Algorithm"><a href="#SHA-Secure-Hash-Algorithm" class="headerlink" title="SHA(Secure Hash Algorithm)"></a>SHA(Secure Hash Algorithm)</h2><p>安全散列算法</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/SHA-3" target="_blank" rel="noopener">SHA-3</a>：2015年正式发布，由于对MD5出现成功的破解，以及对SHA-0和SHA-1出现理论上破解的方法，<a href="https://zh.wikipedia.org/wiki/國家標準暨技術研究院" target="_blank" rel="noopener">NIST</a>感觉需要一个与之前算法不同的，可替换的加密散列算法，也就是现在的SHA-3。</p>
</blockquote>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul>
<li>输出定长（具体模式长度不一样，SHA3-512、SHA3-256）</li>
<li>SHA2和SHA3目前还未被破解。</li>
</ul>
<h4 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/SHA家族" target="_blank" rel="noopener">SHA家族 - 维基百科，自由的百科全书</a></li>
<li><a href="https://zh.wikipedia.org/wiki/SHA-3" target="_blank" rel="noopener">SHA-3 - 维基百科，自由的百科全书</a></li>
</ul>
<h2 id="Base64-基底64，一种编码方式，非算法"><a href="#Base64-基底64，一种编码方式，非算法" class="headerlink" title="Base64(基底64，一种编码方式，非算法)"></a>Base64(基底64，一种编码方式，非算法)</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>是一种基于64个可打印字符来表示二进制数据的表示方法。<br>字符有：[0-9、A-Z、a-z、+/]<br>还有类似其它的编码方式，如Base32。对比Base32，Base64有更多的字符用于编码，其编码后的长度要更短。还有Base58，用于比特币中，不使用易混淆的字符[不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”/“符号]<br>目的是：<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/91d85977-78d4-4a52-a925-b016099f1568_20211220152908396_57b035.png" alt="img"></p>
<p>可以编码，也可以解码。<br><strong>是一种编码方式，切记不要误用于加密、解密的场合（有DES、IDEA等对称加密算法）。</strong></p>
<h4 id="使用场合-1"><a href="#使用场合-1" class="headerlink" title="使用场合"></a>使用场合</h4><p>常用于在处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。<br>如：Base64编码图片、MIME内容、URL（用于传递参数）。<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/ddd8938c-0386-424d-b7b8-4c16b5889f7c_20211220152522708_ebc258.jpg" alt="img"><br><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/0bd15490-2c01-4cfc-aa2f-b0d0f1a80560_20211220152522780_cbb058.jpg" alt="img"></p>
<h4 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">Base64 - 维基百科，自由的百科全书</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Base58" target="_blank" rel="noopener">Base58 - 维基百科，自由的百科全书</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34937271" target="_blank" rel="noopener">对称加密和Base64编码 - 知乎</a></li>
</ul>
<h2 id="DES-Data-Encryptioin-Standard"><a href="#DES-Data-Encryptioin-Standard" class="headerlink" title="DES(Data Encryptioin Standard)"></a>DES(Data Encryptioin Standard)</h2><p>数据加密标准，是一种对称加密算法。是由IBM公司研制的对称密码体制加密算法，密钥长64位，实事上是56位参与DES运算（其它的是校验位，8、16、24、32、60、48、56、64）</p>
<h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><p>分组比较短、密钥太短、运算速度慢<br>有极高的安全性（并非不可破解。用穷举的时间特别长。特殊的硬件并行计算几个小时）<br>加强版本：<a href="https://baike.baidu.com/item/3DES" target="_blank" rel="noopener">3DES_百度百科</a>，即Triple Data Encryption Algorithm。相当于对每个数据块应用三次DES加密算法。</p>
<h4 id="参考资料-3"><a href="#参考资料-3" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://baike.baidu.com/item/des算法/10306073" target="_blank" rel="noopener">des算法_百度百科</a></li>
</ul>
<h2 id="IDEA-International-Data-Encryption-Algorithm"><a href="#IDEA-International-Data-Encryption-Algorithm" class="headerlink" title="IDEA(International Data Encryption Algorithm)"></a>IDEA(International Data Encryption Algorithm)</h2><p>国际数据加密算法，是从DES算法的基础上发展出来的。密钥长度为128位。</p>
<h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><ul>
<li>对比DES而言，更安全</li>
<li>是一种数据块加密算法</li>
<li>在美国之外发展（避开了美国法律上对加密技术的限制）</li>
</ul>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul>
<li>PGP使用IDEA作为其分组加密算法；</li>
<li>SSL也将IDEA包含在SSLRef中；</li>
</ul>
<h4 id="参考资料-4"><a href="#参考资料-4" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://baike.baidu.com/item/国际数据加密算法/11048972" target="_blank" rel="noopener">国际数据加密算法_百度百科</a></li>
</ul>
<h2 id="AES-Advanced-Encryption-Standard"><a href="#AES-Advanced-Encryption-Standard" class="headerlink" title="AES(Advanced Encryption Standard)"></a>AES(Advanced Encryption Standard)</h2><p>高级加密标准，用来替代原先的DES，目前被广泛应用。<br>密钥长度可以是128位、192位或256位。</p>
<h4 id="应用场合"><a href="#应用场合" class="headerlink" title="应用场合"></a>应用场合</h4><p>SSL、IpSec、ATM、路由器、网络保密系统、卫星通信、移动通信。</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://www.jianshu.com/p/1d5b95dca31d" target="_blank" rel="noopener">AES加密技术：AES加密算法在信息安全中的应用 - 简书</a></li>
</ul>
<h2 id="RSA非对称加密算法"><a href="#RSA非对称加密算法" class="headerlink" title="RSA非对称加密算法"></a>RSA非对称加密算法</h2><p>RSA是由三个人名的首字母缩写而来。</p>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点是，相对于对称加密，对称密钥需要协商密钥，非对称加密不需要协商，可以将公钥完全地公开。<br>缺点是，运算速度慢。</p>
<h4 id="与对称加密结合使用"><a href="#与对称加密结合使用" class="headerlink" title="与对称加密结合使用"></a>与对称加密结合使用</h4><p>在实际应用中，将对称和非对称结合使用。</p>
<ol>
<li>A和B先交换公钥；</li>
<li>A生成一个随机AES口令，通过B的公钥加密，并发送给B；</li>
<li>B接收信息后，通过自己的私钥解密得到AES口令；</li>
<li>双方用这个AES口令进行加密通信。</li>
</ol>
<h4 id="应用场合-1"><a href="#应用场合-1" class="headerlink" title="应用场合"></a>应用场合</h4><ul>
<li>https 加密链接</li>
<li>socket程序，结合运用 rsa + aes</li>
</ul>
<h4 id="参考资料-5"><a href="#参考资料-5" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304227873816610" target="_blank" rel="noopener">非对称加密算法 - 廖雪峰的官方网站</a></li>
<li><a href="https://0f9de7f3.wiz06.com/wapp/pages/view/share/s/0fDuvP3SO4QS2Hb3sP2Di0ai3NopV-1UR4d820U8CU0Eq8qJ" target="_blank" rel="noopener">原文</a></li>
</ul>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】链表中环的入口结点</title>
    <url>/%E7%AE%97%E6%B3%95/jz23-%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/</url>
    <content><![CDATA[<h2 id="剑指-Offer-第-23-题-链表中环的入口结点"><a href="#剑指-Offer-第-23-题-链表中环的入口结点" class="headerlink" title="剑指 Offer 第 23 题-链表中环的入口结点"></a>剑指 Offer 第 23 题-链表中环的入口结点</h2><p>给一个长度为 n 链表，若其中包含环，请找出该链表的环的入口结点，否则，返回 null。<br><a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4" target="_blank" rel="noopener">https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4</a></p>
<h2 id="方法-1-快慢指针"><a href="#方法-1-快慢指针" class="headerlink" title="方法 1-快慢指针"></a>方法 1-快慢指针</h2><p>思路：</p>
<ol>
<li>确定是否有环：两个快慢指针相遇</li>
<li>确定环的个数：让指针从相遇的节点再回到这个节点，得到环个数 n</li>
<li>确定环入口节点：一个指针先走 n 步，接着和第二个指针同步向前，相遇的点就是入口节点</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz23</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jz23 jz23 = <span class="hljs-keyword">new</span> Jz23();<br>        <span class="hljs-keyword">final</span> ListNode root = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">final</span> ListNode node3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">3</span>);<br>        root<br>                .append(<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">2</span>))<br>                .append(node3)<br>                .append(<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">4</span>))<br>                .append(<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">5</span>))<br>                .append(node3)<br>        ;<br>        System.out.println(jz23.EntryNodeOfLoop(root).val);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">EntryNodeOfLoop</span><span class="hljs-params">(ListNode pHead)</span> </span>&#123;<br>        <span class="hljs-comment">// 确定是否有环：两个快慢指针相遇</span><br>        ListNode meetNode = getMeetNode(pHead);<br>        <span class="hljs-keyword">if</span> (meetNode == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 确定环的个数：让指针从相遇的节点再回到这个节点，得到环个数n</span><br>        <span class="hljs-keyword">int</span> loopCount = getLoopCount(meetNode);<br><br>        <span class="hljs-comment">// 确定环入口节点：一个指针先走n步，接着和第二个指针同步向前，相遇的点就是入口节点</span><br>        <span class="hljs-keyword">return</span> getEntryNode(pHead, loopCount);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ListNode <span class="hljs-title">getEntryNode</span><span class="hljs-params">(ListNode pHead, <span class="hljs-keyword">int</span> loopCount)</span> </span>&#123;<br>        ListNode fast = pHead;<br>        ListNode slow = pHead;<br><br>        <span class="hljs-comment">// 快指针先行loopCount步</span><br>        <span class="hljs-keyword">while</span> (loopCount-- &gt; <span class="hljs-number">0</span>) &#123;<br>            fast = fast.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (fast != slow) &#123;<br>            fast = fast.next;<br>            slow = slow.next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> fast;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLoopCount</span><span class="hljs-params">(ListNode meetNode)</span> </span>&#123;<br>        ListNode moveNode = meetNode.next;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (moveNode != meetNode) &#123;<br>            moveNode = moveNode.next;<br>            count++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ListNode <span class="hljs-title">getMeetNode</span><span class="hljs-params">(ListNode pHead)</span> </span>&#123;<br>        ListNode fast = pHead;<br>        ListNode slow = pHead;<br><br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span> &amp;&amp; slow != <span class="hljs-keyword">null</span>) &#123;<br><br>            fast = fast.next;<br>            <span class="hljs-keyword">if</span> (fast != <span class="hljs-keyword">null</span>) &#123;<br>                fast = fast.next;<br>            &#125;<br><br>            slow = slow.next;<br>            <span class="hljs-keyword">if</span> (fast != <span class="hljs-keyword">null</span> &amp;&amp; fast == slow) &#123;<br>                <span class="hljs-keyword">return</span> fast;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">append</span><span class="hljs-params">(ListNode next)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.next = next;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.next;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="方法-2-hash-法"><a href="#方法-2-hash-法" class="headerlink" title="方法 2-hash 法"></a>方法 2-hash 法</h2><p>将值记录到 set 中，首次出现存在的值，对应的就是那个入口点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">EntryNodeOfLoop</span><span class="hljs-params">(ListNode pHead)</span> </span>&#123;<br>    <span class="hljs-comment">// 将值记录到set中，首次出现存在的值，对应的就是那个入口点</span><br>    Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (pHead != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (set.contains(pHead.val)) &#123;<br>            <span class="hljs-keyword">return</span> pHead;<br>        &#125;<br>        set.add(pHead.val);<br>        pHead = pHead.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】顺时针打印矩阵</title>
    <url>/%E7%AE%97%E6%B3%95/jz29-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h2 id="剑指-Offer-第-23-题-链表中环的入口结点"><a href="#剑指-Offer-第-23-题-链表中环的入口结点" class="headerlink" title="剑指 Offer 第 23 题-链表中环的入口结点"></a><a href="https://www.nowcoder.com/practice/9b4c81a02cd34f76be2659fa0d54342a" target="_blank" rel="noopener">剑指 Offer 第 23 题-链表中环的入口结点</a></h2><p>描述: 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下 4 X 4 矩阵：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],<br>[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>],<br>[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>],<br>[<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>]]<br></code></pre></td></tr></table></figure>

<p>则依次打印出数字</p>
<p>[1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10]</p>
<p>数据范围:</p>
<p>0 &lt;= matrix.length &lt;= 100</p>
<p>0 &lt;= matrix[i].length &lt;= 100</p>
<p>例如：</p>
<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/jz29-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5_20220121170748_2022-01-21-17-07-49.png" alt="jz29-顺时针打印矩阵_20220121170748_2022-01-21-17-07-49"></p>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz29_2</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jz29_3_1 jz = <span class="hljs-keyword">new</span> Jz29_3_1();<br>        System.out.println(jz.printMatrix(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&#125;,<br>        &#125;));<br><br>        System.out.println(jz.printMatrix(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">5</span>&#125;<br>        &#125;));<br><br>        System.out.println(jz.printMatrix(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>        &#125;));<br><br>        System.out.println(jz.printMatrix(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;,<br>                &#123;<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;,<br>                &#123;<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>&#125;<br>        &#125;));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对于只有一行或只有一列时，会重复</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;Integer&gt; <span class="hljs-title">printMatrix</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>        <span class="hljs-comment">// 为空的情况</span><br>        <span class="hljs-keyword">if</span> (matrix == <span class="hljs-keyword">null</span> || matrix.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        &#125;<br><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(matrix.length * matrix[<span class="hljs-number">0</span>].length);<br>        <span class="hljs-keyword">int</span> minX = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> maxX = matrix.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> minY = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> maxY = matrix[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">int</span> x, y;<br>        <span class="hljs-keyword">while</span> (minX &lt;= maxX &amp;&amp; minY &lt;= maxY) &#123;<br>            <span class="hljs-comment">// 用两个标识来判断本轮是否有下移或左移</span><br>            <span class="hljs-keyword">boolean</span> down = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">boolean</span> left = <span class="hljs-keyword">false</span>;<br><br>            <span class="hljs-comment">// 从左上角开始</span><br>            <span class="hljs-comment">// 向右</span><br>            <span class="hljs-keyword">for</span> (x = minX, y = minY; y &lt;= maxY; y++) &#123;<br>                list.add(matrix[x][y]);<br>            &#125;<br><br>            <span class="hljs-comment">// 向下</span><br>            <span class="hljs-keyword">for</span> (x = minX + <span class="hljs-number">1</span>, y = maxY; x &lt;= maxX; x++) &#123;<br>                list.add(matrix[x][y]);<br>                down = <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 向左，左移之前确认是否有下移，防止重复</span><br>            <span class="hljs-keyword">for</span> (x = maxX, y = maxY - <span class="hljs-number">1</span>; down &amp;&amp; y &gt;= minY; y--) &#123;<br>                list.add(matrix[x][y]);<br>                left = <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 向上，上移之前确认是否有左移，防止重复</span><br>            <span class="hljs-keyword">for</span> (x = maxX - <span class="hljs-number">1</span>, y = minY; left &amp;&amp; x &gt; minX; x--) &#123;<br>                list.add(matrix[x][y]);<br>            &#125;<br><br>            <span class="hljs-comment">// 瘦身一圈</span><br>            minX++;<br>            maxX--;<br>            minY++;<br>            maxY--;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz29_4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jz29_4 jz = <span class="hljs-keyword">new</span> Jz29_4();<br>        System.out.println(jz.printMatrix(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&#125;,<br>        &#125;));<br><br>        System.out.println(jz.printMatrix(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">5</span>&#125;<br>        &#125;));<br><br>        System.out.println(jz.printMatrix(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>        &#125;));<br><br>        System.out.println(jz.printMatrix(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;,<br>                &#123;<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;,<br>                &#123;<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>&#125;<br>        &#125;));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 起始点从左上角，沿对角线往中间靠</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;Integer&gt; <span class="hljs-title">printMatrix</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>        <span class="hljs-comment">// 为空的情况</span><br>        <span class="hljs-keyword">if</span> (matrix == <span class="hljs-keyword">null</span> || matrix.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        &#125;<br><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(matrix.length * matrix[<span class="hljs-number">0</span>].length);<br>        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (matrix.length &gt; start * <span class="hljs-number">2</span> &amp;&amp; matrix[<span class="hljs-number">0</span>].length &gt; start * <span class="hljs-number">2</span>) &#123;<br>            addToList(list, matrix, start);<br>            start++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addToList</span><span class="hljs-params">(ArrayList&lt;Integer&gt; list, <span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">int</span> start)</span> </span>&#123;<br><br>        <span class="hljs-comment">// max row index</span><br>        <span class="hljs-keyword">int</span> maxX = matrix.length - <span class="hljs-number">1</span> - start;<br>        <span class="hljs-comment">// max column index</span><br>        <span class="hljs-keyword">int</span> maxY = matrix[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span> - start;<br><br>        <span class="hljs-keyword">boolean</span> down = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">boolean</span> left = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-comment">// 从左向右</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt;= maxY; ++i) &#123;<br>            list.add(matrix[start][i]);<br>        &#125;<br><br>        <span class="hljs-comment">// 从上向下</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start + <span class="hljs-number">1</span>; i &lt;= maxX; i++) &#123;<br>            list.add(matrix[i][maxY]);<br>            down = <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 从右向左</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = maxY - <span class="hljs-number">1</span>; down &amp;&amp; i &gt;= start; i--) &#123;<br>            list.add(matrix[maxX][i]);<br>            left = <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 从下向上</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = maxX - <span class="hljs-number">1</span>; left &amp;&amp; i &gt; start + <span class="hljs-number">1</span>; i--) &#123;<br>            list.add(matrix[i][start]);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】链表中倒数最后K个结点</title>
    <url>/%E7%AE%97%E6%B3%95/jz22-%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E6%9C%80%E5%90%8Ek%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
    <content><![CDATA[<h2 id="剑指-Offer-第-22-题-链表中倒数最后-k-个结点"><a href="#剑指-Offer-第-22-题-链表中倒数最后-k-个结点" class="headerlink" title="剑指 Offer 第 22 题-链表中倒数最后 k 个结点"></a>剑指 Offer 第 22 题-链表中倒数最后 k 个结点</h2><p>输入一个长度为 n 的链表，设链表中的元素的值为 ai ，返回该链表中倒数第 k 个节点。<br>如果该链表长度小于 k，请返回一个长度为 0 的链表。</p>
<p><a href="https://www.nowcoder.com/practice/886370fe658f41b498d40fb34ae76ff9" target="_blank" rel="noopener">https://www.nowcoder.com/practice/886370fe658f41b498d40fb34ae76ff9</a></p>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><p>先找总个数，再取第 n-k+1 个节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">FindKthToTail</span><span class="hljs-params">(ListNode pHead, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>       <span class="hljs-comment">// 获取总个数n</span><br>       <span class="hljs-comment">// 假设从1开始计数，则取的是第n-k+1个</span><br><br>       <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>       ListNode loopNode = pHead;<br>       <span class="hljs-keyword">while</span> (loopNode != <span class="hljs-keyword">null</span>) &#123;<br>           count++;<br>           loopNode = loopNode.next;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (k &gt; count) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>       loopNode = pHead;<br>       <span class="hljs-keyword">while</span> (loopNode != <span class="hljs-keyword">null</span>) &#123;<br>           index++;<br>           <span class="hljs-keyword">if</span> (count - k + <span class="hljs-number">1</span> == index) &#123;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>           loopNode = loopNode.next;<br>       &#125;<br><br>       <span class="hljs-comment">// write code here</span><br>       <span class="hljs-keyword">return</span> loopNode;<br>   &#125;<br></code></pre></td></tr></table></figure>

<h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h2><p>两个指针法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">FindKthToTail</span><span class="hljs-params">(ListNode pHead, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-comment">// 两个指针，一个指针先行，当移动个数大于k个后，另一个指针才开始移动，一直到结束</span><br>    <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>    ListNode firstNode = pHead;<br>    ListNode secondNode = pHead;<br><br>    <span class="hljs-keyword">while</span> (firstNode != <span class="hljs-keyword">null</span>) &#123;<br>        right++;<br>        <span class="hljs-keyword">if</span> (right &gt; k) &#123;<br>            secondNode = secondNode.next;<br>        &#125;<br>        firstNode = firstNode.next;<br>    &#125;<br><br>    <span class="hljs-comment">// 总数个数不足k的情况</span><br>    <span class="hljs-keyword">if</span> (right &lt; k) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 第二个指针，即所要求的位置</span><br>    <span class="hljs-keyword">return</span> secondNode;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="方法-3"><a href="#方法-3" class="headerlink" title="方法 3"></a>方法 3</h2><p>栈，思路是：是入栈，再从栈中数 k 个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">FindKthToTail</span><span class="hljs-params">(ListNode pHead, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-comment">// 先入栈</span><br>    Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (pHead != <span class="hljs-keyword">null</span>) &#123;<br>        stack.push(pHead);<br>        pHead = pHead.next;<br>    &#125;<br><br>    <span class="hljs-comment">// 再从栈中数k个数</span><br>    <span class="hljs-keyword">if</span> (stack.size() &lt; k) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 从栈中找第k个数</span><br>    ListNode result = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (k-- &gt; <span class="hljs-number">0</span>) &#123;<br>        result = stack.pop();<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】二分查找算法</title>
    <url>/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二分查找，从有序的数组中找到目标值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearch</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br><br>        System.out.println(<span class="hljs-string">"找-1的下标："</span> + bSearch(arr, -<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"找1的下标："</span> + bSearch(arr, <span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"找2的下标："</span> + bSearch(arr, <span class="hljs-number">2</span>));<br>        System.out.println(<span class="hljs-string">"找3的下标："</span> + bSearch(arr, <span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-string">"找4的下标："</span> + bSearch(arr, <span class="hljs-number">4</span>));<br>        System.out.println(<span class="hljs-string">"找5的下标："</span> + bSearch(arr, <span class="hljs-number">5</span>));<br>        System.out.println(<span class="hljs-string">"找6的下标："</span> + bSearch(arr, <span class="hljs-number">6</span>));<br>        System.out.println(<span class="hljs-string">"找7的下标："</span> + bSearch(arr, <span class="hljs-number">7</span>));<br>        System.out.println(<span class="hljs-string">"找8的下标："</span> + bSearch(arr, <span class="hljs-number">8</span>));<br>        System.out.println(<span class="hljs-string">"找9的下标："</span> + bSearch(arr, <span class="hljs-number">9</span>));<br>        System.out.println(<span class="hljs-string">"找10的下标："</span> + bSearch(arr, <span class="hljs-number">10</span>));<br><br>        System.out.println(<span class="hljs-string">"从null中找1的下标："</span> + bSearch(<span class="hljs-keyword">null</span>, <span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"从&#123;&#125;中找1的下标："</span> + bSearch(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;&#125;, <span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"从&#123;1&#125;找1的下标："</span> + bSearch(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>&#125;, <span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"从&#123;1&#125;找2的下标："</span> + bSearch(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>&#125;, <span class="hljs-number">2</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> first = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> last = arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (first &lt;= last) &#123;<br><br>            <span class="hljs-comment">// 取中间值</span><br>            <span class="hljs-keyword">int</span> mid = (first + last) &gt;&gt; <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">if</span> (arr[mid] == target) &#123; <span class="hljs-comment">// 中间值正好是要找的目标值</span><br>                <span class="hljs-keyword">return</span> mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &gt; target) &#123; <span class="hljs-comment">// 中间值大于目标值，在左边找</span><br>                last = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 中间值小于目标值，在右边找</span><br>                first = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">/* 输出：</span><br><span class="hljs-comment">找-1的下标：-1</span><br><span class="hljs-comment">找1的下标：0</span><br><span class="hljs-comment">找2的下标：1</span><br><span class="hljs-comment">找3的下标：2</span><br><span class="hljs-comment">找4的下标：3</span><br><span class="hljs-comment">找5的下标：4</span><br><span class="hljs-comment">找6的下标：5</span><br><span class="hljs-comment">找7的下标：6</span><br><span class="hljs-comment">找8的下标：7</span><br><span class="hljs-comment">找9的下标：8</span><br><span class="hljs-comment">找10的下标：-1</span><br><span class="hljs-comment">从null中找1的下标：-1</span><br><span class="hljs-comment">从&#123;&#125;中找1的下标：-1</span><br><span class="hljs-comment">从&#123;1&#125;找1的下标：0</span><br><span class="hljs-comment">从&#123;1&#125;找2的下标：-1</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>

<h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 有一个长度为 n 的非降序数组，比如[1,2,3,4,5]，将它进行旋转，即把一个数组最开始的若干个元素搬到数组的末尾，变成一个旋转数组，比如变成了[3,4,5,1,2]，或者[4,5,1,2,3]，</span><br><span class="hljs-comment"> * 这样的。请问，给定这样一个旋转数组，求数组中的最小值。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryExtendSearch</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"&#123;5, 6, 7, 8, 9, 1, 2, 3, 4&#125; 找最小值，应该是1："</span> + bExtendSearch(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;));<br>        System.out.println(<span class="hljs-string">"&#123;1, 2, 3, 4&#125;找最小值，应该是1："</span> + bExtendSearch(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;));<br>        System.out.println(<span class="hljs-string">"&#123;1, 0, 1, 1, 1&#125;找最小值，应该是0："</span> + bExtendSearch(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;));<br>        System.out.println(<span class="hljs-string">"&#123;1, 1, 1, 1, 1&#125;找最小值，应该是1："</span> + bExtendSearch(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;));<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bExtendSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 取最右端数据为目标值</span><br>        <span class="hljs-keyword">int</span> target = arr[arr.length - <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">int</span> first = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> last = arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (first &lt; last) &#123;<br>            <span class="hljs-comment">// 提前结束</span><br>            <span class="hljs-keyword">if</span> (arr[first] &lt; arr[last]) &#123;<br>                <span class="hljs-keyword">return</span> arr[first];<br>            &#125;<br><br>            <span class="hljs-comment">// 取中值</span><br>            <span class="hljs-keyword">int</span> mid = (first + last) &gt;&gt; <span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">// 如果中间值大于目标值，最小值在右边</span><br>            <span class="hljs-keyword">if</span> (arr[mid] &gt; target) &#123;<br>                first = mid + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果中间值小于目标值，最小值在左边，目标值成为中间值</span><br>            <span class="hljs-keyword">if</span> (arr[mid] &lt; target) &#123;<br>                last = mid;<br>                target = arr[mid];<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 其它情况，中间值==目标值</span><br>            last--;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> arr[first];<br>    &#125;<br>&#125;<span class="hljs-comment">/*输出</span><br><span class="hljs-comment">&#123;5, 6, 7, 8, 9, 1, 2, 3, 4&#125; 找最小值，应该是1：1</span><br><span class="hljs-comment">&#123;1, 2, 3, 4&#125;找最小值，应该是1：1</span><br><span class="hljs-comment">&#123;1, 0, 1, 1, 1&#125;找最小值，应该是0：0</span><br><span class="hljs-comment">&#123;1, 1, 1, 1, 1&#125;找最小值，应该是1：1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>小明一家夜里过河问题</title>
    <url>/%E7%AE%97%E6%B3%95/%E5%B0%8F%E6%98%8E%E4%B8%80%E5%AE%B6%E5%A4%9C%E9%87%8C%E8%BF%87%E6%B2%B3/</url>
    <content><![CDATA[<p>问题：<br>小明一家要过桥，夜晚要用灯，小明 1 秒，弟弟 3 秒，爸爸 6 秒，妈妈 8 秒，爷爷 12 秒，他们只有 30 秒，如何过桥？</p>
<p>解题关键：<br>要想到，并不是每次都让小明参与过河（虽然小明的速度最快），这样最低得 33s。<br>可以让小明和弟弟一起先过去，小明回来，再让妈妈和爷爷一起过去，弟弟拿灯回来，小明和爸爸过去，小明回来，小明和弟弟一起过去</p>
<h1 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h1><blockquote>
<p>小明和弟弟过去，3 秒<br>小明回来，1 秒<br>小明和爸爸过去，6 秒<br>小弟弟回来，3 秒<br>妈妈和爷爷过去，12 秒<br>小明回来，1 秒<br>小明和弟弟过去，3 秒<br>3+1+6+3+12+1+3=29 秒<br>30 秒都用不了</p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://zhidao.baidu.com/question/71179812.html?qbl=relate_question_0" target="_blank" rel="noopener">小明一家要过桥</a></li>
<li><a href="http://blog.csdn.net/ljiabin/article/details/7450222" target="_blank" rel="noopener">更多智力题</a></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】判断链表是否有环</title>
    <url>/%E7%AE%97%E6%B3%95/%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断链表是否有环</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2021/6/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ring</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer id;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>        <span class="hljs-keyword">private</span> Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Integer id, String name)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.id = id;<br>            <span class="hljs-keyword">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> id;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">getNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span><span class="hljs-params">(Node next)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Node n1 = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">1</span>, <span class="hljs-string">"赵云"</span>);<br>        <span class="hljs-keyword">final</span> Node n2 = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">2</span>, <span class="hljs-string">"关羽"</span>);<br>        <span class="hljs-keyword">final</span> Node n3 = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">3</span>, <span class="hljs-string">"张飞"</span>);<br>        <span class="hljs-keyword">final</span> Node n4 = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">4</span>, <span class="hljs-string">"刘备"</span>);<br>        <span class="hljs-keyword">final</span> Node n5 = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">5</span>, <span class="hljs-string">"曹操"</span>);<br>        n1.setNext(n2);<br>        n2.setNext(n3);<br>        n3.setNext(n4);<br>        n4.setNext(n5);<br>        n5.setNext(n1);<br><br>        <span class="hljs-keyword">boolean</span> isRing = isRing2(n1);<br>        System.out.println(isRing);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法1：快慢指针</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n1 节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否有环</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isRing</span><span class="hljs-params">(Node n1)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n1 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 慢指针</span><br>        Node slow = n1;<br>        <span class="hljs-comment">// 快指针，从下一个开始</span><br>        Node fast = n1.getNext();<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span> &amp;&amp; fast.getNext() != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (fast == slow) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            slow = slow.getNext();<br>            fast = fast.getNext().getNext();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法2：</span><br><span class="hljs-comment">     * 1个指针原地不动，</span><br><span class="hljs-comment">     * 1个指针一步一步向前搜索</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n1 节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否有环</span><br><span class="hljs-comment">     */</span><br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isRing2</span><span class="hljs-params">(Node n1)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n1 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 原地不动</span><br>        Node notMovePointer = n1;<br>        <span class="hljs-comment">// 步长为1，向前搜索</span><br>        Node forwardPointer = n1.getNext();<br>        <span class="hljs-keyword">while</span> (forwardPointer != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (notMovePointer == forwardPointer) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            forwardPointer = forwardPointer.getNext();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】单链表重排序</title>
    <url>/%E7%AE%97%E6%B3%95/%E5%8D%95%E9%93%BE%E8%A1%A8%E9%87%8D%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 给定一个单链表 L：L0→L1→…→Ln-1→Ln ，</span><br><span class="hljs-comment"> * 将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</span><br><span class="hljs-comment"> * 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</span><br><span class="hljs-comment"> * 示例 1:</span><br><span class="hljs-comment"> * 给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</span><br><span class="hljs-comment"> * 示例 2:</span><br><span class="hljs-comment"> * 给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Node firstNode = createNode(<span class="hljs-number">4</span>);<br>        System.out.println(<span class="hljs-string">"origin:"</span> + firstNode);<br>        resortNode(firstNode);<br>        System.out.println(<span class="hljs-string">"resorted:"</span> + firstNode);<br><br>        firstNode = createNode(<span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">"origin:"</span> + firstNode);<br>        resortNode(firstNode);<br>        System.out.println(<span class="hljs-string">"resorted:"</span> + firstNode);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resortNode</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        List&lt;Node&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>) &#123;<br>            list.add(node);<br>            node = node.next;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            Node head = list.get(i);<br>            Node tail = list.get(list.size() - i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (head == tail) &#123;<br>                head.next = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (head.next == tail) &#123;<br>                tail.next = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            tail.next = head.next;<br>            head.next = tail;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">createNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        Node tail = <span class="hljs-keyword">new</span> Node(num, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = num - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            tail = <span class="hljs-keyword">new</span> Node(i, tail);<br>        &#125;<br>        <span class="hljs-keyword">return</span> tail;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value, Node next)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.value = value;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> value;<br>        Node next;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> value + (next == <span class="hljs-keyword">null</span> ? <span class="hljs-string">""</span> : (<span class="hljs-string">"-&gt;"</span> + next));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">origin:1-&gt;2-&gt;3-&gt;4</span><br><span class="hljs-comment">resorted:1-&gt;4-&gt;2-&gt;3</span><br><span class="hljs-comment">origin:1-&gt;2-&gt;3-&gt;4-&gt;5</span><br><span class="hljs-comment">resorted:1-&gt;5-&gt;2-&gt;4-&gt;3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】抽奖算法</title>
    <url>/%E7%AE%97%E6%B3%95/%E6%8A%BD%E5%A5%96%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="抽奖算法理论"><a href="#抽奖算法理论" class="headerlink" title="抽奖算法理论"></a>抽奖算法理论</h2><p>在一组奖品中，每个奖品有自己的概率，总概率为 <code>1.0</code>，也就是说在库存充足的情况下，必然能抽中其中的一个。</p>
<p>通过「谢谢参与」来作为无奖的奖品（也是一种奖品）。</p>
<p>需要注意的是：如果一组中所有的奖品，总概率之和不为 <code>1.0</code>，那么数值代表的概率就不是真实概率了，需要用所占比例来作为新的概率：<code>新概率值=奖品概率/总概率</code>。</p>
<p>举个例子：只有 A 和 B 两个奖品，A 概率是 <code>0.1</code>，B 概率是 <code>0.3</code>，那么总概率就是 0.4，A 的真实概率就是<code>0.1/0.4=0.25</code>，B 的真实概率是<code>0.3/0.4=0.75</code>，真实的总概率依然为<code>1</code>。</p>
<p>所以如果想要配置的奖品概率正好是抽奖时的概率值，那么就需要为这一组奖品列表的总概率配置成<code>1.0</code>；</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先定义一个有概率的奖品基类，所有继承这个基类的子类，都可以用调用 <code>LotteryTool.draw</code> 算法（draw 中的参数类型使用了java泛型）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 奖品基类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseAward</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 抽中这个奖品的概率</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Double probability;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>接着是具体的奖品类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 奖品实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Award</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseAward</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Double price;<br>    <span class="hljs-keyword">private</span> Integer stock;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Award</span><span class="hljs-params">(Integer id, String name, Double price, Double probability, Integer stock)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.price = price;<br>        <span class="hljs-keyword">this</span>.stock = stock;<br>        setProbability(probability);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>看看抽奖的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.collection.CollUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.util.RandomUtil;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽奖工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LotteryTool</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 抽奖方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> awardList 奖品列表，这些是备选的奖品（一定有库存的）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;       具体奖品类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回一个抽中的奖品</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T extends BaseAward&gt; <span class="hljs-function">T <span class="hljs-title">draw</span><span class="hljs-params">(List&lt;T&gt; awardList)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (CollUtil.isEmpty(awardList)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 获取总概率，当奖品总概率正好为1时，奖品的 probability 就是真实的概率，否则会按新的比例作为概率</span><br>        <span class="hljs-keyword">double</span> sumProbability = awardList.stream()<br>                .map(BaseAward::getProbability)<br>                .reduce(<span class="hljs-number">0.0</span>, Double::sum);<br><br>        <span class="hljs-comment">// 一共会尝试 awardList.size() 次，确保能返回一个奖品</span><br>        <span class="hljs-keyword">for</span> (T t : awardList) &#123;<br><br>            <span class="hljs-comment">// 使用随机值，左闭右开（包含0，不包含1）</span><br>            <span class="hljs-keyword">if</span> (t.getProbability() &gt; RandomUtil.randomDouble(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>) * sumProbability) &#123;<br>                <span class="hljs-keyword">return</span> t;<br>            &#125;<br>            sumProbability = sumProbability - t.getProbability();<br>        &#125;<br><br>        <span class="hljs-comment">// 其它情况，会到这里（理论上，一定到不了这里的。）</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>最后来个测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 测试</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 奖品列表，库存一共36</span><br>        <span class="hljs-keyword">final</span> List&lt;Award&gt; awardList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">4</span>);<br>        awardList.add(<span class="hljs-keyword">new</span> Award(<span class="hljs-number">1</span>, <span class="hljs-string">"苹果手机"</span>, <span class="hljs-number">7000.0</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">1</span>));<br>        awardList.add(<span class="hljs-keyword">new</span> Award(<span class="hljs-number">2</span>, <span class="hljs-string">"5元金币"</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">5</span>));<br>        awardList.add(<span class="hljs-keyword">new</span> Award(<span class="hljs-number">3</span>, <span class="hljs-string">"15元天堂雨伞"</span>, <span class="hljs-number">15.0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">10</span>));<br>        awardList.add(<span class="hljs-keyword">new</span> Award(<span class="hljs-number">4</span>, <span class="hljs-string">"谢谢参与"</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">20</span>));<br><br>        System.out.println(<span class="hljs-string">"开始抽奖:"</span>);<br>        <span class="hljs-comment">// 抽奖50次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            String msg;<br>            <span class="hljs-keyword">final</span> Award draw = LotteryTool.draw(awardList);<br>            <span class="hljs-keyword">if</span> (draw == <span class="hljs-keyword">null</span>) &#123;<br>                msg = <span class="hljs-string">"奖品抽完了，下次早点来吧~"</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                msg = StrUtil.format(<span class="hljs-string">"抽到了价值「&#123;&#125;」的奖品「&#123;&#125;」"</span>, draw.getPrice(), draw.getName());<br><br>                <span class="hljs-comment">// 抽到奖品了，需要减库存，库存不足了，要从列表中剔除</span><br>                draw.setStock(draw.getStock() - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (draw.getStock() &lt;= <span class="hljs-number">0</span>) &#123;<br>                    awardList.remove(draw);<br>                &#125;<br>            &#125;<br><br>            System.out.println(StrUtil.format(<span class="hljs-string">"第&#123;&#125;次抽奖，结果为：&#123;&#125;"</span>, i+<span class="hljs-number">1</span>, msg));<br>        &#125;<br>        System.out.println(<span class="hljs-string">"抽奖结束."</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*output~</span><br><span class="hljs-comment">开始抽奖:</span><br><span class="hljs-comment">第1次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第2次抽奖，结果为：抽到了价值「5.0」的奖品「5元金币」</span><br><span class="hljs-comment">第3次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第4次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第5次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第6次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第7次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第8次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第9次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第10次抽奖，结果为：抽到了价值「5.0」的奖品「5元金币」</span><br><span class="hljs-comment">第11次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第12次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第13次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第14次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第15次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第16次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第17次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第18次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第19次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第20次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第21次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第22次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第23次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第24次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第25次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第26次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第27次抽奖，结果为：抽到了价值「0.0」的奖品「谢谢参与」</span><br><span class="hljs-comment">第28次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第29次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第30次抽奖，结果为：抽到了价值「5.0」的奖品「5元金币」</span><br><span class="hljs-comment">第31次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第32次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第33次抽奖，结果为：抽到了价值「5.0」的奖品「5元金币」</span><br><span class="hljs-comment">第34次抽奖，结果为：抽到了价值「15.0」的奖品「15元天堂雨伞」</span><br><span class="hljs-comment">第35次抽奖，结果为：抽到了价值「5.0」的奖品「5元金币」</span><br><span class="hljs-comment">第36次抽奖，结果为：抽到了价值「7000.0」的奖品「苹果手机」</span><br><span class="hljs-comment">第37次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第38次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第39次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第40次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第41次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第42次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第43次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第44次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第45次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第46次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第47次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第48次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第49次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">第50次抽奖，结果为：奖品抽完了，下次早点来吧~</span><br><span class="hljs-comment">抽奖结束.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Process finished with exit code 0</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.jianshu.com/p/e91504b00a0b" target="_blank" rel="noopener">一个经典的指定概率的抽奖算法 - 简书</a></li>
</ul>
<p>「<a href="https://lyloou.com/算法/抽奖算法/" target="_blank" rel="noopener">阅读原文</a>」</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】排序算法</title>
    <url>/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>两两比较，较小的往上冒，较大的往下沉。（对相邻的两个元素依次比较和调整）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        printArray(arr);<br>        bubbleSort(arr);<br>        printArray(arr);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span> &#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = arr.length;<br>        <span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 之所以 len-1-i, 是因为len-1-i之后的元素已经排序完成</span><br>            <span class="hljs-comment">// （每循环一次，就能将一个最大值沉底）</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    swap(arr, j, j + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> len = arr.length;<br>        <span class="hljs-keyword">if</span> (i == j || i &gt;= len || j &gt;= len) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> tmp = arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = tmp;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a : arr) &#123;<br>            sb.append(a).append(<span class="hljs-string">","</span>);<br>        &#125;<br>        String result = sb.substring(<span class="hljs-number">0</span>, sb.length() - <span class="hljs-number">1</span>).toString();<br>        System.out.println(result);<br>    &#125;<br><br>&#125; <span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">3,8,7,2,1,5,6,9,0</span><br><span class="hljs-comment">0,1,2,3,5,6,7,8,9</span><br><span class="hljs-comment">*/</span><span class="hljs-comment">// ~</span><br></code></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/qy1387/article/details/7752973" target="_blank" rel="noopener">Java常用排序算法/程序员必须掌握的8大排序算法</a></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】数字只出现一次或两次</title>
    <url>/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%97%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1/</url>
    <content><![CDATA[<h2 id="判断数组中的所有的数字是否只出现一次。"><a href="#判断数组中的所有的数字是否只出现一次。" class="headerlink" title="判断数组中的所有的数字是否只出现一次。"></a>判断数组中的所有的数字是否只出现一次。</h2><p>给定一个数组 array，判断数组 array 中是否所有的数字只出现一次。<br>例如，<code>arr = {1, 2, 3}</code>，输出 <code>YES</code>。<br>又如，<code>arr = {1, 2, 1}</code>，输出 <code>NO</code>。<br>约束时间复杂度为 O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] data1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] data2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;<br><br>        System.out.println(getOnlyOnceStatus1(data1));<br>        System.out.println(getOnlyOnceStatus1(data2));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过set来存储，比较数量</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getOnlyOnceStatus1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] data)</span> </span>&#123;<br><br>        Set&lt;Integer&gt; result = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(data.length);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> datum : data) &#123;<br>            <span class="hljs-keyword">if</span> (!result.add(datum)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">"NO"</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (result.size() == data.length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"YES"</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"NO"</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">YES</span><br><span class="hljs-comment">NO</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h2 id="找出数组中只出现一次的数字，其它数字都出现了两次"><a href="#找出数组中只出现一次的数字，其它数字都出现了两次" class="headerlink" title="找出数组中只出现一次的数字，其它数字都出现了两次"></a>找出数组中只出现一次的数字，其它数字都出现了两次</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] data1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] data2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;<br><br>        System.out.println(xorIntArray(data1));<br>        System.out.println(xorIntArray(data2));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异或操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">xorIntArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] data)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-keyword">null</span> || data.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (data.length == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> data[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">int</span> result = data[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; data.length; i++) &#123;<br>            result ^= data[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">6</span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><strong>定义</strong>：</p>
<ul>
<li>数据结构是相互之间存在一种或多种特定关系的数据元素的集合</li>
</ul>
<p><strong>分类</strong>：</p>
<ul>
<li><img src="https://github.com/lyloou/img/raw/develop/z/20190729111056.png" alt></li>
</ul>
<h2 id="数据结构和算法的关系"><a href="#数据结构和算法的关系" class="headerlink" title="数据结构和算法的关系"></a>数据结构和算法的关系</h2><p>数据结构就是一组数据的存储结构，<br>算法就是操作数据的一组方法。</p>
<p>数据结构和算法是相辅相成的。<br>数据结构是为算法服务的，算法要作用在特定的数据结构之上。</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>得到算法的时间复杂度，并不是简单的数有多少个循环；因为，循环的步数是可能很少的或者很多的。<br>循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数。</p>
<p>如下图：</p>
<ul>
<li><img src="https://github.com/lyloou/img/raw/develop/z/20190729102735.png" alt></li>
</ul>
<p>常见时间复杂度</p>
<ul>
<li><img src="https://github.com/lyloou/img/raw/develop/z/20190729103929.png" alt></li>
</ul>
<p>最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。在应用中，这是一种最重要的需求<br>通常，除非特别指定 我们提到的运行时间都是最坏情况的运行时间</p>
<h2 id="推导大-O-阶："><a href="#推导大-O-阶：" class="headerlink" title="推导大 O 阶："></a>推导大 O 阶：</h2><p><img src="https://github.com/lyloou/img/raw/develop/z/20190708102115.png" alt></p>
<h2 id="单链表结构与顺序存储结构优缺点"><a href="#单链表结构与顺序存储结构优缺点" class="headerlink" title="单链表结构与顺序存储结构优缺点"></a>单链表结构与顺序存储结构优缺点</h2><p><img src="https://github.com/lyloou/img/raw/develop/z/20190729113227.png" alt></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>《大话数据结构》</li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】从上到下打印二叉树</title>
    <url>/%E7%AE%97%E6%B3%95/jz32-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h2 id="剑指-Offer-第-32-题-从上到下打印二叉树"><a href="#剑指-Offer-第-32-题-从上到下打印二叉树" class="headerlink" title="剑指 Offer 第 32 题-从上到下打印二叉树"></a>剑指 Offer 第 32 题-从上到下打印二叉树</h2><p>描述</p>
<p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回 true ,否则返回 false 。假设输入的数组的任意两个数字都互不相同。<br>数据范围： 节点数量 0≤n≤1000 ，节点上的值满足 1≤val≤10^5，保证节点上的值各不相同</p>
<p>要求：空间复杂度 O(n) ，时间时间复杂度 O(n^2)</p>
<p>提示：</p>
<p>1.二叉搜索树是指父亲节点大于左子树中的全部节点，但是小于右子树中的全部节点的树。</p>
<p>2.该题我们约定空树不是二叉搜索树</p>
<p>3.后序遍历是指按照 “左子树-右子树-根节点” 的顺序遍历</p>
<p>4.参考下面的二叉搜索树，示例 1<br><img src="https://raw.githubusercontent.com/lyloou/img/develop/jz32-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91_20220124175723_2022-01-24-17-57-24.png" alt="jz32-从上到下打印二叉树_20220124175723_2022-01-24-17-57-24"></p>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/jz32-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91_20220124175628_2022-01-24-17-56-29.png" alt="jz32-从上到下打印二叉树_20220124175628_2022-01-24-17-56-29"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从上往下</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz32</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jz32 jz = <span class="hljs-keyword">new</span> Jz32();<br>        <span class="hljs-keyword">final</span> TreeNode root = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node10 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">10</span>);<br>        root.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">6</span>);<br>        root.right = node10;<br>        node10.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        node10.right = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">2</span>);<br>        System.out.println(jz.PrintFromTopToBottom(root));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;Integer&gt; <span class="hljs-title">PrintFromTopToBottom</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">final</span> ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        queue.offer(root);<br><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-keyword">final</span> TreeNode node = queue.poll();<br>            list.add(node.val);<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>) &#123;<br>                queue.offer(node.left);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>) &#123;<br>                queue.offer(node.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val = <span class="hljs-number">0</span>;<br>        TreeNode left = <span class="hljs-keyword">null</span>;<br>        TreeNode right = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="扩展-按层次打印"><a href="#扩展-按层次打印" class="headerlink" title="扩展-按层次打印"></a>扩展-按层次打印</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/jz32-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91_20220124175928_2022-01-24-17-59-28.png" alt="jz32-从上到下打印二叉树_20220124175928_2022-01-24-17-59-28"></p>
<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/jz32-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91_20220124175801_2022-01-24-17-58-01.png" alt="jz32-从上到下打印二叉树_20220124175801_2022-01-24-17-58-01"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> algorithm.jzoffer;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按层次打印</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz32_3</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jz32_3 jz = <span class="hljs-keyword">new</span> Jz32_3();<br>        <span class="hljs-keyword">final</span> TreeNode root = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node10 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node6 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">6</span>);<br>        root.left = node6;<br>        root.right = node10;<br>        node10.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        node10.right = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">2</span>);<br>        node6.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">7</span>);<br>        node6.right = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">11</span>);<br><br>        jz.PrintFromTopToBottom(root);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintFromTopToBottom</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        queue.offer(root);<br>        <span class="hljs-keyword">int</span> toBePrint = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> nextLevel = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-keyword">final</span> TreeNode node = queue.poll();<br>            System.out.printf(<span class="hljs-string">"%s\t"</span>, node.val);<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>) &#123;<br>                queue.offer(node.left);<br>                nextLevel++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>) &#123;<br>                queue.offer(node.right);<br>                nextLevel++;<br>            &#125;<br>            toBePrint--;<br>            <span class="hljs-keyword">if</span> (toBePrint == <span class="hljs-number">0</span>) &#123;<br>                System.out.println();<br>                toBePrint = nextLevel;<br>                nextLevel = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val = <span class="hljs-number">0</span>;<br>        TreeNode left = <span class="hljs-keyword">null</span>;<br>        TreeNode right = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="扩展-按「之」字打印"><a href="#扩展-按「之」字打印" class="headerlink" title="扩展-按「之」字打印"></a>扩展-按「之」字打印</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/jz32-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91_20220124175912_2022-01-24-17-59-13.png" alt="jz32-从上到下打印二叉树_20220124175912_2022-01-24-17-59-13"><br><img src="https://raw.githubusercontent.com/lyloou/img/develop/jz32-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91_20220124175849_2022-01-24-17-58-49.png" alt="jz32-从上到下打印二叉树_20220124175849_2022-01-24-17-58-49"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> algorithm.jzoffer;<br><br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按之字打印</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lilou</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jz32_4</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jz32_4 jz = <span class="hljs-keyword">new</span> Jz32_4();<br>        <span class="hljs-keyword">final</span> TreeNode node1 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node2 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node3 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node4 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node5 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node6 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">6</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node7 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">7</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node8 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node9 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">9</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node10 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node11 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">11</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node12 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node13 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">13</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node14 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">14</span>);<br>        <span class="hljs-keyword">final</span> TreeNode node15 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">15</span>);<br>        node1.left = node2;<br>        node1.right = node3;<br>        node2.left = node4;<br>        node2.right = node5;<br>        node3.left = node6;<br>        node3.right = node7;<br>        node4.left = node8;<br>        node4.right = node9;<br>        node5.left = node10;<br>        node5.right = node11;<br>        node6.left = node12;<br>        node6.right = node13;<br>        node7.left = node14;<br>        node7.right = node15;<br><br>        jz.PrintFromTopToBottom(node1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintFromTopToBottom</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Stack&lt;TreeNode&gt; stack1 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        Stack&lt;TreeNode&gt; stack2 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        stack1.push(root);<br><br>        <span class="hljs-keyword">while</span> (!stack1.isEmpty() || !stack2.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (!stack1.isEmpty()) &#123;<br>                <span class="hljs-keyword">final</span> TreeNode node = stack1.pop();<br>                System.out.printf(<span class="hljs-string">"%s\t"</span>, node.val);<br>                <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>) &#123;<br>                    stack2.push(node.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>) &#123;<br>                    stack2.push(node.right);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 下一层</span><br>            System.out.println();<br>            <span class="hljs-keyword">while</span> (!stack2.isEmpty()) &#123;<br>                <span class="hljs-keyword">final</span> TreeNode node = stack2.pop();<br>                System.out.printf(<span class="hljs-string">"%s\t"</span>, node.val);<br>                <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>) &#123;<br>                    stack1.push(node.right);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>) &#123;<br>                    stack1.push(node.left);<br>                &#125;<br>            &#125;<br><br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val = <span class="hljs-number">0</span>;<br>        TreeNode left = <span class="hljs-keyword">null</span>;<br>        TreeNode right = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络】Vpc专有网络</title>
    <url>/%E7%BD%91%E7%BB%9C/vpc/</url>
    <content><![CDATA[<p><a href="https://developer.aliyun.com/article/58516" target="_blank" rel="noopener">阿里云网络系列之经典网络和专有网络-阿里云开发者社区</a><br><a href="https://coolshell.me/articles/public-network-working-tutorial.html" target="_blank" rel="noopener">科普一下公有云的网络 – 酷 壳 – CoolShell 3F</a></p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】遍历根到所有叶子节点的路径</title>
    <url>/%E7%AE%97%E6%B3%95/%E9%81%8D%E5%8E%86%E6%A0%B9%E5%88%B0%E6%89%80%E6%9C%89%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h2 id="遍历根到所有叶子节点的路径"><a href="#遍历根到所有叶子节点的路径" class="headerlink" title="遍历根到所有叶子节点的路径"></a>遍历根到所有叶子节点的路径</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyloou.tool.tree;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * **** 示例1 ****</span><br><span class="hljs-comment">         1</span><br><span class="hljs-comment">    2          3</span><br><span class="hljs-comment">  4   5      6   7</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 输出如下：</span><br><span class="hljs-comment"> 1 2 4</span><br><span class="hljs-comment"> 1 2 5</span><br><span class="hljs-comment"> 1 3 6</span><br><span class="hljs-comment"> 1 3 7</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * **** 示例2 ****</span><br><span class="hljs-comment">       1</span><br><span class="hljs-comment">  2        3</span><br><span class="hljs-comment">     5</span><br><span class="hljs-comment">  a = TreeNode(1)</span><br><span class="hljs-comment">  b = TreeNode(2)</span><br><span class="hljs-comment">  c = TreeNode(3)</span><br><span class="hljs-comment">  d = TreeNode(5)</span><br><span class="hljs-comment">  a.left = b</span><br><span class="hljs-comment">  a.right =  c</span><br><span class="hljs-comment">  b.right = d</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 输出如下：</span><br><span class="hljs-comment"> ['1-&gt;2-&gt;5', '1-&gt;3']</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        test1();<br>        test2();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        TreeNode a = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        TreeNode b = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">2</span>);<br>        TreeNode c = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">3</span>);<br>        TreeNode d = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">5</span>);<br>        a.left = b;<br>        a.right = c;<br>        b.right = d;<br>        System.out.println(binaryTreePaths(a));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        TreeNode a1 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        TreeNode a2 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">2</span>);<br>        TreeNode a3 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">3</span>);<br>        TreeNode a4 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">4</span>);<br>        TreeNode a5 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">5</span>);<br>        TreeNode a6 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">6</span>);<br>        TreeNode a7 = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">7</span>);<br>        a1.left = a2;<br>        a1.right = a3;<br>        a2.left = a4;<br>        a2.right = a5;<br>        a3.left = a6;<br>        a3.right = a7;<br>        System.out.println(binaryTreePaths(a1));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root the root of the binary tree</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> all root-to-leaf paths</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">binaryTreePaths</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        &#125;<br>        <span class="hljs-comment">// 有几个叶子节点，就有几条路径</span><br>        <span class="hljs-keyword">if</span> (isLeaf(root)) &#123;<br>            List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            list.add(root.val + <span class="hljs-string">""</span>);<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br><br>        <span class="hljs-comment">// 获取左子树的列表，循环向元素前面追加当前值</span><br>        <span class="hljs-keyword">final</span> List&lt;String&gt; leftList = binaryTreePaths(root.left);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; leftList.size(); i++) &#123;<br>            leftList.set(i, root.val + <span class="hljs-string">"-&gt;"</span> + leftList.get(i));<br>        &#125;<br><br>        <span class="hljs-comment">// 获取右子树的列表，循环向元素前面追加当前值</span><br>        <span class="hljs-keyword">final</span> List&lt;String&gt; rightList = binaryTreePaths(root.right);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rightList.size(); i++) &#123;<br>            rightList.set(i, root.val + <span class="hljs-string">"-&gt;"</span> + rightList.get(i));<br>        &#125;<br><br>        <span class="hljs-comment">// 拼接成一个列表返回</span><br>        List&lt;String&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(leftList.size() + rightList.size());<br>        result.addAll(leftList);<br>        result.addAll(rightList);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断node是否为叶子节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 为叶子节点，</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLeaf</span><span class="hljs-params">(TreeNode node)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> node.left == <span class="hljs-keyword">null</span> &amp;&amp; node.right == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> val;<br>        <span class="hljs-keyword">public</span> TreeNode left, right;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.left = <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="http://cdn.lyloou.com/img/all-to-leaf-path-2021-05-25-00-35-39.png" alt="all-to-leaf-path-2021-05-25-00-35-39"></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-树</title>
    <url>/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/</url>
    <content><![CDATA[<h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91-1-BST_20211215185025493_b2fc35.png" alt="数据结构-树-1-BST"></p>
<h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91-2-AVL_2021-12-16-09-23-23.png" alt="数据结构-树_数据结构-树-2-AVL_2021-12-16-09-23-23"></p>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91-3-RBTree_2021-12-16-09-23-46.png" alt="数据结构-树_数据结构-树-3-RBTree_2021-12-16-09-23-46"></p>
<h2 id="平衡多路查找树"><a href="#平衡多路查找树" class="headerlink" title="平衡多路查找树"></a>平衡多路查找树</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91-4-B-Tree_20211215185054559_400b95.png" alt="数据结构-树-4-B-Tree"></p>
<h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><p><img src="https://raw.githubusercontent.com/lyloou/img/develop/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91-5-B%2BTree_20211215185101793_088b18.png" alt="数据结构-树-5-B+Tree"></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>导图地址：【金山文档】 数据结构-树 <a href="https://kdocs.cn/l/se9RNa0rOTyq" target="_blank" rel="noopener">https://kdocs.cn/l/se9RNa0rOTyq</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Justauth源码学习</title>
    <url>/%E8%AF%BB%E6%BA%90%E7%A0%81/justauth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="JustAuth-简介"><a href="#JustAuth-简介" class="headerlink" title="JustAuth 简介"></a>JustAuth 简介</h2><blockquote>
<p>🏆Gitee 最有价值开源项目 🚀💯 小而全而美的第三方登录开源组件。目前已支持 Github、Gitee、微博、钉钉、百度、Coding、腾讯云开发者平台、OSChina、支付宝、QQ、微信、淘宝、Google、Facebook、抖音、领英、小米、微软、今日头条、Teambition、StackOverflow、Pinterest、人人、华为、企业微信、酷家乐、Gitlab、美团、饿了么、推特、飞书、京东、阿里云、喜马拉雅、Amazon、Slack 和 Line 等第三方平台的授权登录。 Login, so easy!<br>网址：<a href="https://github.com/justauth/JustAuth" target="_blank" rel="noopener">justauth/JustAuth</a></p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">1.1.  Roles<br><br>   OAuth defines four roles:<br><br>  <span class="hljs-built_in"> resource </span>owner<br>      An entity capable of granting access <span class="hljs-keyword">to</span> a protected resource.<br>      When the<span class="hljs-built_in"> resource </span>owner is a person, it is referred <span class="hljs-keyword">to</span> as an<br>      end-user.<br><br>  <span class="hljs-built_in"> resource </span>server<br>      The<span class="hljs-built_in"> server </span>hosting the protected resources, capable of accepting<br>      <span class="hljs-keyword">and</span> responding <span class="hljs-keyword">to</span> protected<span class="hljs-built_in"> resource </span>requests using access tokens.<br><br>   client<br>      An application making protected<span class="hljs-built_in"> resource </span>requests on behalf of the<br>     <span class="hljs-built_in"> resource </span>owner <span class="hljs-keyword">and</span> with its authorization.  The term <span class="hljs-string">"client"</span> does<br>      <span class="hljs-keyword">not</span> imply any particular implementation characteristics (e.g.,<br>      whether the application executes on a server, a desktop, <span class="hljs-keyword">or</span> other<br>      devices).<br><br>   authorization server<br>      The<span class="hljs-built_in"> server </span>issuing access tokens <span class="hljs-keyword">to</span> the<span class="hljs-built_in"> client </span>after successfully<br>      authenticating the<span class="hljs-built_in"> resource </span>owner <span class="hljs-keyword">and</span> obtaining authorization.<br><br>   The interaction between the authorization<span class="hljs-built_in"> server </span><span class="hljs-keyword">and</span><span class="hljs-built_in"> resource </span>server<br>   is beyond the scope of this specification.  The authorization server<br>   may be the same<span class="hljs-built_in"> server </span>as the<span class="hljs-built_in"> resource server </span><span class="hljs-keyword">or</span> a separate entity.<br>   A single authorization<span class="hljs-built_in"> server </span>may issue access tokens accepted by<br>   multiple<span class="hljs-built_in"> resource </span>servers.<br><br>1.2.  Protocol Flow<br><br>     +--------+                               +---------------+<br>     |        |--(A)- Authorization Request -&gt;|  <span class="hljs-built_in"> Resource </span>   |<br>     |        |                               |     Owner     |<br>     |        |&lt;-(B)-- Authorization Grant ---|               |<br>     |        |                               +---------------+<br>     |        |<br>     |        |                               +---------------+<br>     |        |--(C)-- Authorization Grant --&gt;| Authorization |<br>     |<span class="hljs-built_in"> Client </span>|                               |    <span class="hljs-built_in"> Server </span>   |<br>     |        |&lt;-(D)----- Access Token -------|               |<br>     |        |                               +---------------+<br>     |        |<br>     |        |                               +---------------+<br>     |        |--(E)----- Access Token ------&gt;|   <span class="hljs-built_in"> Resource </span>  |<br>     |        |                               |    <span class="hljs-built_in"> Server </span>   |<br>     |        |&lt;-(F)--- Protected<span class="hljs-built_in"> Resource </span>---|               |<br>     +--------+                               +---------------+<br><br>                     Figure 1: Abstract Protocol Flow<br><br>   The abstract OAuth 2.0 flow illustrated <span class="hljs-keyword">in</span> Figure 1 describes the<br>   interaction between the four roles <span class="hljs-keyword">and</span> includes the following steps:<br><br>   (A)  The<span class="hljs-built_in"> client </span>requests authorization <span class="hljs-keyword">from</span> the<span class="hljs-built_in"> resource </span>owner.  The<br>        authorization request can be made directly <span class="hljs-keyword">to</span> the<span class="hljs-built_in"> resource </span>owner<br>        (as shown), <span class="hljs-keyword">or</span> preferably indirectly via the authorization<br>       <span class="hljs-built_in"> server </span>as an intermediary.<br>		用户打开客户端以后，客户端要求用户给予授权。<br>   (B)  The<span class="hljs-built_in"> client </span>receives an authorization grant, which is a<br>        credential representing the<span class="hljs-built_in"> resource </span>owner<span class="hljs-string">'s authorization,</span><br><span class="hljs-string">        expressed using one of four grant types defined in this</span><br><span class="hljs-string">        specification or using an extension grant type.  The</span><br><span class="hljs-string">        authorization grant type depends on the method used by the</span><br><span class="hljs-string">        client to request authorization and the types supported by the</span><br><span class="hljs-string">        authorization server.</span><br><span class="hljs-string">		用户同意给予客户端授权。</span><br><span class="hljs-string"></span><br><span class="hljs-string">   (C)  The client requests an access token by authenticating with the</span><br><span class="hljs-string">        authorization server and presenting the authorization grant.</span><br><span class="hljs-string">		客户端使用上一步获得的授权，向认证服务器申请令牌。</span><br><span class="hljs-string">   (D)  The authorization server authenticates the client and validates</span><br><span class="hljs-string">        the authorization grant, and if valid, issues an access token.</span><br><span class="hljs-string">		认证服务器对客户端进行认证以后，确认无误，同意发放令牌</span><br><span class="hljs-string"></span><br><span class="hljs-string">   (E)  The client requests the protected resource from the resource</span><br><span class="hljs-string">        server and authenticates by presenting the access token.</span><br><span class="hljs-string">		客户端使用令牌，向资源服务器申请获取资源。</span><br><span class="hljs-string">   (F)  The resource server validates the access token, and if valid,</span><br><span class="hljs-string">        serves the request.</span><br><span class="hljs-string">		资源服务器确认令牌无误，同意向客户端开放资源。</span><br><span class="hljs-string">https://datatracker.ietf.org/doc/html/rfc6749#section-1.2</span><br></code></pre></td></tr></table></figure>

<p><img src="http://cdn.lyloou.com/img/justauth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-2021-06-29-17-22-17.png" alt="justauth源码学习-2021-06-29-17-22-17"></p>
<h2 id="从以下几个问题来看代码"><a href="#从以下几个问题来看代码" class="headerlink" title="从以下几个问题来看代码"></a>从以下几个问题来看代码</h2><h4 id="Q-如何集成多家的？"><a href="#Q-如何集成多家的？" class="headerlink" title="Q: 如何集成多家的？"></a>Q: 如何集成多家的？</h4><p>这一块，主要是工厂模式和模板模式的应用。</p>
<p>工厂模式</p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><code class="hljs leaf">AuthRequestFactory<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-variable">String</span> <span class="hljs-variable">source</span>)</span></span><br></code></pre></td></tr></table></figure>

<p>模板模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthDefaultRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AuthRequest</span></span>&#123;<br>	<span class="hljs-comment">// ...</span><br>	<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> AuthToken <span class="hljs-title">getAccessToken</span><span class="hljs-params">(AuthCallback var1)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> AuthUser <span class="hljs-title">getUserInfo</span><span class="hljs-params">(AuthToken var1)</span></span>;<br>	<span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="http://cdn.lyloou.com/img/justauth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-2021-06-29-17-10-59.png" alt="justauth源码学习-2021-06-29-17-10-59"></p>
<p><strong>针对授权、获取用户信息等操作，由具体的 source 类来实现</strong><br>因为都是基于 OAuth2 来实现的，所以都有 authorize 地址、accessToken 地址、userInfo 地址 等概念</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AuthSource</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">authorize</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">String <span class="hljs-title">accessToken</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">String <span class="hljs-title">userInfo</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> String <span class="hljs-title">revoke</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthException(AuthResponseStatus.UNSUPPORTED);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> String <span class="hljs-title">refresh</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthException(AuthResponseStatus.UNSUPPORTED);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> Enum ? String.valueOf(<span class="hljs-keyword">this</span>) : <span class="hljs-keyword">this</span>.getClass().getSimpleName();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> AuthDefaultSource implements AuthSource &#123;<br>    GITHUB &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">authorize</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"https://github.com/login/oauth/authorize"</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">accessToken</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"https://github.com/login/oauth/access_token"</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">userInfo</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"https://api.github.com/user"</span>;<br>        &#125;<br>    &#125;,<br>    WEIBO &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">authorize</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"https://api.weibo.com/oauth2/authorize"</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">accessToken</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"https://api.weibo.com/oauth2/access_token"</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">userInfo</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"https://api.weibo.com/2/users/show.json"</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">revoke</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"https://api.weibo.com/oauth2/revokeoauth2"</span>;<br>        &#125;<br>    &#125;<br>	<span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>多家配置</strong><br>JustAuthProperties，其 type 是 map 类型的，可以自定义任意多个的 source。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">justauth:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type:</span><br>    <span class="hljs-attr">QQ:</span><br>      <span class="hljs-attr">client-id:</span> <span class="hljs-number">10</span><span class="hljs-string">**********6</span><br>      <span class="hljs-attr">client-secret:</span> <span class="hljs-string">1f7d08**********5b7**********29e</span><br>      <span class="hljs-attr">redirect-uri:</span> <span class="hljs-string">http://x.lyloou.com/oauth/qq/callback</span><br>      <span class="hljs-attr">union-id:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">WEIBO:</span><br>      <span class="hljs-attr">client-id:</span> <span class="hljs-number">10</span><span class="hljs-string">**********6</span><br>      <span class="hljs-attr">client-secret:</span> <span class="hljs-string">1f7d08**********5b7**********29e</span><br>      <span class="hljs-attr">redirect-uri:</span> <span class="hljs-string">http://x.lyloou.com/oauth/weibo/callback</span><br></code></pre></td></tr></table></figure>

<h4 id="Q-State-缓存如何实现？"><a href="#Q-State-缓存如何实现？" class="headerlink" title="Q: State 缓存如何实现？"></a>Q: State 缓存如何实现？</h4><p><code>state</code> 是 用来保持授权会话流程完整性，防止 CSRF 攻击的安全的随机的参数，由开发者生成</p>
<p><strong>自动配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// justauth-spring-boot-starter JustAuthStateCacheConfiguration</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span>(&#123;AuthStateCache<span class="hljs-class">.<span class="hljs-keyword">class</span>&#125;)</span><br><span class="hljs-class">    @<span class="hljs-title">ConditionalOnProperty</span>(</span><br><span class="hljs-class">        <span class="hljs-title">name</span> </span>= &#123;<span class="hljs-string">"justauth.cache.type"</span>&#125;,<br>        havingValue = <span class="hljs-string">"default"</span>,<br>        matchIfMissing = <span class="hljs-keyword">true</span>  <span class="hljs-comment">// 默认</span><br>    )<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Default</span> </span>&#123;<br>        Default() &#123;<br>        &#125;<br><br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> AuthStateCache <span class="hljs-title">authStateCache</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> AuthDefaultStateCache.INSTANCE;<br>        &#125;<br><br>        <span class="hljs-keyword">static</span> &#123;<br>            JustAuthStateCacheConfiguration.log.debug(<span class="hljs-string">"JustAuth 使用 默认缓存存储 state 数据"</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p><strong>配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">justauth:</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">default</span><br><span class="hljs-string">```</span><br><br><span class="hljs-string">**实现**</span><br><br><span class="hljs-string">**清理**</span><br><br><span class="hljs-string">通过</span> <span class="hljs-string">ScheduledThreadPoolExecutor</span> <span class="hljs-string">每隔</span> <span class="hljs-string">AuthCacheConfig.timeout</span> <span class="hljs-string">来定时清理</span> <span class="hljs-string">CacheState</span><br><br><span class="hljs-string">```java</span><br><span class="hljs-string">public</span> <span class="hljs-string">void</span> <span class="hljs-string">schedulePrune(long</span> <span class="hljs-string">delay)</span> <span class="hljs-string">&#123;</span><br>	<span class="hljs-string">AuthCacheScheduler.INSTANCE.schedule(this::pruneCache,</span> <span class="hljs-string">delay);</span><br><span class="hljs-string">&#125;</span><br><br><span class="hljs-string">public</span> <span class="hljs-string">enum</span> <span class="hljs-string">AuthCacheScheduler</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-string">INSTANCE;</span><br><br>    <span class="hljs-string">private</span> <span class="hljs-string">AtomicInteger</span> <span class="hljs-string">cacheTaskNumber</span> <span class="hljs-string">=</span> <span class="hljs-string">new</span> <span class="hljs-string">AtomicInteger(1);</span><br>    <span class="hljs-string">private</span> <span class="hljs-string">ScheduledExecutorService</span> <span class="hljs-string">scheduler;</span><br><br>    <span class="hljs-string">private</span> <span class="hljs-string">AuthCacheScheduler()</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-string">this.create();</span><br>    <span class="hljs-string">&#125;</span><br><br>    <span class="hljs-string">private</span> <span class="hljs-string">void</span> <span class="hljs-string">create()</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-string">this.shutdown();</span><br>        <span class="hljs-string">this.scheduler</span> <span class="hljs-string">=</span> <span class="hljs-string">new</span> <span class="hljs-string">ScheduledThreadPoolExecutor(10,</span> <span class="hljs-string">(r)</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">&#123;</span><br>            <span class="hljs-string">return</span> <span class="hljs-string">new</span> <span class="hljs-string">Thread(r,</span> <span class="hljs-string">String.format("JustAuth-Task-%s",</span> <span class="hljs-string">this.cacheTaskNumber.getAndIncrement()));</span><br>        <span class="hljs-string">&#125;);</span><br>    <span class="hljs-string">&#125;</span><br><br>    <span class="hljs-string">public</span> <span class="hljs-string">void</span> <span class="hljs-string">shutdown()</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-string">if</span> <span class="hljs-string">(null</span> <span class="hljs-string">!=</span> <span class="hljs-string">this.scheduler)</span> <span class="hljs-string">&#123;</span><br>            <span class="hljs-string">this.scheduler.shutdown();</span><br>        <span class="hljs-string">&#125;</span><br><br>    <span class="hljs-string">&#125;</span><br><br>    <span class="hljs-string">public</span> <span class="hljs-string">void</span> <span class="hljs-string">schedule(Runnable</span> <span class="hljs-string">task,</span> <span class="hljs-string">long</span> <span class="hljs-string">delay)</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-string">this.scheduler.scheduleAtFixedRate(task,</span> <span class="hljs-string">delay,</span> <span class="hljs-string">delay,</span> <span class="hljs-string">TimeUnit.MILLISECONDS);</span><br>    <span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure>

<h4 id="Q-如何做到适配自有的-OAuth-服务？"><a href="#Q-如何做到适配自有的-OAuth-服务？" class="headerlink" title="Q: 如何做到适配自有的 OAuth 服务？"></a>Q: 如何做到适配自有的 OAuth 服务？</h4><p>和上面其他平台的一样，可以自定义来适配新的平台。</p>
<ol>
<li><p>继承 AuthSource，加入 authorize、accessToken、userInfo 地址</p>
</li>
<li><p>实现 AuthDefaultRequest，重写几个基本的 oauth 服务接口：getAccessToken、getUserInfo、authorize。</p>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">AuthRequest authRequest = <span class="hljs-keyword">new</span> AuthMyGitlabRequest(AuthConfig.builder()<br>    .clientId(<span class="hljs-string">"63398e403231d4aa7e856cf5413620d536a876cb94e8d10ced0d3191b5d1d246"</span>)<br>    .clientSecret(<span class="hljs-string">"65b0eba68fff019e682e6755882a24dfdbf0a61be55de119cb8970320186c8eb"</span>)<br>    .redirectUri(<span class="hljs-string">"http://127.0.0.1:8443/oauth/callback/mygitlab"</span>)<br>    .build())<br></code></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="Q-如何支持自定义-Scope？"><a href="#Q-如何支持自定义-Scope？" class="headerlink" title="Q: 如何支持自定义 Scope？"></a>Q: 如何支持自定义 Scope？</h4><p><a href="https://justauth.wiki/features/customize-scopes.html#%E8%87%AA%E5%AE%9A%E4%B9%89-scope-%E6%8E%A5%E5%85%A5-google-%E5%B9%B3%E5%8F%B0" target="_blank" rel="noopener">自定义-scope-接入-google-平台</a></p>
<p><code>scope</code> 简单来说，就是申请得到某个（某些）范围的资源，超过此范围的资源限制访问。</p>
<blockquote>
<p>Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account. An application can request one or more scopes, this information is then presented to the user in the consent screen, and the access token issued to the application will be limited to the scopes granted.</p>
<p>—— 以上内容节选自<a href="https://oauth.net/" target="_blank" rel="noopener">oauth.net</a><a href="https://oauth.net/" target="_blank" rel="noopener"> (opens new window)</a></p>
</blockquote>
<p>提供 AuthScope 统一接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 各个平台 scope 类的统一接口</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> yadong.zhang (yadong.zhang0415(a)gmail.com)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.15.7</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AuthScope</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取字符串 &#123;<span class="hljs-doctag">@code</span> scope&#125;，对应为各平台实际使用的 &#123;<span class="hljs-doctag">@code</span> scope&#125;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">getScope</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断当前 &#123;<span class="hljs-doctag">@code</span> scope&#125; 是否为各平台默认启用的</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isDefault</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>各个平台实现此接口，如 google</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Google 平台 OAuth 授权范围</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> yadong.zhang (yadong.zhang0415(a)gmail.com)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> AuthGoogleScope implements AuthScope &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> scope&#125; 含义，以&#123;<span class="hljs-doctag">@code</span> description&#125; 为准</span><br><span class="hljs-comment">     */</span><br>    USER_OPENID(<span class="hljs-string">"openid"</span>, <span class="hljs-string">"Associate you with your personal info on Google"</span>, <span class="hljs-keyword">true</span>),<br>    USER_EMAIL(<span class="hljs-string">"email"</span>, <span class="hljs-string">"View your email address"</span>, <span class="hljs-keyword">true</span>),<br>    USER_PROFILE(<span class="hljs-string">"profile"</span>, <span class="hljs-string">"View your basic profile info"</span>, <span class="hljs-keyword">true</span>),<br>    USER_PHONENUMBERS_READ(<span class="hljs-string">"https://www.googleapis.com/auth/user.phonenumbers.read"</span>, <span class="hljs-string">"View your phone numbers"</span>, <span class="hljs-keyword">false</span>),<br>    USER_ORGANIZATION_READ(<span class="hljs-string">"https://www.googleapis.com/auth/user.organization.read"</span>, <span class="hljs-string">"See your education, work history and org info"</span>, <span class="hljs-keyword">false</span>),<br>    USER_GENDER_READ(<span class="hljs-string">"https://www.googleapis.com/auth/user.gender.read"</span>, <span class="hljs-string">"See your gender"</span>, <span class="hljs-keyword">false</span>),<br>    USER_EMAILS_READ(<span class="hljs-string">"https://www.googleapis.com/auth/user.emails.read"</span>, <span class="hljs-string">"View your email addresses"</span>, <span class="hljs-keyword">false</span>),<br><br>    USER_BIRTHDAY_READ(<span class="hljs-string">"https://www.googleapis.com/auth/user.birthday.read"</span>, <span class="hljs-string">"View your complete date of birth"</span>, <span class="hljs-keyword">false</span>)<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>结合流程图来说，（A）这里需要将 scope 带过去，进入授权页面。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">+--------+                               +---------------+<br>|        |--(A)- Authorization Request -&gt;|  <span class="hljs-built_in"> Resource </span>   |<br>|        |                               |     Owner     |<br>|        |&lt;-(B)-- Authorization Grant ---|               |<br>|        |                               +---------------+<br>|        |<br>|        |                               +---------------+<br>|        |--(C)-- Authorization Grant --&gt;| Authorization |<br>|<span class="hljs-built_in"> Client </span>|                               |    <span class="hljs-built_in"> Server </span>   |<br>|        |&lt;-(D)----- Access Token -------|               |<br>|        |                               +---------------+<br>|        |<br>|        |                               +---------------+<br>|        |--(E)----- Access Token ------&gt;|   <span class="hljs-built_in"> Resource </span>  |<br>|        |                               |    <span class="hljs-built_in"> Server </span>   |<br>|        |&lt;-(F)--- Protected<span class="hljs-built_in"> Resource </span>---|               |<br>+--------+<br></code></pre></td></tr></table></figure>

<figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas">https://accounts.google.com/o/oauth2/v2/auth?response_type=code<span class="hljs-variable">&amp;client_id</span>=553817080137-d1pe3asc115tfgo74l8me92dhg4ro9k1.apps.googleusercontent.com<span class="hljs-variable">&amp;redirect_uri</span>=http://<span class="hljs-meta">x</span>.lyloou.com/oauth/google/callback<span class="hljs-variable">&amp;state</span>=e829a5725ce69cf1ed7918337caba839<span class="hljs-variable">&amp;access_type</span>=offline<span class="hljs-variable">&amp;scope</span>=openid email profile<span class="hljs-variable">&amp;prompt</span>=select_account<br></code></pre></td></tr></table></figure>

<p>授权页面的链接是通过 <code>AuthDefaultRequest.authorize</code> 来拼接得到的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AuthDefaultRequest.java</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回带&#123;<span class="hljs-doctag">@code</span> state&#125;参数的授权url，授权回调时会带上这个&#123;<span class="hljs-doctag">@code</span> state&#125;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> state state 验证授权流程的参数，可以防止csrf</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回授权地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.9.3</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">authorize</span><span class="hljs-params">(String state)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> UrlBuilder.fromBaseUrl(<span class="hljs-keyword">super</span>.authorize(state))<br>            .queryParam(<span class="hljs-string">"access_type"</span>, <span class="hljs-string">"offline"</span>)<br>            .queryParam(<span class="hljs-string">"scope"</span>, <span class="hljs-keyword">this</span>.getScopes(<span class="hljs-string">" "</span>, <span class="hljs-keyword">false</span>, AuthScopeUtils.getDefaultScopes(AuthGoogleScope.values())))<br>            .queryParam(<span class="hljs-string">"prompt"</span>,<span class="hljs-string">"select_account"</span>)<br>            .build();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取以 &#123;<span class="hljs-doctag">@code</span> separator&#125;分割过后的 scope 信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> separator     多个 &#123;<span class="hljs-doctag">@code</span> scope&#125; 间的分隔符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encode        是否 encode 编码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultScopes 默认的 scope， 当客户端没有配置 &#123;<span class="hljs-doctag">@code</span> scopes&#125; 时启用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.16.7</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">getScopes</span><span class="hljs-params">(String separator, <span class="hljs-keyword">boolean</span> encode, List&lt;String&gt; defaultScopes)</span> </span>&#123;<br>        List&lt;String&gt; scopes = config.getScopes();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == scopes || scopes.isEmpty()) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == defaultScopes || defaultScopes.isEmpty()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>            &#125;<br>            scopes = defaultScopes;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == separator) &#123;<br>            <span class="hljs-comment">// 默认为空格</span><br>            separator = <span class="hljs-string">" "</span>;<br>        &#125;<br>        String scopeStr = String.join(separator, scopes);<br>        <span class="hljs-keyword">return</span> encode ? UrlUtil.urlEncode(scopeStr) : scopeStr;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p><code>getScopes</code> 这里的逻辑是，如果没有传入 scope 参数，那么就使用默认的 scope 参数，即<code>openid email profile</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">USER_OPENID(<span class="hljs-string">"openid"</span>, <span class="hljs-string">"Associate you with your personal info on Google"</span>, <span class="hljs-keyword">true</span>),<br>USER_EMAIL(<span class="hljs-string">"email"</span>, <span class="hljs-string">"View your email address"</span>, <span class="hljs-keyword">true</span>),<br>USER_PROFILE(<span class="hljs-string">"profile"</span>, <span class="hljs-string">"View your basic profile info"</span>, <span class="hljs-keyword">true</span>),<br></code></pre></td></tr></table></figure>

<p>插曲：如果你把 email 和 profile 取消掉，获取到用户信息时会发现少了 email,profile 这些信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// scope=openid</span><br>&#123;<br>  <span class="hljs-attr">"code"</span>: <span class="hljs-number">2000</span>,<br>  <span class="hljs-attr">"msg"</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">"data"</span>: &#123;<br>    <span class="hljs-attr">"uuid"</span>: <span class="hljs-string">"113911973270419053931"</span>,<br>    <span class="hljs-attr">"username"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"nickname"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"avatar"</span>: <span class="hljs-string">"https://lh3.googleusercontent.com/a-/AOh14GgncI8eYK_uG119BDclub5LNGDn57G_GI4OLZeOBA=s96-c"</span>,<br>    <span class="hljs-attr">"blog"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"company"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"location"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"email"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"remark"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"gender"</span>: <span class="hljs-string">"UNKNOWN"</span>,<br>    <span class="hljs-attr">"source"</span>: <span class="hljs-string">"GOOGLE"</span>,<br>    <span class="hljs-attr">"token"</span>: &#123;<br>      <span class="hljs-attr">"accessToken"</span>: <span class="hljs-string">"ya29.a0ARrdaM-dddddd-MPjpVj6xJAJP0zZFb396tpmi6BkS_Uom1G7DGTvSaWdJwwOzCXC5Bus-xQjq9JdGfNKWylhl029LMtuyZVT7lKzquGvUFePmellmRoY2Or6RgjS-TwKHzSviQoqEFBcYlQ"</span>,<br>      <span class="hljs-attr">"expireIn"</span>: <span class="hljs-number">3592</span>,<br>      <span class="hljs-attr">"refreshToken"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"refreshTokenExpireIn"</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">"uid"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"openId"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"accessCode"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"unionId"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"scope"</span>: <span class="hljs-string">"openid"</span>,<br>      <span class="hljs-attr">"tokenType"</span>: <span class="hljs-string">"Bearer"</span>,<br>      <span class="hljs-attr">"idToken"</span>: <span class="hljs-string">"eyJhbGciOiJSUzI1NiIsImtpZCI6ImI2ZjhkNTVkYTUzNGVhOTFjYjJjYjAwZTFhZjRlOGUwY2RlY2E5M2QiLCJ0eXAiOiJKV1QifQ.dddddd.yYUcU9VMwrF3vGXfmR4bsJDeQSjl_msow9eCARiV8HYIyjWDyZUM0ihOqxQzunWUT0W3nRVWxFw4oeN9bhZxIU9jBpW600eJRyDZ6BgJs0QEmC4sjJ4rWPp_P6OFo6b4HEM9Cl5i4ix-cJV18-4BxWhM6WbuC09F3a5RVvp7YGzYhMDRK4fecDpy-7q5wFZws3oYOrjCK5rVu4lioLMTJHCV-THbWImZTrEiuiLxw6onvKwhDa2FfLGbO3tei0EoVTvxJJwi18K-5TzcNySb8yBA-NYTXmlLZ9iWb7NNa7IXqKI1qt0VYm7xUUY4r3G14tZKU6JKkuz07RVx-4zxMw"</span>,<br>      <span class="hljs-attr">"macAlgorithm"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"macKey"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"code"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"oauthToken"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"oauthTokenSecret"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"userId"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"screenName"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"oauthCallbackConfirmed"</span>: <span class="hljs-literal">null</span><br>    &#125;,<br>    <span class="hljs-attr">"rawUserInfo"</span>: &#123;<br>      <span class="hljs-attr">"sub"</span>: <span class="hljs-string">"ddd"</span>,<br>      <span class="hljs-attr">"picture"</span>: <span class="hljs-string">"https://lh3.googleusercontent.com/a-/AOh14GgncI8eYK_uG119BDclub5LNGDn57G_GI4OLZeOBA=s96-c"</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// scope=openid email profile</span><br>&#123;<br>  <span class="hljs-attr">"code"</span>: <span class="hljs-number">2000</span>,<br>  <span class="hljs-attr">"msg"</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">"data"</span>: &#123;<br>    <span class="hljs-attr">"uuid"</span>: <span class="hljs-string">"113911973270419053931"</span>,<br>    <span class="hljs-attr">"username"</span>: <span class="hljs-string">"lyloou6@gmail.com"</span>,<br>    <span class="hljs-attr">"nickname"</span>: <span class="hljs-string">"Lou"</span>,<br>    <span class="hljs-attr">"avatar"</span>: <span class="hljs-string">"https://lh3.googleusercontent.com/a-/AOh14GgncI8eYK_uG119BDclub5LNGDn57G_GI4OLZeOBA=s96-c"</span>,<br>    <span class="hljs-attr">"blog"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"company"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"location"</span>: <span class="hljs-string">"zh-CN"</span>,<br>    <span class="hljs-attr">"email"</span>: <span class="hljs-string">"lyloou6@gmail.com"</span>,<br>    <span class="hljs-attr">"remark"</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">"gender"</span>: <span class="hljs-string">"UNKNOWN"</span>,<br>    <span class="hljs-attr">"source"</span>: <span class="hljs-string">"GOOGLE"</span>,<br>    <span class="hljs-attr">"token"</span>: &#123;<br>      <span class="hljs-attr">"accessToken"</span>: <span class="hljs-string">"ya29.dd-dddd-eplbTCCWb55DHRZeAGDqDvk5RADufWREONGgKhdtCLa3yWKp4TxTJsyPi2EXYhgmMqV4yVV-NX6swbc38hMXKKGzsTnW4UVaiSOklQ-C1B_af"</span>,<br>      <span class="hljs-attr">"expireIn"</span>: <span class="hljs-number">3599</span>,<br>      <span class="hljs-attr">"refreshToken"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"refreshTokenExpireIn"</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">"uid"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"openId"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"accessCode"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"unionId"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"scope"</span>: <span class="hljs-string">"openid https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"</span>,<br>      <span class="hljs-attr">"tokenType"</span>: <span class="hljs-string">"Bearer"</span>,<br>      <span class="hljs-attr">"idToken"</span>: <span class="hljs-string">"dddddddddd"</span>,<br>      <span class="hljs-attr">"macAlgorithm"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"macKey"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"code"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"oauthToken"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"oauthTokenSecret"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"userId"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"screenName"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"oauthCallbackConfirmed"</span>: <span class="hljs-literal">null</span><br>    &#125;,<br>    <span class="hljs-attr">"rawUserInfo"</span>: &#123;<br>      <span class="hljs-attr">"sub"</span>: <span class="hljs-string">"113911973270419053931"</span>,<br>      <span class="hljs-attr">"email_verified"</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Lou"</span>,<br>      <span class="hljs-attr">"given_name"</span>: <span class="hljs-string">"Lou"</span>,<br>      <span class="hljs-attr">"locale"</span>: <span class="hljs-string">"zh-CN"</span>,<br>      <span class="hljs-attr">"picture"</span>: <span class="hljs-string">"https://lh3.googleusercontent.com/a-/AOh14GgncI8eYK_uG119BDclub5LNGDn57G_GI4OLZeOBA=s96-c"</span>,<br>      <span class="hljs-attr">"email"</span>: <span class="hljs-string">"lyloou6@gmail.com"</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/lyloou/img/develop/justauth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-2021-07-02-10-50-48.png" alt="justauth源码学习-2021-07-02-10-50-48"><br>后面获取用户信息，带上 accessToken 来就可以获取了。</p>
<h4 id="Q-http-工具如何解耦，可以将选择权交给开发者？"><a href="#Q-http-工具如何解耦，可以将选择权交给开发者？" class="headerlink" title="Q: http 工具如何解耦，可以将选择权交给开发者？"></a>Q: http 工具如何解耦，可以将选择权交给开发者？</h4><p>作者引入了自己实现的 <code>simple-http</code> 工具包 <a href="https://github.com/xkcoding/simple-http" target="_blank" rel="noopener">xkcoding/simple-http: 抽取一个简单 HTTP 的通用接口，底层实现根据具体引入依赖指定。</a></p>
<p>从 <code>AuthGithubRequest#getUserInfo</code> 开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> AuthUser <span class="hljs-title">getUserInfo</span><span class="hljs-params">(AuthToken authToken)</span> </span>&#123;<br>    HttpHeader header = <span class="hljs-keyword">new</span> HttpHeader();<br>    header.add(<span class="hljs-string">"Authorization"</span>, <span class="hljs-string">"token "</span> + authToken.getAccessToken());<br>    String response = (<span class="hljs-keyword">new</span> HttpUtils(<span class="hljs-keyword">this</span>.config.getHttpConfig())).get(UrlBuilder.fromBaseUrl(<span class="hljs-keyword">this</span>.source.userInfo()).build(), (Map)<span class="hljs-keyword">null</span>, header, <span class="hljs-keyword">false</span>);<br>    JSONObject object = JSONObject.parseObject(response);<br>    <span class="hljs-keyword">this</span>.checkResponse(object.containsKey(<span class="hljs-string">"error"</span>), object.getString(<span class="hljs-string">"error_description"</span>));<br>    <span class="hljs-keyword">return</span> AuthUser.builder().rawUserInfo(object).uuid(object.getString(<span class="hljs-string">"id"</span>)).username(object.getString(<span class="hljs-string">"login"</span>)).avatar(object.getString(<span class="hljs-string">"avatar_url"</span>)).blog(object.getString(<span class="hljs-string">"blog"</span>)).nickname(object.getString(<span class="hljs-string">"name"</span>)).company(object.getString(<span class="hljs-string">"company"</span>)).location(object.getString(<span class="hljs-string">"location"</span>)).email(object.getString(<span class="hljs-string">"email"</span>)).remark(object.getString(<span class="hljs-string">"bio"</span>)).gender(AuthUserGender.UNKNOWN).token(authToken).source(<span class="hljs-keyword">this</span>.source.toString()).build();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这里实例化了一个 HttpUtils 工具类 <code>new HttpUtils(this.config.getHttpConfig())</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpUtils</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HttpUtils</span><span class="hljs-params">(HttpConfig config)</span> </span>&#123;<br>        HttpUtil.setConfig(config);<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpUtil</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfig</span><span class="hljs-params">(HttpConfig httpConfig)</span> </span>&#123;<br>		checkHttpNotNull(proxy);<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == httpConfig) &#123;<br>			httpConfig = HttpConfig.builder().timeout(Constants.DEFAULT_TIMEOUT).build();<br>		&#125;<br>		proxy.setHttpConfig(httpConfig);<br>	&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkHttpNotNull</span><span class="hljs-params">(Http proxy)</span> </span>&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == proxy) &#123;<br>			selectHttpProxy();<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>可以看到 <code>selectHttpProxy()</code>这里是关键，通过 <code>ClassUtil.isPresent</code>的方式（即<code>Class.forName</code>）来确定 class 是否可以被加载，从上到下，如果可以被加载，就作为 http 的具体代理。（所以引入了相关的 http 依赖，<code>HttpUtils</code> 就可以直接拿来使用了）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpUtil</span> </span>&#123;<br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> AbstractHttp proxy;<br><br>	<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectHttpProxy</span><span class="hljs-params">()</span> </span>&#123;<br>		AbstractHttp defaultProxy = <span class="hljs-keyword">null</span>;<br>		ClassLoader classLoader = HttpUtil<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getClassLoader</span>()</span>;<br>		<span class="hljs-comment">// 基于 java 11 HttpClient</span><br>		<span class="hljs-keyword">if</span> (ClassUtil.isPresent(<span class="hljs-string">"java.net.http.HttpClient"</span>, classLoader)) &#123;<br>			defaultProxy = getHttpProxy(com.xkcoding.http.support.java11.HttpClientImpl<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>		&#125;<br>		<span class="hljs-comment">// 基于 okhttp3</span><br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == defaultProxy &amp;&amp; ClassUtil.isPresent(<span class="hljs-string">"okhttp3.OkHttpClient"</span>, classLoader)) &#123;<br>			defaultProxy = getHttpProxy(com.xkcoding.http.support.okhttp3.OkHttp3Impl<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>		&#125;<br>		<span class="hljs-comment">// 基于 httpclient</span><br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == defaultProxy &amp;&amp; ClassUtil.isPresent(<span class="hljs-string">"org.apache.http.impl.client.HttpClients"</span>, classLoader)) &#123;<br>			defaultProxy = getHttpProxy(com.xkcoding.http.support.httpclient.HttpClientImpl<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>		&#125;<br>		<span class="hljs-comment">// 基于 hutool</span><br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == defaultProxy &amp;&amp; ClassUtil.isPresent(<span class="hljs-string">"cn.hutool.http.HttpRequest"</span>, classLoader)) &#123;<br>			defaultProxy = getHttpProxy(com.xkcoding.http.support.hutool.HutoolImpl<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>		&#125;<br><br>		<span class="hljs-keyword">if</span> (defaultProxy == <span class="hljs-keyword">null</span>) &#123;<br>			<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SimpleHttpException(<span class="hljs-string">"Has no HttpImpl defined in environment!"</span>);<br>		&#125;<br><br>		proxy = defaultProxy;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>如下图，是 <code>simpleHttp</code> 默认支持的 Http 工具。</p>
<p><img src="http://cdn.lyloou.com/img/20210625112103.png" alt="image-20210625112056585"></p>
<p>也可以自己继承 <code>AbstractHttp</code>，然后调用 <code>HttpUtil#setHttp(AbstractHttp http)</code> 方法来接入自己实现的 http 工具。</p>
<p>所有实现 AbstractHttp 和 Http 的类，需要自己实现 一系列的<code>get</code>、 <code>post</code> 方法（即封装）。运行时通过面向对象中的多态来决定具体的实现者。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>七层模型</title>
    <url>/%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p><a href="http://www.ha97.com/3215.html" target="_blank" rel="noopener">OSI 七层与 TCP/IP 五层网络架构详解</a></p>
<table>
<thead>
<tr>
<th>字母</th>
<th>英文含义</th>
<th>中文含义</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>Application</td>
<td>应用层</td>
</tr>
<tr>
<td>P</td>
<td>Presentation</td>
<td>表示层</td>
</tr>
<tr>
<td>S</td>
<td>Session</td>
<td>会话层</td>
</tr>
<tr>
<td>T</td>
<td>Transport</td>
<td>传输层</td>
</tr>
<tr>
<td>N</td>
<td>Network</td>
<td>网络层</td>
</tr>
<tr>
<td>D</td>
<td>Data Link</td>
<td>数据链路层</td>
</tr>
<tr>
<td>P</td>
<td>Physical</td>
<td>物理层</td>
</tr>
</tbody></table>
<ul>
<li>七层模型简单记忆：<code>PDNTSPA</code></li>
<li>五层模型简单记忆：<code>PDNTA</code></li>
</ul>
<p><a href="http://www.ha97.com/3215.html" target="_blank" rel="noopener">OSI 七层与 TCP/IP 五层网络架构详解</a></p>
<p><strong>OSI 和 TCP/IP 是很基础但又非常重要的网络基础知识，理解得透彻对运维工程师来说非常有帮助。今天偶又复习了一下：</strong></p>
<p><strong>（1）</strong>OSI<strong>七层模型</strong></p>
<p>OSI 中的层 功能 TCP/IP 协议族<br>应用层 文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet<br>表示层 数据格式化，代码转换，数据加密 没有协议<br>会话层 解除或建立与别的接点的联系 没有协议<br>传输层 提供端对端的接口 TCP，UDP<br>网络层 为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP<br>数据链路层 传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP，RARP，MTU<br>物理层 以二进制数据形式在物理媒体上传输数据 ISO2110，IEEE802，IEEE802.2</p>
<p><img src="http://www.ha97.com/wp-content/uploads/image/2010/09/162558wtA.jpg" alt="img"></p>
<p><img src="http://www.ha97.com/wp-content/uploads/image/2010/09/162603uh3.gif" alt="img"></p>
<p><strong>（2）TCP/IP 五层模型的协议</strong></p>
<p>应用层<br>传输层<br>网络层<br>数据链路层<br>物理层</p>
<p>物理层：中继器、集线器、还有我们通常说的双绞线也工作在物理层<br>数据链路层：网桥（现已很少使用）、以太网交换机（二层交换机）、网卡（其实网卡是一半工作在物理层、一半工作在数据链路层）<br>网络层：路由器、三层交换机<br>传输层：四层交换机、也有工作在四层的路由器</p>
<p><img src="http://www.ha97.com/wp-content/uploads/image/2010/09/162606nhq.jpg" alt="img"></p>
<p><strong>二、TCP/UDP 协议</strong></p>
<p>TCP (Transmission Control Protocol)和 UDP(User Datagram Protocol)协议属于传输层协议。其中 TCP 提供 IP 环境下的数据可靠传输，它提供的服务包括数据流传送、可靠性、有效流控、全双工操作和多路复 用。通过面向连接、端到端和可靠的数据包发送。通俗说，它是事先为所发送的数据开辟出连接好的通道，然后再进行数据发送；而 UDP 则不为 IP 提供可靠性、 流控或差错恢复功能。一般来说，TCP 对应的是可靠性要求高的应用，而 UDP 对应的则是可靠性要求低、传输经济的应用。TCP 支持的应用协议主要 有：Telnet、FTP、SMTP 等；UDP 支持的应用层协议主要有：NFS（网络文件系统）、SNMP（简单网络管理协议）、DNS（主域名称系 统）、TFTP（通用文件传输协议）等.<br>TCP/IP 协议与低层的数据链路层和物理层无关，这也是 TCP/IP 的重要特点</p>
<p><strong>三、OSI 的基本概念</strong><br>OSI 是 Open System Interconnect 的缩写，意为开放式系统互联。<br><strong>OSI</strong>七层参考模型的各个层次的划分遵循下列原则：<br>** 1、同一层中的各网络节点都有相同的层次结构，具有同样的功能。<br>2、同一节点内相邻层之间通过接口（可以是逻辑接口）进行通信。<br>3、七层结构中的每一层使用下一层提供的服务，并且向其上层提供服务。<br>4、不同节点的同等层按照协议实现对等层之间的通信。</p>
<p>第一层：物理层（PhysicalLayer)，<br>规定通信设备的机械的、电气的、功能的和过程的特性，用以建立、维护和拆除物理链路连接。具体地讲，机械 特性规定了网络连接时所需接插件的规格尺寸、引脚数量和排列情况等；电气特性规定了在物理连接上传输 bit 流时线路上信号电平的大小、阻抗匹配、传输速率 距离限制等；功能特性是指对各个信号先分配确切的信号含义，即定义了 DTE 和 DCE 之间各个线路的功能；规程特性定义了利用信号线进行 bit 流传输的一组 操作规程，是指在物理连接的建立、维护、交换信息是，DTE 和 DCE 双放在各电路上的动作系列。在这一层，数据的单位称为比特（bit）。属于物理层定义的典型规范代表包括：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45 等。</p>
<p>第二层：数据链路层（DataLinkLayer):<br>在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路，通过差错控制提供数据帧（Frame）在信道上无差错的传输，并进行各电路上的动作系列。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。在这一层，数据的单位称为帧（frame）。数据链路层协议的代表包括：SDLC、HDLC、PPP、STP、帧中继等。</p>
<p>第三层是网络层<br>在 计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。网络层将数据链路层提供的帧组成数据包，包中封装有网络层包头，其中含有逻辑地址信息- -源站点和目的站点地址的网络地址。如 果你在谈论一个 IP 地址，那么你是在处理第 3 层的问题，这是“数据包”问题，而不是第 2 层的“帧”。IP 是第 3 层问题的一部分，此外还有一些路由协议和地 址解析协议（ARP）。有关路由的一切事情都在这第 3 层处理。地址解析和路由是 3 层的重要目的。网络层还可以实现拥塞控制、网际互连等功能。在这一层，数据的单位称为数据包（packet）。网络层协议的代表包括：IP、IPX、RIP、OSPF 等。</p>
<p>第 四层是处理信息的传输层<br>第 4 层的数据单元也称作数据包（packets）。但是，当你谈论 TCP 等具体的协议时又有特殊的叫法，TCP 的数据单元称为段 （segments）而 UDP 协议的数据单元称为“数据报（datagrams）”。这个层负责获取全部信息，因此，它必须跟踪数据单元碎片、乱序到达的 数据包和其它在传输过程中可能发生的危险。第 4 层为上层提供端到端（最终用户到最终用户）的透明的、可靠的数据传输服务。所为透明的传输是指在通信过程中 传输层对上层屏蔽了通信传输系统的具体细节。传输层协议的代表包括：TCP、UDP、SPX 等。</p>
<p>第五层是会话层<br>这一层也可以称为会晤层或对话层，在会话层及以上的高层次中，数据传送的单位不再另外命名，而是统称为报文。会话层不参与具体的传输，它提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制。如服务器验证用户登录便是由会话层完成的。</p>
<p>第六层是表示层<br>这一层主要解决拥护信息的语法表示问题。它将欲交换的数据从适合于某一用户的抽象语法，转换为适合于 OSI 系统内部使用的传送语法。即提供格式化的表示和转换数据服务。数据的压缩和解压缩， 加密和解密等工作都由表示层负责。</p>
<p>第七层应用层<br>应用层为操作系统或网络应用程序提供访问网络服务的接口。应用层协议的代表包括：Telnet、FTP、HTTP、SNMP 等。</p>
<p><strong>除了层的数量之外，开放式系统互联（OSI）模型与TCP/IP协议有什么区别？</strong></p>
<p>开放式系统互联模型是一个参考标准，解释协议相互之间应该如何相互作用。TCP/IP 协议是美国国防部发明的，是让互联网成为了目前这个样子的标准之一。开放式系统互联模型中没有清楚地描绘 TCP/IP 协议，但是在解释 TCP/IP 协议时很容易想到开放式系统互联模型。两者的主要区别如下：</p>
<p>TCP/IP 协议中的应用层处理开放式系统互联模型中的第五层、第六层和第七层的功能。</p>
<p>TCP/IP 协议中的传输层并不能总是保证在传输层可靠地传输数据包，而开放式系统互联模型可以做到。TCP/IP 协议还提供一项名为 UDP（用户数据报协议）的选择。UDP 不能保证可靠的数据包传输。</p>
<p><strong>TCP/UDP协议</strong></p>
<p>TCP(Transmission Control Protocol)和 UDP(User Datagram Protocol)协议属于传输层协议。其中 TCP 提供 IP 环境下的数据可靠传输，它提供的服务包括数据流传送、可靠性、有效流控、全双工操作和多路复用。通过面向连接、端到端和可靠的数据包发送。通俗说，它是事先为所发送的数据开辟出连接好的通道，然后再进行数据发送；而 UDP 则不为 IP 提供可靠性、流控或差错恢复功能。一般来说，TCP 对应的是可靠性要求高的应用，而 UDP 对应的则是可靠性要求低、传输经济的应用。</p>
<p>TCP 支持的应用协议主要有：Telnet、FTP、SMTP 等；UDP 支持的应用层协议主要有：NFS（网络文件系统）、SNMP（简单网络管理协议）、DNS（主域名称系统）、TFTP（通用文件传输协议）等。</p>
<p>TCP/IP 协议与低层的数据链路层和物理层无关，这也是 TCP/IP 的重要特点。</p>
<p>OSI 是 Open System Interconnect 的缩写，意为开放式系统互联。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Sed</title>
    <url>/shell/awk_sed/sed/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://stackoverflow.com/questions/27721209/how-do-i-replace-all-dot-in-string-to-underscore" target="_blank" rel="noopener">how-do-i-replace-all-dot-in-string-to-underscore</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> a.b.c.d | sed <span class="hljs-string">'s/\./_/g'</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/mylxsw/growing-up/blob/master/doc/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9ASED.md" target="_blank" rel="noopener">growing-up/三十分钟学会SED.md at master · mylxsw/growing-up</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title>Awk</title>
    <url>/shell/awk_sed/awk/</url>
    <content><![CDATA[<p>$(whereis go | awk -F: ‘{print $2}’)</p>
<ul>
<li><p><a href="http://mingxinglai.com/cn/2012/12/Why-I-like-AWK/" target="_blank" rel="noopener">为什么我特别喜欢Awk | 赖明星</a></p>
</li>
<li><p><a href="https://gregable.com/2010/09/why-you-should-know-just-little-awk.html" target="_blank" rel="noopener">Why you should learn just a little Awk - An Awk tutorial by Example - Gregable</a></p>
</li>
<li><p><a href="https://github.com/mylxsw/growing-up/blob/master/doc/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9AAWK.md" target="_blank" rel="noopener">growing-up/三十分钟学会AWK.md at master · mylxsw/growing-up</a></p>
</li>
</ul>
<ul>
<li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="noopener">https://github.com/wuzhouhui/awk</a></li>
<li><a href="https://github.com/yeyouqun/GAWK-MT" target="_blank" rel="noopener">https://github.com/yeyouqun/GAWK-MT</a></li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
        <tag>awk</tag>
      </tags>
  </entry>
</search>
